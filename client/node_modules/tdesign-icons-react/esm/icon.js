import { __rest } from "tslib";
import classNames from 'classnames';
import { createElement, forwardRef } from 'react';
import useSizeProps from './iconfont/use-size-props';
/**
 * use react createElement to render an IconElement with other props
 */

function render(node, id, rootProps) {
  return /*#__PURE__*/createElement(node.tag, Object.assign(Object.assign({
    key: id
  }, node.attrs), rootProps), (node.children || []).map(function (child, index) {
    return render(child, "".concat(id, "-").concat(node.tag, "-").concat(index));
  }));
}

export var IconBase = /*#__PURE__*/forwardRef(function (props, ref) {
  var icon = props.icon,
      id = props.id,
      className = props.className,
      _props$size = props.size,
      size = _props$size === void 0 ? 'middle' : _props$size,
      style = props.style,
      restProps = __rest(props, ["icon", "id", "className", "size", "style"]);

  var _useSizeProps = useSizeProps(size),
      sizeClassName = _useSizeProps.className,
      sizeStyle = _useSizeProps.style;

  var cls = classNames('t-icon', "t-icon-".concat(id), className, sizeClassName);
  return render(icon, "".concat(id), Object.assign({
    ref: ref,
    className: cls,
    style: Object.assign(Object.assign({}, style), sizeStyle)
  }, restProps));
});
IconBase.displayName = 'TIconBase';
//# sourceMappingURL=icon.js.map
