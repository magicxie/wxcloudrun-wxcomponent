{"version":3,"sources":["icon.jsx","icon.tsx"],"names":["__rest","classNames","createElement","forwardRef","useSizeProps","render","node","id","rootProps","tag","Object","assign","key","attrs","children","map","child","index","IconBase","props","ref","icon","className","size","style","restProps","sizeClassName","sizeStyle","cls","displayName"],"mappings":"AAAA,SAASA,MAAT,QAAuB,OAAvB;ACAA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SACEC,aADF,EAEEC,UAFF,QASO,OATP;AAUA,OAAOC,YAAP,MAAyB,2BAAzB;AAoBA;AD1BA;AACA;;AC4BA,SAASC,MAAT,CAAgBC,IAAhB,EAAmCC,EAAnC,EAA+CC,SAA/C,EAAiF;AAC/E,sBAAON,aAAa,CAClBI,IAAI,CAACG,GADa,EACVC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,CAAA;AAENC,IAAAA,GAAG,EAAEL;AAFC,GAAA,EAGHD,IAAI,CAACO,KAHF,CAAA,EAIHL,SAJG,CADU,EAOlB,CAACF,IAAI,CAACQ,QAAL,IAAiB,EAAlB,EAAsBC,GAAtB,CAA0B,UAACC,KAAD,EAAQC,KAAR;AAAA,WAAkBZ,MAAM,CAACW,KAAD,YAAWT,EAAX,cAAiBD,IAAI,CAACG,GAAtB,cAA6BQ,KAA7B,EAAxB;AAAA,GAA1B,CAPkB,CAApB;AASD;;AAKD,OAAO,IAAMC,QAAQ,gBAAGf,UAAU,CAAC,UAACgB,KAAD,EAA4BC,GAA5B,EAAoD;AACrF,MACEC,IADF,GAEIF,KAFJ,CACEE,IADF;AAAA,MACQd,EADR,GAEIY,KAFJ,CACQZ,EADR;AAAA,MACYe,SADZ,GAEIH,KAFJ,CACYG,SADZ;AAAA,oBAEIH,KAFJ,CACuBI,IADvB;AAAA,MACuBA,IADvB,4BAC8B,QAD9B;AAAA,MACwCC,KADxC,GAEIL,KAFJ,CACwCK,KADxC;AAAA,MACkDC,SADlD,GAC2DzB,MAAA,CACvDmB,KADuD,EADrD,CAAA,MAAA,EAAA,IAAA,EAAA,WAAA,EAAA,MAAA,EAAA,OAAA,CACqD,CAD3D;;AAGA,sBAAuDf,YAAY,CAACmB,IAAD,CAAnE;AAAA,MAAmBG,aAAnB,iBAAQJ,SAAR;AAAA,MAAyCK,SAAzC,iBAAkCH,KAAlC;;AACA,MAAMI,GAAG,GAAG3B,UAAU,CAAC,QAAD,mBAAqBM,EAArB,GAA2Be,SAA3B,EAAsCI,aAAtC,CAAtB;AAEA,SAAOrB,MAAM,CAACgB,IAAD,YAAUd,EAAV,GAAcG,MAAA,CAAAC,MAAA,CAAA;AACzBS,IAAAA,GAAG,EAAHA,GADyB;AAEzBE,IAAAA,SAAS,EAAEM,GAFc;AAGzBJ,IAAAA,KAAK,EAAAd,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,CAAA,EAAA,EAAOa,KAAP,CAAA,EAAiBG,SAAjB;AAHoB,GAAA,EAItBF,SAJsB,CAAd,CAAb;AAMD,CAbiC,CAA3B;AAePP,QAAQ,CAACW,WAAT,GAAuB,WAAvB","file":"icon.js","sourcesContent":["import { __rest } from \"tslib\";\nimport classNames from 'classnames';\nimport { createElement, forwardRef, } from 'react';\nimport useSizeProps from './iconfont/use-size-props';\n/**\n * use react createElement to render an IconElement with other props\n */\nfunction render(node, id, rootProps) {\n    return createElement(node.tag, Object.assign(Object.assign({ key: id }, node.attrs), rootProps), (node.children || []).map((child, index) => render(child, `${id}-${node.tag}-${index}`)));\n}\nexport const IconBase = forwardRef((props, ref) => {\n    const { icon, id, className, size = 'middle', style } = props, restProps = __rest(props, [\"icon\", \"id\", \"className\", \"size\", \"style\"]);\n    const { className: sizeClassName, style: sizeStyle } = useSizeProps(size);\n    const cls = classNames('t-icon', `t-icon-${id}`, className, sizeClassName);\n    return render(icon, `${id}`, Object.assign({ ref, className: cls, style: Object.assign(Object.assign({}, style), sizeStyle) }, restProps));\n});\nIconBase.displayName = 'TIconBase';\n","import classNames from 'classnames';\nimport {\n  createElement,\n  forwardRef,\n  ForwardRefExoticComponent,\n  ReactElement,\n  Ref,\n  RefAttributes,\n  SVGAttributes,\n  CSSProperties,\n} from 'react';\nimport useSizeProps from './iconfont/use-size-props';\n\nexport interface IconProps extends SVGAttributes<SVGSVGElement> {\n  style?: CSSProperties;\n  className?: string;\n  size?: 'small' | 'middle' | 'large' | string | number;\n}\nexport interface Attrs {\n  [key: string]: any;\n}\nexport interface IconElement {\n  tag: string;\n  attrs: Attrs;\n  children?: IconElement[];\n}\nexport interface IconFulfilledProps extends IconProps {\n  icon: IconElement;\n  id: string;\n}\n\n/**\n * use react createElement to render an IconElement with other props\n */\nfunction render(node: IconElement, id: string, rootProps?: { [key: string]: any }): ReactElement {\n  return createElement(\n    node.tag,\n    {\n      key: id,\n      ...node.attrs,\n      ...rootProps,\n    },\n    (node.children || []).map((child, index) => render(child, `${id}-${node.tag}-${index}`)),\n  );\n}\n\n// https://github.com/DefinitelyTyped/DefinitelyTyped/issues/34757\nexport type CompoundedComponent = ForwardRefExoticComponent<IconFulfilledProps & RefAttributes<SVGElement>>;\n\nexport const IconBase = forwardRef((props: IconFulfilledProps, ref: Ref<SVGElement>) => {\n  const {\n    icon, id, className, size = 'middle', style, ...restProps\n  } = props;\n  const { className: sizeClassName, style: sizeStyle } = useSizeProps(size);\n  const cls = classNames('t-icon', `t-icon-${id}`, className, sizeClassName);\n\n  return render(icon, `${id}`, {\n    ref,\n    className: cls,\n    style: { ...style, ...sizeStyle },\n    ...restProps,\n  });\n}) as CompoundedComponent;\n\nIconBase.displayName = 'TIconBase';\n"]}