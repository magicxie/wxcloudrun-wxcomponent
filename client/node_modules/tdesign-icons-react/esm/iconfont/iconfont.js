import { __rest } from "tslib";
import { forwardRef, useEffect, createElement, useMemo } from 'react';
import classNames from 'classnames';
import useConfig from '../util/use-config';
import useSizeProps from './use-size-props';
import { checkLinkAndLoad } from '../util/check-url-and-load';
import '../style/index.css';
var CDN_ICONFONT_URL = 'https://tdesign.gtimg.com/icon/0.0.3/fonts/index.css';
/**
 * 图标组件
 * iconfont 版本
 */

export var IconFont = /*#__PURE__*/forwardRef(function (props, ref) {
  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var name = props.name,
      _props$size = props.size,
      size = _props$size === void 0 ? 'middle' : _props$size,
      _props$tag = props.tag,
      tag = _props$tag === void 0 ? 'i' : _props$tag,
      customClassName = props.className,
      _props$url = props.url,
      url = _props$url === void 0 ? [] : _props$url,
      _props$loadDefaultIco = props.loadDefaultIcons,
      loadDefaultIcons = _props$loadDefaultIco === void 0 ? true : _props$loadDefaultIco,
      customStyle = props.style,
      htmlProps = __rest(props, ["name", "size", "tag", "className", "url", "loadDefaultIcons", "style"]);

  var _useSizeProps = useSizeProps(size),
      sizeClassName = _useSizeProps.className,
      sizeStyle = _useSizeProps.style;

  var className = useMemo(function () {
    return (// eslint-disable-next-line implicit-arrow-linebreak
      classNames("".concat(classPrefix, "-icon"), "".concat(classPrefix, "-icon-").concat(name), sizeClassName, customClassName)
    );
  }, [classPrefix, customClassName, name, sizeClassName]); // 插入 iconfont 样式

  useEffect(function () {
    // 兼容一下服务端渲染
    if (typeof document === 'undefined') {
      return;
    } // 不加载图标


    if (!loadDefaultIcons) {
      return;
    }

    checkLinkAndLoad(CDN_ICONFONT_URL, "".concat(classPrefix, "-iconfont-stylesheet--unique-class"));
  }, [classPrefix, loadDefaultIcons]); // 加载 url

  useEffect(function () {
    var urls = Array.isArray(url) ? url : [url];
    urls.forEach(function (url) {
      checkLinkAndLoad(url, "".concat(classPrefix, "-iconfont-stylesheet--unique-class"));
    });
  }, [classPrefix, url]);
  return /*#__PURE__*/createElement(tag, Object.assign({
    ref: ref,
    style: Object.assign(Object.assign({}, customStyle), sizeStyle),
    className: className
  }, htmlProps));
});
IconFont.displayName = 'Icon';
//# sourceMappingURL=iconfont.js.map
