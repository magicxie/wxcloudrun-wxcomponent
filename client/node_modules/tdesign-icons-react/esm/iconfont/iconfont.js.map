{"version":3,"sources":["iconfont/iconfont.jsx","iconfont/iconfont.tsx"],"names":["__rest","forwardRef","useEffect","createElement","useMemo","classNames","useConfig","useSizeProps","checkLinkAndLoad","CDN_ICONFONT_URL","IconFont","props","ref","classPrefix","name","size","tag","customClassName","className","url","loadDefaultIcons","customStyle","style","htmlProps","sizeClassName","sizeStyle","document","urls","Array","isArray","forEach","Object","assign","displayName"],"mappings":"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","file":"iconfont.js","sourcesContent":["import { __rest } from \"tslib\";\nimport { forwardRef, useEffect, createElement, useMemo, } from 'react';\nimport classNames from 'classnames';\nimport useConfig from '../util/use-config';\nimport useSizeProps from './use-size-props';\nimport { checkLinkAndLoad } from '../util/check-url-and-load';\nimport '../style/index.css';\nconst CDN_ICONFONT_URL = 'https://tdesign.gtimg.com/icon/0.0.3/fonts/index.css';\n/**\n * 图标组件\n * iconfont 版本\n */\nexport const IconFont = forwardRef((props, ref) => {\n    const { classPrefix } = useConfig();\n    const { name, size = 'middle', tag = 'i', className: customClassName, url = [], loadDefaultIcons = true, style: customStyle } = props, htmlProps = __rest(props, [\"name\", \"size\", \"tag\", \"className\", \"url\", \"loadDefaultIcons\", \"style\"]);\n    const { className: sizeClassName, style: sizeStyle } = useSizeProps(size);\n    const className = useMemo(() => \n    // eslint-disable-next-line implicit-arrow-linebreak\n    classNames(`${classPrefix}-icon`, `${classPrefix}-icon-${name}`, sizeClassName, customClassName), [classPrefix, customClassName, name, sizeClassName]);\n    // 插入 iconfont 样式\n    useEffect(() => {\n        // 兼容一下服务端渲染\n        if (typeof document === 'undefined') {\n            return;\n        }\n        // 不加载图标\n        if (!loadDefaultIcons) {\n            return;\n        }\n        checkLinkAndLoad(CDN_ICONFONT_URL, `${classPrefix}-iconfont-stylesheet--unique-class`);\n    }, [classPrefix, loadDefaultIcons]);\n    // 加载 url\n    useEffect(() => {\n        const urls = Array.isArray(url) ? url : [url];\n        urls.forEach((url) => {\n            checkLinkAndLoad(url, `${classPrefix}-iconfont-stylesheet--unique-class`);\n        });\n    }, [classPrefix, url]);\n    return createElement(tag, Object.assign({ ref, style: Object.assign(Object.assign({}, customStyle), sizeStyle), className }, htmlProps));\n});\nIconFont.displayName = 'Icon';\n","import {\n  forwardRef, Ref, HTMLAttributes, useEffect, createElement, CSSProperties, useMemo,\n} from 'react';\nimport classNames from 'classnames';\nimport useConfig from '../util/use-config';\nimport useSizeProps from './use-size-props';\nimport { checkLinkAndLoad } from '../util/check-url-and-load';\nimport '../style/index.css';\n\nexport interface IconFontProps extends HTMLAttributes<HTMLElement> {\n  /**\n   * 图标类型\n   */\n  name?: string;\n\n  /**\n   * 尺寸\n   * @default 'middle'\n   */\n  size?: 'small' | 'middle' | 'large' | string | number;\n\n  /**\n   * 渲染容器元素\n   * @default 'i'\n   */\n  tag?: 'i' | 'span' | 'div';\n\n  /**\n   * 样式\n   */\n  style?: CSSProperties;\n\n  /**\n   * 类名\n   */\n  className?: string;\n\n  /**\n   * 图标地址\n   */\n  url?: string | string[];\n\n  /**\n   * @default true\n   */\n  loadDefaultIcons?: boolean;\n}\n\nconst CDN_ICONFONT_URL = 'https://tdesign.gtimg.com/icon/0.0.3/fonts/index.css';\n\n/**\n * 图标组件\n * iconfont 版本\n */\nexport const IconFont = forwardRef((props: IconFontProps, ref: Ref<HTMLElement>) => {\n  const { classPrefix } = useConfig();\n  const {\n    name,\n    size = 'middle',\n    tag = 'i',\n    className: customClassName,\n    url = [],\n    loadDefaultIcons = true,\n    style: customStyle,\n    ...htmlProps\n  } = props;\n  const { className: sizeClassName, style: sizeStyle } = useSizeProps(size);\n  const className = useMemo(\n    () =>\n      // eslint-disable-next-line implicit-arrow-linebreak\n      classNames(`${classPrefix}-icon`, `${classPrefix}-icon-${name}`, sizeClassName, customClassName),\n    [classPrefix, customClassName, name, sizeClassName],\n  );\n\n  // 插入 iconfont 样式\n  useEffect(() => {\n    // 兼容一下服务端渲染\n    if (typeof document === 'undefined') {\n      return;\n    }\n\n    // 不加载图标\n    if (!loadDefaultIcons) {\n      return;\n    }\n\n    checkLinkAndLoad(CDN_ICONFONT_URL, `${classPrefix}-iconfont-stylesheet--unique-class`);\n  }, [classPrefix, loadDefaultIcons]);\n\n  // 加载 url\n  useEffect(() => {\n    const urls = Array.isArray(url) ? url : [url];\n    urls.forEach((url) => {\n      checkLinkAndLoad(url, `${classPrefix}-iconfont-stylesheet--unique-class`);\n    });\n  }, [classPrefix, url]);\n\n  return createElement(tag, {\n    ref,\n    style: { ...customStyle, ...sizeStyle },\n    className,\n    ...htmlProps,\n  });\n});\n\nIconFont.displayName = 'Icon';\n"]}