function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { __rest } from "tslib"; // eslint-disable-next-line no-use-before-define

import * as React from 'react';
import { forwardRef, useEffect, useMemo } from 'react';
import classNames from 'classnames';
import useConfig from '../util/use-config';
import useSizeProps from '../iconfont/use-size-props';
import { checkScriptAndLoad } from '../util/check-url-and-load';
import '../style/index.css';
var CDN_SVGSPRITE_URL = 'https://tdesign.gtimg.com/icon/0.0.3/fonts/index.js';
/**
 * 图标组件
 * svg 版本
 */

export var Icon = /*#__PURE__*/forwardRef(function (props, ref) {
  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var name = props.name,
      size = props.size,
      _props$url = props.url,
      url = _props$url === void 0 ? [] : _props$url,
      _props$loadDefaultIco = props.loadDefaultIcons,
      loadDefaultIcons = _props$loadDefaultIco === void 0 ? true : _props$loadDefaultIco,
      customClassName = props.className,
      customStyle = props.style,
      restProps = __rest(props, ["name", "size", "url", "loadDefaultIcons", "className", "style"]);

  var _useSizeProps = useSizeProps(size || 'middle'),
      sizeClassName = _useSizeProps.className,
      sizeStyle = _useSizeProps.style;

  var className = useMemo(function () {
    return (// eslint-disable-next-line implicit-arrow-linebreak
      classNames("".concat(classPrefix, "-icon"), "".concat(classPrefix, "-icon-").concat(name), sizeClassName, customClassName)
    );
  }, [classPrefix, customClassName, name, sizeClassName]); // 插入 iconfont 样式

  useEffect(function () {
    // 兼容一下服务端渲染
    if (typeof document === 'undefined') {
      return;
    } // 不加载图标


    if (!loadDefaultIcons) {
      return;
    }

    checkScriptAndLoad(CDN_SVGSPRITE_URL, "".concat(classPrefix, "-svg-js-stylesheet--unique-class"));
  }, [classPrefix, loadDefaultIcons]); // 加载 url

  useEffect(function () {
    var urls = Array.isArray(url) ? url : [url];
    urls.forEach(function (url) {
      checkScriptAndLoad(url, "".concat(classPrefix, "-svg-js-stylesheet--unique-class"));
    });
  }, [classPrefix, url]);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    className: className,
    style: Object.assign(Object.assign({}, customStyle), sizeStyle)
  }, restProps), /*#__PURE__*/React.createElement("use", {
    xlinkHref: "#t-icon-".concat(name)
  }));
});
Icon.displayName = 'Icon';
//# sourceMappingURL=svg-sprite.js.map
