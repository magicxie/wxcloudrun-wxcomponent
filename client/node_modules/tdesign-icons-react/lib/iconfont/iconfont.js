"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IconFont = void 0;

var tslib_1 = require("tslib");

var react_1 = require("react");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var use_config_1 = tslib_1.__importDefault(require("../util/use-config"));

var use_size_props_1 = tslib_1.__importDefault(require("./use-size-props"));

var check_url_and_load_1 = require("../util/check-url-and-load");

require("../style/index.css");

var CDN_ICONFONT_URL = 'https://tdesign.gtimg.com/icon/0.0.3/fonts/index.css';
/**
 * 图标组件
 * iconfont 版本
 */

exports.IconFont = react_1.forwardRef(function (props, ref) {
  var classPrefix = use_config_1["default"]().classPrefix;

  var name = props.name,
      _a = props.size,
      size = _a === void 0 ? 'middle' : _a,
      _b = props.tag,
      tag = _b === void 0 ? 'i' : _b,
      customClassName = props.className,
      _c = props.url,
      url = _c === void 0 ? [] : _c,
      _d = props.loadDefaultIcons,
      loadDefaultIcons = _d === void 0 ? true : _d,
      customStyle = props.style,
      htmlProps = tslib_1.__rest(props, ["name", "size", "tag", "className", "url", "loadDefaultIcons", "style"]);

  var _e = use_size_props_1["default"](size),
      sizeClassName = _e.className,
      sizeStyle = _e.style;

  var className = react_1.useMemo(function () {
    // eslint-disable-next-line implicit-arrow-linebreak
    return classnames_1["default"](classPrefix + "-icon", classPrefix + "-icon-" + name, sizeClassName, customClassName);
  }, [classPrefix, customClassName, name, sizeClassName]); // 插入 iconfont 样式

  react_1.useEffect(function () {
    // 兼容一下服务端渲染
    if (typeof document === 'undefined') {
      return;
    } // 不加载图标


    if (!loadDefaultIcons) {
      return;
    }

    check_url_and_load_1.checkLinkAndLoad(CDN_ICONFONT_URL, classPrefix + "-iconfont-stylesheet--unique-class");
  }, [classPrefix, loadDefaultIcons]); // 加载 url

  react_1.useEffect(function () {
    var urls = Array.isArray(url) ? url : [url];
    urls.forEach(function (url) {
      check_url_and_load_1.checkLinkAndLoad(url, classPrefix + "-iconfont-stylesheet--unique-class");
    });
  }, [classPrefix, url]);
  return react_1.createElement(tag, tslib_1.__assign({
    ref: ref,
    style: tslib_1.__assign(tslib_1.__assign({}, customStyle), sizeStyle),
    className: className
  }, htmlProps));
});
exports.IconFont.displayName = 'Icon';
//# sourceMappingURL=iconfont.js.map
