{"version":3,"sources":["iconfont/iconfont.jsx","iconfont/iconfont.tsx"],"names":["Object","defineProperty","exports","value","IconFont","tslib_1","require","react_1","classnames_1","__importDefault","use_config_1","use_size_props_1","check_url_and_load_1","CDN_ICONFONT_URL","forwardRef","props","ref","classPrefix","name","_a","size","_b","tag","customClassName","className","_c","url","_d","loadDefaultIcons","customStyle","style","htmlProps","__rest","_e","sizeClassName","sizeStyle","useMemo","useEffect","document","checkLinkAndLoad","urls","Array","isArray","forEach","createElement","__assign","displayName"],"mappings":"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","file":"iconfont.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IconFont = void 0;\nvar tslib_1 = require(\"tslib\");\nvar react_1 = require(\"react\");\nvar classnames_1 = tslib_1.__importDefault(require(\"classnames\"));\nvar use_config_1 = tslib_1.__importDefault(require(\"../util/use-config\"));\nvar use_size_props_1 = tslib_1.__importDefault(require(\"./use-size-props\"));\nvar check_url_and_load_1 = require(\"../util/check-url-and-load\");\nrequire(\"../style/index.css\");\nvar CDN_ICONFONT_URL = 'https://tdesign.gtimg.com/icon/0.0.3/fonts/index.css';\n/**\n * 图标组件\n * iconfont 版本\n */\nexports.IconFont = react_1.forwardRef(function (props, ref) {\n    var classPrefix = use_config_1.default().classPrefix;\n    var name = props.name, _a = props.size, size = _a === void 0 ? 'middle' : _a, _b = props.tag, tag = _b === void 0 ? 'i' : _b, customClassName = props.className, _c = props.url, url = _c === void 0 ? [] : _c, _d = props.loadDefaultIcons, loadDefaultIcons = _d === void 0 ? true : _d, customStyle = props.style, htmlProps = tslib_1.__rest(props, [\"name\", \"size\", \"tag\", \"className\", \"url\", \"loadDefaultIcons\", \"style\"]);\n    var _e = use_size_props_1.default(size), sizeClassName = _e.className, sizeStyle = _e.style;\n    var className = react_1.useMemo(function () {\n        // eslint-disable-next-line implicit-arrow-linebreak\n        return classnames_1.default(classPrefix + \"-icon\", classPrefix + \"-icon-\" + name, sizeClassName, customClassName);\n    }, [classPrefix, customClassName, name, sizeClassName]);\n    // 插入 iconfont 样式\n    react_1.useEffect(function () {\n        // 兼容一下服务端渲染\n        if (typeof document === 'undefined') {\n            return;\n        }\n        // 不加载图标\n        if (!loadDefaultIcons) {\n            return;\n        }\n        check_url_and_load_1.checkLinkAndLoad(CDN_ICONFONT_URL, classPrefix + \"-iconfont-stylesheet--unique-class\");\n    }, [classPrefix, loadDefaultIcons]);\n    // 加载 url\n    react_1.useEffect(function () {\n        var urls = Array.isArray(url) ? url : [url];\n        urls.forEach(function (url) {\n            check_url_and_load_1.checkLinkAndLoad(url, classPrefix + \"-iconfont-stylesheet--unique-class\");\n        });\n    }, [classPrefix, url]);\n    return react_1.createElement(tag, tslib_1.__assign({ ref: ref, style: tslib_1.__assign(tslib_1.__assign({}, customStyle), sizeStyle), className: className }, htmlProps));\n});\nexports.IconFont.displayName = 'Icon';\n","import {\n  forwardRef, Ref, HTMLAttributes, useEffect, createElement, CSSProperties, useMemo,\n} from 'react';\nimport classNames from 'classnames';\nimport useConfig from '../util/use-config';\nimport useSizeProps from './use-size-props';\nimport { checkLinkAndLoad } from '../util/check-url-and-load';\nimport '../style/index.css';\n\nexport interface IconFontProps extends HTMLAttributes<HTMLElement> {\n  /**\n   * 图标类型\n   */\n  name?: string;\n\n  /**\n   * 尺寸\n   * @default 'middle'\n   */\n  size?: 'small' | 'middle' | 'large' | string | number;\n\n  /**\n   * 渲染容器元素\n   * @default 'i'\n   */\n  tag?: 'i' | 'span' | 'div';\n\n  /**\n   * 样式\n   */\n  style?: CSSProperties;\n\n  /**\n   * 类名\n   */\n  className?: string;\n\n  /**\n   * 图标地址\n   */\n  url?: string | string[];\n\n  /**\n   * @default true\n   */\n  loadDefaultIcons?: boolean;\n}\n\nconst CDN_ICONFONT_URL = 'https://tdesign.gtimg.com/icon/0.0.3/fonts/index.css';\n\n/**\n * 图标组件\n * iconfont 版本\n */\nexport const IconFont = forwardRef((props: IconFontProps, ref: Ref<HTMLElement>) => {\n  const { classPrefix } = useConfig();\n  const {\n    name,\n    size = 'middle',\n    tag = 'i',\n    className: customClassName,\n    url = [],\n    loadDefaultIcons = true,\n    style: customStyle,\n    ...htmlProps\n  } = props;\n  const { className: sizeClassName, style: sizeStyle } = useSizeProps(size);\n  const className = useMemo(\n    () =>\n      // eslint-disable-next-line implicit-arrow-linebreak\n      classNames(`${classPrefix}-icon`, `${classPrefix}-icon-${name}`, sizeClassName, customClassName),\n    [classPrefix, customClassName, name, sizeClassName],\n  );\n\n  // 插入 iconfont 样式\n  useEffect(() => {\n    // 兼容一下服务端渲染\n    if (typeof document === 'undefined') {\n      return;\n    }\n\n    // 不加载图标\n    if (!loadDefaultIcons) {\n      return;\n    }\n\n    checkLinkAndLoad(CDN_ICONFONT_URL, `${classPrefix}-iconfont-stylesheet--unique-class`);\n  }, [classPrefix, loadDefaultIcons]);\n\n  // 加载 url\n  useEffect(() => {\n    const urls = Array.isArray(url) ? url : [url];\n    urls.forEach((url) => {\n      checkLinkAndLoad(url, `${classPrefix}-iconfont-stylesheet--unique-class`);\n    });\n  }, [classPrefix, url]);\n\n  return createElement(tag, {\n    ref,\n    style: { ...customStyle, ...sizeStyle },\n    className,\n    ...htmlProps,\n  });\n});\n\nIconFont.displayName = 'Icon';\n"]}