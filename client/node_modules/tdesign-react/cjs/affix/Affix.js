/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../_chunks/dep-449daca3.js');
var slicedToArray = require('../_chunks/dep-fa36e79f.js');
var React = require('react');
var isFunction = require('../_chunks/dep-1bafebb1.js');
var _util_dom = require('../_util/dom.js');
var _util_useConfig = require('../_util/useConfig.js');
require('../_chunks/dep-045b87c1.js');
require('../_chunks/dep-0e3f1753.js');
require('../_chunks/dep-a7666a95.js');
require('../_chunks/dep-735b841a.js');
require('raf');
require('../_chunks/dep-0705da20.js');
require('../_chunks/dep-9125a75e.js');
require('../_chunks/dep-48870ae5.js');
require('../_util/easing.js');
require('../config-provider/ConfigContext.js');
require('../locale/zh_CN.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { defineProperty._defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var Affix = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var children = props.children,
      _props$container = props.container,
      container = _props$container === void 0 ? function () {
    return window;
  } : _props$container,
      offsetBottom = props.offsetBottom,
      offsetTop = props.offsetTop,
      onFixedChange = props.onFixedChange;

  var _useState = React.useState(false),
      _useState2 = slicedToArray._slicedToArray(_useState, 2),
      affixed = _useState2[0],
      setAffixed = _useState2[1];

  var _useConfig = _util_useConfig["default"](),
      classPrefix = _useConfig.classPrefix;

  var affixRef = React.useRef();
  var affixWrapRef = React.useRef();
  var stateRef = React.useRef({
    ticking: false,
    oldWidth: 0,
    oldHeight: 0,
    containerHeight: 0
  });
  var handleScroll = React.useCallback(function () {
    var _stateRef$current = stateRef.current,
        ticking = _stateRef$current.ticking,
        scrollContainer = _stateRef$current.scrollContainer,
        containerHeight = _stateRef$current.containerHeight,
        oldWidth2 = _stateRef$current.oldWidth;

    if (!ticking) {
      window.requestAnimationFrame(function () {
        var affixEl = affixRef.current;

        var _affixWrapRef$current = affixWrapRef.current.getBoundingClientRect(),
            top = _affixWrapRef$current.top;

        var containerTop = 0;

        if (scrollContainer instanceof HTMLElement) {
          containerTop = scrollContainer.getBoundingClientRect().top;
        }

        var fixedTop;
        var calcTop = top - containerTop;
        var calcBottom = containerTop + containerHeight - offsetBottom;

        if (offsetTop !== void 0 && calcTop <= offsetTop) {
          fixedTop = containerTop + offsetTop;
        } else if (offsetBottom !== void 0 && top >= calcBottom) {
          fixedTop = calcBottom;
        } else {
          fixedTop = false;
        }

        if (fixedTop !== false) {
          affixEl.className = "".concat(classPrefix, "-affix");
          affixEl.style.top = "".concat(fixedTop, "px");
          affixEl.style.width = "".concat(oldWidth2, "px");
        } else {
          affixEl.removeAttribute("class");
          affixEl.removeAttribute("style");
        }

        setAffixed(!!fixedTop);
        if (isFunction.isFunction_1(onFixedChange)) onFixedChange(!!fixedTop, {
          top: fixedTop
        });
        stateRef.current.ticking = false;
      });
    }

    stateRef.current.ticking = true;
  }, [classPrefix, offsetBottom, offsetTop, onFixedChange]);
  var calcInitValue = React.useCallback(function () {
    var scrollContainer = _util_dom.getScrollContainer(container);
    if (!scrollContainer) return;
    var containerHeight = 0;

    if (scrollContainer instanceof Window) {
      containerHeight = scrollContainer.innerHeight;
    } else {
      containerHeight = scrollContainer.clientHeight;
    }

    var _ref = affixRef.current || {},
        clientWidth = _ref.clientWidth,
        clientHeight = _ref.clientHeight;

    stateRef.current = _objectSpread(_objectSpread({}, stateRef.current), {}, {
      scrollContainer: scrollContainer,
      oldWidth: clientWidth,
      oldHeight: clientHeight,
      containerHeight: containerHeight - clientHeight
    });
    handleScroll();
  }, [container, handleScroll]);
  React.useImperativeHandle(ref, function () {
    return {
      calcInitValue: calcInitValue,
      handleScroll: handleScroll
    };
  });
  React.useEffect(function () {
    calcInitValue();

    if (stateRef.current.scrollContainer) {
      stateRef.current.scrollContainer.addEventListener("scroll", handleScroll);
      window.addEventListener("resize", handleScroll);
      return function () {
        stateRef.current.scrollContainer.removeEventListener("scroll", handleScroll);
        window.removeEventListener("resize", handleScroll);
      };
    }
  }, [calcInitValue, handleScroll]);
  var _stateRef$current2 = stateRef.current,
      oldWidth = _stateRef$current2.oldWidth,
      oldHeight = _stateRef$current2.oldHeight;
  return /* @__PURE__ */React__default["default"].createElement("div", {
    ref: affixWrapRef
  }, affixed ? /* @__PURE__ */React__default["default"].createElement("div", {
    style: {
      width: "".concat(oldWidth, "px"),
      height: "".concat(oldHeight, "px")
    }
  }) : "", /* @__PURE__ */React__default["default"].createElement("div", {
    ref: affixRef
  }, children));
});

exports["default"] = Affix;
//# sourceMappingURL=Affix.js.map
