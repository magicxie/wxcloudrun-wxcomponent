/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var slicedToArray = require('../../_chunks/dep-fa36e79f.js');
var cascader_utils_helper = require('./helper.js');
require('../../_chunks/dep-045b87c1.js');
require('../../_chunks/dep-a7666a95.js');

var treeNodesEffect = function treeNodesEffect(inputVal, treeStore, setTreeNodes) {
  if (!treeStore) return;
  var nodes = [];

  if (inputVal) {
    nodes = treeStore.nodes.filter(function (node) {
      var fullPathLabel = cascader_utils_helper.getFullPathLabel(node);
      return fullPathLabel.indexOf(inputVal) > -1 && node.isLeaf();
    });
  } else {
    nodes = treeStore.getNodes().filter(function (node) {
      return node.visible;
    });
  }

  setTreeNodes(nodes);
};
var treeStoreExpendEffect = function treeStoreExpendEffect(treeStore, value, expend) {
  var treeValue = cascader_utils_helper.getTreeValue(value);
  if (!treeStore) return;

  if (Array.isArray(treeValue) && expend.length === 0) {
    var expandedMap = /* @__PURE__ */new Map();

    var _treeValue = slicedToArray._slicedToArray(treeValue, 1),
        val = _treeValue[0];

    if (val) {
      expandedMap.set(val, true);
      var node = treeStore.getNode(val);
      if (!node) return;
      node.getParents().forEach(function (tn) {
        expandedMap.set(tn.value, true);
      });
      var expandedArr = Array.from(expandedMap.keys());
      treeStore.replaceExpanded(expandedArr);
    } else {
      treeStore.resetExpanded();
    }
  }

  if (treeStore.getExpanded() && expend.length) {
    treeStore.replaceExpanded(expend);
  }

  treeStore.refreshNodes();
};

exports.treeNodesEffect = treeNodesEffect;
exports.treeStoreExpendEffect = treeStoreExpendEffect;
//# sourceMappingURL=cascader.js.map
