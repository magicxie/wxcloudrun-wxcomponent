/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../../_chunks/dep-449daca3.js');
var isFunction = require('../../_chunks/dep-1bafebb1.js');
var isEmpty = require('../../_chunks/dep-72f8673c.js');
require('../../_chunks/dep-0e3f1753.js');
require('../../_chunks/dep-a7666a95.js');
require('../../_chunks/dep-735b841a.js');
require('../../_chunks/dep-c82d4aac.js');
require('../../_chunks/dep-72511bfe.js');
require('../../_chunks/dep-48870ae5.js');
require('../../_chunks/dep-07d4a79b.js');
require('../../_chunks/dep-fb89215e.js');
require('../../_chunks/dep-69abf228.js');
require('../../_chunks/dep-20e76bfc.js');
require('../../_chunks/dep-c5449fbe.js');
require('../../_chunks/dep-9125a75e.js');
require('../../_chunks/dep-f445e9bb.js');

function getCloseIconClass(prefix, CLASSNAMES, cascaderContext) {
  var _ref;

  var visible = cascaderContext.visible,
      disabled = cascaderContext.disabled;
  return ["".concat(prefix, "-cascader__icon"), (_ref = {}, defineProperty._defineProperty(_ref, CLASSNAMES.STATUS.visible, visible), defineProperty._defineProperty(_ref, CLASSNAMES.STATUS.disabled, disabled), _ref)];
}
function getFakeArrowIconClass(prefix, CLASSNAMES, cascaderContext) {
  var disabled = cascaderContext.disabled;
  return ["".concat(prefix, "-cascader__icon"), defineProperty._defineProperty({}, CLASSNAMES.STATUS.disabled, disabled)];
}
function getCascaderInnerClasses(prefix, CLASSNAMES, cascaderContext) {
  var _ref3;

  var disabled = cascaderContext.disabled,
      visible = cascaderContext.visible,
      size = cascaderContext.size,
      multiple = cascaderContext.multiple;
  return ["".concat(prefix, "-cascader"), (_ref3 = {}, defineProperty._defineProperty(_ref3, CLASSNAMES.STATUS.disabled, disabled), defineProperty._defineProperty(_ref3, CLASSNAMES.STATUS.active, visible), defineProperty._defineProperty(_ref3, CLASSNAMES.SIZE[size], size), defineProperty._defineProperty(_ref3, "".concat(prefix, "-cascader--multiple"), multiple), _ref3)];
}
function getCloseShow(isHover, cascaderContext) {
  var value = cascaderContext.value,
      disabled = cascaderContext.disabled,
      clearable = cascaderContext.clearable,
      visible = cascaderContext.visible;
  return !!(!visible && clearable && isHover && !disabled && !isEmpty.isEmpty_1(value));
}
function getPlaceholderShow(cascaderContext, singleContent, multipleContent) {
  var filterable = cascaderContext.filterable,
      visible = cascaderContext.visible,
      multiple = cascaderContext.multiple;
  var valEmpty = !(multiple ? multipleContent.length : singleContent);

  if (filterable) {
    return valEmpty && !visible;
  }

  return valEmpty;
}
function getSingleContent(cascaderContext) {
  var value = cascaderContext.value,
      multiple = cascaderContext.multiple,
      treeStore = cascaderContext.treeStore,
      showAllLevels = cascaderContext.showAllLevels;
  if (multiple || !value) return "";
  if (Array.isArray(value)) return "";
  var node = treeStore && treeStore.getNodes(value);

  if (!(node && node.length)) {
    return "";
  }

  var path = node && node[0].getPath();

  if (path && path.length) {
    return showAllLevels ? path.map(function (node2) {
      return node2.label;
    }).join(" / ") : path[path.length - 1].label;
  }

  return value;
}
function getMultipleContent(cascaderContext) {
  var value = cascaderContext.value,
      multiple = cascaderContext.multiple,
      treeStore = cascaderContext.treeStore;
  if (!multiple) return [];
  if (multiple && !Array.isArray(value)) return [];
  var node = treeStore && treeStore.getNodes(value);
  if (!node) return [];
  var path = value.map(function (item) {
    var node2 = treeStore.getNodes(item);
    return node2[0];
  });

  if (value && value.length) {
    return path && path.length ? path : value;
  }

  return [];
}
function outerClickListenerEffect(ref, cascaderContext, event) {
  var visible = cascaderContext.visible,
      setVisible = cascaderContext.setVisible;

  if (!ref || ref.contains(event.target)) {
    return;
  }

  if (visible) {
    setVisible(false);
  }
}
function closeIconClickEffect(cascaderContext) {
  var setVisible = cascaderContext.setVisible,
      multiple = cascaderContext.multiple,
      setExpend = cascaderContext.setExpend,
      setValue = cascaderContext.setValue;
  setVisible(false);

  if (multiple) {
    setExpend([]);
  }

  setValue(multiple ? [] : "", "clear");
}
function handleRemoveTagEffect(cascaderContext, node, onRemove) {
  var disabled = cascaderContext.disabled,
      setValue = cascaderContext.setValue;
  if (disabled) return;
  var checked = node.setChecked(!node.isChecked());
  setValue(checked, "unchecked", node.getModel());

  if (isFunction.isFunction_1(onRemove)) {
    onRemove({
      value: checked,
      node: node
    });
  }
}
function innerContentClickEffect(cascaderContext) {
  var setVisible = cascaderContext.setVisible,
      visible = cascaderContext.visible,
      filterActive = cascaderContext.filterActive,
      disabled = cascaderContext.disabled;

  if (!disabled) {
    if (visible && filterActive) return;
    setVisible(!visible);
  }
}

exports.closeIconClickEffect = closeIconClickEffect;
exports.getCascaderInnerClasses = getCascaderInnerClasses;
exports.getCloseIconClass = getCloseIconClass;
exports.getCloseShow = getCloseShow;
exports.getFakeArrowIconClass = getFakeArrowIconClass;
exports.getMultipleContent = getMultipleContent;
exports.getPlaceholderShow = getPlaceholderShow;
exports.getSingleContent = getSingleContent;
exports.handleRemoveTagEffect = handleRemoveTagEffect;
exports.innerContentClickEffect = innerContentClickEffect;
exports.outerClickListenerEffect = outerClickListenerEffect;
//# sourceMappingURL=inputContent.js.map
