/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var slicedToArray = require('../../_chunks/dep-fa36e79f.js');
var React = require('react');
var locale_LocalReceiver = require('../../locale/LocalReceiver.js');
var _util_useConfig = require('../../_util/useConfig.js');
var _util_noop = require('../../_util/noop.js');
var datePicker_base_Header = require('../base/Header.js');
var datePicker_base_Table = require('../base/Table.js');
var datePicker_utils = require('../utils.js');
require('../../_chunks/dep-045b87c1.js');
require('../../_chunks/dep-449daca3.js');
require('../../config-provider/ConfigContext.js');
require('../../locale/zh_CN.js');
require('tdesign-icons-react');
require('../../button/index.js');
require('../../button/Button.js');
require('../../_chunks/dep-e03ca79d.js');
require('classnames');
require('../../_util/useRipple.js');
require('../../_util/setStyle.js');
require('../../loading/index.js');
require('../../loading/loading.js');
require('../../_util/dom.js');
require('raf');
require('../../_chunks/dep-0705da20.js');
require('../../_chunks/dep-0e3f1753.js');
require('../../_chunks/dep-a7666a95.js');
require('../../_chunks/dep-9125a75e.js');
require('../../_chunks/dep-48870ae5.js');
require('../../_util/easing.js');
require('../../common/Portal.js');
require('react-dom');
require('../../loading/gradient.js');
require('../../loading/plugin.js');
require('../base/Cell.js');
require('../../_chunks/dep-871fbfc7.js');
require('../../_chunks/dep-c7adf4af.js');
require('../../_chunks/dep-059e74d9.js');
require('../../_chunks/dep-6681bc7b.js');
require('../../_chunks/dep-f445e9bb.js');
require('../../_chunks/dep-1bafebb1.js');
require('../../_chunks/dep-735b841a.js');
require('../../_chunks/dep-72511bfe.js');
require('../../_chunks/dep-7d00ab60.js');
require('../../_chunks/dep-5e46865d.js');
require('../../_chunks/dep-8bb9b7ba.js');
require('../../_chunks/dep-9c74d22d.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var TODAY = datePicker_utils.getToday();

var DatePanel = function DatePanel(props) {
  var _useLocaleReceiver = locale_LocalReceiver.useLocaleReceiver("datePicker"),
      _useLocaleReceiver2 = slicedToArray._slicedToArray(_useLocaleReceiver, 2),
      local = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];

  var monthAriaLabel = t(local.monthAriaLabel);

  var _useConfig = _util_useConfig["default"](),
      classPrefix = _useConfig.classPrefix;

  var value = props.value,
      mode = props.mode,
      minDate = props.minDate,
      maxDate = props.maxDate,
      firstDayOfWeek = props.firstDayOfWeek,
      disableDate = props.disableDate,
      onChange = props.onChange;

  var _useState = React.useState(value.getFullYear()),
      _useState2 = slicedToArray._slicedToArray(_useState, 2),
      year = _useState2[0],
      setYear = _useState2[1];

  var _useState3 = React.useState(value.getMonth()),
      _useState4 = slicedToArray._slicedToArray(_useState3, 2),
      month = _useState4[0],
      setMonth = _useState4[1];

  var _useState5 = React.useState(mode),
      _useState6 = slicedToArray._slicedToArray(_useState5, 2),
      type = _useState6[0],
      setType = _useState6[1];

  React.useEffect(function () {
    setType(mode);
  }, [mode]);
  React.useEffect(function () {
    setYear(value.getFullYear());
    setMonth(value.getMonth());
  }, [value]);

  function clickHeader(flag) {
    var monthCount = 0;
    var next = null;

    switch (type) {
      case "date":
        monthCount = 1;
        break;

      case "month":
        monthCount = 12;
        break;

      case "year":
        monthCount = 120;
    }

    var current = new Date(year, month);

    switch (flag) {
      case 1:
        next = datePicker_utils.addMonth(current, monthCount);
        break;

      case -1:
        next = datePicker_utils.subtractMonth(current, monthCount);
        break;

      case 0:
        next = new Date();
        break;
    }

    setYear(next.getFullYear());
    setMonth(next.getMonth());
  }

  var tableData = React.useMemo(function () {
    var data;
    var options = {
      disableDate: disableDate,
      minDate: minDate,
      maxDate: maxDate,
      firstDayOfWeek: firstDayOfWeek,
      monthText: monthAriaLabel
    };

    switch (type) {
      case "date":
        data = datePicker_utils.getWeeks({
          year: year,
          month: month
        }, options);
        break;

      case "month":
        data = datePicker_utils.getMonths(year, options);
        break;

      case "year":
        data = datePicker_utils.getYears(year, options);
        break;
    }

    var start = type === "date" || type === mode ? value : new Date(year, month);
    return datePicker_utils.flagActive(data, {
      start: start,
      type: type
    });
  }, [year, month, type, value, mode, disableDate, minDate, maxDate, firstDayOfWeek, monthAriaLabel]);

  function getClickHandler(date) {
    if (type === "date") {
      onChange === null || onChange === void 0 ? void 0 : onChange(date);
    } else if (type === "month") {
      if (mode === "month") {
        onChange === null || onChange === void 0 ? void 0 : onChange(date);
      } else {
        setType("date");
        setYear(date.getFullYear());
        setMonth(date.getMonth());
      }
    } else if (type === "year") {
      if (mode === "year") {
        onChange === null || onChange === void 0 ? void 0 : onChange(date);
      } else {
        setType("month");
        setYear(date.getFullYear());
      }
    }
  }

  return /* @__PURE__ */React__default["default"].createElement("div", {
    className: "".concat(classPrefix, "-date-picker__panel")
  }, /* @__PURE__ */React__default["default"].createElement(datePicker_base_Header["default"], {
    year: year,
    month: month,
    type: type,
    onBtnClick: clickHeader,
    onTypeChange: setType
  }), /* @__PURE__ */React__default["default"].createElement(datePicker_base_Table["default"], {
    type: type,
    firstDayOfWeek: firstDayOfWeek,
    data: tableData,
    onCellClick: getClickHandler,
    onCellMouseEnter: _util_noop["default"]
  }));
};

DatePanel.displayName = "DatePanel";
DatePanel.defaultProps = {
  value: TODAY,
  mode: "date"
};

exports["default"] = DatePanel;
//# sourceMappingURL=Date.js.map
