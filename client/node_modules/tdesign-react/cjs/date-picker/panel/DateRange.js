/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var slicedToArray = require('../../_chunks/dep-fa36e79f.js');
var React = require('react');
var dayjs = require('dayjs');
var _util_useConfig = require('../../_util/useConfig.js');
var datePicker_base_Header = require('../base/Header.js');
var datePicker_base_Table = require('../base/Table.js');
var locale_LocalReceiver = require('../../locale/LocalReceiver.js');
var datePicker_utils = require('../utils.js');
require('../../_chunks/dep-045b87c1.js');
require('../../config-provider/ConfigContext.js');
require('../../locale/zh_CN.js');
require('tdesign-icons-react');
require('../../button/index.js');
require('../../button/Button.js');
require('../../_chunks/dep-449daca3.js');
require('../../_chunks/dep-e03ca79d.js');
require('classnames');
require('../../_util/noop.js');
require('../../_util/useRipple.js');
require('../../_util/setStyle.js');
require('../../loading/index.js');
require('../../loading/loading.js');
require('../../_util/dom.js');
require('raf');
require('../../_chunks/dep-0705da20.js');
require('../../_chunks/dep-0e3f1753.js');
require('../../_chunks/dep-a7666a95.js');
require('../../_chunks/dep-9125a75e.js');
require('../../_chunks/dep-48870ae5.js');
require('../../_util/easing.js');
require('../../common/Portal.js');
require('react-dom');
require('../../loading/gradient.js');
require('../../loading/plugin.js');
require('../base/Cell.js');
require('../../_chunks/dep-871fbfc7.js');
require('../../_chunks/dep-c7adf4af.js');
require('../../_chunks/dep-059e74d9.js');
require('../../_chunks/dep-6681bc7b.js');
require('../../_chunks/dep-f445e9bb.js');
require('../../_chunks/dep-1bafebb1.js');
require('../../_chunks/dep-735b841a.js');
require('../../_chunks/dep-72511bfe.js');
require('../../_chunks/dep-7d00ab60.js');
require('../../_chunks/dep-5e46865d.js');
require('../../_chunks/dep-8bb9b7ba.js');
require('../../_chunks/dep-9c74d22d.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var dayjs__default = /*#__PURE__*/_interopDefaultLegacy(dayjs);

var TODAY = datePicker_utils.getToday();
var LEFT = "left";
var RIGHT = "right";

var DateRangePanel = function DateRangePanel(props) {
  var _useLocaleReceiver = locale_LocalReceiver.useLocaleReceiver("datePicker"),
      _useLocaleReceiver2 = slicedToArray._slicedToArray(_useLocaleReceiver, 2),
      local = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];

  var monthAriaLabel = t(local.monthAriaLabel);

  var _useConfig = _util_useConfig["default"](),
      classPrefix = _useConfig.classPrefix;

  var value = props.value,
      mode = props.mode,
      minDate = props.minDate,
      maxDate = props.maxDate,
      firstDayOfWeek = props.firstDayOfWeek,
      disableDate = props.disableDate,
      onChange = props.onChange;
  var data = getLeftAndRightDataFromValue(value);

  var _useState = React.useState(data.leftYear),
      _useState2 = slicedToArray._slicedToArray(_useState, 2),
      leftYear = _useState2[0],
      setLeftYear = _useState2[1];

  var _useState3 = React.useState(data.leftMonth),
      _useState4 = slicedToArray._slicedToArray(_useState3, 2),
      leftMonth = _useState4[0],
      setLeftMonth = _useState4[1];

  var _useState5 = React.useState(data.rightYear),
      _useState6 = slicedToArray._slicedToArray(_useState5, 2),
      rightYear = _useState6[0],
      setRightYear = _useState6[1];

  var _useState7 = React.useState(data.rightMonth),
      _useState8 = slicedToArray._slicedToArray(_useState7, 2),
      rightMonth = _useState8[0],
      setRightMonth = _useState8[1];

  var _useState9 = React.useState(mode),
      _useState10 = slicedToArray._slicedToArray(_useState9, 2),
      leftType = _useState10[0],
      setLeftType = _useState10[1];

  var _useState11 = React.useState(mode),
      _useState12 = slicedToArray._slicedToArray(_useState11, 2),
      rightType = _useState12[0],
      setRightType = _useState12[1];

  var _useState13 = React.useState(data.startValue),
      _useState14 = slicedToArray._slicedToArray(_useState13, 2),
      startValue = _useState14[0],
      setStartValue = _useState14[1];

  var _useState15 = React.useState(data.endValue),
      _useState16 = slicedToArray._slicedToArray(_useState15, 2),
      endValue = _useState16[0],
      setEndValue = _useState16[1];

  var _useState17 = React.useState(true),
      _useState18 = slicedToArray._slicedToArray(_useState17, 2),
      isFirstClick = _useState18[0],
      setIsFirstClick = _useState18[1];

  var _useState19 = React.useState(TODAY),
      _useState20 = slicedToArray._slicedToArray(_useState19, 2),
      firstClickValue = _useState20[0],
      setFirstClickValue = _useState20[1];

  React.useEffect(function () {
    var panelData = getLeftAndRightDataFromValue(value);
    var leftYear2 = panelData.leftYear,
        leftMonth2 = panelData.leftMonth,
        rightMonth2 = panelData.rightMonth,
        rightYear2 = panelData.rightYear,
        startValue2 = panelData.startValue,
        endValue2 = panelData.endValue;
    setStartValue(startValue2);
    setEndValue(endValue2);
    setLeftYear(leftYear2);
    setLeftMonth(leftMonth2);
    setRightYear(rightYear2);
    setRightMonth(rightMonth2);
  }, [value]);
  React.useEffect(function () {
    setLeftType(mode);
    setRightType(mode);
  }, [mode]);

  function getLeftAndRightDataFromValue(value2) {
    var _value = slicedToArray._slicedToArray(value2, 2),
        _value$ = _value[0],
        startValue2 = _value$ === void 0 ? TODAY : _value$,
        _value$2 = _value[1],
        endValue2 = _value$2 === void 0 ? TODAY : _value$2;

    var leftYear2 = startValue2.getFullYear();
    var leftMonth2 = startValue2.getMonth();
    var rightMonth2 = endValue2.getMonth();
    var rightYear2 = endValue2.getFullYear();

    if (mode === "date" && datePicker_utils.isSame(startValue2, endValue2, "month")) {
      var next = datePicker_utils.addMonth(endValue2, 1);
      rightMonth2 = datePicker_utils.addMonth(endValue2, 1).getMonth();
      rightYear2 = next.getFullYear();
    }

    if (mode === "month" && datePicker_utils.isSame(startValue2, endValue2, "year")) {
      rightYear2 = leftYear2 + 1;
    }

    if (mode === "year" && datePicker_utils.isSame(startValue2, endValue2, "year")) {
      rightYear2 = leftYear2 + 10;
    }

    return {
      leftYear: leftYear2,
      leftMonth: leftMonth2,
      rightMonth: rightMonth2,
      rightYear: rightYear2,
      startValue: startValue2,
      endValue: endValue2
    };
  }

  function clickHeader(flag, direction) {
    var year = direction === LEFT ? leftYear : rightYear;
    var month = direction === LEFT ? leftMonth : rightMonth;
    var type = direction === LEFT ? leftType : rightType;
    var monthCount;
    var next;

    switch (type) {
      case "date":
        monthCount = 1;
        break;

      case "month":
        monthCount = 12;
        break;

      case "year":
        monthCount = 120;
    }

    var current = new Date(year, month);

    if (flag === 1) {
      next = datePicker_utils.addMonth(current, monthCount);
    } else if (flag === -1) {
      next = datePicker_utils.subtractMonth(current, monthCount);
    } else {
      next = new Date();
    }

    direction === LEFT ? setLeftYear(next.getFullYear()) : setRightYear(next.getFullYear());
    direction === LEFT ? setLeftMonth(next.getMonth()) : setRightMonth(next.getMonth());
  }

  function getClickHandler(direction) {
    var type = direction === LEFT ? leftType : rightType;
    if (type === "date") return function (date) {
      return clickDate(date);
    };
    if (type === "month") return function (date) {
      return clickMonth(date, direction);
    };
    if (type === "year") return function (date) {
      return clickYear(date, direction);
    };
  }

  function clickDate(date) {
    if (isFirstClick) {
      setStartValue(date);
      setEndValue(date);
      setIsFirstClick(false);
      setFirstClickValue(date);
    } else {
      if (dayjs__default["default"](firstClickValue).isBefore(dayjs__default["default"](date), "day")) {
        setEndValue(date);
      } else {
        setEndValue(firstClickValue);
        setStartValue(date);
      }

      onChange === null || onChange === void 0 ? void 0 : onChange([datePicker_utils.setDateTime(startValue, 0, 0, 0), datePicker_utils.setDateTime(endValue, 23, 59, 59)]);
      setIsFirstClick(true);
    }
  }

  function clickYear(date, direction) {
    if (mode === "year") {
      if (isFirstClick) {
        setStartValue(date);
        setIsFirstClick(false);
        setFirstClickValue(date);
      } else {
        onChange === null || onChange === void 0 ? void 0 : onChange([startValue, endValue]);
        setIsFirstClick(true);
      }
    } else {
      direction === LEFT ? setLeftType("month") : setRightType("month");
      direction === LEFT ? setLeftYear(date.getFullYear()) : setRightYear(date.getFullYear());
    }
  }

  function clickMonth(date, direction) {
    if (mode === "month") {
      if (isFirstClick) {
        setStartValue(date);
        setIsFirstClick(false);
        setFirstClickValue(date);
      } else {
        if (endValue < startValue) {
          setEndValue(startValue);
        }

        onChange === null || onChange === void 0 ? void 0 : onChange([startValue, endValue]);
        setIsFirstClick(true);
      }
    } else {
      direction === LEFT ? setLeftType("date") : setRightType("date");
      direction === LEFT ? setLeftYear(date.getFullYear()) : setRightYear(date.getFullYear());
      direction === LEFT ? setLeftMonth(date.getMonth()) : setRightMonth(date.getMonth());
    }
  }

  function onMouseEnter(date) {
    if (isFirstClick) return;

    if (firstClickValue.getTime() > date.getTime()) {
      setStartValue(date);
      setEndValue(firstClickValue);
    } else {
      setStartValue(firstClickValue);
      setEndValue(date);
    }
  }

  var getData = React.useCallback(function (_ref) {
    var year = _ref.year,
        month = _ref.month,
        type = _ref.type,
        start = _ref.start,
        end = _ref.end;
    var data2;
    var options = {
      disableDate: disableDate,
      minDate: minDate,
      maxDate: maxDate,
      firstDayOfWeek: firstDayOfWeek,
      monthText: monthAriaLabel
    };

    switch (type) {
      case "date":
        data2 = datePicker_utils.getWeeks({
          year: year,
          month: month
        }, options);
        break;

      case "month":
        data2 = datePicker_utils.getMonths(year, options);
        break;

      case "year":
        data2 = datePicker_utils.getYears(year, options);
        break;
    }

    return datePicker_utils.flagActive(data2, {
      start: start,
      end: end,
      type: type
    });
  }, [disableDate, minDate, maxDate, firstDayOfWeek, monthAriaLabel]);
  var leftData = React.useMemo(function () {
    return getData({
      year: leftYear,
      month: leftMonth,
      type: leftType,
      start: startValue,
      end: endValue
    });
  }, [leftYear, leftMonth, leftType, startValue, endValue, getData]);
  var rightData = React.useMemo(function () {
    return getData({
      year: rightYear,
      month: rightMonth,
      type: rightType,
      start: startValue,
      end: endValue
    });
  }, [rightYear, rightMonth, rightType, startValue, endValue, getData]);
  return /* @__PURE__ */React__default["default"].createElement("div", {
    className: "".concat(classPrefix, "-date-picker__panels")
  }, /* @__PURE__ */React__default["default"].createElement("div", {
    className: "".concat(classPrefix, "-date-picker__panel")
  }, /* @__PURE__ */React__default["default"].createElement(datePicker_base_Header["default"], {
    year: leftYear,
    month: leftMonth,
    type: leftType,
    onBtnClick: function onBtnClick(flag) {
      return clickHeader(flag, LEFT);
    },
    onTypeChange: setLeftType
  }), /* @__PURE__ */React__default["default"].createElement(datePicker_base_Table["default"], {
    type: leftType,
    firstDayOfWeek: firstDayOfWeek,
    data: leftData,
    onCellClick: getClickHandler(LEFT),
    onCellMouseEnter: onMouseEnter
  })), /* @__PURE__ */React__default["default"].createElement("div", {
    className: "".concat(classPrefix, "-date-picker__panel")
  }, /* @__PURE__ */React__default["default"].createElement(datePicker_base_Header["default"], {
    year: rightYear,
    month: rightMonth,
    type: rightType,
    onBtnClick: function onBtnClick(flag) {
      return clickHeader(flag, RIGHT);
    },
    onTypeChange: setRightType
  }), /* @__PURE__ */React__default["default"].createElement(datePicker_base_Table["default"], {
    type: rightType,
    firstDayOfWeek: firstDayOfWeek,
    data: rightData,
    onCellClick: getClickHandler(RIGHT),
    onCellMouseEnter: onMouseEnter
  })));
};

DateRangePanel.displayName = "DateRangePanel";
DateRangePanel.defaultProps = {
  value: [TODAY, TODAY],
  mode: "date"
};

exports["default"] = DateRangePanel;
//# sourceMappingURL=DateRange.js.map
