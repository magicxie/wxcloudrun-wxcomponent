/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('../_chunks/dep-871fbfc7.js');
var slicedToArray = require('../_chunks/dep-fa36e79f.js');
var _typeof = require('../_chunks/dep-a7666a95.js');
var _baseSlice = require('../_chunks/dep-c7adf4af.js');
var _isIterateeCall = require('../_chunks/dep-059e74d9.js');
var toInteger$1 = require('../_chunks/dep-5e46865d.js');
require('../_chunks/dep-045b87c1.js');
require('../_chunks/dep-6681bc7b.js');
require('../_chunks/dep-f445e9bb.js');
require('../_chunks/dep-1bafebb1.js');
require('../_chunks/dep-0e3f1753.js');
require('../_chunks/dep-735b841a.js');
require('../_chunks/dep-72511bfe.js');
require('../_chunks/dep-7d00ab60.js');
require('../_chunks/dep-8bb9b7ba.js');
require('../_chunks/dep-9c74d22d.js');
require('../_chunks/dep-48870ae5.js');

var baseSlice = _baseSlice._baseSlice,
    isIterateeCall = _isIterateeCall._isIterateeCall,
    toInteger = toInteger$1.toInteger_1;
/* Built-in method references for those with the same name as other `lodash` methods. */

var nativeCeil = Math.ceil,
    nativeMax = Math.max;
/**
 * Creates an array of elements split into groups the length of `size`.
 * If `array` can't be split evenly, the final chunk will be the remaining
 * elements.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Array
 * @param {Array} array The array to process.
 * @param {number} [size=1] The length of each chunk
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Array} Returns the new array of chunks.
 * @example
 *
 * _.chunk(['a', 'b', 'c', 'd'], 2);
 * // => [['a', 'b'], ['c', 'd']]
 *
 * _.chunk(['a', 'b', 'c', 'd'], 3);
 * // => [['a', 'b', 'c'], ['d']]
 */

function chunk(array, size, guard) {
  if (guard ? isIterateeCall(array, size, guard) : size === undefined) {
    size = 1;
  } else {
    size = nativeMax(toInteger(size), 0);
  }

  var length = array == null ? 0 : array.length;

  if (!length || size < 1) {
    return [];
  }

  var index = 0,
      resIndex = 0,
      result = Array(nativeCeil(length / size));

  while (index < length) {
    result[resIndex++] = baseSlice(array, index, index += size);
  }

  return result;
}

var chunk_1 = chunk;

var nextMonth = function nextMonth(date) {
  var isPassYear = date.getMonth() === 11;
  var newMonth = isPassYear ? 0 : date.getMonth() + 1;
  var year = isPassYear ? date.getFullYear() + 1 : date.getFullYear();
  return new Date(year, newMonth, 1);
};
var prevMonth = function prevMonth(date) {
  var passYear = date.getMonth() === 0;
  var newMonth = passYear ? 11 : date.getMonth() - 1;
  var year = passYear ? date.getFullYear() - 1 : date.getFullYear();
  return new Date(year, newMonth, 1);
};
function dateIndexOf(date, arrDates) {
  var curDate = new Date(date);
  var curTime = curDate.setHours(0, 0, 0, 0);
  var selectedDates = arrDates.map(function (d) {
    var dt = new Date(d);
    var dtime = dt.setHours(0, 0, 0, 0);
    return dtime;
  });
  return selectedDates.indexOf(curTime);
}
function empty(mixedVar) {
  var undef;
  var emptyValues = [undef, null, false, ""];

  for (var i = 0, len = emptyValues.length; i < len; i++) {
    if (mixedVar === emptyValues[i]) {
      return true;
    }
  }

  if (_typeof._typeof(mixedVar) === "object") {
    return Object.keys(mixedVar).length < 1;
  }

  return false;
}
function toDash(strCamelCase) {
  return String(strCamelCase).split(/(?=[A-Z])/).join("-").toLowerCase();
}
function setStyles(el, styles) {
  Object.entries(styles).forEach(function (_ref) {
    var _ref2 = slicedToArray._slicedToArray(_ref, 2),
        prop = _ref2[0],
        _ref2$ = _ref2[1],
        val = _ref2$ === void 0 ? null : _ref2$;

    if (empty(val)) {
      el.style.removeProperty(prop);
      return;
    }

    var _String$split = String(val).split("!"),
        _String$split2 = slicedToArray._slicedToArray(_String$split, 2),
        value = _String$split2[0],
        _String$split2$ = _String$split2[1],
        pri = _String$split2$ === void 0 ? "" : _String$split2$;

    el.style.setProperty(toDash(prop), value, pri);
  });
}
function firstUpperCase(str) {
  if (!str) return str;
  return str[0].toUpperCase().concat(str.substring(1, str.length));
}

function getFirstDayOfMonth(_ref3) {
  var year = _ref3.year,
      month = _ref3.month;
  return new Date(year, month, 1);
}

function getDaysInMonth(_ref4) {
  var year = _ref4.year,
      month = _ref4.month;
  return new Date(year, month + 1, 0).getDate();
}

function getLastDayOfMonth(_ref5) {
  var year = _ref5.year,
      month = _ref5.month;
  return new Date(year, month, getDaysInMonth({
    year: year,
    month: month
  }));
}

function isSameYear(date1, date2) {
  return date1.getFullYear() === date2.getFullYear();
}

function isSameMonth(date1, date2) {
  return isSameYear(date1, date2) && date1.getMonth() === date2.getMonth();
}

function isSameDate(date1, date2) {
  return isSameMonth(date1, date2) && date1.getDate() === date2.getDate();
}

function isBetween(value, _ref6) {
  var start = _ref6.start,
      end = _ref6.end;
  var date = new Date(value.getFullYear(), value.getMonth(), value.getDate());
  var startTime = new Date(start.getFullYear(), start.getMonth(), start.getDate());
  var endTime = new Date(end.getFullYear(), end.getMonth(), end.getDate());
  return startTime <= date && endTime >= date;
}

function compareAsc(date1, date2) {
  var d1 = date1.getTime();
  var d2 = date2.getTime();
  if (d1 < d2) return -1;
  if (d1 > d2) return 1;
  return 0;
}

function isSame(date1, date2) {
  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "date";
  var func = {
    isSameYear: isSameYear,
    isSameMonth: isSameMonth,
    isSameDate: isSameDate
  };
  return func["isSame".concat(firstUpperCase(type))](date1, date2);
}
function outOfRanges(d, min, max) {
  return min && compareAsc(d, min) === -1 || max && compareAsc(d, max) === 1;
}
function getToday() {
  var now = new Date();
  return new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0);
}
function getDateObj(date) {
  if (!(date instanceof Date)) {
    throw new Error("date must be Date object");
  }

  return {
    year: date.getFullYear(),
    month: date.getMonth(),
    date: date.getDate(),
    hours: date.getHours(),
    minutes: date.getMinutes(),
    seconds: date.getSeconds(),
    meridiem: date.getHours() > 11 ? "PM" : "AM"
  };
}
function setDateTime(d, hour, min, sec) {
  var _getDateObj = getDateObj(d),
      year = _getDateObj.year,
      month = _getDateObj.month,
      date = _getDateObj.date;

  return new Date(year, month, date, hour, min, sec, 0);
}
function subtractMonth(date, num) {
  var day = date.getDate();
  var newDate = new Date(date);
  var monthNum = num;

  while (monthNum--) {
    newDate.setDate(0);
  }

  newDate.setDate(day);
  return newDate;
}
function addMonth(date, num) {
  var monthNum = num;
  if (num < 0) monthNum = 0;
  var newDate = new Date(date);
  newDate.setMonth(date.getMonth() + monthNum);
  return newDate;
}
function getWeeks(_ref7, _ref8) {
  var year = _ref7.year,
      month = _ref7.month;
  var firstDayOfWeek = _ref8.firstDayOfWeek,
      _ref8$disableDate = _ref8.disableDate,
      disableDate = _ref8$disableDate === void 0 ? function () {
    return false;
  } : _ref8$disableDate,
      minDate = _ref8.minDate,
      maxDate = _ref8.maxDate;
  var prependDay = getFirstDayOfMonth({
    year: year,
    month: month
  });
  var appendDay = getLastDayOfMonth({
    year: year,
    month: month
  });
  var maxDays = getDaysInMonth({
    year: year,
    month: month
  });
  var daysArr = [];
  var today = getToday();

  for (var i = 1; i <= maxDays; i++) {
    var currentDay = new Date(year, month, i);
    daysArr.push({
      text: i,
      active: false,
      value: currentDay,
      disabled: disableDate(currentDay) || outOfRanges(currentDay, minDate, maxDate),
      now: isSame(today, currentDay),
      firstDayOfMonth: i === 1,
      lastDayOfMonth: i === maxDays,
      type: "current-month"
    });
  }

  if (prependDay.getDay() !== firstDayOfWeek - 1) {
    prependDay.setDate(0);
    var FLAG = true;

    while (FLAG) {
      daysArr.unshift({
        text: prependDay.getDate().toString(),
        active: false,
        value: new Date(prependDay),
        disabled: disableDate(prependDay) || outOfRanges(prependDay, minDate, maxDate),
        additional: true,
        type: "prev-month"
      });
      prependDay.setDate(prependDay.getDate() - 1);
      if (prependDay.getDay() === Math.abs(firstDayOfWeek + 6) % 7) break;
    }
  }

  var LEN = 42;

  while (daysArr.length < LEN) {
    appendDay.setDate(appendDay.getDate() + 1);
    daysArr.push({
      text: appendDay.getDate(),
      active: false,
      value: new Date(appendDay),
      disabled: disableDate(appendDay) || outOfRanges(appendDay, minDate, maxDate),
      additional: true,
      type: "next-month"
    });
  }

  return chunk_1(daysArr, 7);
}
function getYears(year, _ref9) {
  var _ref9$disableDate = _ref9.disableDate,
      disableDate = _ref9$disableDate === void 0 ? function () {
    return false;
  } : _ref9$disableDate,
      minDate = _ref9.minDate,
      maxDate = _ref9.maxDate;
  var startYear = parseInt((year / 10).toString(), 10) * 10;
  var endYear = startYear + 9;
  var yearArr = [];
  var today = getToday();

  for (var i = startYear; i <= endYear; i++) {
    var date = new Date(i, 1);
    var disabledMonth = 0;
    var outOfRangeMonth = 0;

    for (var j = 0; j < 12; j++) {
      var d = new Date(i, j, j === 11 ? 31 : 1);
      if (typeof disableDate === "function" && disableDate(d)) disabledMonth += 1;
      if (outOfRanges(d, minDate, maxDate)) outOfRangeMonth += 1;
    }

    yearArr.push({
      value: date,
      now: isSame(date, today, "year"),
      disabled: disabledMonth === 12 || outOfRangeMonth === 12,
      active: false,
      text: "".concat(date.getFullYear())
    });
  }

  return chunk_1(yearArr, 4);
}
function getMonths(year, _ref10) {
  var _ref10$disableDate = _ref10.disableDate,
      disableDate = _ref10$disableDate === void 0 ? function () {
    return false;
  } : _ref10$disableDate,
      minDate = _ref10.minDate,
      maxDate = _ref10.maxDate,
      _ref10$monthText = _ref10.monthText,
      monthText = _ref10$monthText === void 0 ? "" : _ref10$monthText;
  var monthArr = [];
  var today = getToday();

  for (var i = 0; i <= 11; i++) {
    var date = new Date(year, i);
    var disabledDay = 0;
    var outOfRangeDay = 0;
    var daysInMonth = getDaysInMonth({
      year: year,
      month: i
    });

    for (var j = 1; j <= daysInMonth; j++) {
      var d = new Date(year, i, j);
      if (disableDate(d)) disabledDay += 1;
      if (outOfRanges(d, minDate, maxDate)) outOfRangeDay += 1;
    }

    monthArr.push({
      value: date,
      now: isSame(date, today, "month"),
      disabled: disabledDay === daysInMonth || outOfRangeDay === daysInMonth,
      active: false,
      text: "".concat(date.getMonth() + 1, " ").concat(monthText)
    });
  }

  return chunk_1(monthArr, 4);
}
function flagActive(data, _ref11) {
  var args = _extends._extends({}, _ref11);

  var start = args.start,
      end = args.end,
      _args$type = args.type,
      type = _args$type === void 0 ? "date" : _args$type;

  if (!end) {
    return data.map(function (row) {
      return row.map(function (item) {
        Object.assign(item, {
          active: isSame(item.value, start, type)
        });
        return item;
      });
    });
  }

  return data.map(function (row) {
    return row.map(function (item) {
      var date = item.value;
      var isStart = isSame(start, date, type);
      var isEnd = isSame(end, date, type);
      Object.assign(item, {
        active: isStart || isEnd,
        highlight: isBetween(date, {
          start: start,
          end: end
        }),
        startOfRange: isStart,
        endOfRange: isEnd
      });
      return item;
    });
  });
}

exports.addMonth = addMonth;
exports.dateIndexOf = dateIndexOf;
exports.empty = empty;
exports.firstUpperCase = firstUpperCase;
exports.flagActive = flagActive;
exports.getDateObj = getDateObj;
exports.getMonths = getMonths;
exports.getToday = getToday;
exports.getWeeks = getWeeks;
exports.getYears = getYears;
exports.isSame = isSame;
exports.nextMonth = nextMonth;
exports.outOfRanges = outOfRanges;
exports.prevMonth = prevMonth;
exports.setDateTime = setDateTime;
exports.setStyles = setStyles;
exports.subtractMonth = subtractMonth;
exports.toDash = toDash;
//# sourceMappingURL=utils.js.map
