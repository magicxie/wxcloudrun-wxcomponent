/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../_chunks/dep-449daca3.js');
var slicedToArray = require('../_chunks/dep-fa36e79f.js');
var React = require('react');
var classNames = require('classnames');
var tdesignIconsReact = require('tdesign-icons-react');
var _util_dom = require('../_util/dom.js');
var locale_LocalReceiver = require('../locale/LocalReceiver.js');
var configProvider_ConfigContext = require('../config-provider/ConfigContext.js');
var _util_getScrollbarWidth = require('../_util/getScrollbarWidth.js');
var _util_hasScrollBar = require('../_util/hasScrollBar.js');
var drawer_DrawerWrapper = require('./DrawerWrapper.js');
var button_index = require('../button/index.js');
require('../_chunks/dep-045b87c1.js');
require('raf');
require('../_chunks/dep-0705da20.js');
require('../_chunks/dep-0e3f1753.js');
require('../_chunks/dep-a7666a95.js');
require('../_chunks/dep-9125a75e.js');
require('../_chunks/dep-48870ae5.js');
require('../_util/easing.js');
require('../locale/zh_CN.js');
require('../common/Portal.js');
require('react-dom');
require('../button/Button.js');
require('../_chunks/dep-e03ca79d.js');
require('../_util/noop.js');
require('../_util/useConfig.js');
require('../_util/useRipple.js');
require('../_util/setStyle.js');
require('../loading/index.js');
require('../loading/loading.js');
require('../loading/gradient.js');
require('../loading/plugin.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { defineProperty._defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var CloseTriggerType = {
  CLICK_OVERLAY: "overlay",
  CLICK_CLOSE_BTN: "close-btn",
  CLICK_CANCEL_BTN: "cancel",
  KEYDOWN_ESC: "esc"
};

var getSizeValue = function getSizeValue(size) {
  var defaultSize = isNaN(Number(size)) ? size : "".concat(size, "px");
  return {
    small: "300px",
    medium: "500px",
    large: "760px"
  }[size] || defaultSize;
};

var Drawer = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _classnames;

  var className = props.className,
      style = props.style,
      visible = props.visible,
      _props$attach = props.attach,
      attach = _props$attach === void 0 ? "" : _props$attach,
      showOverlay = props.showOverlay,
      size = props.size,
      placement = props.placement,
      onCancel = props.onCancel,
      onConfirm = props.onConfirm,
      onClose = props.onClose,
      onCloseBtnClick = props.onCloseBtnClick,
      onOverlayClick = props.onOverlayClick,
      onEscKeydown = props.onEscKeydown,
      showInAttachedElement = props.showInAttachedElement,
      closeOnOverlayClick = props.closeOnOverlayClick,
      closeOnEscKeydown = props.closeOnEscKeydown,
      children = props.children,
      header = props.header,
      body = props.body,
      footer = props.footer,
      closeBtn = props.closeBtn,
      cancelBtn = props.cancelBtn,
      confirmBtn = props.confirmBtn,
      zIndex = props.zIndex,
      destroyOnClose = props.destroyOnClose,
      mode = props.mode,
      _props$preventScrollT = props.preventScrollThrough,
      preventScrollThrough = _props$preventScrollT === void 0 ? true : _props$preventScrollT;

  var _useLocaleReceiver = locale_LocalReceiver.useLocaleReceiver("drawer"),
      _useLocaleReceiver2 = slicedToArray._slicedToArray(_useLocaleReceiver, 2),
      local = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];

  var confirmText = t(local.confirm);
  var cancelText = t(local.cancel);

  var _useContext = React.useContext(configProvider_ConfigContext["default"]),
      classPrefix = _useContext.classPrefix;

  var containerRef = React.useRef();
  var contentWrapperRef = React.useRef();
  var drawerRef = React.useRef();
  var prefixCls = "".concat(classPrefix, "-drawer");
  var lockCls = "".concat(prefixCls, "--lock");
  var transform = visible ? "translate(0px)" : "";
  var closeIcon = /*#__PURE__*/React__default["default"].isValidElement(closeBtn) ? closeBtn : /* @__PURE__ */React__default["default"].createElement(tdesignIconsReact.CloseIcon, null);

  var _useState = React.useState(false),
      _useState2 = slicedToArray._slicedToArray(_useState, 2),
      isDestroyOnClose = _useState2[0],
      setIsDestroyOnClose = _useState2[1];

  React.useImperativeHandle(ref, function () {
    return containerRef.current;
  });
  React.useEffect(function () {
    if (preventScrollThrough) {
      if (visible && !showInAttachedElement) {
        _util_dom.addClass(document.body, lockCls);
      } else {
        _util_dom.removeClass(document.body, lockCls);
      }
    }
  }, [visible, showInAttachedElement, lockCls, preventScrollThrough]);
  React.useEffect(function () {
    if (!destroyOnClose || !visible) return;
    setIsDestroyOnClose(false);
  }, [visible, destroyOnClose]);
  React.useEffect(function () {
    var documentBodyCssText = "";

    if (visible) {
      if (attach !== "" && _util_hasScrollBar["default"]()) {
        var scrollbarWidth = _util_getScrollbarWidth["default"]();
        documentBodyCssText = "overflow: hidden; width: calc(100% - ".concat(scrollbarWidth, "px);");

        if (mode !== "push") {
          document.body.style.cssText = documentBodyCssText;
        }
      }
    }

    if (mode === "push") {
      drawerRef.current.style.cssText = "transition: margin 300ms cubic-bezier(0.7, 0.3, 0.1, 1) 0s";
      var marginStr = {
        left: "margin: 0 0 0 ".concat(getSizeValue(size)),
        right: "margin: 0 0 0 -".concat(getSizeValue(size)),
        top: "margin: ".concat(getSizeValue(size), " 0 0 0"),
        bottom: "margin: -".concat(getSizeValue(size), " 0 0 0")
      }[placement];

      if (visible) {
        drawerRef.current.style.cssText += marginStr;
      } else {
        drawerRef.current.style.cssText = drawerRef.current.style.cssText.replace(/margin:.+;/, "");
      }
    }

    if (contentWrapperRef.current) {
      containerRef.current.focus();
      contentWrapperRef.current.style.transform = transform;
    }
  }, [attach, mode, transform, visible, placement, size]);

  function onMaskClick(e) {
    onOverlayClick === null || onOverlayClick === void 0 ? void 0 : onOverlayClick({
      e: e
    });
    closeOnOverlayClick && (onClose === null || onClose === void 0 ? void 0 : onClose({
      e: e,
      trigger: CloseTriggerType.CLICK_OVERLAY
    }));
  }

  function onClickCloseBtn(e) {
    onCloseBtnClick === null || onCloseBtnClick === void 0 ? void 0 : onCloseBtnClick({
      e: e
    });
    onClose === null || onClose === void 0 ? void 0 : onClose({
      e: e,
      trigger: CloseTriggerType.CLICK_CLOSE_BTN
    });
  }

  function onKeyDownEsc(e) {
    if (e.key !== "Escape") return;
    onEscKeydown === null || onEscKeydown === void 0 ? void 0 : onEscKeydown({
      e: e
    });
    closeOnEscKeydown && (onClose === null || onClose === void 0 ? void 0 : onClose({
      e: e,
      trigger: CloseTriggerType.KEYDOWN_ESC
    }));
  }

  function onCancelClick(e) {
    onCancel === null || onCancel === void 0 ? void 0 : onCancel({
      e: e
    });
    onClose === null || onClose === void 0 ? void 0 : onClose({
      e: e,
      trigger: CloseTriggerType.CLICK_CANCEL_BTN
    });
  }

  function onConfirmClick(e) {
    onConfirm === null || onConfirm === void 0 ? void 0 : onConfirm({
      e: e
    });
  }

  function onTransitionEnd() {
    if (!visible) {
      document.body.style.display = "none";
      document.body.style.overflow = "";
      document.body.style.width = "";
      document.body.style.margin = "";
      document.body.style.display = "block";
      destroyOnClose && setIsDestroyOnClose(true);
    }
  }

  var drawerClass = classNames__default["default"](prefixCls, className, "".concat(prefixCls, "--").concat(placement), (_classnames = {}, defineProperty._defineProperty(_classnames, "".concat(prefixCls, "--open"), visible), defineProperty._defineProperty(_classnames, "".concat(prefixCls, "--attach"), showInAttachedElement), defineProperty._defineProperty(_classnames, "".concat(prefixCls, "--without-mask"), !showOverlay), _classnames));
  var contentWrapperClass = classNames__default["default"]("".concat(prefixCls, "__content-wrapper"), "".concat(prefixCls, "__content-wrapper--").concat(placement));
  var contentWrapperStyle = {
    transform: visible ? "translateX(0)" : void 0,
    width: ["left", "right"].includes(placement) ? getSizeValue(size) : "",
    height: ["top", "bottom"].includes(placement) ? getSizeValue(size) : ""
  };

  function getFooter() {
    if (footer !== true) return footer;
    var defaultCancelBtn = /* @__PURE__ */React__default["default"].createElement(button_index.Button, {
      theme: "default",
      onClick: onCancelClick,
      className: "".concat(prefixCls, "__cancel")
    }, cancelText);
    var defaultConfirmBtn = /* @__PURE__ */React__default["default"].createElement(button_index.Button, {
      theme: "primary",
      onClick: onConfirmClick,
      className: "".concat(prefixCls, "__confirm")
    }, confirmText);
    var renderCancelBtn = cancelBtn && /*#__PURE__*/React__default["default"].isValidElement(cancelBtn) ? cancelBtn : defaultCancelBtn;
    var renderConfirmBtn = confirmBtn && /*#__PURE__*/React__default["default"].isValidElement(confirmBtn) ? confirmBtn : defaultConfirmBtn;
    var footerStyle = {
      display: "flex",
      justifyContent: placement === "right" ? "flex-start" : "flex-end"
    };
    return /* @__PURE__ */React__default["default"].createElement("div", {
      style: footerStyle
    }, placement === "right" && renderConfirmBtn, renderCancelBtn, placement !== "right" && renderConfirmBtn);
  }

  var renderOverlay = showOverlay && /* @__PURE__ */React__default["default"].createElement("div", {
    className: "".concat(prefixCls, "__mask"),
    onClick: onMaskClick
  });
  var renderCloseBtn = closeBtn && /* @__PURE__ */React__default["default"].createElement("div", {
    onClick: onClickCloseBtn,
    className: "".concat(prefixCls, "__close-btn")
  }, closeIcon);
  var renderHeader = header && /* @__PURE__ */React__default["default"].createElement("div", {
    className: "".concat(prefixCls, "__header")
  }, header);
  var renderBody = /* @__PURE__ */React__default["default"].createElement("div", {
    className: "".concat(prefixCls, "__body")
  }, body || children);
  var renderFooter = footer && /* @__PURE__ */React__default["default"].createElement("div", {
    className: "".concat(prefixCls, "__footer")
  }, getFooter());
  if (isDestroyOnClose && !visible) return null;
  return /* @__PURE__ */React__default["default"].createElement(drawer_DrawerWrapper["default"], {
    attach: attach,
    ref: drawerRef
  }, /* @__PURE__ */React__default["default"].createElement("div", {
    ref: containerRef,
    className: drawerClass,
    style: _objectSpread({
      zIndex: zIndex
    }, style),
    tabIndex: 0,
    onKeyDown: onKeyDownEsc,
    onTransitionEnd: onTransitionEnd
  }, renderOverlay, /* @__PURE__ */React__default["default"].createElement("div", {
    ref: contentWrapperRef,
    className: contentWrapperClass,
    style: contentWrapperStyle
  }, renderCloseBtn, renderHeader, renderBody, renderFooter)));
});
Drawer.defaultProps = {
  attach: "",
  closeBtn: true,
  closeOnOverlayClick: true,
  closeOnEscKeydown: true,
  size: "small",
  placement: "right",
  mode: "overlay",
  destroyOnClose: false,
  showOverlay: true,
  header: void 0,
  footer: true
};
Drawer.displayName = "Drawer";

exports.CloseTriggerType = CloseTriggerType;
exports["default"] = Drawer;
//# sourceMappingURL=Drawer.js.map
