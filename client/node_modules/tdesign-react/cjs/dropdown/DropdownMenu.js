/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var toConsumableArray = require('../_chunks/dep-8f3deb2a.js');
var slicedToArray = require('../_chunks/dep-fa36e79f.js');
var React = require('react');
var classNames = require('classnames');
var _util_useConfig = require('../_util/useConfig.js');
var dropdown_DropdownItem = require('./DropdownItem.js');
require('../_chunks/dep-045b87c1.js');
require('../config-provider/ConfigContext.js');
require('../locale/zh_CN.js');
require('../_chunks/dep-449daca3.js');
require('tdesign-icons-react');
require('../_util/useRipple.js');
require('../_util/setStyle.js');
require('../_util/helper.js');
require('../_chunks/dep-e03ca79d.js');
require('../_chunks/dep-3ca698ba.js');
require('../_chunks/dep-7a0cfc4c.js');
require('../_chunks/dep-0e3f1753.js');
require('../_chunks/dep-a7666a95.js');
require('../_chunks/dep-9125a75e.js');
require('../_chunks/dep-9c74d22d.js');
require('../_chunks/dep-48870ae5.js');
require('../_chunks/dep-bc486aab.js');
require('../_chunks/dep-c7adf4af.js');
require('../divider/index.js');
require('../divider/Divider.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);

var DropdownMenu = function DropdownMenu(props) {
  var _props$options = props.options,
      options = _props$options === void 0 ? [] : _props$options,
      _props$maxHeight = props.maxHeight,
      maxHeight = _props$maxHeight === void 0 ? 300 : _props$maxHeight,
      _props$maxColumnWidth = props.maxColumnWidth,
      maxColumnWidth = _props$maxColumnWidth === void 0 ? 100 : _props$maxColumnWidth,
      _props$minColumnWidth = props.minColumnWidth,
      minColumnWidth = _props$minColumnWidth === void 0 ? 10 : _props$minColumnWidth;

  var _useState = React.useState(""),
      _useState2 = slicedToArray._slicedToArray(_useState, 2),
      path = _useState2[0],
      setPath = _useState2[1];

  var _useConfig = _util_useConfig["default"](),
      classPrefix = _useConfig.classPrefix;

  var dropdownMenuClass = "".concat(classPrefix, "-dropdown__menu");

  var isActive = function isActive(item, pathPrefix) {
    var excludeSelf = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    var itemPath = "".concat(pathPrefix, "/").concat(item.value);

    if (excludeSelf && path === itemPath) {
      return false;
    }

    return path.indexOf(itemPath) === 0;
  };

  var handleHoverItem = function handleHoverItem(path2) {
    setPath(path2);
  };

  var handleItemClick = function handleItemClick(data, context, idx) {
    var _options$idx, _options$idx$onClick;

    (_options$idx = options[idx]) === null || _options$idx === void 0 ? void 0 : (_options$idx$onClick = _options$idx.onClick) === null || _options$idx$onClick === void 0 ? void 0 : _options$idx$onClick.call(_options$idx, data, context);
    props.onClick(data, context);
  };

  var renderDropdownColumn = function renderDropdownColumn(children, showSubmenu, pathPrefix) {
    var menuClass = ["".concat(dropdownMenuClass, "-column"), "narrow-scrollbar", {
      submenu__visible: showSubmenu
    }];
    return /* @__PURE__ */React__default["default"].createElement("div", {
      key: "/".concat(pathPrefix),
      className: classNames__default["default"](menuClass),
      style: {
        maxHeight: "".concat(maxHeight, "px")
      }
    }, children.map(function (item, idx) {
      return /* @__PURE__ */React__default["default"].createElement(dropdown_DropdownItem["default"], {
        key: idx,
        disabled: item.disabled,
        active: isActive(item, pathPrefix) || item.active,
        value: item.value,
        content: item.content,
        divider: item.divider,
        hasChildren: item.children && item.children.length > 0,
        path: "".concat(pathPrefix, "/").concat(item.value),
        maxColumnWidth: maxColumnWidth,
        minColumnWidth: minColumnWidth,
        onClick: function onClick(data, context) {
          return handleItemClick(data, context, idx);
        },
        onHover: handleHoverItem
      });
    }));
  };

  var dropdownItems = function dropdownItems(options2) {
    var _activeItem$children;

    var pathPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
    var columns = [];
    var activeItem = options2.find(function (item) {
      return isActive(item, pathPrefix, false);
    });
    columns.push(renderDropdownColumn(options2, !!activeItem, pathPrefix));

    if (activeItem !== null && activeItem !== void 0 && (_activeItem$children = activeItem.children) !== null && _activeItem$children !== void 0 && _activeItem$children.length) {
      columns.push.apply(columns, toConsumableArray._toConsumableArray(dropdownItems(activeItem.children, "".concat(pathPrefix, "/").concat(activeItem.value))));
    }

    return columns;
  };

  var renderDropdownItems = dropdownItems(options);
  return /* @__PURE__ */React__default["default"].createElement("div", {
    className: dropdownMenuClass
  }, renderDropdownItems);
};

exports["default"] = DropdownMenu;
//# sourceMappingURL=DropdownMenu.js.map
