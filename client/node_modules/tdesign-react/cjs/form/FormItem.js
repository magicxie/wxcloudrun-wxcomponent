/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _typeof = require('../_chunks/dep-a7666a95.js');
var defineProperty = require('../_chunks/dep-449daca3.js');
var slicedToArray = require('../_chunks/dep-fa36e79f.js');
var React = require('react');
var classNames = require('classnames');
var tdesignIconsReact = require('tdesign-icons-react');
var _util_useConfig = require('../_util/useConfig.js');
var checkbox_index = require('../checkbox/index.js');
var upload_index = require('../upload/index.js');
var tag_index = require('../tag/index.js');
var form_formModel = require('./formModel.js');
var form_FormContext = require('./FormContext.js');
require('../_chunks/dep-045b87c1.js');
require('../config-provider/ConfigContext.js');
require('../locale/zh_CN.js');
require('../_chunks/dep-8027cfc6.js');
require('../_util/forwardRefWithStatics.js');
require('hoist-non-react-statics');
require('../common/Check.js');
require('../_chunks/dep-e03ca79d.js');
require('../_util/helper.js');
require('../_chunks/dep-3ca698ba.js');
require('../_chunks/dep-7a0cfc4c.js');
require('../_chunks/dep-0e3f1753.js');
require('../_chunks/dep-9125a75e.js');
require('../_chunks/dep-9c74d22d.js');
require('../_chunks/dep-48870ae5.js');
require('../_chunks/dep-bc486aab.js');
require('../_chunks/dep-c7adf4af.js');
require('../_util/useDefault.js');
require('../_util/noop.js');
require('../_chunks/dep-f0639562.js');
require('../upload/upload.js');
require('../_chunks/dep-8f3deb2a.js');
require('../_chunks/dep-b000fdae.js');
require('../_chunks/dep-72f8673c.js');
require('../_chunks/dep-c82d4aac.js');
require('../_chunks/dep-72511bfe.js');
require('../_chunks/dep-07d4a79b.js');
require('../_chunks/dep-fb89215e.js');
require('../_chunks/dep-69abf228.js');
require('../_chunks/dep-20e76bfc.js');
require('../_chunks/dep-1bafebb1.js');
require('../_chunks/dep-735b841a.js');
require('../_chunks/dep-c5449fbe.js');
require('../_chunks/dep-f445e9bb.js');
require('../_chunks/dep-66fbd01b.js');
require('../_chunks/dep-4f605641.js');
require('../_chunks/dep-6681bc7b.js');
require('../_chunks/dep-c57ef5b6.js');
require('../_chunks/dep-4a02b995.js');
require('../_chunks/dep-7d00ab60.js');
require('../_chunks/dep-af921283.js');
require('../_chunks/dep-59b9b071.js');
require('../_chunks/dep-942a7aba.js');
require('../_chunks/dep-5e46865d.js');
require('../_chunks/dep-8bb9b7ba.js');
require('../dialog/index.js');
require('../dialog/Dialog.js');
require('../_chunks/dep-0705da20.js');
require('../locale/LocalReceiver.js');
require('../button/index.js');
require('../button/Button.js');
require('../_util/useRipple.js');
require('../_util/setStyle.js');
require('../loading/index.js');
require('../loading/loading.js');
require('../_util/dom.js');
require('raf');
require('../_util/easing.js');
require('../common/Portal.js');
require('react-dom');
require('../loading/gradient.js');
require('../loading/plugin.js');
require('../dialog/RenderDialog.js');
require('react-transition-group');
require('../_util/useSetState.js');
require('../dialog/plugin.js');
require('../upload/dragger.js');
require('../upload/themes/dragger-progress.js');
require('../upload/util.js');
require('../upload/upload-trigger.js');
require('../upload/tips.js');
require('../_common/js/upload/xhr.js');
require('../upload/themes/single-file.js');
require('../upload/themes/image-card.js');
require('../upload/boolean-render.js');
require('../upload/themes/flow-list/index.js');
require('../upload/themes/flow-list/img-list.js');
require('../upload/themes/flow-list/file-list.js');
require('../upload/hooks/useDefaultValue.js');
require('../tag/Tag.js');
require('../tag/CheckTag.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);

/**
 * Checks if `value` is `null` or `undefined`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
 * @example
 *
 * _.isNil(null);
 * // => true
 *
 * _.isNil(void 0);
 * // => true
 *
 * _.isNil(NaN);
 * // => false
 */

function isNil(value) {
  return value == null;
}

var isNil_1 = isNil;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { defineProperty._defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var ctrlKeyMap = /* @__PURE__ */new Map();
ctrlKeyMap.set(checkbox_index.Checkbox, "checked");
ctrlKeyMap.set(tag_index.Tag.CheckTag, "checked");
ctrlKeyMap.set(upload_index.Upload, "file");
var FormItem = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _classNames, _classNames2, _classNames3;

  var _useConfig = _util_useConfig["default"](),
      classPrefix = _useConfig.classPrefix;

  var children = props.children,
      label = props.label,
      name = props.name,
      help = props.help,
      statusIconFromProp = props.statusIcon,
      rulesFromProp = props.rules,
      labelWidth = props.labelWidth,
      labelAlign = props.labelAlign,
      initialData = props.initialData,
      className = props.className,
      formItemStyle = props.style;

  var _useFormContext = form_FormContext.useFormContext(),
      colon = _useFormContext.colon,
      requiredMark = _useFormContext.requiredMark,
      layout = _useFormContext.layout,
      labelAlignFromContext = _useFormContext.labelAlign,
      labelWidthFromContext = _useFormContext.labelWidth,
      showErrorMessage = _useFormContext.showErrorMessage,
      resetType = _useFormContext.resetType,
      rulesFromContext = _useFormContext.rules,
      statusIconFromContext = _useFormContext.statusIcon,
      formItemsRef = _useFormContext.formItemsRef,
      onFormItemValueChange = _useFormContext.onFormItemValueChange;

  var _useState = React.useState([]),
      _useState2 = slicedToArray._slicedToArray(_useState, 2),
      errorList = _useState2[0],
      setErrorList = _useState2[1];

  var _useState3 = React.useState([]),
      _useState4 = slicedToArray._slicedToArray(_useState3, 2),
      successList = _useState4[0],
      setSuccessList = _useState4[1];

  var _useState5 = React.useState("not"
  /* TO_BE_VALIDATED */
  ),
      _useState6 = slicedToArray._slicedToArray(_useState5, 2),
      verifyStatus = _useState6[0],
      setVerifyStatus = _useState6[1];

  var _useState7 = React.useState(false),
      _useState8 = slicedToArray._slicedToArray(_useState7, 2),
      resetValidating = _useState8[0],
      setResetValidating = _useState8[1];

  var _useState9 = React.useState(false),
      _useState10 = slicedToArray._slicedToArray(_useState9, 2),
      needResetField = _useState10[0],
      setNeedResetField = _useState10[1];

  var _useState11 = React.useState(initialData),
      _useState12 = slicedToArray._slicedToArray(_useState11, 2),
      formValue = _useState12[0],
      setFormValue = _useState12[1];

  var currentFormItemRef = React.useRef();
  var innerFormItemsRef = React.useRef([]);
  var shouldValidate = React.useRef(null);
  var isMounted = React.useRef(false);
  var innerRules = rulesFromContext && rulesFromContext[name] || rulesFromProp || [];
  var innerLabelWidth = isNil_1(labelWidth) ? labelWidthFromContext : labelWidth;
  var innerLabelAlign = isNil_1(labelAlign) ? labelAlignFromContext : labelAlign;
  var formItemClass = classNames__default["default"](className, "".concat(classPrefix, "-form__item"), (_classNames = {}, defineProperty._defineProperty(_classNames, "".concat(classPrefix, "-form-item__").concat(name), name), defineProperty._defineProperty(_classNames, "".concat(classPrefix, "-form__item-with-help"), help), defineProperty._defineProperty(_classNames, "".concat(classPrefix, "-form__item-with-extra"), renderTipsInfo()), _classNames));
  var formItemLabelClass = classNames__default["default"]("".concat(classPrefix, "-form__label"), (_classNames2 = {}, defineProperty._defineProperty(_classNames2, "".concat(classPrefix, "-form__label--required"), requiredMark && innerRules.filter(function (rule) {
    return rule.required;
  }).length > 0), defineProperty._defineProperty(_classNames2, "".concat(classPrefix, "-form__label--colon"), colon && label), defineProperty._defineProperty(_classNames2, "".concat(classPrefix, "-form__label--top"), innerLabelAlign === "top" || !innerLabelWidth), defineProperty._defineProperty(_classNames2, "".concat(classPrefix, "-form__label--left"), innerLabelAlign === "left" && innerLabelWidth), defineProperty._defineProperty(_classNames2, "".concat(classPrefix, "-form__label--right"), innerLabelAlign === "right" && innerLabelWidth), _classNames2));
  var contentClasses = classNames__default["default"]("".concat(classPrefix, "-form__controls"), (_classNames3 = {}, defineProperty._defineProperty(_classNames3, "".concat(classPrefix, "-is-success"), showErrorMessage && verifyStatus === "success"), defineProperty._defineProperty(_classNames3, "".concat(classPrefix, "-is-warning"), showErrorMessage && errorList.length && errorList[0].type === "warning"), defineProperty._defineProperty(_classNames3, "".concat(classPrefix, "-is-error"), showErrorMessage && errorList.length && errorList[0].type === "error"), _classNames3));
  var labelStyle = {};
  var contentStyle = {};

  if (innerLabelWidth && innerLabelAlign !== "top") {
    if (typeof innerLabelWidth === "number") {
      labelStyle = {
        width: "".concat(innerLabelWidth, "px")
      };
      contentStyle = {
        marginLeft: layout !== "inline" ? "".concat(innerLabelWidth, "px") : ""
      };
    } else {
      labelStyle = {
        width: innerLabelWidth
      };
      contentStyle = {
        marginLeft: layout !== "inline" ? innerLabelWidth : ""
      };
    }
  }

  function renderTipsInfo() {
    var helpNode = null;
    if (help) helpNode = /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-form__help")
    }, help);

    if (showErrorMessage && errorList.length && errorList[0].message) {
      return /* @__PURE__ */React__default["default"].createElement("p", {
        className: "".concat(classPrefix, "-input__extra")
      }, errorList[0].message);
    }

    if (successList.length) {
      return /* @__PURE__ */React__default["default"].createElement("p", {
        className: "".concat(classPrefix, "-input__extra")
      }, successList[0].message);
    }

    return helpNode;
  }

  var renderSuffixIcon = function renderSuffixIcon() {
    if (statusIconFromProp === false) return null;

    var resultIcon = function resultIcon(iconSlot) {
      return /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(classPrefix, "-form__status")
      }, iconSlot);
    };

    var getDefaultIcon = function getDefaultIcon() {
      var iconMap = {
        success: /* @__PURE__ */React__default["default"].createElement(tdesignIconsReact.CheckCircleFilledIcon, {
          size: "25px"
        }),
        error: /* @__PURE__ */React__default["default"].createElement(tdesignIconsReact.CloseCircleFilledIcon, {
          size: "25px"
        }),
        warning: /* @__PURE__ */React__default["default"].createElement(tdesignIconsReact.ErrorCircleFilledIcon, {
          size: "25px"
        })
      };

      if (verifyStatus === "success"
      /* SUCCESS */
      ) {
        return resultIcon(iconMap[verifyStatus]);
      }

      if (errorList && errorList[0]) {
        var type = errorList[0].type || "error";
        return resultIcon(iconMap[type]);
      }

      return null;
    };

    if ( /*#__PURE__*/React__default["default"].isValidElement(statusIconFromProp)) {
      return resultIcon( /*#__PURE__*/React__default["default"].cloneElement(statusIconFromProp, _objectSpread({
        style: {
          color: "unset"
        }
      }, statusIconFromProp.props)));
    }

    if (statusIconFromContext === true) {
      return getDefaultIcon();
    }

    if ( /*#__PURE__*/React__default["default"].isValidElement(statusIconFromContext)) {
      return resultIcon(statusIconFromProp);
    }

    return null;
  };

  function validate(trigger) {
    if (innerFormItemsRef.current.length) {
      return innerFormItemsRef.current.map(function (innerFormItem) {
        return innerFormItem === null || innerFormItem === void 0 ? void 0 : innerFormItem.validate();
      });
    }

    var rules = trigger === "all" ? innerRules : innerRules.filter(function (item) {
      return (item.trigger || "change") === trigger;
    });
    setResetValidating(true);
    return new Promise(function (resolve) {
      form_formModel.validate(formValue, rules).then(function (r) {
        var filterErrorList = r.filter(function (item) {
          return item.result !== true;
        });
        setErrorList(filterErrorList);
        setSuccessList(r.filter(function (item) {
          return item.result === true && item.message && item.type === "success";
        }));
        var nextVerifyStatus = filterErrorList.length && rules.length ? "fail"
        /* FAIL */
        : "success"
        /* SUCCESS */
        ;

        if (!rules.some(function (rule) {
          return rule.required;
        }) && form_formModel.isValueEmpty(formValue) || !rules.length) {
          nextVerifyStatus = "not"
          /* TO_BE_VALIDATED */
          ;
        }

        setVerifyStatus(nextVerifyStatus);
        needResetField && resetHandler();
        setResetValidating(false);
        resolve(defineProperty._defineProperty({}, name, !filterErrorList.length ? true : r));
      });
    });
  }

  function handleItemBlur() {
    var filterRules = innerRules.filter(function (item) {
      return item.trigger === "blur";
    });
    filterRules.length && validate("blur");
  }

  function getEmptyValue() {
    var type = Object.prototype.toString.call(initialData);
    var emptyValue = "";

    if (type === "[object Array]") {
      emptyValue = [];
    }

    if (type === "[object Object]") {
      emptyValue = {};
    }

    return emptyValue;
  }

  function resetField() {
    if (!name) return;

    if (resetType === "empty") {
      setFormValue(getEmptyValue());
    }

    if (resetType === "initial") {
      setFormValue(initialData);
    }

    if (resetValidating) {
      setNeedResetField(true);
    } else {
      resetHandler();
    }
  }

  function resetHandler() {
    shouldValidate.current = false;
    setNeedResetField(false);
    setErrorList([]);
    setSuccessList([]);
    setVerifyStatus("not"
    /* TO_BE_VALIDATED */
    );
  }

  function setField(field) {
    var value = field.value,
        status = field.status;

    if (typeof status !== "undefined") {
      shouldValidate.current = false;
      setErrorList([]);
      setSuccessList([]);
      setNeedResetField(false);
      setVerifyStatus(status);
    }

    if (typeof value !== "undefined") {
      setFormValue(value);
    }
  }

  React.useEffect(function () {
    if (isMounted.current) {
      if (!name) console.warn("FormItem prop name is required.");
      name && onFormItemValueChange(defineProperty._defineProperty({}, name, formValue));
    }

    if (!shouldValidate.current || !isMounted.current) {
      isMounted.current = true;
      shouldValidate.current = true;
      return;
    }

    var filterRules = innerRules.filter(function (item) {
      return (item.trigger || "change") === "change";
    });
    filterRules.length && validate("change");
  }, [formValue]);
  React.useEffect(function () {
    formItemsRef.current.push(currentFormItemRef);
  }, []);
  React.useImperativeHandle(currentFormItemRef, function () {
    return {
      name: name,
      value: formValue,
      setValue: setFormValue,
      setField: setField,
      validate: validate,
      resetField: resetField
    };
  });
  return /* @__PURE__ */React__default["default"].createElement("div", {
    className: formItemClass,
    style: formItemStyle,
    ref: ref
  }, label && /* @__PURE__ */React__default["default"].createElement("div", {
    className: formItemLabelClass,
    style: labelStyle
  }, /* @__PURE__ */React__default["default"].createElement("label", {
    htmlFor: props === null || props === void 0 ? void 0 : props["for"]
  }, label)), /* @__PURE__ */React__default["default"].createElement("div", {
    className: contentClasses,
    style: contentStyle
  }, /* @__PURE__ */React__default["default"].createElement("div", {
    className: "".concat(classPrefix, "-form__controls-content")
  }, React__default["default"].Children.map(children, function (child, index) {
    if (!child) return null;

    var onChangeFromProps = function onChangeFromProps() {
      return {};
    };

    var onBlurFromProps = function onBlurFromProps() {
      return {};
    };

    var ctrlKey = "value";

    if ( /*#__PURE__*/React__default["default"].isValidElement(child)) {
      var _objectSpread2;

      if (child.type === FormItem) {
        return /*#__PURE__*/React__default["default"].cloneElement(child, {
          ref: function ref(el) {
            if (!el) return;
            innerFormItemsRef.current[index] = el;
          }
        });
      }

      if (typeof child.props.onChange === "function") {
        onChangeFromProps = child.props.onChange;
      }

      if (typeof child.props.onBlur === "function") {
        onBlurFromProps = child.props.onBlur;
      }

      if (_typeof._typeof(child.type) === "object") {
        ctrlKey = ctrlKeyMap.get(child.type) || "value";
      }

      return /*#__PURE__*/React__default["default"].cloneElement(child, _objectSpread(_objectSpread({}, child.props), {}, (_objectSpread2 = {}, defineProperty._defineProperty(_objectSpread2, ctrlKey, formValue), defineProperty._defineProperty(_objectSpread2, "onChange", function onChange(value) {
        onChangeFromProps.call(null, value);
        setFormValue(value);
      }), defineProperty._defineProperty(_objectSpread2, "onBlur", function onBlur(value) {
        onBlurFromProps.call(null, value);
        handleItemBlur();
      }), _objectSpread2)));
    }

    return child;
  }), renderSuffixIcon()), renderTipsInfo()));
});

exports["default"] = FormItem;
//# sourceMappingURL=FormItem.js.map
