/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../_chunks/dep-449daca3.js');
var slicedToArray = require('../_chunks/dep-fa36e79f.js');
var objectWithoutProperties = require('../_chunks/dep-e03ca79d.js');
var React = require('react');
var classNames = require('classnames');
var isObject = require('../_chunks/dep-735b841a.js');
var _util_useConfig = require('../_util/useConfig.js');
var grid_Col = require('./Col.js');
require('../_chunks/dep-045b87c1.js');
require('../_chunks/dep-a7666a95.js');
require('../config-provider/ConfigContext.js');
require('../locale/zh_CN.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);

var _excluded = ["align", "gutter", "justify", "tag", "style", "className", "children"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { defineProperty._defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var calcSize = function calcSize(width) {
  var size = "xs";

  if (width < 768) {
    size = "xs";
  } else if (width >= 768 && width < 992) {
    size = "sm";
  } else if (width >= 992 && width < 1200) {
    size = "md";
  } else if (width >= 1200 && width < 1400) {
    size = "lg";
  } else if (width >= 1400 && width < 1880) {
    size = "xl";
  } else {
    size = "xxl";
  }

  return size;
};

var calcRowStyle = function calcRowStyle(gutter, currentSize) {
  var rowStyle = {};

  if (typeof gutter === "number") {
    Object.assign(rowStyle, {
      marginLeft: "".concat(gutter / -2, "px"),
      marginRight: "".concat(gutter / -2, "px")
    });
  } else if (Array.isArray(gutter) && gutter.length) {
    if (typeof gutter[0] === "number") {
      Object.assign(rowStyle, {
        marginLeft: "".concat(gutter[0] / -2, "px"),
        marginRight: "".concat(gutter[0] / -2, "px")
      });
    }

    if (typeof gutter[1] === "number") {
      Object.assign(rowStyle, {
        rowGap: "".concat(gutter[1], "px")
      });
    }

    if (isObject.isObject_1(gutter[0]) && gutter[0][currentSize] !== void 0) {
      Object.assign(rowStyle, {
        marginLeft: "".concat(gutter[0][currentSize] / -2, "px"),
        marginRight: "".concat(gutter[0][currentSize] / -2, "px")
      });
    }

    if (isObject.isObject_1(gutter[1]) && gutter[1][currentSize] !== void 0) {
      Object.assign(rowStyle, {
        rowGap: "".concat(gutter[1][currentSize], "px")
      });
    }
  } else if (isObject.isObject_1(gutter) && gutter[currentSize]) {
    if (Array.isArray(gutter[currentSize]) && gutter[currentSize].length) {
      Object.assign(rowStyle, {
        marginLeft: "".concat(gutter[currentSize][0] / -2, "px"),
        marginRight: "".concat(gutter[currentSize][0] / -2, "px")
      });
      Object.assign(rowStyle, {
        rowGap: "".concat(gutter[currentSize][1], "px")
      });
    } else {
      Object.assign(rowStyle, {
        marginLeft: "".concat(gutter[currentSize] / -2, "px"),
        marginRight: "".concat(gutter[currentSize] / -2, "px")
      });
    }
  }

  return rowStyle;
};

var Row = function Row(props) {
  var _classNames;

  var _props$align = props.align,
      align = _props$align === void 0 ? "top" : _props$align,
      _props$gutter = props.gutter,
      gutter = _props$gutter === void 0 ? 0 : _props$gutter,
      _props$justify = props.justify,
      justify = _props$justify === void 0 ? "start" : _props$justify,
      _props$tag = props.tag,
      tag = _props$tag === void 0 ? "div" : _props$tag,
      propStyle = props.style,
      className = props.className,
      children = props.children,
      otherRowProps = objectWithoutProperties._objectWithoutProperties(props, _excluded);

  var _useState = React.useState(calcSize(window.innerWidth)),
      _useState2 = slicedToArray._slicedToArray(_useState, 2),
      size = _useState2[0],
      setSize = _useState2[1];

  var updateSize = function updateSize() {
    var currentSize = calcSize(window.innerWidth);

    if (currentSize !== size) {
      setSize(size);
    }
  };

  var _useConfig = _util_useConfig["default"](),
      classPrefix = _useConfig.classPrefix;

  var rowClassNames = classNames__default["default"]("".concat(classPrefix, "-row"), className, (_classNames = {}, defineProperty._defineProperty(_classNames, "".concat(classPrefix, "-row--").concat(justify), true), defineProperty._defineProperty(_classNames, "".concat(classPrefix, "-row--").concat(align), true), _classNames));

  var rowStyle = _objectSpread(_objectSpread({}, calcRowStyle(gutter, size)), propStyle);

  React.useEffect(function () {
    window.addEventListener("resize", updateSize);
    return function () {
      window.removeEventListener("resize", updateSize);
    };
  });
  return /*#__PURE__*/React__default["default"].createElement(tag, _objectSpread({
    className: rowClassNames,
    style: rowStyle
  }, otherRowProps), React__default["default"].Children.map(children, function (child) {
    if (child && child.type === grid_Col["default"]) {
      return /*#__PURE__*/React__default["default"].cloneElement(child, {
        gutter: gutter,
        size: size
      });
    }

    return child;
  }));
};

Row.displayName = "Row";

exports["default"] = Row;
//# sourceMappingURL=Row.js.map
