/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var isInvalidNumber = function isInvalidNumber(number) {
  if (typeof number === "number") {
    return Number.isNaN(number);
  }

  if (!number) {
    return true;
  }

  return !(/^\s*-?\d+(\.\d+)?\s*$/.test(number) || /^\s*-?\d+\.\s*$/.test(number) || /^\s*-?\.\d+\s*$/.test(number));
};
var getNumberPrecision = function getNumberPrecision(number) {
  var numStr = String(number);
  return numStr.includes(".") ? numStr.length - numStr.indexOf(".") - 1 : 0;
};

var multiE = function multiE(s) {
  var m = s.match(/[e]/gi);
  return m === null ? false : m.length > 1;
};

var multiDot = function multiDot(s) {
  var m = s.match(/[.]/g);
  return m === null ? false : m.length > 1;
};

var multiNegative = function multiNegative(s) {
  var m = s.match(/[-]/g);
  return m === null ? false : m.length > 1;
};

var strToNumber = function strToNumber(s) {
  if (["", void 0].includes(s)) {
    return 0;
  }

  var filterVal = s.replace(/[^\d.eEã€‚-]/g, "").replace("\u3002", ".");

  if (multiE(filterVal) || multiDot(filterVal) || multiNegative(filterVal)) {
    filterVal = filterVal.substr(0, filterVal.length - 1);
  }

  return Number(filterVal);
};

exports.getNumberPrecision = getNumberPrecision;
exports.isInvalidNumber = isInvalidNumber;
exports.strToNumber = strToNumber;
//# sourceMappingURL=numberUtils.js.map
