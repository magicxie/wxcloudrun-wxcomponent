/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var toConsumableArray = require('../../_chunks/dep-8f3deb2a.js');
var defineProperty = require('../../_chunks/dep-449daca3.js');
var lodash = require('lodash');
var select_base_OptionGroup = require('../base/OptionGroup.js');
var select_base_Option = require('../base/Option.js');
require('../../_chunks/dep-045b87c1.js');
require('react');
require('classnames');
require('../../_util/useConfig.js');
require('../../config-provider/ConfigContext.js');
require('../../locale/zh_CN.js');
require('../../_chunks/dep-f0639562.js');
require('../../_chunks/dep-0e3f1753.js');
require('../../_chunks/dep-a7666a95.js');
require('../../_chunks/dep-48870ae5.js');
require('../../_chunks/dep-0705da20.js');
require('../../_chunks/dep-9125a75e.js');
require('../../_chunks/dep-af921283.js');
require('../../_chunks/dep-4f605641.js');
require('../../_chunks/dep-9c74d22d.js');
require('../../_chunks/dep-20e76bfc.js');
require('../../_chunks/dep-1bafebb1.js');
require('../../_chunks/dep-735b841a.js');
require('../../_chunks/dep-6681bc7b.js');
require('../../_chunks/dep-7a0cfc4c.js');
require('../../_util/useRipple.js');
require('../../_util/setStyle.js');

function setValueToOptionFormOptionDom(dom, valueToOption, keys) {
  var _valueToOption$value;

  var _dom$props = dom.props,
      value = _dom$props.value,
      label = _dom$props.label,
      children = _dom$props.children;
  valueToOption[value] = (_valueToOption$value = {}, defineProperty._defineProperty(_valueToOption$value, (keys === null || keys === void 0 ? void 0 : keys.value) || "value", value), defineProperty._defineProperty(_valueToOption$value, (keys === null || keys === void 0 ? void 0 : keys.label) || "label", label || children || value), _valueToOption$value);
}

var getValueToOption = function getValueToOption(children, options, keys) {
  var valueToOption = {};

  if (Array.isArray(options)) {
    options.forEach(function (option) {
      valueToOption[lodash.get(option, (keys === null || keys === void 0 ? void 0 : keys.value) || "value")] = option;
    });
    return valueToOption;
  }

  if (lodash.isPlainObject(children)) {
    var name = children.type.name;

    if (name === select_base_Option["default"].name) {
      setValueToOptionFormOptionDom(children, valueToOption, keys);
      return valueToOption;
    }

    if (name === select_base_OptionGroup["default"].name) {
      var groupChildren = children.props.children;

      if (Array.isArray(groupChildren)) {
        groupChildren.forEach(function (item) {
          setValueToOptionFormOptionDom(item, valueToOption, keys);
        });
        return valueToOption;
      }
    }
  }

  if (Array.isArray(children)) {
    children.forEach(function (item) {
      var name = item.type.name;

      if (name === select_base_Option["default"].name) {
        setValueToOptionFormOptionDom(item, valueToOption, keys);
      }

      if (name === select_base_OptionGroup["default"].name) {
        var _groupChildren = item.props.children;

        if (Array.isArray(_groupChildren)) {
          _groupChildren.forEach(function (groupItem) {
            setValueToOptionFormOptionDom(groupItem, valueToOption, keys);
          });
        }
      }
    });
  }

  return valueToOption;
};
var getLabel = function getLabel(children, value, options, keys) {
  var selectedLabel = "";

  if (Array.isArray(options)) {
    options.some(function (option) {
      if ([lodash.get(value, (keys === null || keys === void 0 ? void 0 : keys.value) || "value"), value].includes(option.value)) {
        selectedLabel = option.label;
        return true;
      }

      return false;
    });
    return selectedLabel;
  }

  if (lodash.isPlainObject(children)) {
    selectedLabel = children.props.label;

    if (children.type.name === select_base_OptionGroup["default"].name) {
      var groupChildren = children.props.children;

      if (Array.isArray(groupChildren)) {
        groupChildren.some(function (item) {
          var selectedValue = lodash.isPlainObject(value) ? lodash.get(value, "value") : value;

          if (lodash.isPlainObject(item.props) && item.props.value === selectedValue) {
            selectedLabel = item.props.label || item.props.children;
            return true;
          }

          return false;
        });
      }
    }
  }

  if (Array.isArray(children)) {
    children.some(function (item) {
      var name = item.type.name;

      if (name === select_base_OptionGroup["default"].name) {
        var _groupChildren2 = item.props.children;

        if (Array.isArray(_groupChildren2)) {
          var isSelected = _groupChildren2.some(function (item2) {
            var selectedValue2 = lodash.isPlainObject(value) ? lodash.get(value, "value") : value;

            if (lodash.isPlainObject(item2.props) && item2.props.value === selectedValue2) {
              selectedLabel = item2.props.label || item2.props.children;
              return true;
            }

            return false;
          });

          return isSelected;
        }
      }

      var selectedValue = lodash.isPlainObject(value) ? lodash.get(value, "value") : value;

      if (lodash.isPlainObject(item.props) && item.props.value === selectedValue) {
        selectedLabel = item.props.label || item.props.children;
        return true;
      }

      return false;
    });
  }

  return selectedLabel;
};
var getMultipleTags = function getMultipleTags(values, keys) {
  var tags = values.map(function (item) {
    return {
      label: lodash.get(item, (keys === null || keys === void 0 ? void 0 : keys.label) || "label") || item.toString(),
      value: lodash.get(item, (keys === null || keys === void 0 ? void 0 : keys.value) || "value") || item
    };
  });
  return tags;
};
var getSelectValueArr = function getSelectValueArr(values, activeValue, selected, valueType, keys, objVal) {
  values = Array.isArray(values) ? values : [];

  if (Array.isArray(values)) {
    var currentValues = toConsumableArray._toConsumableArray(values);

    var isValueObj = valueType === "object";

    if (selected) {
      currentValues = currentValues.filter(function (item) {
        if (isValueObj) {
          if (lodash.isPlainObject(activeValue)) {
            return lodash.get(item, (keys === null || keys === void 0 ? void 0 : keys.value) || "value") !== lodash.get(activeValue, "value");
          }

          return lodash.get(item, (keys === null || keys === void 0 ? void 0 : keys.value) || "value") !== activeValue;
        }

        return item !== activeValue;
      });
    } else {
      var item = isValueObj ? objVal : activeValue;
      currentValues.push(item);
    }

    return currentValues;
  }
};

exports.getLabel = getLabel;
exports.getMultipleTags = getMultipleTags;
exports.getSelectValueArr = getSelectValueArr;
exports.getValueToOption = getValueToOption;
//# sourceMappingURL=helper.js.map
