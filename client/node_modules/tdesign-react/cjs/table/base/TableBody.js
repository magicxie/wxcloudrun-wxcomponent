/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../../_chunks/dep-449daca3.js');
var React = require('react');
var isFunction = require('../../_chunks/dep-1bafebb1.js');
var get = require('../../_chunks/dep-af921283.js');
var _util_useConfig = require('../../_util/useConfig.js');
var table_base_TableRow = require('./TableRow.js');
require('../../_chunks/dep-0e3f1753.js');
require('../../_chunks/dep-a7666a95.js');
require('../../_chunks/dep-735b841a.js');
require('../../_chunks/dep-4f605641.js');
require('../../_chunks/dep-9125a75e.js');
require('../../_chunks/dep-9c74d22d.js');
require('../../_chunks/dep-48870ae5.js');
require('../../_chunks/dep-20e76bfc.js');
require('../../_chunks/dep-6681bc7b.js');
require('../../_chunks/dep-7a0cfc4c.js');
require('../../config-provider/ConfigContext.js');
require('../../locale/zh_CN.js');
require('../../_chunks/dep-e03ca79d.js');
require('./TableContext.js');
require('./TableCell.js');
require('../../_chunks/dep-fa36e79f.js');
require('../../_chunks/dep-045b87c1.js');
require('classnames');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { defineProperty._defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var rowEventsMap = {
  onClick: "onRowClick",
  onDoubleClick: "onRowDbClick",
  onMouseOver: "onRowHover",
  onMouseDown: "onRowMousedown",
  onMouseEnter: "onRowMouseenter",
  onMouseLeave: "onRowMouseleave",
  onMouseUp: "onRowMouseup"
};
var TableBody = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _useConfig = _util_useConfig["default"](),
      classPrefix = _useConfig.classPrefix;

  var _props$data = props.data,
      data = _props$data === void 0 ? [] : _props$data,
      rowKey = props.rowKey,
      rowClassName = props.rowClassName,
      expandedRow = props.expandedRow,
      expandOnRowClick = props.expandOnRowClick,
      handleExpandChange = props.handleExpandChange,
      renderExpandRow = props.renderExpandRow,
      rowspanAndColspan = props.rowspanAndColspan;
  var rowSkipTdSpanColIndexsMap = {};
  var isRowspanAndColspanFn = isFunction.isFunction_1(rowspanAndColspan);
  var rowEvents = getRowEvents();
  var rows = data.map(function (row, index) {
    var rowKeyValue = get.get_1(row, rowKey) || index;
    return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, {
      key: rowKeyValue
    }, /* @__PURE__ */React__default["default"].createElement(table_base_TableRow["default"], _objectSpread(_objectSpread({
      record: row,
      rowIndex: index,
      rowKey: rowKey,
      rowClassName: rowClassName,
      expandedRow: expandedRow,
      expandOnRowClick: expandOnRowClick,
      handleExpandChange: handleExpandChange
    }, isRowspanAndColspanFn ? {
      isRowspanAndColspanFn: isRowspanAndColspanFn,
      rowspanAndColspan: rowspanAndColspan,
      rowSkipTdSpanColIndexsMap: rowSkipTdSpanColIndexsMap,
      dataLength: data.length
    } : {}), {}, {
      rowEvents: rowEvents
    })), expandedRow ? renderExpandRow(row, index, rowKeyValue) : null);
  });

  function getRowEvents() {
    var rowEventProps = {};
    Object.keys(rowEventsMap).forEach(function (eventName) {
      var apiEventName = rowEventsMap[eventName];
      var apiEvent = props[apiEventName];

      if (apiEvent) {
        rowEventProps[eventName] = apiEvent;
      }
    });
    return rowEventProps;
  }

  return /* @__PURE__ */React__default["default"].createElement("tbody", {
    ref: ref,
    className: "".concat(classPrefix, "-table__body")
  }, rows);
});

exports["default"] = TableBody;
//# sourceMappingURL=TableBody.js.map
