/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var toConsumableArray = require('../../_chunks/dep-8f3deb2a.js');
var defineProperty = require('../../_chunks/dep-449daca3.js');
var objectWithoutProperties = require('../../_chunks/dep-e03ca79d.js');
var React = require('react');
var isFunction = require('../../_chunks/dep-1bafebb1.js');
var table_base_TableCell = require('./TableCell.js');
require('../../_chunks/dep-045b87c1.js');
require('../../_chunks/dep-0e3f1753.js');
require('../../_chunks/dep-a7666a95.js');
require('../../_chunks/dep-735b841a.js');
require('../../_chunks/dep-fa36e79f.js');
require('classnames');
require('../../_util/useConfig.js');
require('../../config-provider/ConfigContext.js');
require('../../locale/zh_CN.js');
require('./TableContext.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var _excluded = ["children"],
    _excluded2 = ["title", "colKey", "rowSpan", "colSpan", "render"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { defineProperty._defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var TableHeader = function TableHeader(props) {
  var columns = props.columns;
  var columnsDepth = getNodeDepth(columns);
  var trsColumns = getTrsColumns(columns, columnsDepth);

  function getTrsColumns(nodes, columnsDepth2) {
    var currentDepth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    var trsColumns2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
    var trsColumnsNew = trsColumns2;
    nodes.forEach(function (item) {
      var children = item.children,
          rest = objectWithoutProperties._objectWithoutProperties(item, _excluded);

      if (item.children) {
        trsColumnsNew = getTrsColumns(children, columnsDepth2, currentDepth + 1, trsColumnsNew);
      }

      var trIndex = currentDepth - 1;
      var currentTr = trsColumns2[trIndex];

      var _getRowSpanAndColSpan = getRowSpanAndColSpan({
        node: item,
        columnsDepth: columnsDepth2,
        currentDepth: currentDepth
      }),
          rowSpan = _getRowSpanAndColSpan.rowSpan,
          colSpan = _getRowSpanAndColSpan.colSpan;

      var tdIndex = !currentTr ? 0 : currentTr.length;

      var currentTd = _objectSpread(_objectSpread({
        colKey: "tr-".concat(trIndex, "_td-").concat(tdIndex)
      }, rest), {}, {
        rowSpan: rowSpan,
        colSpan: colSpan
      });

      if (!currentTr) {
        trsColumnsNew[trIndex] = [currentTd];
      } else {
        trsColumnsNew[trIndex] = [].concat(toConsumableArray._toConsumableArray(currentTr), [currentTd]);
      }
    });
    return trsColumnsNew;
  }

  function getRowSpanAndColSpan(_ref) {
    var node = _ref.node,
        columnsDepth2 = _ref.columnsDepth,
        currentDepth = _ref.currentDepth;
    var rowSpan = 1;
    var colSpan = 1;

    if (node.children) {
      rowSpan = 1;
      colSpan = getLeafNodeCount(node.children);
    } else {
      rowSpan = columnsDepth2 - currentDepth + 1;
      colSpan = 1;
    }

    return {
      rowSpan: rowSpan,
      colSpan: colSpan
    };
  }

  function getNodeDepth(nodes) {
    var currentDepth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    var depthNew = depth;
    var currentDepthNew = currentDepth;
    nodes === null || nodes === void 0 ? void 0 : nodes.forEach(function (_ref2) {
      var children = _ref2.children;

      if (children) {
        currentDepthNew += 1;

        if (currentDepthNew > depthNew) {
          depthNew = currentDepthNew;
        }

        depthNew = getNodeDepth(children, currentDepthNew, depthNew);
      }
    });
    return depthNew;
  }

  function getLeafNodeCount(nodes) {
    var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var countNew = count;
    nodes.forEach(function (_ref3) {
      var children = _ref3.children;

      if (children) {
        countNew = getLeafNodeCount(children, countNew);
      } else {
        countNew += 1;
      }
    });
    return countNew;
  }

  function getCustomRender(_ref4) {
    var title = _ref4.title,
        render = _ref4.render;

    if (typeof title === "string" || /*#__PURE__*/React.isValidElement(title)) {
      return function () {
        return title;
      };
    }

    if (isFunction.isFunction_1(title)) {
      return title;
    }

    if (isFunction.isFunction_1(render)) {
      return render;
    }

    return function () {
      return null;
    };
  }

  function getIsFirstChildTdSetBorderWidth(_ref5) {
    var trsColumns2 = _ref5.trsColumns,
        rowIndex = _ref5.rowIndex,
        colIndex = _ref5.colIndex;

    if (colIndex === 0 && rowIndex > 0) {
      var preRowColumns = trsColumns2[rowIndex - 1];

      if (preRowColumns[0].rowSpan > 1) {
        return true;
      }
    }

    return false;
  }

  return /* @__PURE__ */React__default["default"].createElement("thead", null, trsColumns.map(function (trsColumnsItem, rowIndex) {
    return /* @__PURE__ */React__default["default"].createElement("tr", {
      key: rowIndex
    }, trsColumnsItem.map(function (column, colIndex) {
      var title = column.title,
          colKey = column.colKey,
          rowSpan = column.rowSpan,
          colSpan = column.colSpan,
          render = column.render,
          rest = objectWithoutProperties._objectWithoutProperties(column, _excluded2);

      var customRender = getCustomRender({
        title: title,
        render: render
      });
      var isFirstChildTdSetBorderWidth = getIsFirstChildTdSetBorderWidth({
        trsColumns: trsColumns,
        rowIndex: rowIndex,
        colIndex: colIndex
      });
      return /* @__PURE__ */React__default["default"].createElement(table_base_TableCell["default"], _objectSpread({
        type: "title",
        key: colKey,
        colKey: colKey,
        colIndex: colIndex,
        customRender: customRender,
        rowSpan: rowSpan,
        colSpan: colSpan,
        isFirstChildTdSetBorderWidth: isFirstChildTdSetBorderWidth
      }, rest));
    }));
  }));
};

exports["default"] = TableHeader;
//# sourceMappingURL=TableHeader.js.map
