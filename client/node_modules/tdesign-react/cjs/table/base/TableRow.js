/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../../_chunks/dep-449daca3.js');
var objectWithoutProperties = require('../../_chunks/dep-e03ca79d.js');
var React = require('react');
var get = require('../../_chunks/dep-af921283.js');
var isFunction = require('../../_chunks/dep-1bafebb1.js');
var table_base_TableContext = require('./TableContext.js');
var table_base_TableCell = require('./TableCell.js');
require('../../_chunks/dep-4f605641.js');
require('../../_chunks/dep-9125a75e.js');
require('../../_chunks/dep-a7666a95.js');
require('../../_chunks/dep-9c74d22d.js');
require('../../_chunks/dep-0e3f1753.js');
require('../../_chunks/dep-48870ae5.js');
require('../../_chunks/dep-20e76bfc.js');
require('../../_chunks/dep-735b841a.js');
require('../../_chunks/dep-6681bc7b.js');
require('../../_chunks/dep-7a0cfc4c.js');
require('../../_chunks/dep-fa36e79f.js');
require('../../_chunks/dep-045b87c1.js');
require('classnames');
require('../../_util/useConfig.js');
require('../../config-provider/ConfigContext.js');
require('../../locale/zh_CN.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var _excluded = ["colKey", "cell", "render"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { defineProperty._defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var TableRow = function TableRow(props) {
  var record = props.record,
      rowClassName = props.rowClassName,
      rowIndex = props.rowIndex,
      rowKey = props.rowKey,
      rowspanAndColspan = props.rowspanAndColspan,
      isRowspanAndColspanFn = props.isRowspanAndColspanFn,
      rowSkipTdSpanColIndexsMap = props.rowSkipTdSpanColIndexsMap,
      dataLength = props.dataLength,
      _props$rowEvents = props.rowEvents,
      rowEvents = _props$rowEvents === void 0 ? {} : _props$rowEvents,
      expandedRow = props.expandedRow,
      expandOnRowClick = props.expandOnRowClick,
      handleExpandChange = props.handleExpandChange;

  var _useTableContext = table_base_TableContext.useTableContext(),
      flattenColumns = _useTableContext.flattenColumns;

  var flattenColumnsLength = flattenColumns === null || flattenColumns === void 0 ? void 0 : flattenColumns.length;
  var baseRow = flattenColumns.map(function (column, colIndex) {
    var colKey = column.colKey,
        cell = column.cell,
        render = column.render,
        restColumnProps = objectWithoutProperties._objectWithoutProperties(column, _excluded);

    var _getRowSpanAndColSpan = getRowSpanAndColSpanAndIsSkipRenderTd({
      isRowspanAndColspanFn: isRowspanAndColspanFn,
      rowspanAndColspan: rowspanAndColspan,
      rowSkipTdSpanColIndexsMap: rowSkipTdSpanColIndexsMap,
      rowIndex: rowIndex,
      colIndex: colIndex,
      col: column,
      row: record
    }),
        isSkipRenderTd = _getRowSpanAndColSpan.isSkipRenderTd,
        rowSpan = _getRowSpanAndColSpan.rowSpan,
        colSpan = _getRowSpanAndColSpan.colSpan,
        isFirstChildTdSetBorderWidth = _getRowSpanAndColSpan.isFirstChildTdSetBorderWidth;

    if (isSkipRenderTd) {
      return null;
    }

    var customRender = getCustomRender({
      record: record,
      colKey: colKey,
      cell: cell,
      render: render
    });
    return /* @__PURE__ */React__default["default"].createElement(table_base_TableCell["default"], _objectSpread({
      key: colKey,
      type: "cell",
      rowIndex: rowIndex,
      colIndex: colIndex,
      record: record,
      colKey: colKey,
      columns: flattenColumns,
      customRender: customRender,
      rowSpan: rowSpan,
      colSpan: colSpan,
      isFirstChildTdSetBorderWidth: isFirstChildTdSetBorderWidth
    }, restColumnProps));
  });
  var classes = rowClassName;

  if (typeof rowClassName === "function") {
    classes = rowClassName({
      row: record,
      rowIndex: rowIndex
    });
  }

  function getCustomRender(_ref) {
    var record2 = _ref.record,
        colKey = _ref.colKey,
        cell = _ref.cell,
        render = _ref.render;

    if (typeof cell === "string" || /*#__PURE__*/React.isValidElement(cell)) {
      return function () {
        return cell;
      };
    }

    if (isFunction.isFunction_1(cell)) {
      return cell;
    }

    if (isFunction.isFunction_1(render)) {
      return render;
    }

    return function () {
      return get.get_1(record2, colKey);
    };
  }

  function getRowSpanAndColSpanAndIsSkipRenderTd(_ref2) {
    var isRowspanAndColspanFn2 = _ref2.isRowspanAndColspanFn,
        rowspanAndColspan2 = _ref2.rowspanAndColspan,
        rowSkipTdSpanColIndexsMap2 = _ref2.rowSkipTdSpanColIndexsMap,
        rowIndex2 = _ref2.rowIndex,
        colIndex = _ref2.colIndex,
        col = _ref2.col,
        row = _ref2.row;
    var rowSpan;
    var colSpan;
    var isSkipRenderTd = false;
    var isFirstChildTdSetBorderWidth = false;

    if (isRowspanAndColspanFn2) {
      var _rowSkipTdSpanColInde;

      var rowspanAndColspanValue = rowspanAndColspan2({
        rowIndex: rowIndex2,
        colIndex: colIndex,
        col: col,
        row: row
      });
      var isRowspanAndColspanValueValid = rowspanAndColspanValue && (rowspanAndColspanValue.rowspan || rowspanAndColspanValue.colspan);

      if (isRowspanAndColspanValueValid) {
        rowSpan = rowspanAndColspanValue.rowspan;
        colSpan = rowspanAndColspanValue.colspan;

        if (colSpan && colSpan > 1 && colSpan < flattenColumnsLength) {
          var minIndex = colIndex + 1;
          var maxIndex = colIndex + colSpan;
          var rowSkipTdSpanColIndexs = getRowSkipTdSpanColIndexs({
            minIndex: minIndex,
            maxIndex: maxIndex,
            rowSkipTdSpanColIndexsMap: rowSkipTdSpanColIndexsMap2,
            rowIndex: rowIndex2
          });
          rowSkipTdSpanColIndexsMap2[rowIndex2] = rowSkipTdSpanColIndexs;
        }

        if (rowSpan && rowSpan > 1 && rowSpan < dataLength) {
          var minRowIndex = rowIndex2 + 1;
          var maxRowIndex = rowIndex2 + rowSpan;
          var _minIndex = colIndex;

          var _maxIndex = colIndex + colSpan;

          Array.from(new Array(maxRowIndex - minRowIndex)).forEach(function (item, index) {
            var skipRowIndex = index + minRowIndex;
            var rowSkipTdSpanColIndexs = getRowSkipTdSpanColIndexs({
              minIndex: _minIndex,
              maxIndex: _maxIndex,
              rowSkipTdSpanColIndexsMap: rowSkipTdSpanColIndexsMap2,
              rowIndex: skipRowIndex
            });
            rowSkipTdSpanColIndexsMap2[skipRowIndex] = rowSkipTdSpanColIndexs;
          });
        }
      }

      isSkipRenderTd = (_rowSkipTdSpanColInde = rowSkipTdSpanColIndexsMap2[rowIndex2]) === null || _rowSkipTdSpanColInde === void 0 ? void 0 : _rowSkipTdSpanColInde.includes(colIndex);
      isFirstChildTdSetBorderWidth = getIsFirstChildTdSetBorderWidth({
        rowSkipTdSpanColIndexsMap: rowSkipTdSpanColIndexsMap2,
        rowIndex: rowIndex2
      });
    }

    return {
      rowSpan: rowSpan,
      colSpan: colSpan,
      isSkipRenderTd: isSkipRenderTd,
      isFirstChildTdSetBorderWidth: isFirstChildTdSetBorderWidth
    };
  }

  function getRowSkipTdSpanColIndexs(_ref3) {
    var minIndex = _ref3.minIndex,
        maxIndex = _ref3.maxIndex,
        rowSkipTdSpanColIndexsMap2 = _ref3.rowSkipTdSpanColIndexsMap,
        rowIndex2 = _ref3.rowIndex;
    var rowSkipTdSpanColIndexs = rowSkipTdSpanColIndexsMap2[rowIndex2] || [];
    Array.from(new Array(maxIndex - minIndex)).forEach(function (item, index) {
      var skipColIndex = index + minIndex;

      if (!rowSkipTdSpanColIndexs.includes(skipColIndex)) {
        rowSkipTdSpanColIndexs.push(skipColIndex);
      }
    });
    return rowSkipTdSpanColIndexs;
  }

  function getIsFirstChildTdSetBorderWidth(_ref4) {
    var rowSkipTdSpanColIndexsMap2 = _ref4.rowSkipTdSpanColIndexsMap,
        rowIndex2 = _ref4.rowIndex;

    if (rowIndex2 > 0) {
      var rowSkipTdSpanColIndexs = rowSkipTdSpanColIndexsMap2 === null || rowSkipTdSpanColIndexsMap2 === void 0 ? void 0 : rowSkipTdSpanColIndexsMap2[rowIndex2];

      if (rowSkipTdSpanColIndexs && rowSkipTdSpanColIndexs[0] === 0) {
        return true;
      }
    }

    return false;
  }

  function getExpandOnClickEvent() {
    if (expandOnRowClick && expandedRow) {
      var apiEvent = rowEvents.onClick;
      var rowKeyValue = get.get_1(record, rowKey) || rowIndex;
      var onClick;

      if (apiEvent) {
        onClick = function onClick(e) {
          apiEvent(e);
          handleExpandChange(record, rowKeyValue);
        };
      } else {
        onClick = function onClick() {
          handleExpandChange(record, rowKeyValue);
        };
      }

      return {
        onClick: onClick
      };
    }

    return {};
  }

  return /* @__PURE__ */React__default["default"].createElement("tr", _objectSpread(_objectSpread({
    className: classes
  }, rowEvents), getExpandOnClickEvent()), baseRow);
};

exports["default"] = TableRow;
//# sourceMappingURL=TableRow.js.map
