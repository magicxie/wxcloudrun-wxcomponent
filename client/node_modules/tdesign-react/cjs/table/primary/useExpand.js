/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var toConsumableArray = require('../../_chunks/dep-8f3deb2a.js');
var slicedToArray = require('../../_chunks/dep-fa36e79f.js');
var React = require('react');
var get = require('../../_chunks/dep-af921283.js');
var configProvider_ConfigContext = require('../../config-provider/ConfigContext.js');
var table_primary_expandBox = require('./expand-box.js');
require('../../_chunks/dep-045b87c1.js');
require('../../_chunks/dep-4f605641.js');
require('../../_chunks/dep-9125a75e.js');
require('../../_chunks/dep-a7666a95.js');
require('../../_chunks/dep-9c74d22d.js');
require('../../_chunks/dep-0e3f1753.js');
require('../../_chunks/dep-48870ae5.js');
require('../../_chunks/dep-20e76bfc.js');
require('../../_chunks/dep-1bafebb1.js');
require('../../_chunks/dep-735b841a.js');
require('../../_chunks/dep-6681bc7b.js');
require('../../_chunks/dep-7a0cfc4c.js');
require('../../locale/zh_CN.js');
require('../../_chunks/dep-449daca3.js');
require('tdesign-icons-react');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var expandedColKey = "expanded-icon-cell";

function useExpand(props) {
  var columns = props.columns,
      rowKey = props.rowKey,
      defaultExpandedRowKeys = props.defaultExpandedRowKeys,
      expandedRowKeys = props.expandedRowKeys,
      expandedRow = props.expandedRow,
      onExpandChange = props.onExpandChange,
      _props$expandIcon = props.expandIcon,
      expandIcon = _props$expandIcon === void 0 ? true : _props$expandIcon,
      _props$expandOnRowCli = props.expandOnRowClick,
      expandOnRowClick = _props$expandOnRowCli === void 0 ? false : _props$expandOnRowCli;

  var _useContext = React.useContext(configProvider_ConfigContext["default"]),
      classPrefix = _useContext.classPrefix;

  var isControlled = typeof expandedRowKeys !== "undefined";

  var _useState = React.useState(expandedRowKeys || defaultExpandedRowKeys || []),
      _useState2 = slicedToArray._slicedToArray(_useState, 2),
      innerExpandRowKeys = _useState2[0],
      setThisExpandRowKeys = _useState2[1];

  React.useEffect(function () {
    if (Array.isArray(expandedRowKeys)) {
      setThisExpandRowKeys(toConsumableArray._toConsumableArray(expandedRowKeys));
    }
  }, [expandedRowKeys]);

  var transformedExpandColumnsFun = function transformedExpandColumnsFun() {
    return expandedRow ? [{
      colKey: expandedColKey,
      width: 25,
      className: ["".concat(classPrefix, "-table__expandable-icon-cell")],
      cell: function cell(_ref) {
        var row = _ref.row;
        return renderExpandIconCell({
          row: row
        });
      }
    }].concat(toConsumableArray._toConsumableArray(columns)) : columns;
  };

  var transformedExpandColumns = transformedExpandColumnsFun();

  function renderExpandIconCell(_ref2) {
    var _ref2$row = _ref2.row,
        row = _ref2$row === void 0 ? {} : _ref2$row;
    var rowKeyValue = get.get_1(row, rowKey);

    if (!Array.isArray(innerExpandRowKeys)) {
      console.error("ExpandedRowKeys type error");
      return;
    }

    return /* @__PURE__ */React__default["default"].createElement(table_primary_expandBox["default"], {
      expanded: innerExpandRowKeys === null || innerExpandRowKeys === void 0 ? void 0 : innerExpandRowKeys.includes(rowKeyValue),
      row: row,
      rowKeyValue: rowKeyValue,
      expandIcon: expandIcon,
      expandOnRowClick: expandOnRowClick,
      handleExpandChange: handleExpandChange
    });
  }

  function handleExpandChange(row, rowKeyValue) {
    var innerExpandRowKeysNew;
    var isExpanded = innerExpandRowKeys === null || innerExpandRowKeys === void 0 ? void 0 : innerExpandRowKeys.includes(rowKeyValue);

    if (isExpanded) {
      innerExpandRowKeysNew = innerExpandRowKeys.filter(function (item) {
        return item !== rowKeyValue;
      });
    } else {
      innerExpandRowKeysNew = [].concat(toConsumableArray._toConsumableArray(innerExpandRowKeys), [rowKeyValue]);
    }

    if (!isControlled) {
      setThisExpandRowKeys(toConsumableArray._toConsumableArray(innerExpandRowKeysNew));
    }

    typeof onExpandChange === "function" && onExpandChange(innerExpandRowKeysNew, {
      expandedRowData: row
    });
  }

  function renderExpandRow(row, index, rowKeyValue) {
    var _innerExpandRowKeys$i;

    return /* @__PURE__ */React__default["default"].createElement("tr", {
      className: "".concat(classPrefix, "-table__expanded-cell"),
      style: innerExpandRowKeys !== null && innerExpandRowKeys !== void 0 && (_innerExpandRowKeys$i = innerExpandRowKeys.includes) !== null && _innerExpandRowKeys$i !== void 0 && _innerExpandRowKeys$i.call(innerExpandRowKeys, rowKeyValue) ? {} : {
        display: "none"
      }
    }, /* @__PURE__ */React__default["default"].createElement("td", {
      colSpan: transformedExpandColumns === null || transformedExpandColumns === void 0 ? void 0 : transformedExpandColumns.length
    }, expandedRow && expandedRow({
      row: row,
      index: index
    })));
  }

  return [transformedExpandColumns, handleExpandChange, renderExpandRow];
}

exports["default"] = useExpand;
//# sourceMappingURL=useExpand.js.map
