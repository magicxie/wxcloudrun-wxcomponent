/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../_chunks/dep-449daca3.js');
var slicedToArray = require('../_chunks/dep-fa36e79f.js');
var React = require('react');
var classNames = require('classnames');
var _util_useConfig = require('../_util/useConfig.js');
require('../_chunks/dep-045b87c1.js');
require('../config-provider/ConfigContext.js');
require('../locale/zh_CN.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);

var TabBar = function TabBar(props) {
  var _classNames;

  var tabPosition = props.tabPosition,
      activeId = props.activeId,
      containerRef = props.containerRef;

  var _useConfig = _util_useConfig["default"](),
      classPrefix = _useConfig.classPrefix;

  var _useState = React.useState({}),
      _useState2 = slicedToArray._slicedToArray(_useState, 2),
      barStyle = _useState2[0],
      setBarStyle = _useState2[1];

  var tabsClassPrefix = "".concat(classPrefix, "-tabs");

  var computeStyle = function computeStyle(_ref) {
    var tabPosition2 = _ref.tabPosition,
        activeId2 = _ref.activeId;
    var isHorizontal = ["bottom", "top"].includes(tabPosition2);
    var transformPosition = isHorizontal ? "translateX" : "translateY";
    var itemProp = isHorizontal ? "width" : "height";
    var barBorderProp = isHorizontal ? "width" : "height";
    var offset = 0;

    if (containerRef.current) {
      var itemsRef = containerRef.current.querySelectorAll(".t-tabs__nav-item");

      if (itemsRef.length - 1 >= activeId2) {
        itemsRef.forEach(function (item, itemIndex) {
          if (itemIndex < activeId2) {
            offset += Number(getComputedStyle(item)[itemProp].replace("px", ""));
          }
        });
        var computedItem = itemsRef[activeId2];

        if (!computedItem) {
          setBarStyle(defineProperty._defineProperty({
            transform: "".concat(transformPosition, "(", 0, "px)")
          }, barBorderProp, 0));
          return;
        }

        var itemPropValue = getComputedStyle(computedItem)[itemProp];
        setBarStyle(defineProperty._defineProperty({
          transform: "".concat(transformPosition, "(").concat(offset, "px)")
        }, barBorderProp, itemPropValue));
      }
    }
  };

  React.useEffect(function () {
    computeStyle({
      tabPosition: tabPosition,
      activeId: activeId
    });
  }, [tabPosition, activeId]);
  return /* @__PURE__ */React__default["default"].createElement("div", {
    className: classNames__default["default"]((_classNames = {}, defineProperty._defineProperty(_classNames, "".concat(tabsClassPrefix, "__bar"), true), defineProperty._defineProperty(_classNames, "t-is-".concat(tabPosition), true), _classNames)),
    style: barStyle
  });
};

TabBar.displayName = "TabBar";

exports["default"] = TabBar;
//# sourceMappingURL=TabBar.js.map
