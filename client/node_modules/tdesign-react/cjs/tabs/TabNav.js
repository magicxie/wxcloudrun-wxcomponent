/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../_chunks/dep-449daca3.js');
var slicedToArray = require('../_chunks/dep-fa36e79f.js');
var React = require('react');
var classNames = require('classnames');
var tdesignIconsReact = require('tdesign-icons-react');
var _util_noop = require('../_util/noop.js');
var tabs_useTabClass = require('./useTabClass.js');
var tabs_TabNavItem = require('./TabNavItem.js');
var tabs_TabBar = require('./TabBar.js');
require('../_chunks/dep-045b87c1.js');
require('../_util/useConfig.js');
require('../config-provider/ConfigContext.js');
require('../locale/zh_CN.js');
require('../_util/useRipple.js');
require('../_util/setStyle.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { defineProperty._defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var TabNav = function TabNav(props) {
  var _props$placement = props.placement,
      placement = _props$placement === void 0 ? "top" : _props$placement,
      itemList = props.itemList,
      _props$tabClick = props.tabClick,
      tabClick = _props$tabClick === void 0 ? _util_noop["default"] : _props$tabClick,
      theme = props.theme,
      addable = props.addable,
      onAdd = props.onAdd,
      _props$size = props.size,
      size = _props$size === void 0 ? "medium" : _props$size,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      _props$onRemove = props.onRemove,
      onRemove = _props$onRemove === void 0 ? _util_noop["default"] : _props$onRemove,
      _props$onChange = props.onChange,
      onChange = _props$onChange === void 0 ? _util_noop["default"] : _props$onChange,
      activeValue = props.activeValue;
  var isCard = theme === "card";

  var _useTabClass = tabs_useTabClass.useTabClass(),
      tdTabsClassGenerator = _useTabClass.tdTabsClassGenerator,
      tdClassGenerator = _useTabClass.tdClassGenerator,
      tdSizeClassGenerator = _useTabClass.tdSizeClassGenerator;

  var navContainerRef = React.useRef(null);
  var getIndex = React.useCallback(function (value) {
    var index = 0;
    itemList.forEach(function (v, i) {
      if (v.value === value) {
        index = i;
      }
    });
    return index;
  }, [itemList]);

  var _useState = React.useState(getIndex(activeValue)),
      _useState2 = slicedToArray._slicedToArray(_useState, 2),
      activeIndex = _useState2[0],
      setActiveIndex = _useState2[1];

  React.useEffect(function () {
    setActiveIndex(getIndex(activeValue));
  }, [activeValue, getIndex]);

  var _useState3 = React.useState(false),
      _useState4 = slicedToArray._slicedToArray(_useState3, 2),
      isScrollVisible = _useState4[0],
      setIsScrollVisible = _useState4[1];

  var _useState5 = React.useState(false),
      _useState6 = slicedToArray._slicedToArray(_useState5, 2),
      leftScrollBtnVisible = _useState6[0],
      setLeftScrollBtnVisible = _useState6[1];

  var _useState7 = React.useState(false),
      _useState8 = slicedToArray._slicedToArray(_useState7, 2),
      rightScrollBtnVisible = _useState8[0],
      setRightScrollBtnVisible = _useState8[1];

  var scrollBarRef = React.useRef(null);

  var getScrollBtnVisible = function getScrollBtnVisible() {
    var scrollLeft = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : void 0;

    if (!scrollBarRef.current || !navContainerRef.current) {
      console.error("[tdesign-tabs]\u6EDA\u52A8\u6761\u548C\u5185\u5BB9\u533A dom \u7ED3\u6784\u5F02\u5E38");
      return [false, false, false];
    }

    var innerScrollLeft = scrollBarRef.current.scrollLeft;

    if (scrollLeft !== void 0) {
      innerScrollLeft = scrollLeft;
    }

    var isScrollVisible2 = scrollBarRef.current.clientWidth < navContainerRef.current.clientWidth;
    var leftVisible = innerScrollLeft > 0;
    var rightVisible = isScrollVisible2 && innerScrollLeft < navContainerRef.current.clientWidth - scrollBarRef.current.clientWidth;
    return [isScrollVisible2, leftVisible, rightVisible];
  };

  var setScrollBtnVisibleHandler = function setScrollBtnVisibleHandler() {
    var scrollLeft = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : void 0;

    var _getScrollBtnVisible = getScrollBtnVisible(scrollLeft),
        _getScrollBtnVisible2 = slicedToArray._slicedToArray(_getScrollBtnVisible, 3),
        isScrollVisible2 = _getScrollBtnVisible2[0],
        leftVisible = _getScrollBtnVisible2[1],
        rightVisible = _getScrollBtnVisible2[2];

    setIsScrollVisible(isScrollVisible2);
    setLeftScrollBtnVisible(leftVisible);
    setRightScrollBtnVisible(rightVisible);
  };

  var scrollClickHandler = function scrollClickHandler(position) {
    var ref = scrollBarRef.current;

    if (ref) {
      var scrollLeft = position === "left" ? ref.scrollLeft - 200 : ref.scrollLeft + 200;
      ref.scrollTo({
        left: scrollLeft,
        behavior: "smooth"
      });
      setScrollBtnVisibleHandler(scrollLeft);
    }
  };

  var scrollToRightEnd = function scrollToRightEnd() {
    if (navContainerRef.current && scrollBarRef.current) {
      var scrollLeft = navContainerRef.current.clientWidth - scrollBarRef.current.clientWidth;
      scrollBarRef.current.scrollTo({
        left: scrollLeft,
        behavior: "smooth"
      });
      setScrollBtnVisibleHandler(scrollLeft);
    }
  };

  var TabBarCom = isCard ? null : /* @__PURE__ */React__default["default"].createElement(tabs_TabBar["default"], {
    tabPosition: placement,
    activeId: activeIndex,
    containerRef: navContainerRef
  });
  React.useEffect(function () {
    setScrollBtnVisibleHandler();
  }, []);
  return /* @__PURE__ */React__default["default"].createElement("div", {
    className: classNames__default["default"](tdTabsClassGenerator("header"), tdClassGenerator("is-".concat(placement)))
  }, /* @__PURE__ */React__default["default"].createElement("div", {
    className: classNames__default["default"](tdTabsClassGenerator("nav"))
  }, /* @__PURE__ */React__default["default"].createElement("div", {
    className: classNames__default["default"](tdTabsClassGenerator("operations"), tdTabsClassGenerator("operations--left"))
  }, leftScrollBtnVisible ? /* @__PURE__ */React__default["default"].createElement("div", {
    onClick: function onClick() {
      scrollClickHandler("left");
    },
    className: classNames__default["default"](tdTabsClassGenerator("btn"), tdTabsClassGenerator("btn--left"), tdSizeClassGenerator(size))
  }, /* @__PURE__ */React__default["default"].createElement(tdesignIconsReact.ChevronLeftIcon, null)) : null), /* @__PURE__ */React__default["default"].createElement("div", {
    className: classNames__default["default"](tdTabsClassGenerator("operations"), tdTabsClassGenerator("operations--right"))
  }, rightScrollBtnVisible ? /* @__PURE__ */React__default["default"].createElement("div", {
    onClick: function onClick() {
      scrollClickHandler("right");
    },
    className: classNames__default["default"](tdTabsClassGenerator("btn"), tdTabsClassGenerator("btn--right"), tdSizeClassGenerator(size))
  }, /* @__PURE__ */React__default["default"].createElement(tdesignIconsReact.ChevronRightIcon, null)) : null, addable ? /* @__PURE__ */React__default["default"].createElement("div", {
    className: classNames__default["default"](tdTabsClassGenerator("add-btn"), tdTabsClassGenerator("btn"), tdSizeClassGenerator(size)),
    onClick: function onClick(e) {
      onAdd({
        e: e
      });
      setTimeout(function () {
        scrollToRightEnd();
      }, 0);
    }
  }, /* @__PURE__ */React__default["default"].createElement(tdesignIconsReact.AddIcon, null)) : null), /* @__PURE__ */React__default["default"].createElement("div", {
    className: classNames__default["default"](tdTabsClassGenerator("nav-container"), isCard ? tdTabsClassGenerator("nav--card") : "", tdClassGenerator("is-".concat(placement)), addable ? tdClassGenerator("is-addable") : "")
  }, /* @__PURE__ */React__default["default"].createElement("div", {
    className: classNames__default["default"](tdTabsClassGenerator("nav-scroll"), isScrollVisible ? tdClassGenerator("is-scrollable") : ""),
    ref: scrollBarRef
  }, /* @__PURE__ */React__default["default"].createElement("div", {
    className: classNames__default["default"](tdTabsClassGenerator("nav-wrap"), ["left", "right"].includes(placement) ? tdClassGenerator("is-vertical") : ""),
    ref: navContainerRef
  }, placement !== "bottom" ? TabBarCom : null, /* @__PURE__ */React__default["default"].createElement("div", {
    className: classNames__default["default"](tdTabsClassGenerator("bar"), tdClassGenerator("is-".concat(placement)))
  }), itemList.map(function (v, index) {
    return /* @__PURE__ */React__default["default"].createElement(tabs_TabNavItem["default"], _objectSpread(_objectSpread(_objectSpread({}, props), v), {}, {
      onRemove: v.onRemove,
      key: v.value,
      label: v.label,
      isActive: activeValue === v.value,
      theme: theme,
      placement: placement,
      index: index,
      disabled: disabled || v.disabled,
      onClick: function onClick() {
        tabClick(v.value);
        onChange(v.value);
        setActiveIndex(getIndex(v.value));
      },
      onTabRemove: onRemove
    }));
  }), placement === "bottom" ? TabBarCom : null)))));
};

TabNav.displayName = "TabNav";

exports["default"] = TabNav;
//# sourceMappingURL=TabNav.js.map
