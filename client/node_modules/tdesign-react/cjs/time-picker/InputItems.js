/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var slicedToArray = require('../_chunks/dep-fa36e79f.js');
var toConsumableArray = require('../_chunks/dep-8f3deb2a.js');
var defineProperty = require('../_chunks/dep-449daca3.js');
var React = require('react');
var classNames = require('classnames');
var dayjs = require('dayjs');
var padStart = require('../_chunks/dep-99d6d655.js');
var _util_useConfig = require('../_util/useConfig.js');
var timePicker_consts = require('./consts.js');
var timePicker_interfaces = require('./interfaces.js');
require('../_chunks/dep-045b87c1.js');
require('../_chunks/dep-7a0cfc4c.js');
require('../_chunks/dep-0e3f1753.js');
require('../_chunks/dep-a7666a95.js');
require('../_chunks/dep-9125a75e.js');
require('../_chunks/dep-9c74d22d.js');
require('../_chunks/dep-48870ae5.js');
require('../_chunks/dep-bc486aab.js');
require('../_chunks/dep-c7adf4af.js');
require('../_chunks/dep-942a7aba.js');
require('../_chunks/dep-5e46865d.js');
require('../_chunks/dep-8bb9b7ba.js');
require('../_chunks/dep-735b841a.js');
require('../config-provider/ConfigContext.js');
require('../locale/zh_CN.js');
require('../locale/LocalReceiver.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);
var dayjs__default = /*#__PURE__*/_interopDefaultLegacy(dayjs);

var preposFormat = /^(a|A)\s+?[h]{1,2}(:[m]{1,2}(:[s]{1,2})?)?$/;
var postposFormat = /^[h]{1,2}(:[m]{1,2}(:[s]{1,2})?)?(\s+(a|A))?$/;
var secondRegExp = /[hH]{1,2}:m{1,2}:s{1,2}/;
var minRegExp = /[hH]{1,2}:m{1,2}/;

var TimePickerInputItems = function TimePickerInputItems(props) {
  var allowInput = props.allowInput,
      format = props.format,
      disabled = props.disabled,
      value = props.value,
      _onBlur = props.onBlur,
      onChange = props.onChange,
      _onFocus = props.onFocus,
      _onInput = props.onInput;

  var _useConfig = _util_useConfig["default"](),
      classPrefix = _useConfig.classPrefix;

  var inputItemClass = "".concat(classPrefix, "-time-picker__input");
  var itemClasses = classNames__default["default"]("".concat(inputItemClass, "-item"), defineProperty._defineProperty({}, "".concat(inputItemClass, "-item-disabled"), disabled));
  var inputClass = "".concat(inputItemClass, "-item-input");
  var isRangePicker = Array.isArray(value) && value.length > 1;

  var _ref = toConsumableArray._toConsumableArray(value),
      startTime = _ref[0],
      endTime = _ref[1];

  var _useState = React.useState(void 0),
      _useState2 = slicedToArray._slicedToArray(_useState, 2),
      formatedValue = _useState2[0],
      changeFormatedValue = _useState2[1];

  React.useEffect(function () {
    if (!startTime) return;
    var dayjsValue = dayjs__default["default"](startTime, format);
    var hour = /[h]{1}/.test(format) ? dayjsValue.hour() % 12 : dayjsValue.hour();
    var minute = dayjsValue.minute();
    var second = dayjsValue.second();
    changeFormatedValue(function (preVal) {
      return [{
        hour: padStart.padStart_1(String(hour), 2, "0"),
        minute: padStart.padStart_1(String(minute), 2, "0"),
        second: padStart.padStart_1(String(second), 2, "0"),
        meridiem: dayjsValue.format("a")
      }, preVal === null || preVal === void 0 ? void 0 : preVal[1]];
    });
  }, [startTime, format]);
  React.useEffect(function () {
    if (!endTime) return;
    var dayjsValue = dayjs__default["default"](endTime, format);
    var hour = /[h]{1}/.test(format) ? dayjsValue.hour() % 12 : dayjsValue.hour();
    var minute = dayjsValue.minute();
    var second = dayjsValue.second();
    changeFormatedValue(function (preVal) {
      return [preVal[0], {
        hour: padStart.padStart_1(String(hour), 2, "0"),
        minute: padStart.padStart_1(String(minute), 2, "0"),
        second: padStart.padStart_1(String(second), 2, "0"),
        meridiem: dayjsValue.format("a")
      }];
    });
  }, [endTime, format]);
  var handleInputChange = React.useCallback(function (type, result, index) {
    if (!isRangePicker) {
      var _currentDayjsValue$ty;

      var currentDayjsValue = dayjs__default["default"](startTime, format);
      onChange((_currentDayjsValue$ty = currentDayjsValue[type]) === null || _currentDayjsValue$ty === void 0 ? void 0 : _currentDayjsValue$ty.call(currentDayjsValue, result).format(format));
    } else {
      var _currentDayjsValue;

      if (index === 0) {
        var _dayjs$type, _dayjs;

        _currentDayjsValue = (_dayjs$type = (_dayjs = dayjs__default["default"](startTime, format))[type]) === null || _dayjs$type === void 0 ? void 0 : _dayjs$type.call(_dayjs, result).format(format);
        onChange([_currentDayjsValue, endTime]);
      } else {
        var _dayjs$type2, _dayjs2;

        _currentDayjsValue = (_dayjs$type2 = (_dayjs2 = dayjs__default["default"](endTime, format))[type]) === null || _dayjs$type2 === void 0 ? void 0 : _dayjs$type2.call(_dayjs2, result).format(format);
        onChange([startTime, _currentDayjsValue]);
      }
    }
  }, [format, onChange, startTime, isRangePicker, endTime]);
  var handleInputKeydown = React.useCallback(function (e, type, index) {
    if (!allowInput) return;
    var up = timePicker_interfaces.KeyboardDirection.up,
        down = timePicker_interfaces.KeyboardDirection.down,
        left = timePicker_interfaces.KeyboardDirection.left,
        right = timePicker_interfaces.KeyboardDirection.right;
    var which = e.which;

    if ([up, down].includes(which)) {
      var _formatedValue$index;

      if (type === timePicker_interfaces.EPickerCols.meridiem) return;
      var timeValue = formatedValue === null || formatedValue === void 0 ? void 0 : (_formatedValue$index = formatedValue[index]) === null || _formatedValue$index === void 0 ? void 0 : _formatedValue$index[type];
      var current = timeValue ? Number(timeValue) : 0;
      var operate = which === up ? -1 : 1;
      var result = current + operate;

      if (type === timePicker_interfaces.EPickerCols.hour) {
        var maxHour = /[h]{1}/.test(format) ? 11 : 23;

        if (result > maxHour) {
          result = 0;
        } else if (result < 0) {
          result = maxHour;
        }
      } else if (result > 59) {
        result = 1;
      } else if (result < 0) {
        result = 59;
      }

      handleInputChange(type, result, index);
    } else if ([left, right].includes(which)) {
      var _e$target;

      var parentNode = (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.parentNode;
      var focus = which === left ? parentNode.previousSibling : parentNode.nextSibling;

      if (focus) {
        var _focus$querySelector;

        var input = (_focus$querySelector = focus.querySelector) === null || _focus$querySelector === void 0 ? void 0 : _focus$querySelector.call(focus, "input");
        if (input !== null && input !== void 0 && input.focus) input.focus();
      }
    }
  }, [allowInput, format, formatedValue, handleInputChange]);
  var TEXT_CONFIG = timePicker_consts.useTimePickerTextConfig();

  function renderMeridiemItem(text) {
    return /* @__PURE__ */React__default["default"].createElement("span", {
      className: itemClasses
    }, /* @__PURE__ */React__default["default"].createElement("input", {
      readOnly: true,
      disabled: !allowInput,
      value: TEXT_CONFIG[text] || "",
      onKeyDown: function onKeyDown(e) {
        return handleInputKeydown(e, timePicker_interfaces.EPickerCols.meridiem);
      },
      className: classNames__default["default"](inputClass, "".concat(inputClass, "-meridiem"))
    }));
  }

  function renderTimeItem(inputValue, type, showColon, index) {
    var propsValue = isRangePicker ? value : value[0];
    return /* @__PURE__ */React__default["default"].createElement("span", {
      className: itemClasses
    }, showColon ? ":" : null, /* @__PURE__ */React__default["default"].createElement("input", {
      value: inputValue || "",
      className: inputClass,
      disabled: !allowInput,
      onKeyDown: function onKeyDown(e) {
        return handleInputKeydown(e, type, index);
      },
      onInput: function onInput(e) {
        return _onInput({
          e: e,
          input: inputValue,
          value: propsValue
        });
      },
      onChange: function onChange(e) {
        var _e$target2;

        return handleInputChange(type, e === null || e === void 0 ? void 0 : (_e$target2 = e.target) === null || _e$target2 === void 0 ? void 0 : _e$target2.value);
      },
      onBlur: function onBlur(e) {
        return _onBlur({
          e: e,
          trigger: type,
          input: inputValue,
          value: propsValue
        });
      },
      onFocus: function onFocus(e) {
        return _onFocus({
          e: e,
          trigger: type,
          input: inputValue,
          value: propsValue
        });
      }
    }));
  }

  function renderItems(itemValue, index) {
    return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, preposFormat.test(format) && renderMeridiemItem(itemValue === null || itemValue === void 0 ? void 0 : itemValue.meridiem), renderTimeItem(itemValue === null || itemValue === void 0 ? void 0 : itemValue.hour, timePicker_interfaces.EPickerCols.hour, false, index), minRegExp.test(format) ? renderTimeItem(itemValue === null || itemValue === void 0 ? void 0 : itemValue.minute, timePicker_interfaces.EPickerCols.minute, true, index) : null, secondRegExp.test(format) ? renderTimeItem(itemValue === null || itemValue === void 0 ? void 0 : itemValue.second, timePicker_interfaces.EPickerCols.second, true, index) : null, postposFormat.test(format) && renderMeridiemItem(itemValue === null || itemValue === void 0 ? void 0 : itemValue.meridiem));
  }

  return /* @__PURE__ */React__default["default"].createElement("div", {
    className: inputItemClass
  }, isRangePicker ? /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, renderItems(formatedValue === null || formatedValue === void 0 ? void 0 : formatedValue[0], 0), " - ", renderItems(formatedValue === null || formatedValue === void 0 ? void 0 : formatedValue[1], 1)) : renderItems(formatedValue === null || formatedValue === void 0 ? void 0 : formatedValue[0], 0));
};

exports["default"] = TimePickerInputItems;
//# sourceMappingURL=InputItems.js.map
