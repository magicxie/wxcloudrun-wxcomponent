/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var isEmpty = require('../_chunks/dep-72f8673c.js');
var isString = require('../_chunks/dep-0705da20.js');
var isFunction = require('../_chunks/dep-1bafebb1.js');
var input_index = require('../input/index.js');
var _util_useConfig = require('../_util/useConfig.js');
require('../_chunks/dep-c82d4aac.js');
require('../_chunks/dep-0e3f1753.js');
require('../_chunks/dep-a7666a95.js');
require('../_chunks/dep-72511bfe.js');
require('../_chunks/dep-48870ae5.js');
require('../_chunks/dep-07d4a79b.js');
require('../_chunks/dep-fb89215e.js');
require('../_chunks/dep-69abf228.js');
require('../_chunks/dep-20e76bfc.js');
require('../_chunks/dep-735b841a.js');
require('../_chunks/dep-c5449fbe.js');
require('../_chunks/dep-9125a75e.js');
require('../_chunks/dep-f445e9bb.js');
require('../input/Input.js');
require('../_chunks/dep-449daca3.js');
require('../_chunks/dep-fa36e79f.js');
require('../_chunks/dep-045b87c1.js');
require('../_chunks/dep-e03ca79d.js');
require('classnames');
require('tdesign-icons-react');
require('../_util/forwardRefWithStatics.js');
require('hoist-non-react-statics');
require('../input/InputGroup.js');
require('../config-provider/ConfigContext.js');
require('../locale/zh_CN.js');
require('../_util/useDefaultValue.js');
require('../_util/useDefault.js');
require('../_util/noop.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var TreeSelectTags = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var selectedSingle = props.selectedSingle,
      visible = props.visible,
      filterText = props.filterText,
      setFilterText = props.setFilterText,
      setFocusing = props.setFocusing,
      placeholder = props.placeholder,
      filter = props.filter,
      filterable = props.filterable,
      multiple = props.multiple,
      disabled = props.disabled,
      size = props.size,
      value = props.value,
      onSearch = props.onSearch,
      onBlur = props.onBlur,
      onFocus = props.onFocus;

  var _useConfig = _util_useConfig["default"](),
      classPrefix = _useConfig.classPrefix;

  var showFilter = React.useMemo(function () {
    if (disabled) {
      return false;
    }

    if (!multiple && selectedSingle && (filterable || isFunction.isFunction_1(filter))) {
      return visible;
    }

    return filterable || isFunction.isFunction_1(filter);
  }, [disabled, multiple, selectedSingle, filterable, visible, filter]);
  var showPlaceholder = React.useMemo(function () {
    if (!showFilter && (isString.isString_1(value) && value === "" && !selectedSingle || Array.isArray(value) && isEmpty.isEmpty_1(value) || value === null)) {
      return true;
    }

    return false;
  }, [showFilter, value, selectedSingle]);
  var filterPlaceholder = React.useMemo(function () {
    if (multiple && Array.isArray(value) && !isEmpty.isEmpty_1(value)) {
      return "";
    }

    if (!multiple && selectedSingle) {
      return selectedSingle;
    }

    return placeholder;
  }, [multiple, value, selectedSingle, placeholder]);

  function handleChange(value2) {
    setFilterText(value2);
    onSearch === null || onSearch === void 0 ? void 0 : onSearch(value2);
  }

  function handleBlur(value2, context) {
    setFocusing(false);
    onBlur === null || onBlur === void 0 ? void 0 : onBlur({
      value: value2,
      e: context.e
    });
  }

  function handleFocus(value2, context) {
    setFocusing(true);
    onFocus === null || onFocus === void 0 ? void 0 : onFocus({
      value: value2,
      e: context.e
    });
  }

  var searchInput = showFilter && /* @__PURE__ */React__default["default"].createElement(input_index.Input, {
    ref: ref,
    value: filterText,
    className: "".concat(classPrefix, "-select__input"),
    size: size,
    disabled: disabled,
    placeholder: filterPlaceholder,
    onChange: handleChange,
    onBlur: handleBlur,
    onFocus: handleFocus
  });
  return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, showPlaceholder && /* @__PURE__ */React__default["default"].createElement("span", {
    className: "".concat(classPrefix, "-select__placeholder")
  }, placeholder), !multiple && !showPlaceholder && !showFilter && /* @__PURE__ */React__default["default"].createElement("span", {
    className: "".concat(classPrefix, "-select__single")
  }, selectedSingle), searchInput);
});

exports["default"] = TreeSelectTags;
//# sourceMappingURL=TreeSelectInput.js.map
