/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var tag_index = require('../tag/index.js');
require('../tag/Tag.js');
require('../_chunks/dep-449daca3.js');
require('../_chunks/dep-e03ca79d.js');
require('classnames');
require('tdesign-icons-react');
require('../_util/noop.js');
require('../_util/forwardRefWithStatics.js');
require('hoist-non-react-statics');
require('../_util/useConfig.js');
require('../config-provider/ConfigContext.js');
require('../locale/zh_CN.js');
require('../tag/CheckTag.js');
require('../_chunks/dep-fa36e79f.js');
require('../_chunks/dep-045b87c1.js');
require('../_util/useDefault.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

function TreeSelectTags(props) {
  var tagList = props.tagList,
      minCollapsedNum = props.minCollapsedNum,
      collapsedItems = props.collapsedItems,
      disabled = props.disabled,
      size = props.size,
      value = props.value,
      data = props.data,
      onRemove = props.onRemove,
      onChange = props.onChange;
  if (!tagList.length) return null;

  function removeTag(index, data2, e) {
    e.stopPropagation();
    if (disabled || !Array.isArray(value)) return;
    onRemove === null || onRemove === void 0 ? void 0 : onRemove({
      value: value[index],
      data: data2,
      e: e
    });
    onChange === null || onChange === void 0 ? void 0 : onChange(value.filter(function (_, i) {
      return i !== index;
    }), null);
  }

  var tags = tagList.map(function (label, index) {
    return /* @__PURE__ */React__default["default"].createElement(tag_index.Tag, {
      key: index,
      size: size,
      closable: !disabled,
      disabled: disabled,
      onClose: function onClose(_ref) {
        var e = _ref.e;
        return removeTag(index, data, e);
      }
    }, label);
  });

  if (minCollapsedNum) {
    tags = tags.slice(0, minCollapsedNum);
    var nums = tagList.length - minCollapsedNum;
    nums && tags.push( /* @__PURE__ */React__default["default"].createElement(tag_index.Tag, {
      key: "collapsed-".concat(nums),
      size: size,
      disabled: disabled
    }, collapsedItems || "+".concat(nums)));
  }

  return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, tags);
}

exports["default"] = TreeSelectTags;
//# sourceMappingURL=TreeSelectTags.js.map
