/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var _baseClone = require('../_chunks/dep-35453ccd.js');
var _util_useUpdateEffect = require('../_util/useUpdateEffect.js');
var _common_js_tree_treeStore = require('../_common/js/tree/tree-store.js');
var _util_usePersistFn = require('../_util/usePersistFn.js');
require('../_chunks/dep-c57ef5b6.js');
require('../_chunks/dep-4f605641.js');
require('../_chunks/dep-9125a75e.js');
require('../_chunks/dep-a7666a95.js');
require('../_chunks/dep-9c74d22d.js');
require('../_chunks/dep-0e3f1753.js');
require('../_chunks/dep-48870ae5.js');
require('../_chunks/dep-20e76bfc.js');
require('../_chunks/dep-1bafebb1.js');
require('../_chunks/dep-735b841a.js');
require('../_chunks/dep-6681bc7b.js');
require('../_chunks/dep-7a0cfc4c.js');
require('../_chunks/dep-4a02b995.js');
require('../_chunks/dep-c5449fbe.js');
require('../_chunks/dep-c82d4aac.js');
require('../_chunks/dep-72511bfe.js');
require('../_chunks/dep-07d4a79b.js');
require('../_chunks/dep-fb89215e.js');
require('../_chunks/dep-69abf228.js');
require('../_chunks/dep-7d00ab60.js');
require('../_chunks/dep-f445e9bb.js');
require('../_chunks/dep-a81e362c.js');
require('../_chunks/dep-55c2ba72.js');
require('../_chunks/dep-d2229c5d.js');
require('../_chunks/dep-9e6db8fb.js');
require('../_chunks/dep-552722c0.js');
require('../_chunks/dep-449daca3.js');
require('../_chunks/dep-87ec326c.js');
require('../_chunks/dep-b000fdae.js');
require('../_chunks/dep-8f3deb2a.js');
require('../_chunks/dep-045b87c1.js');
require('../_chunks/dep-af921283.js');
require('../_common/js/tree/tree-node-model.js');
require('../_chunks/dep-59b9b071.js');
require('../_chunks/dep-15af0f44.js');
require('../_chunks/dep-66fbd01b.js');
require('../_chunks/dep-3ca698ba.js');
require('../_chunks/dep-bc486aab.js');
require('../_chunks/dep-c7adf4af.js');

var baseClone = _baseClone._baseClone;
/** Used to compose bitmasks for cloning. */

var CLONE_DEEP_FLAG = 1,
    CLONE_SYMBOLS_FLAG = 4;
/**
 * This method is like `_.clone` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @returns {*} Returns the deep cloned value.
 * @see _.clone
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var deep = _.cloneDeep(objects);
 * console.log(deep[0] === objects[0]);
 * // => false
 */

function cloneDeep(value) {
  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
}

var cloneDeep_1 = cloneDeep;

function useStore(props, refresh) {
  var storeRef = React.useRef();
  var data = props.data,
      keys = props.keys,
      expandAll = props.expandAll,
      expandParent = props.expandParent,
      expanded = props.expanded,
      expandLevel = props.expandLevel,
      expandMutex = props.expandMutex,
      activable = props.activable,
      activeMultiple = props.activeMultiple,
      actived = props.actived,
      disabled = props.disabled,
      checkable = props.checkable,
      value = props.value,
      checkStrictly = props.checkStrictly,
      load = props.load,
      lazy = props.lazy,
      valueMode = props.valueMode,
      filter = props.filter,
      _onLoad = props.onLoad;
  var handleUpdate = _util_usePersistFn.usePersistFn(function () {
    refresh();
  });

  var getExpandedArr = function getExpandedArr(arr, store2) {
    var expandedMap = /* @__PURE__ */new Map();
    arr.forEach(function (val) {
      expandedMap.set(val, true);

      if (expandParent) {
        var node = store2.getNode(val);
        node.getParents().forEach(function (tn) {
          expandedMap.set(tn.value, true);
        });
      }
    });
    return Array.from(expandedMap.keys());
  };

  var createStore = function createStore() {
    var store2 = new _common_js_tree_treeStore.TreeStore({
      keys: keys,
      activable: activable,
      activeMultiple: activeMultiple,
      checkable: checkable,
      checkStrictly: checkStrictly,
      expandAll: expandAll,
      expandLevel: expandLevel,
      expandMutex: expandMutex,
      expandParent: expandParent,
      disabled: disabled,
      load: load,
      lazy: lazy,
      valueMode: valueMode,
      filter: filter,
      onLoad: function onLoad(info) {
        var node = info.node;
        _onLoad === null || _onLoad === void 0 ? void 0 : _onLoad({
          node: node.getModel()
        });
      },
      onUpdate: handleUpdate
    });
    var list = cloneDeep_1(data);

    if (!Array.isArray(list)) {
      list = [];
    }

    store2.append(list);
    store2.refreshNodes();

    if (Array.isArray(value)) {
      store2.setChecked(value);
    }

    if (Array.isArray(expanded)) {
      var expandedArr = getExpandedArr(expanded, store2);
      store2.setExpanded(expandedArr);
    }

    if (Array.isArray(actived)) {
      store2.setActived(actived);
    }

    store2.refreshNodes();
    return store2;
  };

  if (!storeRef.current) {
    storeRef.current = createStore();
  }

  var store = storeRef.current;
  _util_useUpdateEffect["default"](function () {
    if (data && Array.isArray(data)) {
      store.removeAll();
      store.append(data);
    }
  }, [data, store]);
  _util_useUpdateEffect["default"](function () {
    store.setConfig({
      keys: keys,
      expandAll: expandAll,
      expandLevel: expandLevel,
      expandMutex: expandMutex,
      expandParent: expandParent,
      activable: activable,
      activeMultiple: activeMultiple,
      disabled: disabled,
      checkable: checkable,
      checkStrictly: checkStrictly,
      load: load,
      lazy: lazy,
      valueMode: valueMode
    });
    store.refreshState();
  }, [activable, activeMultiple, checkStrictly, checkable, disabled, expandAll, expandLevel, expandMutex, expandParent, keys, lazy, load, store, valueMode]);
  _util_useUpdateEffect["default"](function () {
    if (Array.isArray(value)) {
      store.replaceChecked(value);
    }
  }, [store, value]);
  _util_useUpdateEffect["default"](function () {
    if (Array.isArray(expanded)) {
      var expandedArr = getExpandedArr(expanded, store);
      store.replaceExpanded(expandedArr);
    }
  }, [expanded, store]);
  _util_useUpdateEffect["default"](function () {
    if (Array.isArray(actived)) {
      store.replaceActived(actived);
    }
  }, [actived, store]);
  _util_useUpdateEffect["default"](function () {
    store.setConfig({
      filter: filter
    });
    store.updateAll();
  }, [filter, store]);
  return storeRef.current;
}

exports.useStore = useStore;
//# sourceMappingURL=useStore.js.map
