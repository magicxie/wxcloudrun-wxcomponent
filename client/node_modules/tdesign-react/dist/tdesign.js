/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('react-dom')) :
  typeof define === 'function' && define.amd ? define(['exports', 'react', 'react-dom'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.TDesign = {}, global.React, global.ReactDOM));
})(this, (function (exports, React, ReactDOM) { 'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
      Object.keys(e).forEach(function (k) {
        if (k !== 'default') {
          var d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: true,
            get: function () { return e[k]; }
          });
        }
      });
    }
    n["default"] = e;
    return Object.freeze(n);
  }

  var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
  var React__namespace = /*#__PURE__*/_interopNamespace(React);
  var ReactDOM__default = /*#__PURE__*/_interopDefaultLegacy(ReactDOM);

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof(obj) {
        return typeof obj;
      };
    } else {
      _typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArrayLimit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;

    var _s, _e;

    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _arrayLikeToArray$4(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }

  function _unsupportedIterableToArray$4(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray$4(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$4(o, minLen);
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray$4(arr, i) || _nonIterableRest();
  }

  function _defineProperty$2(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _objectWithoutPropertiesLoose$1(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function _objectWithoutProperties$1(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose$1(source, excluded);
    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function getDefaultExportFromCjs (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  var classnames$1 = {exports: {}};

  (function (module) {
    /* global define */
    (function () {

      var hasOwn = {}.hasOwnProperty;

      function classNames() {
        var classes = [];

        for (var i = 0; i < arguments.length; i++) {
          var arg = arguments[i];
          if (!arg) continue;

          var argType = _typeof(arg);

          if (argType === 'string' || argType === 'number') {
            classes.push(arg);
          } else if (Array.isArray(arg)) {
            if (arg.length) {
              var inner = classNames.apply(null, arg);

              if (inner) {
                classes.push(inner);
              }
            }
          } else if (argType === 'object') {
            if (arg.toString === Object.prototype.toString) {
              for (var key in arg) {
                if (hasOwn.call(arg, key) && arg[key]) {
                  classes.push(key);
                }
              }
            } else {
              classes.push(arg.toString());
            }
          }
        }

        return classes.join(' ');
      }

      if (module.exports) {
        classNames["default"] = classNames;
        module.exports = classNames;
      } else {
        window.classNames = classNames;
      }
    })();
  })(classnames$1);

  var classNames$1 = classnames$1.exports;

  var defaultLocale = {
    pagination: {
      itemsPerPage: "{size} \u6761/\u9875",
      jumpTo: "\u8DF3\u81F3",
      page: "\u9875",
      prev: "\u4E0A\u4E00\u9875",
      next: "\u4E0B\u4E00\u9875",
      total: "\u5171 {total} \u9879\u6570\u636E"
    },
    cascader: {
      empty: "\u6682\u65E0\u6570\u636E",
      loadingText: "\u52A0\u8F7D\u4E2D"
    },
    calendar: {
      fillWithZero: true,
      yearSelection: "{year} \u5E74",
      monthSelection: "{month} \u6708",
      yearRadio: "\u5E74",
      monthRadio: "\u6708",
      hideWeekend: "\u9690\u85CF\u5468\u672B",
      showWeekend: "\u663E\u793A\u5468\u672B",
      today: "\u4ECA\u5929",
      thisMonth: "\u672C\u6708",
      week: "\u4E00,\u4E8C,\u4E09,\u56DB,\u4E94,\u516D,\u65E5",
      cellMonth: "\u4E00\u6708,\u4E8C\u6708,\u4E09\u6708,\u56DB\u6708,\u4E94\u6708,\u516D\u6708,\u4E03\u6708,\u516B\u6708,\u4E5D\u6708,\u5341\u6708,\u5341\u4E00\u6708,\u5341\u4E8C\u6708"
    },
    transfer: {
      title: "{checked} / {total} \u9879",
      empty: "\u6682\u65E0\u6570\u636E",
      placeholder: "\u8BF7\u8F93\u5165\u5173\u952E\u8BCD\u641C\u7D22"
    },
    timePicker: {
      nowtime: "\u6B64\u523B",
      confirm: "\u786E\u5B9A",
      anteMeridiem: "\u4E0A\u5348",
      postMeridiem: "\u4E0B\u5348",
      placeholder: "\u9009\u62E9\u65F6\u95F4"
    },
    dialog: {
      confirm: "\u786E\u8BA4",
      cancel: "\u53D6\u6D88"
    },
    drawer: {
      confirm: "\u786E\u8BA4",
      cancel: "\u53D6\u6D88"
    },
    popconfirm: {
      confirm: "\u786E\u5B9A",
      cancel: "\u53D6\u6D88"
    },
    table: {
      empty: "\u6682\u65E0\u6570\u636E",
      expandIcon: null,
      sortIcon: null
    },
    select: {
      empty: "\u6682\u65E0\u6570\u636E",
      loadingText: "\u52A0\u8F7D\u4E2D",
      clearIcon: null
    },
    tree: {
      empty: "\u6682\u65E0\u6570\u636E",
      folderIcon: null
    },
    treeSelect: {
      empty: "\u6682\u65E0\u6570\u636E",
      loadingText: "\u52A0\u8F7D\u4E2D"
    },
    datePicker: {
      placeholder: {
        date: "\u8BF7\u9009\u62E9\u65E5\u671F",
        month: "\u8BF7\u9009\u62E9\u6708\u4EFD",
        year: "\u8BF7\u9009\u62E9\u5E74\u4EFD"
      },
      weekdays: ["\u4E00", "\u4E8C", "\u4E09", "\u56DB", "\u4E94", "\u516D", "\u65E5"],
      months: ["\u4E00\u6708", "\u4E8C\u6708", "\u4E09\u6708", "\u56DB\u6708", "\u4E94\u6708", "\u516D\u6708", "\u4E03\u6708", "\u516B\u6708", "\u4E5D\u6708", "\u5341\u6708", "\u5341\u4E00\u6708", "\u5341\u4E8C\u6708"],
      firstDayOfWeek: 0,
      rangeSeparator: " \u81F3 ",
      direction: "ltr",
      format: "YYYY-MM-DD",
      dayAriaLabel: "\u65E5",
      weekAbbreviation: "\u5468",
      yearAriaLabel: "\u5E74",
      monthAriaLabel: "\u6708",
      confirm: "\u786E\u5B9A",
      selectTime: "\u9009\u62E9\u65F6\u95F4",
      selectDate: "\u9009\u62E9\u65E5\u671F",
      nextYear: "\u4E0B\u4E00\u5E74",
      preYear: "\u4E0A\u4E00\u5E74",
      nextMonth: "\u4E0B\u4E2A\u6708",
      preMonth: "\u4E0A\u4E2A\u6708",
      preDecade: "\u4E0A\u4E2A\u5341\u5E74",
      nextDecade: "\u4E0B\u4E2A\u5341\u5E74",
      now: "\u5F53\u524D"
    },
    steps: {},
    upload: {
      sizeLimitMessage: "\u56FE\u7247\u5927\u5C0F\u4E0D\u80FD\u8D85\u8FC7 {sizeLimit}"
    }
  };

  var defaultClassPrefix = "t";
  var defaultContext = {
    classPrefix: defaultClassPrefix,
    locale: defaultLocale
  };
  var ConfigContext$1 = /*#__PURE__*/React.createContext(defaultContext);

  var useConfig$1 = (function () {
    return React.useContext(ConfigContext$1);
  });

  var _excluded$u = ["width", "className", "style", "children"];

  function ownKeys$1Y(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1Y(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1Y(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1Y(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var Aside = function Aside(props) {
    var width = props.width,
        className = props.className,
        style = props.style,
        children = props.children,
        otherAsideProps = _objectWithoutProperties$1(props, _excluded$u);

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var asideClassNames = classNames$1("".concat(classPrefix, "-layout__sider"), className);
    var asideWidth = typeof width === "number" ? "".concat(width, "px") : String(width);

    var asideStyle = _objectSpread$1Y({
      width: asideWidth,
      maxWidth: asideWidth,
      minWidth: asideWidth,
      flex: "0 0 ".concat(asideWidth)
    }, style);

    return /* @__PURE__ */React__default["default"].createElement("aside", _objectSpread$1Y({
      className: asideClassNames,
      style: asideStyle
    }, otherAsideProps), children);
  };

  Aside.defaultProps = {
    width: 232
  };
  Aside.displayName = "Aside";

  var _excluded$t = ["className", "style", "children"],
      _excluded2$2 = ["className", "style", "children"],
      _excluded3 = ["className", "style", "children"],
      _excluded4 = ["direction", "className", "style", "children"];

  function ownKeys$1X(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1X(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1X(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1X(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var Header = function Header(props) {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var className = props.className,
        style = props.style,
        children = props.children,
        others = _objectWithoutProperties$1(props, _excluded$t);

    var headerClassNames = classNames$1("".concat(classPrefix, "-layout__header"), className);
    return /* @__PURE__ */React__default["default"].createElement("header", _objectSpread$1X({
      className: headerClassNames,
      style: style
    }, others), children);
  };

  var Footer = function Footer(props) {
    var _useConfig2 = useConfig$1(),
        classPrefix = _useConfig2.classPrefix;

    var className = props.className,
        style = props.style,
        children = props.children,
        others = _objectWithoutProperties$1(props, _excluded2$2);

    var footerClassNames = classNames$1("".concat(classPrefix, "-layout__footer"), className);
    return /* @__PURE__ */React__default["default"].createElement("footer", _objectSpread$1X({
      className: footerClassNames,
      style: style
    }, others), children);
  };

  var Content$1 = function Content(props) {
    var _useConfig3 = useConfig$1(),
        classPrefix = _useConfig3.classPrefix;

    var className = props.className,
        style = props.style,
        children = props.children,
        others = _objectWithoutProperties$1(props, _excluded3);

    var contentClassNames = classNames$1("".concat(classPrefix, "-layout__content"), className);
    return /* @__PURE__ */React__default["default"].createElement("main", _objectSpread$1X({
      className: contentClassNames,
      style: style
    }, others), children);
  };

  var Layout$1 = function Layout(props) {
    var _classNames;

    var direction = props.direction,
        className = props.className,
        style = props.style,
        children = props.children,
        otherLayoutProps = _objectWithoutProperties$1(props, _excluded4);

    var _useState = React.useState([]),
        _useState2 = _slicedToArray(_useState, 2),
        asides = _useState2[0],
        setAsides = _useState2[1];

    React.useEffect(function () {
      React__default["default"].Children.forEach(children, function (child) {
        if (_typeof(child) !== "object") return;
        if (child.type === Aside) setAsides([child]);
      });
    }, [children]);

    var _useConfig4 = useConfig$1(),
        classPrefix = _useConfig4.classPrefix;

    var layoutClassNames = classNames$1("".concat(classPrefix, "-layout"), (_classNames = {}, _defineProperty$2(_classNames, "".concat(classPrefix, "-layout--with-sider"), !!asides.length), _defineProperty$2(_classNames, "".concat(classPrefix, "-layout__direction-").concat(direction), direction), _classNames), className);
    return /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$1X({
      className: layoutClassNames,
      style: style
    }, otherLayoutProps), children);
  };

  Layout$1.Header = Header;
  Layout$1.Content = Content$1;
  Layout$1.Footer = Footer;
  Layout$1.Aside = Aside;
  Header.displayName = "Header";
  Content$1.displayName = "Content";
  Footer.displayName = "Footer";
  Layout$1.displayName = "Layout";

  var Layout = Layout$1;

  function isObject$b(value) {
    var type = _typeof(value);

    return value != null && (type == 'object' || type == 'function');
  }

  var isObject_1 = isObject$b;

  var _excluded$s = ["flex", "offset", "order", "pull", "push", "span", "tag", "className", "children", "style"];

  function ownKeys$1W(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1W(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1W(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1W(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var calcColPadding = function calcColPadding(gutter, currentSize) {
    var paddingObj = {};

    if (typeof gutter === "number") {
      Object.assign(paddingObj, {
        paddingLeft: "".concat(gutter / 2, "px"),
        paddingRight: "".concat(gutter / 2, "px")
      });
    } else if (Array.isArray(gutter) && gutter.length) {
      if (typeof gutter[0] === "number") {
        Object.assign(paddingObj, {
          paddingLeft: "".concat(gutter[0] / 2, "px"),
          paddingRight: "".concat(gutter[0] / 2, "px")
        });
      }

      if (isObject_1(gutter[0]) && gutter[0][currentSize]) {
        Object.assign(paddingObj, {
          paddingLeft: "".concat(gutter[0][currentSize] / 2, "px"),
          paddingRight: "".concat(gutter[0][currentSize] / 2, "px")
        });
      }
    } else if (isObject_1(gutter) && gutter[currentSize]) {
      Object.assign(paddingObj, {
        paddingLeft: "".concat(gutter[currentSize] / 2, "px"),
        paddingRight: "".concat(gutter[currentSize] / 2, "px")
      });
    }

    return paddingObj;
  };

  var parseFlex = function parseFlex(flex) {
    if (typeof flex === "number") {
      return "".concat(flex, " ").concat(flex, " auto");
    }

    if (/^\d+(\.\d+)?(px|r?em|%)$/.test(flex)) {
      return "0 0 ".concat(flex);
    }

    return flex;
  };

  var Col$1 = function Col(props) {
    var _classNames;

    var flex = props.flex,
        offset = props.offset,
        order = props.order,
        pull = props.pull,
        push = props.push,
        span = props.span,
        _props$tag = props.tag,
        tag = _props$tag === void 0 ? "div" : _props$tag,
        className = props.className,
        children = props.children,
        propStyle = props.style,
        otherColProps = _objectWithoutProperties$1(props, _excluded$s);

    var rowGutter = otherColProps.gutter,
        rowSize = otherColProps.size;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var allSizes = ["xs", "sm", "md", "lg", "xl", "xxl"];
    var sizeClasses = allSizes.reduce(function (acc, currSize) {
      var _objectSpread2;

      var sizeProp = props[currSize];
      var sizeObj = {};

      if (typeof sizeProp === "number") {
        sizeObj.span = sizeProp;
      } else if (isObject_1(sizeProp)) {
        sizeObj = sizeProp || {};
      }

      return _objectSpread$1W(_objectSpread$1W({}, acc), {}, (_objectSpread2 = {}, _defineProperty$2(_objectSpread2, "".concat(classPrefix, "-col-").concat(currSize, "-").concat(sizeObj.span), sizeObj.span !== void 0), _defineProperty$2(_objectSpread2, "".concat(classPrefix, "-col-").concat(currSize, "-order-").concat(sizeObj.order), parseInt(sizeObj.order, 10) >= 0), _defineProperty$2(_objectSpread2, "".concat(classPrefix, "-col-").concat(currSize, "-offset-").concat(sizeObj.offset), parseInt(sizeObj.offset, 10) >= 0), _defineProperty$2(_objectSpread2, "".concat(classPrefix, "-col-").concat(currSize, "-push-").concat(sizeObj.push), parseInt(sizeObj.push, 10) >= 0), _defineProperty$2(_objectSpread2, "".concat(classPrefix, "-col-").concat(currSize, "-pull-").concat(sizeObj.pull), parseInt(sizeObj.pull, 10) >= 0), _objectSpread2));
    }, {});
    var colClassNames = classNames$1("".concat(classPrefix, "-col"), className, (_classNames = {}, _defineProperty$2(_classNames, "".concat(classPrefix, "-col-").concat(span), span !== void 0), _defineProperty$2(_classNames, "".concat(classPrefix, "-col-offset-").concat(offset), parseInt(offset, 10) >= 0), _defineProperty$2(_classNames, "".concat(classPrefix, "-col-pull-").concat(pull), parseInt(pull, 10) >= 0), _defineProperty$2(_classNames, "".concat(classPrefix, "-col-push-").concat(push), parseInt(push, 10) >= 0), _defineProperty$2(_classNames, "".concat(classPrefix, "-col-order-").concat(order), parseInt(order, 10) >= 0), _classNames), sizeClasses);

    var colStyle = _objectSpread$1W(_objectSpread$1W({}, calcColPadding(rowGutter, rowSize)), propStyle);

    flex && (colStyle.flex = parseFlex(flex));
    return /*#__PURE__*/React__default["default"].createElement(tag, _objectSpread$1W({
      className: colClassNames,
      style: colStyle
    }, otherColProps), children);
  };

  Col$1.displayName = "Col";

  var _excluded$r = ["align", "gutter", "justify", "tag", "style", "className", "children"];

  function ownKeys$1V(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1V(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1V(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1V(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var calcSize = function calcSize(width) {
    var size = "xs";

    if (width < 768) {
      size = "xs";
    } else if (width >= 768 && width < 992) {
      size = "sm";
    } else if (width >= 992 && width < 1200) {
      size = "md";
    } else if (width >= 1200 && width < 1400) {
      size = "lg";
    } else if (width >= 1400 && width < 1880) {
      size = "xl";
    } else {
      size = "xxl";
    }

    return size;
  };

  var calcRowStyle = function calcRowStyle(gutter, currentSize) {
    var rowStyle = {};

    if (typeof gutter === "number") {
      Object.assign(rowStyle, {
        marginLeft: "".concat(gutter / -2, "px"),
        marginRight: "".concat(gutter / -2, "px")
      });
    } else if (Array.isArray(gutter) && gutter.length) {
      if (typeof gutter[0] === "number") {
        Object.assign(rowStyle, {
          marginLeft: "".concat(gutter[0] / -2, "px"),
          marginRight: "".concat(gutter[0] / -2, "px")
        });
      }

      if (typeof gutter[1] === "number") {
        Object.assign(rowStyle, {
          rowGap: "".concat(gutter[1], "px")
        });
      }

      if (isObject_1(gutter[0]) && gutter[0][currentSize] !== void 0) {
        Object.assign(rowStyle, {
          marginLeft: "".concat(gutter[0][currentSize] / -2, "px"),
          marginRight: "".concat(gutter[0][currentSize] / -2, "px")
        });
      }

      if (isObject_1(gutter[1]) && gutter[1][currentSize] !== void 0) {
        Object.assign(rowStyle, {
          rowGap: "".concat(gutter[1][currentSize], "px")
        });
      }
    } else if (isObject_1(gutter) && gutter[currentSize]) {
      if (Array.isArray(gutter[currentSize]) && gutter[currentSize].length) {
        Object.assign(rowStyle, {
          marginLeft: "".concat(gutter[currentSize][0] / -2, "px"),
          marginRight: "".concat(gutter[currentSize][0] / -2, "px")
        });
        Object.assign(rowStyle, {
          rowGap: "".concat(gutter[currentSize][1], "px")
        });
      } else {
        Object.assign(rowStyle, {
          marginLeft: "".concat(gutter[currentSize] / -2, "px"),
          marginRight: "".concat(gutter[currentSize] / -2, "px")
        });
      }
    }

    return rowStyle;
  };

  var Row$1 = function Row(props) {
    var _classNames;

    var _props$align = props.align,
        align = _props$align === void 0 ? "top" : _props$align,
        _props$gutter = props.gutter,
        gutter = _props$gutter === void 0 ? 0 : _props$gutter,
        _props$justify = props.justify,
        justify = _props$justify === void 0 ? "start" : _props$justify,
        _props$tag = props.tag,
        tag = _props$tag === void 0 ? "div" : _props$tag,
        propStyle = props.style,
        className = props.className,
        children = props.children,
        otherRowProps = _objectWithoutProperties$1(props, _excluded$r);

    var _useState = React.useState(calcSize(window.innerWidth)),
        _useState2 = _slicedToArray(_useState, 2),
        size = _useState2[0],
        setSize = _useState2[1];

    var updateSize = function updateSize() {
      var currentSize = calcSize(window.innerWidth);

      if (currentSize !== size) {
        setSize(size);
      }
    };

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var rowClassNames = classNames$1("".concat(classPrefix, "-row"), className, (_classNames = {}, _defineProperty$2(_classNames, "".concat(classPrefix, "-row--").concat(justify), true), _defineProperty$2(_classNames, "".concat(classPrefix, "-row--").concat(align), true), _classNames));

    var rowStyle = _objectSpread$1V(_objectSpread$1V({}, calcRowStyle(gutter, size)), propStyle);

    React.useEffect(function () {
      window.addEventListener("resize", updateSize);
      return function () {
        window.removeEventListener("resize", updateSize);
      };
    });
    return /*#__PURE__*/React__default["default"].createElement(tag, _objectSpread$1V({
      className: rowClassNames,
      style: rowStyle
    }, otherRowProps), React__default["default"].Children.map(children, function (child) {
      if (child && child.type === Col$1) {
        return /*#__PURE__*/React__default["default"].cloneElement(child, {
          gutter: gutter,
          size: size
        });
      }

      return child;
    }));
  };

  Row$1.displayName = "Row";

  var Row = Row$1;
  var Col = Col$1;

  var raf$2 = {exports: {}};

  var performanceNow = {exports: {}};

  (function () {
    var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;

    if (typeof performance !== "undefined" && performance !== null && performance.now) {
      performanceNow.exports = function () {
        return performance.now();
      };
    } else if (typeof process !== "undefined" && process !== null && process.hrtime) {
      performanceNow.exports = function () {
        return (getNanoSeconds() - nodeLoadTime) / 1e6;
      };

      hrtime = process.hrtime;

      getNanoSeconds = function getNanoSeconds() {
        var hr;
        hr = hrtime();
        return hr[0] * 1e9 + hr[1];
      };

      moduleLoadTime = getNanoSeconds();
      upTime = process.uptime() * 1e9;
      nodeLoadTime = moduleLoadTime - upTime;
    } else if (Date.now) {
      performanceNow.exports = function () {
        return Date.now() - loadTime;
      };

      loadTime = Date.now();
    } else {
      performanceNow.exports = function () {
        return new Date().getTime() - loadTime;
      };

      loadTime = new Date().getTime();
    }
  }).call(commonjsGlobal);

  var now$2 = performanceNow.exports,
      root$a = typeof window === 'undefined' ? commonjsGlobal : window,
      vendors = ['moz', 'webkit'],
      suffix = 'AnimationFrame',
      raf = root$a['request' + suffix],
      caf = root$a['cancel' + suffix] || root$a['cancelRequest' + suffix];

  for (var i = 0; !raf && i < vendors.length; i++) {
    raf = root$a[vendors[i] + 'Request' + suffix];
    caf = root$a[vendors[i] + 'Cancel' + suffix] || root$a[vendors[i] + 'CancelRequest' + suffix];
  } // Some versions of FF have rAF but not cAF


  if (!raf || !caf) {
    var last$2 = 0,
        id = 0,
        queue = [],
        frameDuration = 1000 / 60;

    raf = function raf(callback) {
      if (queue.length === 0) {
        var _now = now$2(),
            next = Math.max(0, frameDuration - (_now - last$2));

        last$2 = next + _now;
        setTimeout(function () {
          var cp = queue.slice(0); // Clear queue here to prevent
          // callbacks from appending listeners
          // to the current frame's queue

          queue.length = 0;

          for (var i = 0; i < cp.length; i++) {
            if (!cp[i].cancelled) {
              try {
                cp[i].callback(last$2);
              } catch (e) {
                setTimeout(function () {
                  throw e;
                }, 0);
              }
            }
          }
        }, Math.round(next));
      }

      queue.push({
        handle: ++id,
        callback: callback,
        cancelled: false
      });
      return id;
    };

    caf = function caf(handle) {
      for (var i = 0; i < queue.length; i++) {
        if (queue[i].handle === handle) {
          queue[i].cancelled = true;
        }
      }
    };
  }

  raf$2.exports = function (fn) {
    // Wrap in a new function to prevent
    // `cancel` potentially being assigned
    // to the native rAF function
    return raf.call(root$a, fn);
  };

  raf$2.exports.cancel = function () {
    caf.apply(root$a, arguments);
  };

  raf$2.exports.polyfill = function (object) {
    if (!object) {
      object = root$a;
    }

    object.requestAnimationFrame = raf;
    object.cancelAnimationFrame = caf;
  };

  var raf$1 = raf$2.exports;

  var freeGlobal$1 = _typeof(commonjsGlobal) == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
  var _freeGlobal = freeGlobal$1;

  var freeGlobal = _freeGlobal;
  /** Detect free variable `self`. */

  var freeSelf = (typeof self === "undefined" ? "undefined" : _typeof(self)) == 'object' && self && self.Object === Object && self;
  /** Used as a reference to the global object. */

  var root$9 = freeGlobal || freeSelf || Function('return this')();
  var _root = root$9;

  var root$8 = _root;
  /** Built-in value references. */

  var _Symbol2 = root$8.Symbol;
  var _Symbol$6 = _Symbol2;

  var _Symbol$5 = _Symbol$6;
  /** Used for built-in method references. */

  var objectProto$g = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$f = objectProto$g.hasOwnProperty;
  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */

  var nativeObjectToString$1 = objectProto$g.toString;
  /** Built-in value references. */

  var symToStringTag$1 = _Symbol$5 ? _Symbol$5.toStringTag : undefined;
  /**
   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the raw `toStringTag`.
   */

  function getRawTag$1(value) {
    var isOwn = hasOwnProperty$f.call(value, symToStringTag$1),
        tag = value[symToStringTag$1];

    try {
      value[symToStringTag$1] = undefined;
      var unmasked = true;
    } catch (e) {}

    var result = nativeObjectToString$1.call(value);

    if (unmasked) {
      if (isOwn) {
        value[symToStringTag$1] = tag;
      } else {
        delete value[symToStringTag$1];
      }
    }

    return result;
  }

  var _getRawTag = getRawTag$1;

  /** Used for built-in method references. */
  var objectProto$f = Object.prototype;
  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */

  var nativeObjectToString = objectProto$f.toString;
  /**
   * Converts `value` to a string using `Object.prototype.toString`.
   *
   * @private
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   */

  function objectToString$1(value) {
    return nativeObjectToString.call(value);
  }

  var _objectToString = objectToString$1;

  var _Symbol$4 = _Symbol$6,
      getRawTag = _getRawTag,
      objectToString = _objectToString;
  /** `Object#toString` result references. */

  var nullTag = '[object Null]',
      undefinedTag = '[object Undefined]';
  /** Built-in value references. */

  var symToStringTag = _Symbol$4 ? _Symbol$4.toStringTag : undefined;
  /**
   * The base implementation of `getTag` without fallbacks for buggy environments.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */

  function baseGetTag$a(value) {
    if (value == null) {
      return value === undefined ? undefinedTag : nullTag;
    }

    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
  }

  var _baseGetTag = baseGetTag$a;

  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array, else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(document.body.children);
   * // => false
   *
   * _.isArray('abc');
   * // => false
   *
   * _.isArray(_.noop);
   * // => false
   */
  var isArray$c = Array.isArray;
  var isArray_1 = isArray$c;

  function isObjectLike$d(value) {
    return value != null && _typeof(value) == 'object';
  }

  var isObjectLike_1 = isObjectLike$d;

  var baseGetTag$9 = _baseGetTag,
      isArray$b = isArray_1,
      isObjectLike$c = isObjectLike_1;
  /** `Object#toString` result references. */

  var stringTag$4 = '[object String]';
  /**
   * Checks if `value` is classified as a `String` primitive or object.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a string, else `false`.
   * @example
   *
   * _.isString('abc');
   * // => true
   *
   * _.isString(1);
   * // => false
   */

  function isString(value) {
    return typeof value == 'string' || !isArray$b(value) && isObjectLike$c(value) && baseGetTag$9(value) == stringTag$4;
  }

  var isString_1 = isString;

  var easeInOutCubic = function easeInOutCubic(current, start, end, duration) {
    var change = (end - start) / 2;
    var time = current / (duration / 2);

    if (time < 1) {
      return change * time * time * time + start;
    }

    time -= 2;
    return change * (time * time * time + 2) + start;
  };

  var trim = function trim(str) {
    return (str || "").replace(/^[\s\uFEFF]+|[\s\uFEFF]+$/g, "");
  };

  function hasClass$1(el, cls) {
    if (!el || !cls) return false;
    if (cls.indexOf(" ") !== -1) throw new Error("className should not contain space.");

    if (el.classList) {
      return el.classList.contains(cls);
    }

    return " ".concat(el.className, " ").indexOf(" ".concat(cls, " ")) > -1;
  }

  var addClass$1 = function addClass(el, cls) {
    if (!el) return;
    var curClass = el.className;
    var classes = (cls || "").split(" ");

    for (var i = 0, j = classes.length; i < j; i++) {
      var clsName = classes[i];
      if (!clsName) continue;

      if (el.classList) {
        el.classList.add(clsName);
      } else if (!hasClass$1(el, clsName)) {
        curClass += " ".concat(clsName);
      }
    }

    if (!el.classList) {
      el.className = curClass;
    }
  };
  var removeClass$2 = function removeClass(el, cls) {
    if (!el || !cls) return;
    var classes = cls.split(" ");
    var curClass = " ".concat(el.className, " ");

    for (var i = 0, j = classes.length; i < j; i++) {
      var clsName = classes[i];
      if (!clsName) continue;

      if (el.classList) {
        el.classList.remove(clsName);
      } else if (hasClass$1(el, clsName)) {
        curClass = curClass.replace(" ".concat(clsName, " "), " ");
      }
    }

    if (!el.classList) {
      el.className = trim(curClass);
    }
  };
  var getScrollContainer = function getScrollContainer() {
    var container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "body";

    if (isString_1(container)) {
      return container ? document.querySelector(container) : window;
    }

    if (typeof container === "function") {
      return container();
    }

    return container;
  };
  var getAttach$1 = function getAttach(node) {
    var attachNode = typeof node === "function" ? node() : node;

    if (!attachNode) {
      return document.body;
    }

    if (isString_1(attachNode)) {
      return document.querySelector(attachNode);
    }

    if (attachNode instanceof HTMLElement) {
      return attachNode;
    }

    return document.body;
  };

  function getAttach(attach) {
    var parent;

    if (typeof attach === "string") {
      parent = document.querySelector(attach);
    }

    if (typeof attach === "function") {
      parent = attach();
    }

    if (_typeof(attach) === "object" && attach instanceof window.HTMLElement) {
      parent = attach;
    }

    return parent || document.body;
  }
  var Portal$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var getContainer = props.getContainer,
        children = props.children;

    var _useMemo = React.useMemo(function () {
      var parent = getAttach(getContainer);

      if (parent) {
        var div = document.createElement("div");
        parent.appendChild(div);
        return [parent, div];
      }
    }, [getContainer]),
        _useMemo2 = _slicedToArray(_useMemo, 2),
        parentContainer = _useMemo2[0],
        container = _useMemo2[1];

    React.useEffect(function () {
      return function () {
        container.remove();
      };
    }, []);
    React.useImperativeHandle(ref, function () {
      return parentContainer;
    });
    return /*#__PURE__*/ReactDOM.createPortal(children, container);
  });
  Portal$1.displayName = "Portal";

  function ownKeys$1U(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1U(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1U(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1U(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var GradientLoading = function GradientLoading() {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useState = React.useState({}),
        _useState2 = _slicedToArray(_useState, 2),
        styleFromEnv = _useState2[0],
        setStyleFromEnv = _useState2[1];

    var conicRef = React.useRef();
    var gradientClass = "".concat(classPrefix, "-loading__gradient");
    React.useEffect(function () {
      var el = conicRef === null || conicRef === void 0 ? void 0 : conicRef.current;
      var basicStyle = {};

      if (el) {
        var _window, _window$navigator;

        var _getComputedStyle = getComputedStyle(el),
            fontSize = _getComputedStyle.fontSize,
            color = _getComputedStyle.color;

        var ua = (_window = window) === null || _window === void 0 ? void 0 : (_window$navigator = _window.navigator) === null || _window$navigator === void 0 ? void 0 : _window$navigator.userAgent;
        var isSafari = /Safari/.test(ua) && !/Chrome/.test(ua);

        if (isSafari) {
          basicStyle = {
            transformOrigin: "-1px -1px",
            transform: "scale(".concat(parseInt(fontSize, 10) / 14, ")")
          };
        }

        if (color) {
          var matched = color.match(/[\d.]+/g);
          var endColor = "rgba(".concat(matched[0], ", ").concat(matched[1], ", ").concat(matched[2], ", 0)");
          setStyleFromEnv(_objectSpread$1U(_objectSpread$1U({}, basicStyle), {}, {
            background: "conic-gradient(from 90deg at 50% 50%,".concat(endColor, " 0deg, ").concat(color, " 360deg)")
          }));
        } else {
          setStyleFromEnv(_objectSpread$1U(_objectSpread$1U({}, basicStyle), {}, {
            background: ""
          }));
        }
      }
    }, []);
    return /* @__PURE__ */React__default["default"].createElement("svg", {
      className: classNames$1(gradientClass, "".concat(classPrefix, "-icon-loading")),
      viewBox: "0 0 14 14",
      version: "1.1",
      width: "1em",
      height: "1em",
      xmlns: "http://www.w3.org/2000/svg"
    }, /* @__PURE__ */React__default["default"].createElement("foreignObject", {
      x: "1",
      y: "1",
      width: "12",
      height: "12"
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(gradientClass, "-conic"),
      style: styleFromEnv,
      ref: conicRef
    })));
  };

  var Loading$1 = function Loading(props) {
    var attach = props.attach,
        _props$indicator = props.indicator,
        indicator = _props$indicator === void 0 ? true : _props$indicator,
        text = props.text,
        _props$loading = props.loading,
        loading = _props$loading === void 0 ? true : _props$loading,
        _props$size = props.size,
        size = _props$size === void 0 ? "medium" : _props$size,
        delay = props.delay,
        fullscreen = props.fullscreen,
        _props$preventScrollT = props.preventScrollThrough,
        preventScrollThrough = _props$preventScrollT === void 0 ? true : _props$preventScrollT,
        _props$showOverlay = props.showOverlay,
        showOverlay = _props$showOverlay === void 0 ? true : _props$showOverlay,
        content = props.content,
        _props$children = props.children,
        children = _props$children === void 0 ? content : _props$children,
        _props$inheritColor = props.inheritColor,
        inheritColor = _props$inheritColor === void 0 ? false : _props$inheritColor,
        zIndex = props.zIndex,
        className = props.className;

    var _useState = React.useState(delay ? false : loading),
        _useState2 = _slicedToArray(_useState, 2),
        showLoading = _useState2[0],
        setShowLoading = _useState2[1];

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var name = "".concat(classPrefix, "-loading");
    var centerClass = "".concat(classPrefix, "-loading--center");
    var inheritColorClass = "".concat(classPrefix, "-loading--inherit-color");
    var fullClass = "".concat(classPrefix, "-loading--full");
    var fullscreenClass = "".concat(classPrefix, "-loading__fullscreen");
    var lockClass = "".concat(classPrefix, "-loading--lock");
    var overlayClass = "".concat(classPrefix, "-loading__overlay");
    var relativeClass = "".concat(classPrefix, "-loading__parent");
    var textClass = "".concat(classPrefix, "-loading__text");
    React.useEffect(function () {
      var timer;

      if (delay && loading) {
        timer = setTimeout(function () {
          setShowLoading(loading);
        }, delay);
      } else {
        setShowLoading(loading);
      }

      return function () {
        clearTimeout(timer);
      };
    }, [delay, loading]);
    var calcStyles = React.useMemo(function () {
      var styles = {};

      if (zIndex !== void 0) {
        styles.zIndex = zIndex;
      }

      if (!["small", "medium", "large"].includes(size)) {
        styles["font-size"] = size;
      }

      return styles;
    }, [size, zIndex]);
    var sizeMap = {
      large: "".concat(classPrefix, "-size-l"),
      small: "".concat(classPrefix, "-size-s"),
      medium: "".concat(classPrefix, "-size-m")
    };
    var baseClasses = classNames$1(centerClass, sizeMap[size], _defineProperty$2({}, inheritColorClass, inheritColor), className);

    if (preventScrollThrough && fullscreen) {
      if (loading) {
        addClass$1(document.body, lockClass);
      } else {
        removeClass$2(document.body, lockClass);
      }
    }

    var commonContent = function commonContent() {
      var renderIndicator = /* @__PURE__ */React__default["default"].createElement(GradientLoading, null);

      if (indicator && typeof indicator !== "boolean") {
        renderIndicator = indicator;
      }

      return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, indicator ? renderIndicator : null, text ? /* @__PURE__ */React__default["default"].createElement("div", {
        className: textClass
      }, text) : null);
    };

    if (fullscreen) {
      return loading ? /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1(name, fullscreenClass, centerClass, overlayClass),
        style: calcStyles
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: baseClasses
      }, commonContent())) : null;
    }

    if (children) {
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: relativeClass
      }, children, showLoading ? /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1(name, baseClasses, fullClass, _defineProperty$2({}, overlayClass, showOverlay)),
        style: calcStyles
      }, commonContent()) : null);
    }

    if (attach) {
      return /* @__PURE__ */React__default["default"].createElement(Portal$1, {
        getContainer: attach
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1(name, baseClasses, fullClass, _defineProperty$2({}, overlayClass, showOverlay)),
        style: calcStyles
      }, commonContent()));
    }

    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(name, baseClasses),
      style: calcStyles
    }, commonContent());
  };

  function ownKeys$1T(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1T(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1T(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1T(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function createContainer$1(attach) {
    if (typeof attach === "string") return document.querySelector(attach);
    if (typeof attach === "function") return attach();
    return document.body;
  }

  var LoadingPlugin = function LoadingPlugin(options) {
    if (options === false) return {
      hide: function hide() {
        return null;
      }
    };
    var props = typeof options === "boolean" ? {} : options;
    var attach = props.attach;
    var container = createContainer$1(attach);
    var div = document.createElement("div");
    div.setAttribute("style", "width: 100%; height: 100%; position: absolute; top: 0;");
    var defaultProps = {
      loading: true,
      attach: null,
      fullscreen: !attach,
      showOverlay: !!attach
    };
    ReactDOM__default["default"].render( /* @__PURE__ */React__default["default"].createElement(Loading$1, _objectSpread$1T(_objectSpread$1T(_objectSpread$1T({}, defaultProps), props), {}, {
      attach: null
    })), div);
    container.appendChild(div);
    return {
      hide: function hide() {
        ReactDOM__default["default"].unmountComponentAtNode(div);
        div.remove();
      }
    };
  };
  var loading = LoadingPlugin;

  var Loading = Loading$1;

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass);
  }

  var propTypes = {exports: {}};

  var reactIs$1 = {exports: {}};

  var reactIs_development = {};

  {
    (function () {
      // nor polyfill, then a plain number is used for performance.

      var hasSymbol = typeof Symbol === 'function' && Symbol["for"];
      var REACT_ELEMENT_TYPE = hasSymbol ? Symbol["for"]('react.element') : 0xeac7;
      var REACT_PORTAL_TYPE = hasSymbol ? Symbol["for"]('react.portal') : 0xeaca;
      var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol["for"]('react.fragment') : 0xeacb;
      var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol["for"]('react.strict_mode') : 0xeacc;
      var REACT_PROFILER_TYPE = hasSymbol ? Symbol["for"]('react.profiler') : 0xead2;
      var REACT_PROVIDER_TYPE = hasSymbol ? Symbol["for"]('react.provider') : 0xeacd;
      var REACT_CONTEXT_TYPE = hasSymbol ? Symbol["for"]('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
      // (unstable) APIs that have been removed. Can we remove the symbols?

      var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol["for"]('react.async_mode') : 0xeacf;
      var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol["for"]('react.concurrent_mode') : 0xeacf;
      var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol["for"]('react.forward_ref') : 0xead0;
      var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol["for"]('react.suspense') : 0xead1;
      var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol["for"]('react.suspense_list') : 0xead8;
      var REACT_MEMO_TYPE = hasSymbol ? Symbol["for"]('react.memo') : 0xead3;
      var REACT_LAZY_TYPE = hasSymbol ? Symbol["for"]('react.lazy') : 0xead4;
      var REACT_BLOCK_TYPE = hasSymbol ? Symbol["for"]('react.block') : 0xead9;
      var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol["for"]('react.fundamental') : 0xead5;
      var REACT_RESPONDER_TYPE = hasSymbol ? Symbol["for"]('react.responder') : 0xead6;
      var REACT_SCOPE_TYPE = hasSymbol ? Symbol["for"]('react.scope') : 0xead7;

      function isValidElementType(type) {
        return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
        type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || _typeof(type) === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
      }

      function typeOf(object) {
        if (_typeof(object) === 'object' && object !== null) {
          var $$typeof = object.$$typeof;

          switch ($$typeof) {
            case REACT_ELEMENT_TYPE:
              var type = object.type;

              switch (type) {
                case REACT_ASYNC_MODE_TYPE:
                case REACT_CONCURRENT_MODE_TYPE:
                case REACT_FRAGMENT_TYPE:
                case REACT_PROFILER_TYPE:
                case REACT_STRICT_MODE_TYPE:
                case REACT_SUSPENSE_TYPE:
                  return type;

                default:
                  var $$typeofType = type && type.$$typeof;

                  switch ($$typeofType) {
                    case REACT_CONTEXT_TYPE:
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_LAZY_TYPE:
                    case REACT_MEMO_TYPE:
                    case REACT_PROVIDER_TYPE:
                      return $$typeofType;

                    default:
                      return $$typeof;
                  }

              }

            case REACT_PORTAL_TYPE:
              return $$typeof;
          }
        }

        return undefined;
      } // AsyncMode is deprecated along with isAsyncMode


      var AsyncMode = REACT_ASYNC_MODE_TYPE;
      var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
      var ContextConsumer = REACT_CONTEXT_TYPE;
      var ContextProvider = REACT_PROVIDER_TYPE;
      var Element = REACT_ELEMENT_TYPE;
      var ForwardRef = REACT_FORWARD_REF_TYPE;
      var Fragment = REACT_FRAGMENT_TYPE;
      var Lazy = REACT_LAZY_TYPE;
      var Memo = REACT_MEMO_TYPE;
      var Portal = REACT_PORTAL_TYPE;
      var Profiler = REACT_PROFILER_TYPE;
      var StrictMode = REACT_STRICT_MODE_TYPE;
      var Suspense = REACT_SUSPENSE_TYPE;
      var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

      function isAsyncMode(object) {
        {
          if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

            console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
          }
        }
        return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
      }

      function isConcurrentMode(object) {
        return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
      }

      function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
      }

      function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
      }

      function isElement(object) {
        return _typeof(object) === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }

      function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
      }

      function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
      }

      function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
      }

      function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
      }

      function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
      }

      function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
      }

      function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
      }

      function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
      }

      reactIs_development.AsyncMode = AsyncMode;
      reactIs_development.ConcurrentMode = ConcurrentMode;
      reactIs_development.ContextConsumer = ContextConsumer;
      reactIs_development.ContextProvider = ContextProvider;
      reactIs_development.Element = Element;
      reactIs_development.ForwardRef = ForwardRef;
      reactIs_development.Fragment = Fragment;
      reactIs_development.Lazy = Lazy;
      reactIs_development.Memo = Memo;
      reactIs_development.Portal = Portal;
      reactIs_development.Profiler = Profiler;
      reactIs_development.StrictMode = StrictMode;
      reactIs_development.Suspense = Suspense;
      reactIs_development.isAsyncMode = isAsyncMode;
      reactIs_development.isConcurrentMode = isConcurrentMode;
      reactIs_development.isContextConsumer = isContextConsumer;
      reactIs_development.isContextProvider = isContextProvider;
      reactIs_development.isElement = isElement;
      reactIs_development.isForwardRef = isForwardRef;
      reactIs_development.isFragment = isFragment;
      reactIs_development.isLazy = isLazy;
      reactIs_development.isMemo = isMemo;
      reactIs_development.isPortal = isPortal;
      reactIs_development.isProfiler = isProfiler;
      reactIs_development.isStrictMode = isStrictMode;
      reactIs_development.isSuspense = isSuspense;
      reactIs_development.isValidElementType = isValidElementType;
      reactIs_development.typeOf = typeOf;
    })();
  }

  {
    reactIs$1.exports = reactIs_development;
  }

  /*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  */
  /* eslint-disable no-unused-vars */


  var getOwnPropertySymbols$1 = Object.getOwnPropertySymbols;
  var hasOwnProperty$e = Object.prototype.hasOwnProperty;
  var propIsEnumerable = Object.prototype.propertyIsEnumerable;

  function toObject(val) {
    if (val === null || val === undefined) {
      throw new TypeError('Object.assign cannot be called with null or undefined');
    }

    return Object(val);
  }

  function shouldUseNative() {
    try {
      if (!Object.assign) {
        return false;
      } // Detect buggy property enumeration order in older V8 versions.
      // https://bugs.chromium.org/p/v8/issues/detail?id=4118


      var test1 = new String('abc'); // eslint-disable-line no-new-wrappers

      test1[5] = 'de';

      if (Object.getOwnPropertyNames(test1)[0] === '5') {
        return false;
      } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


      var test2 = {};

      for (var i = 0; i < 10; i++) {
        test2['_' + String.fromCharCode(i)] = i;
      }

      var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
        return test2[n];
      });

      if (order2.join('') !== '0123456789') {
        return false;
      } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


      var test3 = {};
      'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
        test3[letter] = letter;
      });

      if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
        return false;
      }

      return true;
    } catch (err) {
      // We don't expect any of the above to throw, but better to be safe.
      return false;
    }
  }

  var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
    var from;
    var to = toObject(target);
    var symbols;

    for (var s = 1; s < arguments.length; s++) {
      from = Object(arguments[s]);

      for (var key in from) {
        if (hasOwnProperty$e.call(from, key)) {
          to[key] = from[key];
        }
      }

      if (getOwnPropertySymbols$1) {
        symbols = getOwnPropertySymbols$1(from);

        for (var i = 0; i < symbols.length; i++) {
          if (propIsEnumerable.call(from, symbols[i])) {
            to[symbols[i]] = from[symbols[i]];
          }
        }
      }
    }

    return to;
  };

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  var ReactPropTypesSecret$2 = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
  var ReactPropTypesSecret_1 = ReactPropTypesSecret$2;

  var has$2 = Function.call.bind(Object.prototype.hasOwnProperty);

  var printWarning$1 = function printWarning() {};

  {
    var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
    var loggedTypeFailures = {};
    var has$1 = has$2;

    printWarning$1 = function printWarning(text) {
      var message = 'Warning: ' + text;

      if (typeof console !== 'undefined') {
        console.error(message);
      }

      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {
        /**/
      }
    };
  }
  /**
   * Assert that the values match with the type specs.
   * Error messages are memorized and will only be shown once.
   *
   * @param {object} typeSpecs Map of name to a ReactPropType
   * @param {object} values Runtime values that need to be type-checked
   * @param {string} location e.g. "prop", "context", "child context"
   * @param {string} componentName Name of the component for error messages.
   * @param {?Function} getStack Returns the component stack.
   * @private
   */


  function checkPropTypes$1(typeSpecs, values, location, componentName, getStack) {
    {
      for (var typeSpecName in typeSpecs) {
        if (has$1(typeSpecs, typeSpecName)) {
          var error; // Prop type validation may throw. In case they do, we don't want to
          // fail the render phase where it didn't fail before. So we log it.
          // After these have been cleaned up, we'll let them throw.

          try {
            // This is intentionally an invariant that gets caught. It's the same
            // behavior as without this statement except with a better message.
            if (typeof typeSpecs[typeSpecName] !== 'function') {
              var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + _typeof(typeSpecs[typeSpecName]) + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
              err.name = 'Invariant Violation';
              throw err;
            }

            error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);
          } catch (ex) {
            error = ex;
          }

          if (error && !(error instanceof Error)) {
            printWarning$1((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + _typeof(error) + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
          }

          if (error instanceof Error && !(error.message in loggedTypeFailures)) {
            // Only monitor this failure once because there tends to be a lot of the
            // same error.
            loggedTypeFailures[error.message] = true;
            var stack = getStack ? getStack() : '';
            printWarning$1('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
          }
        }
      }
    }
  }
  /**
   * Resets warning cache when testing.
   *
   * @private
   */


  checkPropTypes$1.resetWarningCache = function () {
    {
      loggedTypeFailures = {};
    }
  };

  var checkPropTypes_1 = checkPropTypes$1;

  var ReactIs$1 = reactIs$1.exports;
  var assign = objectAssign;
  var ReactPropTypesSecret = ReactPropTypesSecret_1;
  var has = has$2;
  var checkPropTypes = checkPropTypes_1;

  var printWarning = function printWarning() {};

  {
    printWarning = function printWarning(text) {
      var message = 'Warning: ' + text;

      if (typeof console !== 'undefined') {
        console.error(message);
      }

      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    };
  }

  function emptyFunctionThatReturnsNull() {
    return null;
  }

  var factoryWithTypeCheckers = function factoryWithTypeCheckers(isValidElement, throwOnDirectAccess) {
    /* global Symbol */
    var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

    /**
     * Returns the iterator method function contained on the iterable object.
     *
     * Be sure to invoke the function with the iterable as context:
     *
     *     var iteratorFn = getIteratorFn(myIterable);
     *     if (iteratorFn) {
     *       var iterator = iteratorFn.call(myIterable);
     *       ...
     *     }
     *
     * @param {?object} maybeIterable
     * @return {?function}
     */

    function getIteratorFn(maybeIterable) {
      var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);

      if (typeof iteratorFn === 'function') {
        return iteratorFn;
      }
    }
    /**
     * Collection of methods that allow declaration and validation of props that are
     * supplied to React components. Example usage:
     *
     *   var Props = require('ReactPropTypes');
     *   var MyArticle = React.createClass({
     *     propTypes: {
     *       // An optional string prop named "description".
     *       description: Props.string,
     *
     *       // A required enum prop named "category".
     *       category: Props.oneOf(['News','Photos']).isRequired,
     *
     *       // A prop named "dialog" that requires an instance of Dialog.
     *       dialog: Props.instanceOf(Dialog).isRequired
     *     },
     *     render: function() { ... }
     *   });
     *
     * A more formal specification of how these methods are used:
     *
     *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
     *   decl := ReactPropTypes.{type}(.isRequired)?
     *
     * Each and every declaration produces a function with the same signature. This
     * allows the creation of custom validation functions. For example:
     *
     *  var MyLink = React.createClass({
     *    propTypes: {
     *      // An optional string or URI prop named "href".
     *      href: function(props, propName, componentName) {
     *        var propValue = props[propName];
     *        if (propValue != null && typeof propValue !== 'string' &&
     *            !(propValue instanceof URI)) {
     *          return new Error(
     *            'Expected a string or an URI for ' + propName + ' in ' +
     *            componentName
     *          );
     *        }
     *      }
     *    },
     *    render: function() {...}
     *  });
     *
     * @internal
     */


    var ANONYMOUS = '<<anonymous>>'; // Important!
    // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.

    var ReactPropTypes = {
      array: createPrimitiveTypeChecker('array'),
      bigint: createPrimitiveTypeChecker('bigint'),
      bool: createPrimitiveTypeChecker('boolean'),
      func: createPrimitiveTypeChecker('function'),
      number: createPrimitiveTypeChecker('number'),
      object: createPrimitiveTypeChecker('object'),
      string: createPrimitiveTypeChecker('string'),
      symbol: createPrimitiveTypeChecker('symbol'),
      any: createAnyTypeChecker(),
      arrayOf: createArrayOfTypeChecker,
      element: createElementTypeChecker(),
      elementType: createElementTypeTypeChecker(),
      instanceOf: createInstanceTypeChecker,
      node: createNodeChecker(),
      objectOf: createObjectOfTypeChecker,
      oneOf: createEnumTypeChecker,
      oneOfType: createUnionTypeChecker,
      shape: createShapeTypeChecker,
      exact: createStrictShapeTypeChecker
    };
    /**
     * inlined Object.is polyfill to avoid requiring consumers ship their own
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
     */

    /*eslint-disable no-self-compare*/

    function is(x, y) {
      // SameValue algorithm
      if (x === y) {
        // Steps 1-5, 7-10
        // Steps 6.b-6.e: +0 != -0
        return x !== 0 || 1 / x === 1 / y;
      } else {
        // Step 6.a: NaN == NaN
        return x !== x && y !== y;
      }
    }
    /*eslint-enable no-self-compare*/

    /**
     * We use an Error-like object for backward compatibility as people may call
     * PropTypes directly and inspect their output. However, we don't use real
     * Errors anymore. We don't inspect their stack anyway, and creating them
     * is prohibitively expensive if they are created too often, such as what
     * happens in oneOfType() for any type before the one that matched.
     */


    function PropTypeError(message, data) {
      this.message = message;
      this.data = data && _typeof(data) === 'object' ? data : {};
      this.stack = '';
    } // Make `instanceof Error` still work for returned errors.


    PropTypeError.prototype = Error.prototype;

    function createChainableTypeChecker(validate) {
      {
        var manualPropTypeCallCache = {};
        var manualPropTypeWarningCount = 0;
      }

      function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
        componentName = componentName || ANONYMOUS;
        propFullName = propFullName || propName;

        if (secret !== ReactPropTypesSecret) {
          if (throwOnDirectAccess) {
            // New behavior only for users of `prop-types` package
            var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
            err.name = 'Invariant Violation';
            throw err;
          } else if (typeof console !== 'undefined') {
            // Old behavior for people using React.PropTypes
            var cacheKey = componentName + ':' + propName;

            if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3) {
              printWarning('You are manually calling a React.PropTypes validation ' + 'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
              manualPropTypeCallCache[cacheKey] = true;
              manualPropTypeWarningCount++;
            }
          }
        }

        if (props[propName] == null) {
          if (isRequired) {
            if (props[propName] === null) {
              return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
            }

            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
          }

          return null;
        } else {
          return validate(props, propName, componentName, location, propFullName);
        }
      }

      var chainedCheckType = checkType.bind(null, false);
      chainedCheckType.isRequired = checkType.bind(null, true);
      return chainedCheckType;
    }

    function createPrimitiveTypeChecker(expectedType) {
      function validate(props, propName, componentName, location, propFullName, secret) {
        var propValue = props[propName];
        var propType = getPropType(propValue);

        if (propType !== expectedType) {
          // `propValue` being instance of, say, date/regexp, pass the 'object'
          // check, but we can offer a more precise error message here rather than
          // 'of type `object`'.
          var preciseType = getPreciseType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'), {
            expectedType: expectedType
          });
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createAnyTypeChecker() {
      return createChainableTypeChecker(emptyFunctionThatReturnsNull);
    }

    function createArrayOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location, propFullName) {
        if (typeof typeChecker !== 'function') {
          return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
        }

        var propValue = props[propName];

        if (!Array.isArray(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
        }

        for (var i = 0; i < propValue.length; i++) {
          var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);

          if (error instanceof Error) {
            return error;
          }
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createElementTypeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];

        if (!isValidElement(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createElementTypeTypeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];

        if (!ReactIs$1.isValidElementType(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createInstanceTypeChecker(expectedClass) {
      function validate(props, propName, componentName, location, propFullName) {
        if (!(props[propName] instanceof expectedClass)) {
          var expectedClassName = expectedClass.name || ANONYMOUS;
          var actualClassName = getClassName(props[propName]);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createEnumTypeChecker(expectedValues) {
      if (!Array.isArray(expectedValues)) {
        {
          if (arguments.length > 1) {
            printWarning('Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' + 'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');
          } else {
            printWarning('Invalid argument supplied to oneOf, expected an array.');
          }
        }

        return emptyFunctionThatReturnsNull;
      }

      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];

        for (var i = 0; i < expectedValues.length; i++) {
          if (is(propValue, expectedValues[i])) {
            return null;
          }
        }

        var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
          var type = getPreciseType(value);

          if (type === 'symbol') {
            return String(value);
          }

          return value;
        });
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
      }

      return createChainableTypeChecker(validate);
    }

    function createObjectOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location, propFullName) {
        if (typeof typeChecker !== 'function') {
          return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
        }

        var propValue = props[propName];
        var propType = getPropType(propValue);

        if (propType !== 'object') {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
        }

        for (var key in propValue) {
          if (has(propValue, key)) {
            var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

            if (error instanceof Error) {
              return error;
            }
          }
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createUnionTypeChecker(arrayOfTypeCheckers) {
      if (!Array.isArray(arrayOfTypeCheckers)) {
        printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') ;
        return emptyFunctionThatReturnsNull;
      }

      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];

        if (typeof checker !== 'function') {
          printWarning('Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
          return emptyFunctionThatReturnsNull;
        }
      }

      function validate(props, propName, componentName, location, propFullName) {
        var expectedTypes = [];

        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret);

          if (checkerResult == null) {
            return null;
          }

          if (checkerResult.data && has(checkerResult.data, 'expectedType')) {
            expectedTypes.push(checkerResult.data.expectedType);
          }
        }

        var expectedTypesMessage = expectedTypes.length > 0 ? ', expected one of type [' + expectedTypes.join(', ') + ']' : '';
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`' + expectedTypesMessage + '.'));
      }

      return createChainableTypeChecker(validate);
    }

    function createNodeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        if (!isNode(props[propName])) {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function invalidValidatorError(componentName, location, propFullName, key, type) {
      return new PropTypeError((componentName || 'React class') + ': ' + location + ' type `' + propFullName + '.' + key + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + type + '`.');
    }

    function createShapeTypeChecker(shapeTypes) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);

        if (propType !== 'object') {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
        }

        for (var key in shapeTypes) {
          var checker = shapeTypes[key];

          if (typeof checker !== 'function') {
            return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
          }

          var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

          if (error) {
            return error;
          }
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createStrictShapeTypeChecker(shapeTypes) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);

        if (propType !== 'object') {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
        } // We need to check all keys in case some are required but missing from props.


        var allKeys = assign({}, props[propName], shapeTypes);

        for (var key in allKeys) {
          var checker = shapeTypes[key];

          if (has(shapeTypes, key) && typeof checker !== 'function') {
            return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
          }

          if (!checker) {
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
          }

          var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

          if (error) {
            return error;
          }
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function isNode(propValue) {
      switch (_typeof(propValue)) {
        case 'number':
        case 'string':
        case 'undefined':
          return true;

        case 'boolean':
          return !propValue;

        case 'object':
          if (Array.isArray(propValue)) {
            return propValue.every(isNode);
          }

          if (propValue === null || isValidElement(propValue)) {
            return true;
          }

          var iteratorFn = getIteratorFn(propValue);

          if (iteratorFn) {
            var iterator = iteratorFn.call(propValue);
            var step;

            if (iteratorFn !== propValue.entries) {
              while (!(step = iterator.next()).done) {
                if (!isNode(step.value)) {
                  return false;
                }
              }
            } else {
              // Iterator will provide entry [k,v] tuples rather than values.
              while (!(step = iterator.next()).done) {
                var entry = step.value;

                if (entry) {
                  if (!isNode(entry[1])) {
                    return false;
                  }
                }
              }
            }
          } else {
            return false;
          }

          return true;

        default:
          return false;
      }
    }

    function isSymbol(propType, propValue) {
      // Native Symbol.
      if (propType === 'symbol') {
        return true;
      } // falsy value can't be a Symbol


      if (!propValue) {
        return false;
      } // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'


      if (propValue['@@toStringTag'] === 'Symbol') {
        return true;
      } // Fallback for non-spec compliant Symbols which are polyfilled.


      if (typeof Symbol === 'function' && propValue instanceof Symbol) {
        return true;
      }

      return false;
    } // Equivalent of `typeof` but with special handling for array and regexp.


    function getPropType(propValue) {
      var propType = _typeof(propValue);

      if (Array.isArray(propValue)) {
        return 'array';
      }

      if (propValue instanceof RegExp) {
        // Old webkits (at least until Android 4.0) return 'function' rather than
        // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
        // passes PropTypes.object.
        return 'object';
      }

      if (isSymbol(propType, propValue)) {
        return 'symbol';
      }

      return propType;
    } // This handles more types than `getPropType`. Only used for error messages.
    // See `createPrimitiveTypeChecker`.


    function getPreciseType(propValue) {
      if (typeof propValue === 'undefined' || propValue === null) {
        return '' + propValue;
      }

      var propType = getPropType(propValue);

      if (propType === 'object') {
        if (propValue instanceof Date) {
          return 'date';
        } else if (propValue instanceof RegExp) {
          return 'regexp';
        }
      }

      return propType;
    } // Returns a string that is postfixed to a warning about an invalid type.
    // For example, "undefined" or "of type array"


    function getPostfixForTypeWarning(value) {
      var type = getPreciseType(value);

      switch (type) {
        case 'array':
        case 'object':
          return 'an ' + type;

        case 'boolean':
        case 'date':
        case 'regexp':
          return 'a ' + type;

        default:
          return type;
      }
    } // Returns class name of the object, if any.


    function getClassName(propValue) {
      if (!propValue.constructor || !propValue.constructor.name) {
        return ANONYMOUS;
      }

      return propValue.constructor.name;
    }

    ReactPropTypes.checkPropTypes = checkPropTypes;
    ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
  };

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  {
    var ReactIs = reactIs$1.exports; // By explicitly using `prop-types` you are opting into new development behavior.
    // http://fb.me/prop-types-in-prod

    var throwOnDirectAccess = true;
    propTypes.exports = factoryWithTypeCheckers(ReactIs.isElement, throwOnDirectAccess);
  }

  var PropTypes = propTypes.exports;

  /**
   * Checks if a given element has a CSS class.
   * 
   * @param element the element
   * @param className the CSS class name
   */
  function hasClass(element, className) {
    if (element.classList) return !!className && element.classList.contains(className);
    return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
  }

  /**
   * Adds a CSS class to a given element.
   * 
   * @param element the element
   * @param className the CSS class name
   */

  function addClass(element, className) {
    if (element.classList) element.classList.add(className);else if (!hasClass(element, className)) if (typeof element.className === 'string') element.className = element.className + " " + className;else element.setAttribute('class', (element.className && element.className.baseVal || '') + " " + className);
  }

  function replaceClassName(origClass, classToRemove) {
    return origClass.replace(new RegExp("(^|\\s)" + classToRemove + "(?:\\s|$)", 'g'), '$1').replace(/\s+/g, ' ').replace(/^\s*|\s*$/g, '');
  }
  /**
   * Removes a CSS class from a given element.
   * 
   * @param element the element
   * @param className the CSS class name
   */


  function removeClass$1(element, className) {
    if (element.classList) {
      element.classList.remove(className);
    } else if (typeof element.className === 'string') {
      element.className = replaceClassName(element.className, className);
    } else {
      element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));
    }
  }

  var config = {
    disabled: false
  };

  var timeoutsShape = PropTypes.oneOfType([PropTypes.number, PropTypes.shape({
    enter: PropTypes.number,
    exit: PropTypes.number,
    appear: PropTypes.number
  }).isRequired]) ;
  var classNamesShape = PropTypes.oneOfType([PropTypes.string, PropTypes.shape({
    enter: PropTypes.string,
    exit: PropTypes.string,
    active: PropTypes.string
  }), PropTypes.shape({
    enter: PropTypes.string,
    enterDone: PropTypes.string,
    enterActive: PropTypes.string,
    exit: PropTypes.string,
    exitDone: PropTypes.string,
    exitActive: PropTypes.string
  })]) ;

  var TransitionGroupContext = /*#__PURE__*/React__default["default"].createContext(null);

  var UNMOUNTED = 'unmounted';
  var EXITED = 'exited';
  var ENTERING = 'entering';
  var ENTERED = 'entered';
  var EXITING = 'exiting';
  /**
   * The Transition component lets you describe a transition from one component
   * state to another _over time_ with a simple declarative API. Most commonly
   * it's used to animate the mounting and unmounting of a component, but can also
   * be used to describe in-place transition states as well.
   *
   * ---
   *
   * **Note**: `Transition` is a platform-agnostic base component. If you're using
   * transitions in CSS, you'll probably want to use
   * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
   * instead. It inherits all the features of `Transition`, but contains
   * additional features necessary to play nice with CSS transitions (hence the
   * name of the component).
   *
   * ---
   *
   * By default the `Transition` component does not alter the behavior of the
   * component it renders, it only tracks "enter" and "exit" states for the
   * components. It's up to you to give meaning and effect to those states. For
   * example we can add styles to a component when it enters or exits:
   *
   * ```jsx
   * import { Transition } from 'react-transition-group';
   *
   * const duration = 300;
   *
   * const defaultStyle = {
   *   transition: `opacity ${duration}ms ease-in-out`,
   *   opacity: 0,
   * }
   *
   * const transitionStyles = {
   *   entering: { opacity: 1 },
   *   entered:  { opacity: 1 },
   *   exiting:  { opacity: 0 },
   *   exited:  { opacity: 0 },
   * };
   *
   * const Fade = ({ in: inProp }) => (
   *   <Transition in={inProp} timeout={duration}>
   *     {state => (
   *       <div style={{
   *         ...defaultStyle,
   *         ...transitionStyles[state]
   *       }}>
   *         I'm a fade Transition!
   *       </div>
   *     )}
   *   </Transition>
   * );
   * ```
   *
   * There are 4 main states a Transition can be in:
   *  - `'entering'`
   *  - `'entered'`
   *  - `'exiting'`
   *  - `'exited'`
   *
   * Transition state is toggled via the `in` prop. When `true` the component
   * begins the "Enter" stage. During this stage, the component will shift from
   * its current transition state, to `'entering'` for the duration of the
   * transition and then to the `'entered'` stage once it's complete. Let's take
   * the following example (we'll use the
   * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
   *
   * ```jsx
   * function App() {
   *   const [inProp, setInProp] = useState(false);
   *   return (
   *     <div>
   *       <Transition in={inProp} timeout={500}>
   *         {state => (
   *           // ...
   *         )}
   *       </Transition>
   *       <button onClick={() => setInProp(true)}>
   *         Click to Enter
   *       </button>
   *     </div>
   *   );
   * }
   * ```
   *
   * When the button is clicked the component will shift to the `'entering'` state
   * and stay there for 500ms (the value of `timeout`) before it finally switches
   * to `'entered'`.
   *
   * When `in` is `false` the same thing happens except the state moves from
   * `'exiting'` to `'exited'`.
   */

  var Transition = /*#__PURE__*/function (_React$Component) {
    _inheritsLoose(Transition, _React$Component);

    function Transition(props, context) {
      var _this;

      _this = _React$Component.call(this, props, context) || this;
      var parentGroup = context; // In the context of a TransitionGroup all enters are really appears

      var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
      var initialStatus;
      _this.appearStatus = null;

      if (props["in"]) {
        if (appear) {
          initialStatus = EXITED;
          _this.appearStatus = ENTERING;
        } else {
          initialStatus = ENTERED;
        }
      } else {
        if (props.unmountOnExit || props.mountOnEnter) {
          initialStatus = UNMOUNTED;
        } else {
          initialStatus = EXITED;
        }
      }

      _this.state = {
        status: initialStatus
      };
      _this.nextCallback = null;
      return _this;
    }

    Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
      var nextIn = _ref["in"];

      if (nextIn && prevState.status === UNMOUNTED) {
        return {
          status: EXITED
        };
      }

      return null;
    } // getSnapshotBeforeUpdate(prevProps) {
    //   let nextStatus = null
    //   if (prevProps !== this.props) {
    //     const { status } = this.state
    //     if (this.props.in) {
    //       if (status !== ENTERING && status !== ENTERED) {
    //         nextStatus = ENTERING
    //       }
    //     } else {
    //       if (status === ENTERING || status === ENTERED) {
    //         nextStatus = EXITING
    //       }
    //     }
    //   }
    //   return { nextStatus }
    // }
    ;

    var _proto = Transition.prototype;

    _proto.componentDidMount = function componentDidMount() {
      this.updateStatus(true, this.appearStatus);
    };

    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
      var nextStatus = null;

      if (prevProps !== this.props) {
        var status = this.state.status;

        if (this.props["in"]) {
          if (status !== ENTERING && status !== ENTERED) {
            nextStatus = ENTERING;
          }
        } else {
          if (status === ENTERING || status === ENTERED) {
            nextStatus = EXITING;
          }
        }
      }

      this.updateStatus(false, nextStatus);
    };

    _proto.componentWillUnmount = function componentWillUnmount() {
      this.cancelNextCallback();
    };

    _proto.getTimeouts = function getTimeouts() {
      var timeout = this.props.timeout;
      var exit, enter, appear;
      exit = enter = appear = timeout;

      if (timeout != null && typeof timeout !== 'number') {
        exit = timeout.exit;
        enter = timeout.enter; // TODO: remove fallback for next major

        appear = timeout.appear !== undefined ? timeout.appear : enter;
      }

      return {
        exit: exit,
        enter: enter,
        appear: appear
      };
    };

    _proto.updateStatus = function updateStatus(mounting, nextStatus) {
      if (mounting === void 0) {
        mounting = false;
      }

      if (nextStatus !== null) {
        // nextStatus will always be ENTERING or EXITING.
        this.cancelNextCallback();

        if (nextStatus === ENTERING) {
          this.performEnter(mounting);
        } else {
          this.performExit();
        }
      } else if (this.props.unmountOnExit && this.state.status === EXITED) {
        this.setState({
          status: UNMOUNTED
        });
      }
    };

    _proto.performEnter = function performEnter(mounting) {
      var _this2 = this;

      var enter = this.props.enter;
      var appearing = this.context ? this.context.isMounting : mounting;

      var _ref2 = this.props.nodeRef ? [appearing] : [ReactDOM__default["default"].findDOMNode(this), appearing],
          maybeNode = _ref2[0],
          maybeAppearing = _ref2[1];

      var timeouts = this.getTimeouts();
      var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
      // if we are mounting and running this it means appear _must_ be set

      if (!mounting && !enter || config.disabled) {
        this.safeSetState({
          status: ENTERED
        }, function () {
          _this2.props.onEntered(maybeNode);
        });
        return;
      }

      this.props.onEnter(maybeNode, maybeAppearing);
      this.safeSetState({
        status: ENTERING
      }, function () {
        _this2.props.onEntering(maybeNode, maybeAppearing);

        _this2.onTransitionEnd(enterTimeout, function () {
          _this2.safeSetState({
            status: ENTERED
          }, function () {
            _this2.props.onEntered(maybeNode, maybeAppearing);
          });
        });
      });
    };

    _proto.performExit = function performExit() {
      var _this3 = this;

      var exit = this.props.exit;
      var timeouts = this.getTimeouts();
      var maybeNode = this.props.nodeRef ? undefined : ReactDOM__default["default"].findDOMNode(this); // no exit animation skip right to EXITED

      if (!exit || config.disabled) {
        this.safeSetState({
          status: EXITED
        }, function () {
          _this3.props.onExited(maybeNode);
        });
        return;
      }

      this.props.onExit(maybeNode);
      this.safeSetState({
        status: EXITING
      }, function () {
        _this3.props.onExiting(maybeNode);

        _this3.onTransitionEnd(timeouts.exit, function () {
          _this3.safeSetState({
            status: EXITED
          }, function () {
            _this3.props.onExited(maybeNode);
          });
        });
      });
    };

    _proto.cancelNextCallback = function cancelNextCallback() {
      if (this.nextCallback !== null) {
        this.nextCallback.cancel();
        this.nextCallback = null;
      }
    };

    _proto.safeSetState = function safeSetState(nextState, callback) {
      // This shouldn't be necessary, but there are weird race conditions with
      // setState callbacks and unmounting in testing, so always make sure that
      // we can cancel any pending setState callbacks after we unmount.
      callback = this.setNextCallback(callback);
      this.setState(nextState, callback);
    };

    _proto.setNextCallback = function setNextCallback(callback) {
      var _this4 = this;

      var active = true;

      this.nextCallback = function (event) {
        if (active) {
          active = false;
          _this4.nextCallback = null;
          callback(event);
        }
      };

      this.nextCallback.cancel = function () {
        active = false;
      };

      return this.nextCallback;
    };

    _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {
      this.setNextCallback(handler);
      var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM__default["default"].findDOMNode(this);
      var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;

      if (!node || doesNotHaveTimeoutOrListener) {
        setTimeout(this.nextCallback, 0);
        return;
      }

      if (this.props.addEndListener) {
        var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback],
            maybeNode = _ref3[0],
            maybeNextCallback = _ref3[1];

        this.props.addEndListener(maybeNode, maybeNextCallback);
      }

      if (timeout != null) {
        setTimeout(this.nextCallback, timeout);
      }
    };

    _proto.render = function render() {
      var status = this.state.status;

      if (status === UNMOUNTED) {
        return null;
      }

      var _this$props = this.props,
          children = _this$props.children;
          _this$props["in"];
          _this$props.mountOnEnter;
          _this$props.unmountOnExit;
          _this$props.appear;
          _this$props.enter;
          _this$props.exit;
          _this$props.timeout;
          _this$props.addEndListener;
          _this$props.onEnter;
          _this$props.onEntering;
          _this$props.onEntered;
          _this$props.onExit;
          _this$props.onExiting;
          _this$props.onExited;
          _this$props.nodeRef;
          var childProps = _objectWithoutPropertiesLoose$1(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);

      return (
        /*#__PURE__*/
        // allows for nested Transitions
        React__default["default"].createElement(TransitionGroupContext.Provider, {
          value: null
        }, typeof children === 'function' ? children(status, childProps) : /*#__PURE__*/React__default["default"].cloneElement(React__default["default"].Children.only(children), childProps))
      );
    };

    return Transition;
  }(React__default["default"].Component);

  Transition.contextType = TransitionGroupContext;
  Transition.propTypes = {
    /**
     * A React reference to DOM element that need to transition:
     * https://stackoverflow.com/a/51127130/4671932
     *
     *   - When `nodeRef` prop is used, `node` is not passed to callback functions
     *      (e.g. `onEnter`) because user already has direct access to the node.
     *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
     *     `nodeRef` need to be provided to `Transition` with changed `key` prop
     *     (see
     *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
     */
    nodeRef: PropTypes.shape({
      current: typeof Element === 'undefined' ? PropTypes.any : function (propValue, key, componentName, location, propFullName, secret) {
        var value = propValue[key];
        return PropTypes.instanceOf(value && 'ownerDocument' in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);
      }
    }),

    /**
     * A `function` child can be used instead of a React element. This function is
     * called with the current transition status (`'entering'`, `'entered'`,
     * `'exiting'`, `'exited'`), which can be used to apply context
     * specific props to a component.
     *
     * ```jsx
     * <Transition in={this.state.in} timeout={150}>
     *   {state => (
     *     <MyComponent className={`fade fade-${state}`} />
     *   )}
     * </Transition>
     * ```
     */
    children: PropTypes.oneOfType([PropTypes.func.isRequired, PropTypes.element.isRequired]).isRequired,

    /**
     * Show the component; triggers the enter or exit states
     */
    "in": PropTypes.bool,

    /**
     * By default the child component is mounted immediately along with
     * the parent `Transition` component. If you want to "lazy mount" the component on the
     * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
     * mounted, even on "exited", unless you also specify `unmountOnExit`.
     */
    mountOnEnter: PropTypes.bool,

    /**
     * By default the child component stays mounted after it reaches the `'exited'` state.
     * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
     */
    unmountOnExit: PropTypes.bool,

    /**
     * By default the child component does not perform the enter transition when
     * it first mounts, regardless of the value of `in`. If you want this
     * behavior, set both `appear` and `in` to `true`.
     *
     * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
     * > only adds an additional enter transition. However, in the
     * > `<CSSTransition>` component that first enter transition does result in
     * > additional `.appear-*` classes, that way you can choose to style it
     * > differently.
     */
    appear: PropTypes.bool,

    /**
     * Enable or disable enter transitions.
     */
    enter: PropTypes.bool,

    /**
     * Enable or disable exit transitions.
     */
    exit: PropTypes.bool,

    /**
     * The duration of the transition, in milliseconds.
     * Required unless `addEndListener` is provided.
     *
     * You may specify a single timeout for all transitions:
     *
     * ```jsx
     * timeout={500}
     * ```
     *
     * or individually:
     *
     * ```jsx
     * timeout={{
     *  appear: 500,
     *  enter: 300,
     *  exit: 500,
     * }}
     * ```
     *
     * - `appear` defaults to the value of `enter`
     * - `enter` defaults to `0`
     * - `exit` defaults to `0`
     *
     * @type {number | { enter?: number, exit?: number, appear?: number }}
     */
    timeout: function timeout(props) {
      var pt = timeoutsShape;
      if (!props.addEndListener) pt = pt.isRequired;

      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return pt.apply(void 0, [props].concat(args));
    },

    /**
     * Add a custom transition end trigger. Called with the transitioning
     * DOM node and a `done` callback. Allows for more fine grained transition end
     * logic. Timeouts are still used as a fallback if provided.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * ```jsx
     * addEndListener={(node, done) => {
     *   // use the css transitionend event to mark the finish of a transition
     *   node.addEventListener('transitionend', done, false);
     * }}
     * ```
     */
    addEndListener: PropTypes.func,

    /**
     * Callback fired before the "entering" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool) -> void
     */
    onEnter: PropTypes.func,

    /**
     * Callback fired after the "entering" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool)
     */
    onEntering: PropTypes.func,

    /**
     * Callback fired after the "entered" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool) -> void
     */
    onEntered: PropTypes.func,

    /**
     * Callback fired before the "exiting" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExit: PropTypes.func,

    /**
     * Callback fired after the "exiting" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExiting: PropTypes.func,

    /**
     * Callback fired after the "exited" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExited: PropTypes.func
  } ; // Name the function so it is clearer in the documentation

  function noop$1() {}

  Transition.defaultProps = {
    "in": false,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
    enter: true,
    exit: true,
    onEnter: noop$1,
    onEntering: noop$1,
    onEntered: noop$1,
    onExit: noop$1,
    onExiting: noop$1,
    onExited: noop$1
  };
  Transition.UNMOUNTED = UNMOUNTED;
  Transition.EXITED = EXITED;
  Transition.ENTERING = ENTERING;
  Transition.ENTERED = ENTERED;
  Transition.EXITING = EXITING;
  var Transition$1 = Transition;

  var _addClass = function addClass$1(node, classes) {
    return node && classes && classes.split(' ').forEach(function (c) {
      return addClass(node, c);
    });
  };

  var removeClass = function removeClass(node, classes) {
    return node && classes && classes.split(' ').forEach(function (c) {
      return removeClass$1(node, c);
    });
  };
  /**
   * A transition component inspired by the excellent
   * [ng-animate](https://docs.angularjs.org/api/ngAnimate) library, you should
   * use it if you're using CSS transitions or animations. It's built upon the
   * [`Transition`](https://reactcommunity.org/react-transition-group/transition)
   * component, so it inherits all of its props.
   *
   * `CSSTransition` applies a pair of class names during the `appear`, `enter`,
   * and `exit` states of the transition. The first class is applied and then a
   * second `*-active` class in order to activate the CSS transition. After the
   * transition, matching `*-done` class names are applied to persist the
   * transition state.
   *
   * ```jsx
   * function App() {
   *   const [inProp, setInProp] = useState(false);
   *   return (
   *     <div>
   *       <CSSTransition in={inProp} timeout={200} classNames="my-node">
   *         <div>
   *           {"I'll receive my-node-* classes"}
   *         </div>
   *       </CSSTransition>
   *       <button type="button" onClick={() => setInProp(true)}>
   *         Click to Enter
   *       </button>
   *     </div>
   *   );
   * }
   * ```
   *
   * When the `in` prop is set to `true`, the child component will first receive
   * the class `example-enter`, then the `example-enter-active` will be added in
   * the next tick. `CSSTransition` [forces a
   * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)
   * between before adding the `example-enter-active`. This is an important trick
   * because it allows us to transition between `example-enter` and
   * `example-enter-active` even though they were added immediately one after
   * another. Most notably, this is what makes it possible for us to animate
   * _appearance_.
   *
   * ```css
   * .my-node-enter {
   *   opacity: 0;
   * }
   * .my-node-enter-active {
   *   opacity: 1;
   *   transition: opacity 200ms;
   * }
   * .my-node-exit {
   *   opacity: 1;
   * }
   * .my-node-exit-active {
   *   opacity: 0;
   *   transition: opacity 200ms;
   * }
   * ```
   *
   * `*-active` classes represent which styles you want to animate **to**, so it's
   * important to add `transition` declaration only to them, otherwise transitions
   * might not behave as intended! This might not be obvious when the transitions
   * are symmetrical, i.e. when `*-enter-active` is the same as `*-exit`, like in
   * the example above (minus `transition`), but it becomes apparent in more
   * complex transitions.
   *
   * **Note**: If you're using the
   * [`appear`](http://reactcommunity.org/react-transition-group/transition#Transition-prop-appear)
   * prop, make sure to define styles for `.appear-*` classes as well.
   */


  var CSSTransition = /*#__PURE__*/function (_React$Component) {
    _inheritsLoose(CSSTransition, _React$Component);

    function CSSTransition() {
      var _this;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.appliedClasses = {
        appear: {},
        enter: {},
        exit: {}
      };

      _this.onEnter = function (maybeNode, maybeAppearing) {
        var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing),
            node = _this$resolveArgument[0],
            appearing = _this$resolveArgument[1];

        _this.removeClasses(node, 'exit');

        _this.addClass(node, appearing ? 'appear' : 'enter', 'base');

        if (_this.props.onEnter) {
          _this.props.onEnter(maybeNode, maybeAppearing);
        }
      };

      _this.onEntering = function (maybeNode, maybeAppearing) {
        var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing),
            node = _this$resolveArgument2[0],
            appearing = _this$resolveArgument2[1];

        var type = appearing ? 'appear' : 'enter';

        _this.addClass(node, type, 'active');

        if (_this.props.onEntering) {
          _this.props.onEntering(maybeNode, maybeAppearing);
        }
      };

      _this.onEntered = function (maybeNode, maybeAppearing) {
        var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing),
            node = _this$resolveArgument3[0],
            appearing = _this$resolveArgument3[1];

        var type = appearing ? 'appear' : 'enter';

        _this.removeClasses(node, type);

        _this.addClass(node, type, 'done');

        if (_this.props.onEntered) {
          _this.props.onEntered(maybeNode, maybeAppearing);
        }
      };

      _this.onExit = function (maybeNode) {
        var _this$resolveArgument4 = _this.resolveArguments(maybeNode),
            node = _this$resolveArgument4[0];

        _this.removeClasses(node, 'appear');

        _this.removeClasses(node, 'enter');

        _this.addClass(node, 'exit', 'base');

        if (_this.props.onExit) {
          _this.props.onExit(maybeNode);
        }
      };

      _this.onExiting = function (maybeNode) {
        var _this$resolveArgument5 = _this.resolveArguments(maybeNode),
            node = _this$resolveArgument5[0];

        _this.addClass(node, 'exit', 'active');

        if (_this.props.onExiting) {
          _this.props.onExiting(maybeNode);
        }
      };

      _this.onExited = function (maybeNode) {
        var _this$resolveArgument6 = _this.resolveArguments(maybeNode),
            node = _this$resolveArgument6[0];

        _this.removeClasses(node, 'exit');

        _this.addClass(node, 'exit', 'done');

        if (_this.props.onExited) {
          _this.props.onExited(maybeNode);
        }
      };

      _this.resolveArguments = function (maybeNode, maybeAppearing) {
        return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] // here `maybeNode` is actually `appearing`
        : [maybeNode, maybeAppearing];
      };

      _this.getClassNames = function (type) {
        var classNames = _this.props.classNames;
        var isStringClassNames = typeof classNames === 'string';
        var prefix = isStringClassNames && classNames ? classNames + "-" : '';
        var baseClassName = isStringClassNames ? "" + prefix + type : classNames[type];
        var activeClassName = isStringClassNames ? baseClassName + "-active" : classNames[type + "Active"];
        var doneClassName = isStringClassNames ? baseClassName + "-done" : classNames[type + "Done"];
        return {
          baseClassName: baseClassName,
          activeClassName: activeClassName,
          doneClassName: doneClassName
        };
      };

      return _this;
    }

    var _proto = CSSTransition.prototype;

    _proto.addClass = function addClass(node, type, phase) {
      var className = this.getClassNames(type)[phase + "ClassName"];

      var _this$getClassNames = this.getClassNames('enter'),
          doneClassName = _this$getClassNames.doneClassName;

      if (type === 'appear' && phase === 'done' && doneClassName) {
        className += " " + doneClassName;
      } // This is to force a repaint,
      // which is necessary in order to transition styles when adding a class name.


      if (phase === 'active') {
        /* eslint-disable no-unused-expressions */
        node && node.scrollTop;
      }

      if (className) {
        this.appliedClasses[type][phase] = className;

        _addClass(node, className);
      }
    };

    _proto.removeClasses = function removeClasses(node, type) {
      var _this$appliedClasses$ = this.appliedClasses[type],
          baseClassName = _this$appliedClasses$.base,
          activeClassName = _this$appliedClasses$.active,
          doneClassName = _this$appliedClasses$.done;
      this.appliedClasses[type] = {};

      if (baseClassName) {
        removeClass(node, baseClassName);
      }

      if (activeClassName) {
        removeClass(node, activeClassName);
      }

      if (doneClassName) {
        removeClass(node, doneClassName);
      }
    };

    _proto.render = function render() {
      var _this$props = this.props;
          _this$props.classNames;
          var props = _objectWithoutPropertiesLoose$1(_this$props, ["classNames"]);

      return /*#__PURE__*/React__default["default"].createElement(Transition$1, _extends({}, props, {
        onEnter: this.onEnter,
        onEntered: this.onEntered,
        onEntering: this.onEntering,
        onExit: this.onExit,
        onExiting: this.onExiting,
        onExited: this.onExited
      }));
    };

    return CSSTransition;
  }(React__default["default"].Component);

  CSSTransition.defaultProps = {
    classNames: ''
  };
  CSSTransition.propTypes = _extends({}, Transition$1.propTypes, {
    /**
     * The animation classNames applied to the component as it appears, enters,
     * exits or has finished the transition. A single name can be provided, which
     * will be suffixed for each stage, e.g. `classNames="fade"` applies:
     *
     * - `fade-appear`, `fade-appear-active`, `fade-appear-done`
     * - `fade-enter`, `fade-enter-active`, `fade-enter-done`
     * - `fade-exit`, `fade-exit-active`, `fade-exit-done`
     *
     * A few details to note about how these classes are applied:
     *
     * 1. They are _joined_ with the ones that are already defined on the child
     *    component, so if you want to add some base styles, you can use
     *    `className` without worrying that it will be overridden.
     *
     * 2. If the transition component mounts with `in={false}`, no classes are
     *    applied yet. You might be expecting `*-exit-done`, but if you think
     *    about it, a component cannot finish exiting if it hasn't entered yet.
     *
     * 2. `fade-appear-done` and `fade-enter-done` will _both_ be applied. This
     *    allows you to define different behavior for when appearing is done and
     *    when regular entering is done, using selectors like
     *    `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply
     *    an epic entrance animation when element first appears in the DOM using
     *    [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can
     *    simply use `fade-enter-done` for defining both cases.
     *
     * Each individual classNames can also be specified independently like:
     *
     * ```js
     * classNames={{
     *  appear: 'my-appear',
     *  appearActive: 'my-active-appear',
     *  appearDone: 'my-done-appear',
     *  enter: 'my-enter',
     *  enterActive: 'my-active-enter',
     *  enterDone: 'my-done-enter',
     *  exit: 'my-exit',
     *  exitActive: 'my-active-exit',
     *  exitDone: 'my-done-exit',
     * }}
     * ```
     *
     * If you want to set these classes using CSS Modules:
     *
     * ```js
     * import styles from './styles.css';
     * ```
     *
     * you might want to use camelCase in your CSS file, that way could simply
     * spread them instead of listing them one by one:
     *
     * ```js
     * classNames={{ ...styles }}
     * ```
     *
     * @type {string | {
     *  appear?: string,
     *  appearActive?: string,
     *  appearDone?: string,
     *  enter?: string,
     *  enterActive?: string,
     *  enterDone?: string,
     *  exit?: string,
     *  exitActive?: string,
     *  exitDone?: string,
     * }}
     */
    classNames: classNamesShape,

    /**
     * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is
     * applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool)
     */
    onEnter: PropTypes.func,

    /**
     * A `<Transition>` callback fired immediately after the 'enter-active' or
     * 'appear-active' class is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool)
     */
    onEntering: PropTypes.func,

    /**
     * A `<Transition>` callback fired immediately after the 'enter' or
     * 'appear' classes are **removed** and the `done` class is added to the DOM node.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool)
     */
    onEntered: PropTypes.func,

    /**
     * A `<Transition>` callback fired immediately after the 'exit' class is
     * applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed
     *
     * @type Function(node: HtmlElement)
     */
    onExit: PropTypes.func,

    /**
     * A `<Transition>` callback fired immediately after the 'exit-active' is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed
     *
     * @type Function(node: HtmlElement)
     */
    onExiting: PropTypes.func,

    /**
     * A `<Transition>` callback fired immediately after the 'exit' classes
     * are **removed** and the `exit-done` class is added to the DOM node.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed
     *
     * @type Function(node: HtmlElement)
     */
    onExited: PropTypes.func
  }) ;
  var CSSTransition$1 = CSSTransition;

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  /**
   * Given `this.props.children`, return an object mapping key to child.
   *
   * @param {*} children `this.props.children`
   * @return {object} Mapping of key to child
   */

  function getChildMapping(children, mapFn) {
    var mapper = function mapper(child) {
      return mapFn && /*#__PURE__*/React.isValidElement(child) ? mapFn(child) : child;
    };

    var result = Object.create(null);
    if (children) React.Children.map(children, function (c) {
      return c;
    }).forEach(function (child) {
      // run the map function here instead so that the key is the computed one
      result[child.key] = mapper(child);
    });
    return result;
  }
  /**
   * When you're adding or removing children some may be added or removed in the
   * same render pass. We want to show *both* since we want to simultaneously
   * animate elements in and out. This function takes a previous set of keys
   * and a new set of keys and merges them with its best guess of the correct
   * ordering. In the future we may expose some of the utilities in
   * ReactMultiChild to make this easy, but for now React itself does not
   * directly have this concept of the union of prevChildren and nextChildren
   * so we implement it here.
   *
   * @param {object} prev prev children as returned from
   * `ReactTransitionChildMapping.getChildMapping()`.
   * @param {object} next next children as returned from
   * `ReactTransitionChildMapping.getChildMapping()`.
   * @return {object} a key set that contains all keys in `prev` and all keys
   * in `next` in a reasonable order.
   */

  function mergeChildMappings(prev, next) {
    prev = prev || {};
    next = next || {};

    function getValueForKey(key) {
      return key in next ? next[key] : prev[key];
    } // For each key of `next`, the list of keys to insert before that key in
    // the combined list


    var nextKeysPending = Object.create(null);
    var pendingKeys = [];

    for (var prevKey in prev) {
      if (prevKey in next) {
        if (pendingKeys.length) {
          nextKeysPending[prevKey] = pendingKeys;
          pendingKeys = [];
        }
      } else {
        pendingKeys.push(prevKey);
      }
    }

    var i;
    var childMapping = {};

    for (var nextKey in next) {
      if (nextKeysPending[nextKey]) {
        for (i = 0; i < nextKeysPending[nextKey].length; i++) {
          var pendingNextKey = nextKeysPending[nextKey][i];
          childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
        }
      }

      childMapping[nextKey] = getValueForKey(nextKey);
    } // Finally, add the keys which didn't appear before any key in `next`


    for (i = 0; i < pendingKeys.length; i++) {
      childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
    }

    return childMapping;
  }

  function getProp(child, prop, props) {
    return props[prop] != null ? props[prop] : child.props[prop];
  }

  function getInitialChildMapping(props, onExited) {
    return getChildMapping(props.children, function (child) {
      return /*#__PURE__*/React.cloneElement(child, {
        onExited: onExited.bind(null, child),
        "in": true,
        appear: getProp(child, 'appear', props),
        enter: getProp(child, 'enter', props),
        exit: getProp(child, 'exit', props)
      });
    });
  }
  function getNextChildMapping(nextProps, prevChildMapping, onExited) {
    var nextChildMapping = getChildMapping(nextProps.children);
    var children = mergeChildMappings(prevChildMapping, nextChildMapping);
    Object.keys(children).forEach(function (key) {
      var child = children[key];
      if (! /*#__PURE__*/React.isValidElement(child)) return;
      var hasPrev = (key in prevChildMapping);
      var hasNext = (key in nextChildMapping);
      var prevChild = prevChildMapping[key];
      var isLeaving = /*#__PURE__*/React.isValidElement(prevChild) && !prevChild.props["in"]; // item is new (entering)

      if (hasNext && (!hasPrev || isLeaving)) {
        // console.log('entering', key)
        children[key] = /*#__PURE__*/React.cloneElement(child, {
          onExited: onExited.bind(null, child),
          "in": true,
          exit: getProp(child, 'exit', nextProps),
          enter: getProp(child, 'enter', nextProps)
        });
      } else if (!hasNext && hasPrev && !isLeaving) {
        // item is old (exiting)
        // console.log('leaving', key)
        children[key] = /*#__PURE__*/React.cloneElement(child, {
          "in": false
        });
      } else if (hasNext && hasPrev && /*#__PURE__*/React.isValidElement(prevChild)) {
        // item hasn't changed transition states
        // copy over the last transition props;
        // console.log('unchanged', key)
        children[key] = /*#__PURE__*/React.cloneElement(child, {
          onExited: onExited.bind(null, child),
          "in": prevChild.props["in"],
          exit: getProp(child, 'exit', nextProps),
          enter: getProp(child, 'enter', nextProps)
        });
      }
    });
    return children;
  }

  var values = Object.values || function (obj) {
    return Object.keys(obj).map(function (k) {
      return obj[k];
    });
  };

  var defaultProps = {
    component: 'div',
    childFactory: function childFactory(child) {
      return child;
    }
  };
  /**
   * The `<TransitionGroup>` component manages a set of transition components
   * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
   * components, `<TransitionGroup>` is a state machine for managing the mounting
   * and unmounting of components over time.
   *
   * Consider the example below. As items are removed or added to the TodoList the
   * `in` prop is toggled automatically by the `<TransitionGroup>`.
   *
   * Note that `<TransitionGroup>`  does not define any animation behavior!
   * Exactly _how_ a list item animates is up to the individual transition
   * component. This means you can mix and match animations across different list
   * items.
   */

  var TransitionGroup = /*#__PURE__*/function (_React$Component) {
    _inheritsLoose(TransitionGroup, _React$Component);

    function TransitionGroup(props, context) {
      var _this;

      _this = _React$Component.call(this, props, context) || this;

      var handleExited = _this.handleExited.bind(_assertThisInitialized(_this)); // Initial children should all be entering, dependent on appear


      _this.state = {
        contextValue: {
          isMounting: true
        },
        handleExited: handleExited,
        firstRender: true
      };
      return _this;
    }

    var _proto = TransitionGroup.prototype;

    _proto.componentDidMount = function componentDidMount() {
      this.mounted = true;
      this.setState({
        contextValue: {
          isMounting: false
        }
      });
    };

    _proto.componentWillUnmount = function componentWillUnmount() {
      this.mounted = false;
    };

    TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
      var prevChildMapping = _ref.children,
          handleExited = _ref.handleExited,
          firstRender = _ref.firstRender;
      return {
        children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
        firstRender: false
      };
    } // node is `undefined` when user provided `nodeRef` prop
    ;

    _proto.handleExited = function handleExited(child, node) {
      var currentChildMapping = getChildMapping(this.props.children);
      if (child.key in currentChildMapping) return;

      if (child.props.onExited) {
        child.props.onExited(node);
      }

      if (this.mounted) {
        this.setState(function (state) {
          var children = _extends({}, state.children);

          delete children[child.key];
          return {
            children: children
          };
        });
      }
    };

    _proto.render = function render() {
      var _this$props = this.props,
          Component = _this$props.component,
          childFactory = _this$props.childFactory,
          props = _objectWithoutPropertiesLoose$1(_this$props, ["component", "childFactory"]);

      var contextValue = this.state.contextValue;
      var children = values(this.state.children).map(childFactory);
      delete props.appear;
      delete props.enter;
      delete props.exit;

      if (Component === null) {
        return /*#__PURE__*/React__default["default"].createElement(TransitionGroupContext.Provider, {
          value: contextValue
        }, children);
      }

      return /*#__PURE__*/React__default["default"].createElement(TransitionGroupContext.Provider, {
        value: contextValue
      }, /*#__PURE__*/React__default["default"].createElement(Component, props, children));
    };

    return TransitionGroup;
  }(React__default["default"].Component);

  TransitionGroup.propTypes = {
    /**
     * `<TransitionGroup>` renders a `<div>` by default. You can change this
     * behavior by providing a `component` prop.
     * If you use React v16+ and would like to avoid a wrapping `<div>` element
     * you can pass in `component={null}`. This is useful if the wrapping div
     * borks your css styles.
     */
    component: PropTypes.any,

    /**
     * A set of `<Transition>` components, that are toggled `in` and out as they
     * leave. the `<TransitionGroup>` will inject specific transition props, so
     * remember to spread them through if you are wrapping the `<Transition>` as
     * with our `<Fade>` example.
     *
     * While this component is meant for multiple `Transition` or `CSSTransition`
     * children, sometimes you may want to have a single transition child with
     * content that you want to be transitioned out and in when you change it
     * (e.g. routes, images etc.) In that case you can change the `key` prop of
     * the transition child as you change its content, this will cause
     * `TransitionGroup` to transition the child out and back in.
     */
    children: PropTypes.node,

    /**
     * A convenience prop that enables or disables appear animations
     * for all children. Note that specifying this will override any defaults set
     * on individual children Transitions.
     */
    appear: PropTypes.bool,

    /**
     * A convenience prop that enables or disables enter animations
     * for all children. Note that specifying this will override any defaults set
     * on individual children Transitions.
     */
    enter: PropTypes.bool,

    /**
     * A convenience prop that enables or disables exit animations
     * for all children. Note that specifying this will override any defaults set
     * on individual children Transitions.
     */
    exit: PropTypes.bool,

    /**
     * You may need to apply reactive updates to a child as it is exiting.
     * This is generally done by using `cloneElement` however in the case of an exiting
     * child the element has already been removed and not accessible to the consumer.
     *
     * If you do need to update a child as it leaves you can provide a `childFactory`
     * to wrap every child, even the ones that are leaving.
     *
     * @type Function(child: ReactElement) -> ReactElement
     */
    childFactory: PropTypes.func
  } ;
  TransitionGroup.defaultProps = defaultProps;
  var TransitionGroup$1 = TransitionGroup;

  /**
   * Simple ponyfill for Object.fromEntries
   */

  var fromEntries = function fromEntries(entries) {
    return entries.reduce(function (acc, _ref) {
      var key = _ref[0],
          value = _ref[1];
      acc[key] = value;
      return acc;
    }, {});
  };
  /**
   * Small wrapper around `useLayoutEffect` to get rid of the warning on SSR envs
   */

  var useIsomorphicLayoutEffect = typeof window !== 'undefined' && window.document && window.document.createElement ? React__namespace.useLayoutEffect : React__namespace.useEffect;

  function getBoundingClientRect(element) {
    var rect = element.getBoundingClientRect();
    return {
      width: rect.width,
      height: rect.height,
      top: rect.top,
      right: rect.right,
      bottom: rect.bottom,
      left: rect.left,
      x: rect.left,
      y: rect.top
    };
  }

  /*:: import type { Window } from '../types'; */

  /*:: declare function getWindow(node: Node | Window): Window; */
  function getWindow(node) {
    if (node.toString() !== '[object Window]') {
      var ownerDocument = node.ownerDocument;
      return ownerDocument ? ownerDocument.defaultView : window;
    }

    return node;
  }

  function getWindowScroll(node) {
    var win = getWindow(node);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
      scrollLeft: scrollLeft,
      scrollTop: scrollTop
    };
  }

  /*:: declare function isElement(node: mixed): boolean %checks(node instanceof
    Element); */

  function isElement(node) {
    var OwnElement = getWindow(node).Element;
    return node instanceof OwnElement || node instanceof Element;
  }
  /*:: declare function isHTMLElement(node: mixed): boolean %checks(node instanceof
    HTMLElement); */


  function isHTMLElement(node) {
    var OwnElement = getWindow(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
  }

  function getHTMLElementScroll(element) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }

  function getNodeScroll(node) {
    if (node === getWindow(node) || !isHTMLElement(node)) {
      return getWindowScroll(node);
    } else {
      return getHTMLElementScroll(node);
    }
  }

  function getNodeName(element) {
    return element ? (element.nodeName || '').toLowerCase() : null;
  }

  function getDocumentElement(element) {
    // $FlowFixMe: assume body is always available
    return (isElement(element) ? element.ownerDocument : element.document).documentElement;
  }

  function getWindowScrollBarX(element) {
    // If <html> has a CSS width greater than the viewport, then this will be
    // incorrect for RTL.
    // Popper 1 is broken in this case and never had a bug report so let's assume
    // it's not an issue. I don't think anyone ever specifies width on <html>
    // anyway.
    // Browsers where the left scrollbar doesn't cause an issue report `0` for
    // this (e.g. Edge 2019, IE11, Safari)
    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
  }

  function getComputedStyle$1(element) {
    return getWindow(element).getComputedStyle(element);
  }

  function isScrollParent(element) {
    // Firefox wants us to check `-x` and `-y` variations as well
    var _getComputedStyle = getComputedStyle$1(element),
        overflow = _getComputedStyle.overflow,
        overflowX = _getComputedStyle.overflowX,
        overflowY = _getComputedStyle.overflowY;

    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
  }

  // Composite means it takes into account transforms as well as layout.

  function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) {
      isFixed = false;
    }

    var documentElement = getDocumentElement(offsetParent);
    var rect = getBoundingClientRect(elementOrVirtualElement);
    var isOffsetParentAnElement = isHTMLElement(offsetParent);
    var scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    var offsets = {
      x: 0,
      y: 0
    };

    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
      isScrollParent(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }

      if (isHTMLElement(offsetParent)) {
        offsets = getBoundingClientRect(offsetParent);
        offsets.x += offsetParent.clientLeft;
        offsets.y += offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }

    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  }

  // Returns the layout rect of an element relative to its offsetParent. Layout
  // means it doesn't take into account transforms.
  function getLayoutRect(element) {
    return {
      x: element.offsetLeft,
      y: element.offsetTop,
      width: element.offsetWidth,
      height: element.offsetHeight
    };
  }

  function getParentNode(element) {
    if (getNodeName(element) === 'html') {
      return element;
    }

    return (// $FlowFixMe: this is a quicker (but less type safe) way to save quite some bytes from the bundle
      element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
      element.parentNode || // DOM Element detected
      // $FlowFixMe: need a better way to handle this...
      element.host || // ShadowRoot detected
      // $FlowFixMe: HTMLElement is a Node
      getDocumentElement(element) // fallback

    );
  }

  function getScrollParent(node) {
    if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
      // $FlowFixMe: assume body is always available
      return node.ownerDocument.body;
    }

    if (isHTMLElement(node) && isScrollParent(node)) {
      return node;
    }

    return getScrollParent(getParentNode(node));
  }

  /*
  given a DOM element, return the list of all scroll parents, up the list of ancesors
  until we get to the top window object. This list is what we attach scroll listeners
  to, because if any of these parent elements scroll, we'll need to re-calculate the 
  reference element's position.
  */

  function listScrollParents(element, list) {
    if (list === void 0) {
      list = [];
    }

    var scrollParent = getScrollParent(element);
    var isBody = getNodeName(scrollParent) === 'body';
    var win = getWindow(scrollParent);
    var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : // $FlowFixMe: isBody tells us target will be an HTMLElement here
    updatedList.concat(listScrollParents(getParentNode(target)));
  }

  function isTableElement(element) {
    return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
  }

  function getTrueOffsetParent(element) {
    if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
    getComputedStyle$1(element).position === 'fixed') {
      return null;
    }

    var offsetParent = element.offsetParent;

    if (offsetParent) {
      var html = getDocumentElement(offsetParent);

      if (getNodeName(offsetParent) === 'body' && getComputedStyle$1(offsetParent).position === 'static' && getComputedStyle$1(html).position !== 'static') {
        return html;
      }
    }

    return offsetParent;
  } // `.offsetParent` reports `null` for fixed elements, while absolute elements
  // return the containing block


  function getContainingBlock(element) {
    var currentNode = getParentNode(element);

    while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
      var css = getComputedStyle$1(currentNode); // This is non-exhaustive but covers the most common CSS properties that
      // create a containing block.

      if (css.transform !== 'none' || css.perspective !== 'none' || css.willChange && css.willChange !== 'auto') {
        return currentNode;
      } else {
        currentNode = currentNode.parentNode;
      }
    }

    return null;
  } // Gets the closest ancestor positioned element. Handles some edge cases,
  // such as table ancestors and cross browser bugs.


  function getOffsetParent(element) {
    var window = getWindow(element);
    var offsetParent = getTrueOffsetParent(element);

    while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === 'static') {
      offsetParent = getTrueOffsetParent(offsetParent);
    }

    if (offsetParent && getNodeName(offsetParent) === 'body' && getComputedStyle$1(offsetParent).position === 'static') {
      return window;
    }

    return offsetParent || getContainingBlock(element) || window;
  }

  var top = 'top';
  var bottom = 'bottom';
  var right = 'right';
  var left = 'left';
  var auto = 'auto';
  var basePlacements = [top, bottom, right, left];
  var start = 'start';
  var end = 'end';
  var clippingParents = 'clippingParents';
  var viewport = 'viewport';
  var popper = 'popper';
  var reference = 'reference';
  var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
    return acc.concat([placement + "-" + start, placement + "-" + end]);
  }, []);
  var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
    return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
  }, []); // modifiers that need to read the DOM

  var beforeRead = 'beforeRead';
  var read = 'read';
  var afterRead = 'afterRead'; // pure-logic modifiers

  var beforeMain = 'beforeMain';
  var main = 'main';
  var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

  var beforeWrite = 'beforeWrite';
  var write = 'write';
  var afterWrite = 'afterWrite';
  var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

  function order(modifiers) {
    var map = new Map();
    var visited = new Set();
    var result = [];
    modifiers.forEach(function (modifier) {
      map.set(modifier.name, modifier);
    }); // On visiting object, check for its dependencies and visit them recursively

    function sort(modifier) {
      visited.add(modifier.name);
      var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
      requires.forEach(function (dep) {
        if (!visited.has(dep)) {
          var depModifier = map.get(dep);

          if (depModifier) {
            sort(depModifier);
          }
        }
      });
      result.push(modifier);
    }

    modifiers.forEach(function (modifier) {
      if (!visited.has(modifier.name)) {
        // check for visited object
        sort(modifier);
      }
    });
    return result;
  }

  function orderModifiers(modifiers) {
    // order based on dependencies
    var orderedModifiers = order(modifiers); // order based on phase

    return modifierPhases.reduce(function (acc, phase) {
      return acc.concat(orderedModifiers.filter(function (modifier) {
        return modifier.phase === phase;
      }));
    }, []);
  }

  function debounce$2(fn) {
    var pending;
    return function () {
      if (!pending) {
        pending = new Promise(function (resolve) {
          Promise.resolve().then(function () {
            pending = undefined;
            resolve(fn());
          });
        });
      }

      return pending;
    };
  }

  function format(str) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    return [].concat(args).reduce(function (p, c) {
      return p.replace(/%s/, c);
    }, str);
  }

  var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
  var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
  var VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];
  function validateModifiers(modifiers) {
    modifiers.forEach(function (modifier) {
      Object.keys(modifier).forEach(function (key) {
        switch (key) {
          case 'name':
            if (typeof modifier.name !== 'string') {
              console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', "\"" + String(modifier.name) + "\""));
            }

            break;

          case 'enabled':
            if (typeof modifier.enabled !== 'boolean') {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', "\"" + String(modifier.enabled) + "\""));
            }

          case 'phase':
            if (modifierPhases.indexOf(modifier.phase) < 0) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(', '), "\"" + String(modifier.phase) + "\""));
            }

            break;

          case 'fn':
            if (typeof modifier.fn !== 'function') {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', "\"" + String(modifier.fn) + "\""));
            }

            break;

          case 'effect':
            if (typeof modifier.effect !== 'function') {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', "\"" + String(modifier.fn) + "\""));
            }

            break;

          case 'requires':
            if (!Array.isArray(modifier.requires)) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', "\"" + String(modifier.requires) + "\""));
            }

            break;

          case 'requiresIfExists':
            if (!Array.isArray(modifier.requiresIfExists)) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', "\"" + String(modifier.requiresIfExists) + "\""));
            }

            break;

          case 'options':
          case 'data':
            break;

          default:
            console.error("PopperJS: an invalid property has been provided to the \"" + modifier.name + "\" modifier, valid properties are " + VALID_PROPERTIES.map(function (s) {
              return "\"" + s + "\"";
            }).join(', ') + "; but \"" + key + "\" was provided.");
        }

        modifier.requires && modifier.requires.forEach(function (requirement) {
          if (modifiers.find(function (mod) {
            return mod.name === requirement;
          }) == null) {
            console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
          }
        });
      });
    });
  }

  function uniqueBy(arr, fn) {
    var identifiers = new Set();
    return arr.filter(function (item) {
      var identifier = fn(item);

      if (!identifiers.has(identifier)) {
        identifiers.add(identifier);
        return true;
      }
    });
  }

  function getBasePlacement(placement) {
    return placement.split('-')[0];
  }

  function mergeByName(modifiers) {
    var merged = modifiers.reduce(function (merged, current) {
      var existing = merged[current.name];
      merged[current.name] = existing ? Object.assign(Object.assign(Object.assign({}, existing), current), {}, {
        options: Object.assign(Object.assign({}, existing.options), current.options),
        data: Object.assign(Object.assign({}, existing.data), current.data)
      }) : current;
      return merged;
    }, {}); // IE11 does not support Object.values

    return Object.keys(merged).map(function (key) {
      return merged[key];
    });
  }

  function getViewportRect(element) {
    var win = getWindow(element);
    var html = getDocumentElement(element);
    var visualViewport = win.visualViewport;
    var width = html.clientWidth;
    var height = html.clientHeight;
    var x = 0;
    var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper
    // can be obscured underneath it.
    // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even
    // if it isn't open, so if this isn't available, the popper will be detected
    // to overflow the bottom of the screen too early.

    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)
      // In Chrome, it returns a value very close to 0 (+/-) but contains rounding
      // errors due to floating point numbers, so we need to check precision.
      // Safari returns a number <= 0, usually < -1 when pinch-zoomed
      // Feature detection fails in mobile emulation mode in Chrome.
      // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <
      // 0.001
      // Fallback here: "Not Safari" userAgent

      if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
        x = visualViewport.offsetLeft;
        y = visualViewport.offsetTop;
      }
    }

    return {
      width: width,
      height: height,
      x: x + getWindowScrollBarX(element),
      y: y
    };
  }

  // of the `<html>` and `<body>` rect bounds if horizontally scrollable

  function getDocumentRect(element) {
    var html = getDocumentElement(element);
    var winScroll = getWindowScroll(element);
    var body = element.ownerDocument.body;
    var width = Math.max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height = Math.max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
    var y = -winScroll.scrollTop;

    if (getComputedStyle$1(body || html).direction === 'rtl') {
      x += Math.max(html.clientWidth, body ? body.clientWidth : 0) - width;
    }

    return {
      width: width,
      height: height,
      x: x,
      y: y
    };
  }

  function contains(parent, child) {
    // $FlowFixMe: hasOwnProperty doesn't seem to work in tests
    var isShadow = Boolean(child.getRootNode && child.getRootNode().host); // First, attempt with faster native method

    if (parent.contains(child)) {
      return true;
    } // then fallback to custom implementation with Shadow DOM support
    else if (isShadow) {
      var next = child;

      do {
        if (next && parent.isSameNode(next)) {
          return true;
        } // $FlowFixMe: need a better way to handle this...


        next = next.parentNode || next.host;
      } while (next);
    } // Give up, the result is false


    return false;
  }

  function rectToClientRect(rect) {
    return Object.assign(Object.assign({}, rect), {}, {
      left: rect.x,
      top: rect.y,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height
    });
  }

  function getInnerBoundingClientRect(element) {
    var rect = getBoundingClientRect(element);
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
  }

  function getClientRectFromMixedType(element, clippingParent) {
    return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isHTMLElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
  } // A "clipping parent" is an overflowable container with the characteristic of
  // clipping (or hiding) overflowing elements with a position different from
  // `initial`


  function getClippingParents(element) {
    var clippingParents = listScrollParents(getParentNode(element));
    var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle$1(element).position) >= 0;
    var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;

    if (!isElement(clipperElement)) {
      return [];
    } // $FlowFixMe: https://github.com/facebook/flow/issues/1414


    return clippingParents.filter(function (clippingParent) {
      return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
    });
  } // Gets the maximum area that the element is visible in due to any number of
  // clipping parents


  function getClippingRect(element, boundary, rootBoundary) {
    var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
    var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
    var firstClippingParent = clippingParents[0];
    var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
      var rect = getClientRectFromMixedType(element, clippingParent);
      accRect.top = Math.max(rect.top, accRect.top);
      accRect.right = Math.min(rect.right, accRect.right);
      accRect.bottom = Math.min(rect.bottom, accRect.bottom);
      accRect.left = Math.max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
  }

  function getVariation(placement) {
    return placement.split('-')[1];
  }

  function getMainAxisFromPlacement(placement) {
    return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
  }

  function computeOffsets(_ref) {
    var reference = _ref.reference,
        element = _ref.element,
        placement = _ref.placement;
    var basePlacement = placement ? getBasePlacement(placement) : null;
    var variation = placement ? getVariation(placement) : null;
    var commonX = reference.x + reference.width / 2 - element.width / 2;
    var commonY = reference.y + reference.height / 2 - element.height / 2;
    var offsets;

    switch (basePlacement) {
      case top:
        offsets = {
          x: commonX,
          y: reference.y - element.height
        };
        break;

      case bottom:
        offsets = {
          x: commonX,
          y: reference.y + reference.height
        };
        break;

      case right:
        offsets = {
          x: reference.x + reference.width,
          y: commonY
        };
        break;

      case left:
        offsets = {
          x: reference.x - element.width,
          y: commonY
        };
        break;

      default:
        offsets = {
          x: reference.x,
          y: reference.y
        };
    }

    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;

    if (mainAxis != null) {
      var len = mainAxis === 'y' ? 'height' : 'width';

      switch (variation) {
        case start:
          offsets[mainAxis] = Math.floor(offsets[mainAxis]) - Math.floor(reference[len] / 2 - element[len] / 2);
          break;

        case end:
          offsets[mainAxis] = Math.floor(offsets[mainAxis]) + Math.ceil(reference[len] / 2 - element[len] / 2);
          break;
      }
    }

    return offsets;
  }

  function getFreshSideObject() {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  }

  function mergePaddingObject(paddingObject) {
    return Object.assign(Object.assign({}, getFreshSideObject()), paddingObject);
  }

  function expandToHashMap(value, keys) {
    return keys.reduce(function (hashMap, key) {
      hashMap[key] = value;
      return hashMap;
    }, {});
  }

  function detectOverflow(state, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        _options$placement = _options.placement,
        placement = _options$placement === void 0 ? state.placement : _options$placement,
        _options$boundary = _options.boundary,
        boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
        _options$rootBoundary = _options.rootBoundary,
        rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
        _options$elementConte = _options.elementContext,
        elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
        _options$altBoundary = _options.altBoundary,
        altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
        _options$padding = _options.padding,
        padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
    var altContext = elementContext === popper ? reference : popper;
    var referenceElement = state.elements.reference;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
    var referenceClientRect = getBoundingClientRect(referenceElement);
    var popperOffsets = computeOffsets({
      reference: referenceClientRect,
      element: popperRect,
      strategy: 'absolute',
      placement: placement
    });
    var popperClientRect = rectToClientRect(Object.assign(Object.assign({}, popperRect), popperOffsets));
    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
    // 0 or negative = within the clipping rect

    var overflowOffsets = {
      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
      right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

    if (elementContext === popper && offsetData) {
      var offset = offsetData[placement];
      Object.keys(overflowOffsets).forEach(function (key) {
        var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
        var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
        overflowOffsets[key] += offset[axis] * multiply;
      });
    }

    return overflowOffsets;
  }

  var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
  var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
  var DEFAULT_OPTIONS = {
    placement: 'bottom',
    modifiers: [],
    strategy: 'absolute'
  };

  function areValidElements() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return !args.some(function (element) {
      return !(element && typeof element.getBoundingClientRect === 'function');
    });
  }

  function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) {
      generatorOptions = {};
    }

    var _generatorOptions = generatorOptions,
        _generatorOptions$def = _generatorOptions.defaultModifiers,
        defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
        _generatorOptions$def2 = _generatorOptions.defaultOptions,
        defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper(reference, popper, options) {
      if (options === void 0) {
        options = defaultOptions;
      }

      var state = {
        placement: 'bottom',
        orderedModifiers: [],
        options: Object.assign(Object.assign({}, DEFAULT_OPTIONS), defaultOptions),
        modifiersData: {},
        elements: {
          reference: reference,
          popper: popper
        },
        attributes: {},
        styles: {}
      };
      var effectCleanupFns = [];
      var isDestroyed = false;
      var instance = {
        state: state,
        setOptions: function setOptions(options) {
          cleanupModifierEffects();
          state.options = Object.assign(Object.assign(Object.assign({}, defaultOptions), state.options), options);
          state.scrollParents = {
            reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
            popper: listScrollParents(popper)
          }; // Orders the modifiers based on their dependencies and `phase`
          // properties

          var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

          state.orderedModifiers = orderedModifiers.filter(function (m) {
            return m.enabled;
          }); // Validate the provided modifiers so that the consumer will get warned
          // if one of the modifiers is invalid for any reason

          {
            var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function (_ref) {
              var name = _ref.name;
              return name;
            });
            validateModifiers(modifiers);

            if (getBasePlacement(state.options.placement) === auto) {
              var flipModifier = state.orderedModifiers.find(function (_ref2) {
                var name = _ref2.name;
                return name === 'flip';
              });

              if (!flipModifier) {
                console.error(['Popper: "auto" placements require the "flip" modifier be', 'present and enabled to work.'].join(' '));
              }
            }

            var _getComputedStyle = getComputedStyle$1(popper),
                marginTop = _getComputedStyle.marginTop,
                marginRight = _getComputedStyle.marginRight,
                marginBottom = _getComputedStyle.marginBottom,
                marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can
            // cause bugs with positioning, so we'll warn the consumer


            if ([marginTop, marginRight, marginBottom, marginLeft].some(function (margin) {
              return parseFloat(margin);
            })) {
              console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', 'between the popper and its reference element or boundary.', 'To replicate margin, use the `offset` modifier, as well as', 'the `padding` option in the `preventOverflow` and `flip`', 'modifiers.'].join(' '));
            }
          }

          runModifierEffects();
          return instance.update();
        },
        // Sync update – it will always be executed, even if not necessary. This
        // is useful for low frequency updates where sync behavior simplifies the
        // logic.
        // For high frequency updates (e.g. `resize` and `scroll` events), always
        // prefer the async Popper#update method
        forceUpdate: function forceUpdate() {
          if (isDestroyed) {
            return;
          }

          var _state$elements = state.elements,
              reference = _state$elements.reference,
              popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
          // anymore

          if (!areValidElements(reference, popper)) {
            {
              console.error(INVALID_ELEMENT_ERROR);
            }

            return;
          } // Store the reference and popper rects to be read by modifiers


          state.rects = {
            reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
            popper: getLayoutRect(popper)
          }; // Modifiers have the ability to reset the current update cycle. The
          // most common use case for this is the `flip` modifier changing the
          // placement, which then needs to re-run all the modifiers, because the
          // logic was previously ran for the previous placement and is therefore
          // stale/incorrect

          state.reset = false;
          state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
          // is filled with the initial data specified by the modifier. This means
          // it doesn't persist and is fresh on each update.
          // To ensure persistent data, use `${name}#persistent`

          state.orderedModifiers.forEach(function (modifier) {
            return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
          });
          var __debug_loops__ = 0;

          for (var index = 0; index < state.orderedModifiers.length; index++) {
            {
              __debug_loops__ += 1;

              if (__debug_loops__ > 100) {
                console.error(INFINITE_LOOP_ERROR);
                break;
              }
            }

            if (state.reset === true) {
              state.reset = false;
              index = -1;
              continue;
            }

            var _state$orderedModifie = state.orderedModifiers[index],
                fn = _state$orderedModifie.fn,
                _state$orderedModifie2 = _state$orderedModifie.options,
                _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
                name = _state$orderedModifie.name;

            if (typeof fn === 'function') {
              state = fn({
                state: state,
                options: _options,
                name: name,
                instance: instance
              }) || state;
            }
          }
        },
        // Async and optimistically optimized update – it will not be executed if
        // not necessary (debounced to run at most once-per-tick)
        update: debounce$2(function () {
          return new Promise(function (resolve) {
            instance.forceUpdate();
            resolve(state);
          });
        }),
        destroy: function destroy() {
          cleanupModifierEffects();
          isDestroyed = true;
        }
      };

      if (!areValidElements(reference, popper)) {
        {
          console.error(INVALID_ELEMENT_ERROR);
        }

        return instance;
      }

      instance.setOptions(options).then(function (state) {
        if (!isDestroyed && options.onFirstUpdate) {
          options.onFirstUpdate(state);
        }
      }); // Modifiers have the ability to execute arbitrary code before the first
      // update cycle runs. They will be executed in the same order as the update
      // cycle. This is useful when a modifier adds some persistent data that
      // other modifiers need to use, but the modifier is run after the dependent
      // one.

      function runModifierEffects() {
        state.orderedModifiers.forEach(function (_ref3) {
          var name = _ref3.name,
              _ref3$options = _ref3.options,
              options = _ref3$options === void 0 ? {} : _ref3$options,
              effect = _ref3.effect;

          if (typeof effect === 'function') {
            var cleanupFn = effect({
              state: state,
              name: name,
              instance: instance,
              options: options
            });

            var noopFn = function noopFn() {};

            effectCleanupFns.push(cleanupFn || noopFn);
          }
        });
      }

      function cleanupModifierEffects() {
        effectCleanupFns.forEach(function (fn) {
          return fn();
        });
        effectCleanupFns = [];
      }

      return instance;
    };
  }

  var passive = {
    passive: true
  };

  function effect$2(_ref) {
    var state = _ref.state,
        instance = _ref.instance,
        options = _ref.options;
    var _options$scroll = options.scroll,
        scroll = _options$scroll === void 0 ? true : _options$scroll,
        _options$resize = options.resize,
        resize = _options$resize === void 0 ? true : _options$resize;
    var window = getWindow(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

    if (scroll) {
      scrollParents.forEach(function (scrollParent) {
        scrollParent.addEventListener('scroll', instance.update, passive);
      });
    }

    if (resize) {
      window.addEventListener('resize', instance.update, passive);
    }

    return function () {
      if (scroll) {
        scrollParents.forEach(function (scrollParent) {
          scrollParent.removeEventListener('scroll', instance.update, passive);
        });
      }

      if (resize) {
        window.removeEventListener('resize', instance.update, passive);
      }
    };
  } // eslint-disable-next-line import/no-unused-modules


  var eventListeners = {
    name: 'eventListeners',
    enabled: true,
    phase: 'write',
    fn: function fn() {},
    effect: effect$2,
    data: {}
  };

  function popperOffsets(_ref) {
    var state = _ref.state,
        name = _ref.name; // Offsets are the actual position the popper needs to have to be
    // properly positioned near its reference element
    // This is the most basic placement, and will be adjusted by
    // the modifiers in the next step

    state.modifiersData[name] = computeOffsets({
      reference: state.rects.reference,
      element: state.rects.popper,
      strategy: 'absolute',
      placement: state.placement
    });
  } // eslint-disable-next-line import/no-unused-modules


  var popperOffsets$1 = {
    name: 'popperOffsets',
    enabled: true,
    phase: 'read',
    fn: popperOffsets,
    data: {}
  };

  var unsetSides = {
    top: 'auto',
    right: 'auto',
    bottom: 'auto',
    left: 'auto'
  }; // Round the offsets to the nearest suitable subpixel based on the DPR.
  // Zooming can change the DPR, but it seems to report a value that will
  // cleanly divide the values into the appropriate subpixels.

  function roundOffsets(_ref) {
    var x = _ref.x,
        y = _ref.y;
    var win = window;
    var dpr = win.devicePixelRatio || 1;
    return {
      x: Math.round(x * dpr) / dpr || 0,
      y: Math.round(y * dpr) / dpr || 0
    };
  }

  function mapToStyles(_ref2) {
    var _Object$assign2;

    var popper = _ref2.popper,
        popperRect = _ref2.popperRect,
        placement = _ref2.placement,
        offsets = _ref2.offsets,
        position = _ref2.position,
        gpuAcceleration = _ref2.gpuAcceleration,
        adaptive = _ref2.adaptive;

    var _roundOffsets = roundOffsets(offsets),
        x = _roundOffsets.x,
        y = _roundOffsets.y;

    var hasX = offsets.hasOwnProperty('x');
    var hasY = offsets.hasOwnProperty('y');
    var sideX = left;
    var sideY = top;
    var win = window;

    if (adaptive) {
      var offsetParent = getOffsetParent(popper);

      if (offsetParent === getWindow(popper)) {
        offsetParent = getDocumentElement(popper);
      } // $FlowFixMe: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it

      /*:: offsetParent = (offsetParent: Element); */


      if (placement === top) {
        sideY = bottom;
        y -= offsetParent.clientHeight - popperRect.height;
        y *= gpuAcceleration ? 1 : -1;
      }

      if (placement === left) {
        sideX = right;
        x -= offsetParent.clientWidth - popperRect.width;
        x *= gpuAcceleration ? 1 : -1;
      }
    }

    var commonStyles = Object.assign({
      position: position
    }, adaptive && unsetSides);

    if (gpuAcceleration) {
      var _Object$assign;

      return Object.assign(Object.assign({}, commonStyles), {}, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) < 2 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }

    return Object.assign(Object.assign({}, commonStyles), {}, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
  }

  function computeStyles(_ref3) {
    var state = _ref3.state,
        options = _ref3.options;
    var _options$gpuAccelerat = options.gpuAcceleration,
        gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
        _options$adaptive = options.adaptive,
        adaptive = _options$adaptive === void 0 ? true : _options$adaptive;

    {
      var transitionProperty = getComputedStyle$1(state.elements.popper).transitionProperty || '';

      if (adaptive && ['transform', 'top', 'right', 'bottom', 'left'].some(function (property) {
        return transitionProperty.indexOf(property) >= 0;
      })) {
        console.warn(['Popper: Detected CSS transitions on at least one of the following', 'CSS properties: "transform", "top", "right", "bottom", "left".', '\n\n', 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', 'for smooth transitions, or remove these properties from the CSS', 'transition declaration on the popper element if only transitioning', 'opacity or background-color for example.', '\n\n', 'We recommend using the popper element as a wrapper around an inner', 'element that can have any CSS property transitioned for animations.'].join(' '));
      }
    }

    var commonStyles = {
      placement: getBasePlacement(state.placement),
      popper: state.elements.popper,
      popperRect: state.rects.popper,
      gpuAcceleration: gpuAcceleration
    };

    if (state.modifiersData.popperOffsets != null) {
      state.styles.popper = Object.assign(Object.assign({}, state.styles.popper), mapToStyles(Object.assign(Object.assign({}, commonStyles), {}, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive: adaptive
      })));
    }

    if (state.modifiersData.arrow != null) {
      state.styles.arrow = Object.assign(Object.assign({}, state.styles.arrow), mapToStyles(Object.assign(Object.assign({}, commonStyles), {}, {
        offsets: state.modifiersData.arrow,
        position: 'absolute',
        adaptive: false
      })));
    }

    state.attributes.popper = Object.assign(Object.assign({}, state.attributes.popper), {}, {
      'data-popper-placement': state.placement
    });
  } // eslint-disable-next-line import/no-unused-modules


  var computeStyles$1 = {
    name: 'computeStyles',
    enabled: true,
    phase: 'beforeWrite',
    fn: computeStyles,
    data: {}
  };

  // and applies them to the HTMLElements such as popper and arrow

  function applyStyles(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function (name) {
      var style = state.styles[name] || {};
      var attributes = state.attributes[name] || {};
      var element = state.elements[name]; // arrow is optional + virtual elements

      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      } // Flow doesn't support to extend this property, but it's the most
      // effective way to apply styles to an HTMLElement
      // $FlowFixMe


      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function (name) {
        var value = attributes[name];

        if (value === false) {
          element.removeAttribute(name);
        } else {
          element.setAttribute(name, value === true ? '' : value);
        }
      });
    });
  }

  function effect$1(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
      popper: {
        position: state.options.strategy,
        left: '0',
        top: '0',
        margin: '0'
      },
      arrow: {
        position: 'absolute'
      },
      reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);

    if (state.elements.arrow) {
      Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }

    return function () {
      Object.keys(state.elements).forEach(function (name) {
        var element = state.elements[name];
        var attributes = state.attributes[name] || {};
        var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

        var style = styleProperties.reduce(function (style, property) {
          style[property] = '';
          return style;
        }, {}); // arrow is optional + virtual elements

        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        } // Flow doesn't support to extend this property, but it's the most
        // effective way to apply styles to an HTMLElement
        // $FlowFixMe


        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function (attribute) {
          element.removeAttribute(attribute);
        });
      });
    };
  } // eslint-disable-next-line import/no-unused-modules


  var applyStyles$1 = {
    name: 'applyStyles',
    enabled: true,
    phase: 'write',
    fn: applyStyles,
    effect: effect$1,
    requires: ['computeStyles']
  };

  function distanceAndSkiddingToXY(placement, rects, offset) {
    var basePlacement = getBasePlacement(placement);
    var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;

    var _ref = typeof offset === 'function' ? offset(Object.assign(Object.assign({}, rects), {}, {
      placement: placement
    })) : offset,
        skidding = _ref[0],
        distance = _ref[1];

    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [left, right].indexOf(basePlacement) >= 0 ? {
      x: distance,
      y: skidding
    } : {
      x: skidding,
      y: distance
    };
  }

  function offset(_ref2) {
    var state = _ref2.state,
        options = _ref2.options,
        name = _ref2.name;
    var _options$offset = options.offset,
        offset = _options$offset === void 0 ? [0, 0] : _options$offset;
    var data = placements.reduce(function (acc, placement) {
      acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
      return acc;
    }, {});
    var _data$state$placement = data[state.placement],
        x = _data$state$placement.x,
        y = _data$state$placement.y;

    if (state.modifiersData.popperOffsets != null) {
      state.modifiersData.popperOffsets.x += x;
      state.modifiersData.popperOffsets.y += y;
    }

    state.modifiersData[name] = data;
  } // eslint-disable-next-line import/no-unused-modules


  var offset$1 = {
    name: 'offset',
    enabled: true,
    phase: 'main',
    requires: ['popperOffsets'],
    fn: offset
  };

  var hash$1 = {
    left: 'right',
    right: 'left',
    bottom: 'top',
    top: 'bottom'
  };
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function (matched) {
      return hash$1[matched];
    });
  }

  var hash = {
    start: 'end',
    end: 'start'
  };
  function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function (matched) {
      return hash[matched];
    });
  }

  /*:: type OverflowsMap = { [ComputedPlacement]: number }; */

  /*;; type OverflowsMap = { [key in ComputedPlacement]: number }; */

  function computeAutoPlacement(state, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        placement = _options.placement,
        boundary = _options.boundary,
        rootBoundary = _options.rootBoundary,
        padding = _options.padding,
        flipVariations = _options.flipVariations,
        _options$allowedAutoP = _options.allowedAutoPlacements,
        allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
    var variation = getVariation(placement);
    var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
      return getVariation(placement) === variation;
    }) : basePlacements; // $FlowFixMe

    var allowedPlacements = placements$1.filter(function (placement) {
      return allowedAutoPlacements.indexOf(placement) >= 0;
    });

    if (allowedPlacements.length === 0) {
      allowedPlacements = placements$1;

      {
        console.error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(' '));
      }
    } // $FlowFixMe: Flow seems to have problems with two array unions...


    var overflows = allowedPlacements.reduce(function (acc, placement) {
      acc[placement] = detectOverflow(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding
      })[getBasePlacement(placement)];
      return acc;
    }, {});
    return Object.keys(overflows).sort(function (a, b) {
      return overflows[a] - overflows[b];
    });
  }

  function getExpandedFallbackPlacements(placement) {
    if (getBasePlacement(placement) === auto) {
      return [];
    }

    var oppositePlacement = getOppositePlacement(placement);
    return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
  }

  function flip(_ref) {
    var state = _ref.state,
        options = _ref.options,
        name = _ref.name;

    if (state.modifiersData[name]._skip) {
      return;
    }

    var _options$mainAxis = options.mainAxis,
        checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
        _options$altAxis = options.altAxis,
        checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
        specifiedFallbackPlacements = options.fallbackPlacements,
        padding = options.padding,
        boundary = options.boundary,
        rootBoundary = options.rootBoundary,
        altBoundary = options.altBoundary,
        _options$flipVariatio = options.flipVariations,
        flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
        allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = getBasePlacement(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
    var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
      return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
        flipVariations: flipVariations,
        allowedAutoPlacements: allowedAutoPlacements
      }) : placement);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements[0];

    for (var i = 0; i < placements.length; i++) {
      var placement = placements[i];

      var _basePlacement = getBasePlacement(placement);

      var isStartVariation = getVariation(placement) === start;
      var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
      var len = isVertical ? 'width' : 'height';
      var overflow = detectOverflow(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        altBoundary: altBoundary,
        padding: padding
      });
      var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;

      if (referenceRect[len] > popperRect[len]) {
        mainVariationSide = getOppositePlacement(mainVariationSide);
      }

      var altVariationSide = getOppositePlacement(mainVariationSide);
      var checks = [];

      if (checkMainAxis) {
        checks.push(overflow[_basePlacement] <= 0);
      }

      if (checkAltAxis) {
        checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
      }

      if (checks.every(function (check) {
        return check;
      })) {
        firstFittingPlacement = placement;
        makeFallbackChecks = false;
        break;
      }

      checksMap.set(placement, checks);
    }

    if (makeFallbackChecks) {
      // `2` may be desired in some cases – research later
      var numberOfChecks = flipVariations ? 3 : 1;

      var _loop = function _loop(_i) {
        var fittingPlacement = placements.find(function (placement) {
          var checks = checksMap.get(placement);

          if (checks) {
            return checks.slice(0, _i).every(function (check) {
              return check;
            });
          }
        });

        if (fittingPlacement) {
          firstFittingPlacement = fittingPlacement;
          return "break";
        }
      };

      for (var _i = numberOfChecks; _i > 0; _i--) {
        var _ret = _loop(_i);

        if (_ret === "break") break;
      }
    }

    if (state.placement !== firstFittingPlacement) {
      state.modifiersData[name]._skip = true;
      state.placement = firstFittingPlacement;
      state.reset = true;
    }
  } // eslint-disable-next-line import/no-unused-modules


  var flip$1 = {
    name: 'flip',
    enabled: true,
    phase: 'main',
    fn: flip,
    requiresIfExists: ['offset'],
    data: {
      _skip: false
    }
  };

  function getAltAxis(axis) {
    return axis === 'x' ? 'y' : 'x';
  }

  function within(min, value, max) {
    return Math.max(min, Math.min(value, max));
  }

  function preventOverflow(_ref) {
    var state = _ref.state,
        options = _ref.options,
        name = _ref.name;
    var _options$mainAxis = options.mainAxis,
        checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
        _options$altAxis = options.altAxis,
        checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
        boundary = options.boundary,
        rootBoundary = options.rootBoundary,
        altBoundary = options.altBoundary,
        padding = options.padding,
        _options$tether = options.tether,
        tether = _options$tether === void 0 ? true : _options$tether,
        _options$tetherOffset = options.tetherOffset,
        tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = detectOverflow(state, {
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding,
      altBoundary: altBoundary
    });
    var basePlacement = getBasePlacement(state.placement);
    var variation = getVariation(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = getMainAxisFromPlacement(basePlacement);
    var altAxis = getAltAxis(mainAxis);
    var popperOffsets = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign(Object.assign({}, state.rects), {}, {
      placement: state.placement
    })) : tetherOffset;
    var data = {
      x: 0,
      y: 0
    };

    if (!popperOffsets) {
      return;
    }

    if (checkMainAxis) {
      var mainSide = mainAxis === 'y' ? top : left;
      var altSide = mainAxis === 'y' ? bottom : right;
      var len = mainAxis === 'y' ? 'height' : 'width';
      var offset = popperOffsets[mainAxis];
      var min = popperOffsets[mainAxis] + overflow[mainSide];
      var max = popperOffsets[mainAxis] - overflow[altSide];
      var additive = tether ? -popperRect[len] / 2 : 0;
      var minLen = variation === start ? referenceRect[len] : popperRect[len];
      var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
      // outside the reference bounds

      var arrowElement = state.elements.arrow;
      var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
        width: 0,
        height: 0
      };
      var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
      var arrowPaddingMin = arrowPaddingObject[mainSide];
      var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
      // to include its full size in the calculation. If the reference is small
      // and near the edge of a boundary, the popper can overflow even if the
      // reference is not overflowing as well (e.g. virtual elements with no
      // width or height)

      var arrowLen = within(0, referenceRect[len], arrowRect[len]);
      var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - tetherOffsetValue : minLen - arrowLen - arrowPaddingMin - tetherOffsetValue;
      var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + tetherOffsetValue : maxLen + arrowLen + arrowPaddingMax + tetherOffsetValue;
      var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
      var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
      var offsetModifierValue = state.modifiersData.offset ? state.modifiersData.offset[state.placement][mainAxis] : 0;
      var tetherMin = popperOffsets[mainAxis] + minOffset - offsetModifierValue - clientOffset;
      var tetherMax = popperOffsets[mainAxis] + maxOffset - offsetModifierValue;
      var preventedOffset = within(tether ? Math.min(min, tetherMin) : min, offset, tether ? Math.max(max, tetherMax) : max);
      popperOffsets[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset;
    }

    if (checkAltAxis) {
      var _mainSide = mainAxis === 'x' ? top : left;

      var _altSide = mainAxis === 'x' ? bottom : right;

      var _offset = popperOffsets[altAxis];

      var _min = _offset + overflow[_mainSide];

      var _max = _offset - overflow[_altSide];

      var _preventedOffset = within(_min, _offset, _max);

      popperOffsets[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }

    state.modifiersData[name] = data;
  } // eslint-disable-next-line import/no-unused-modules


  var preventOverflow$1 = {
    name: 'preventOverflow',
    enabled: true,
    phase: 'main',
    fn: preventOverflow,
    requiresIfExists: ['offset']
  };

  function arrow(_ref) {
    var _state$modifiersData$;

    var state = _ref.state,
        name = _ref.name;
    var arrowElement = state.elements.arrow;
    var popperOffsets = state.modifiersData.popperOffsets;
    var basePlacement = getBasePlacement(state.placement);
    var axis = getMainAxisFromPlacement(basePlacement);
    var isVertical = [left, right].indexOf(basePlacement) >= 0;
    var len = isVertical ? 'height' : 'width';

    if (!arrowElement || !popperOffsets) {
      return;
    }

    var paddingObject = state.modifiersData[name + "#persistent"].padding;
    var arrowRect = getLayoutRect(arrowElement);
    var minProp = axis === 'y' ? top : left;
    var maxProp = axis === 'y' ? bottom : right;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
    var startDiff = popperOffsets[axis] - state.rects.reference[axis];
    var arrowOffsetParent = getOffsetParent(arrowElement);
    var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
    // outside of the popper bounds

    var min = paddingObject[minProp];
    var max = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset = within(min, center, max); // Prevents breaking syntax highlighting...

    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
  }

  function effect(_ref2) {
    var state = _ref2.state,
        options = _ref2.options,
        name = _ref2.name;
    var _options$element = options.element,
        arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element,
        _options$padding = options.padding,
        padding = _options$padding === void 0 ? 0 : _options$padding;

    if (arrowElement == null) {
      return;
    } // CSS selector


    if (typeof arrowElement === 'string') {
      arrowElement = state.elements.popper.querySelector(arrowElement);

      if (!arrowElement) {
        return;
      }
    }

    {
      if (!isHTMLElement(arrowElement)) {
        console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', 'To use an SVG arrow, wrap it in an HTMLElement that will be used as', 'the arrow.'].join(' '));
      }
    }

    if (!contains(state.elements.popper, arrowElement)) {
      {
        console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', 'element.'].join(' '));
      }

      return;
    }

    state.elements.arrow = arrowElement;
    state.modifiersData[name + "#persistent"] = {
      padding: mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements))
    };
  } // eslint-disable-next-line import/no-unused-modules


  var arrow$1 = {
    name: 'arrow',
    enabled: true,
    phase: 'main',
    fn: arrow,
    effect: effect,
    requires: ['popperOffsets'],
    requiresIfExists: ['preventOverflow']
  };

  function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) {
      preventedOffsets = {
        x: 0,
        y: 0
      };
    }

    return {
      top: overflow.top - rect.height - preventedOffsets.y,
      right: overflow.right - rect.width + preventedOffsets.x,
      bottom: overflow.bottom - rect.height + preventedOffsets.y,
      left: overflow.left - rect.width - preventedOffsets.x
    };
  }

  function isAnySideFullyClipped(overflow) {
    return [top, right, bottom, left].some(function (side) {
      return overflow[side] >= 0;
    });
  }

  function hide(_ref) {
    var state = _ref.state,
        name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = detectOverflow(state, {
      elementContext: 'reference'
    });
    var popperAltOverflow = detectOverflow(state, {
      altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
      referenceClippingOffsets: referenceClippingOffsets,
      popperEscapeOffsets: popperEscapeOffsets,
      isReferenceHidden: isReferenceHidden,
      hasPopperEscaped: hasPopperEscaped
    };
    state.attributes.popper = Object.assign(Object.assign({}, state.attributes.popper), {}, {
      'data-popper-reference-hidden': isReferenceHidden,
      'data-popper-escaped': hasPopperEscaped
    });
  } // eslint-disable-next-line import/no-unused-modules


  var hide$1 = {
    name: 'hide',
    enabled: true,
    phase: 'main',
    requiresIfExists: ['preventOverflow'],
    fn: hide
  };

  var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
  var createPopper = /*#__PURE__*/popperGenerator({
    defaultModifiers: defaultModifiers
  }); // eslint-disable-next-line import/no-unused-modules

  var hasElementType = typeof Element !== 'undefined';
  var hasMap = typeof Map === 'function';
  var hasSet = typeof Set === 'function';
  var hasArrayBuffer = typeof ArrayBuffer === 'function' && !!ArrayBuffer.isView; // Note: We **don't** need `envHasBigInt64Array` in fde es6/index.js

  function equal(a, b) {
    // START: fast-deep-equal es6/index.js 3.1.1
    if (a === b) return true;

    if (a && b && _typeof(a) == 'object' && _typeof(b) == 'object') {
      if (a.constructor !== b.constructor) return false;
      var length, i, keys;

      if (Array.isArray(a)) {
        length = a.length;
        if (length != b.length) return false;

        for (i = length; i-- !== 0;) {
          if (!equal(a[i], b[i])) return false;
        }

        return true;
      } // START: Modifications:
      // 1. Extra `has<Type> &&` helpers in initial condition allow es6 code
      //    to co-exist with es5.
      // 2. Replace `for of` with es5 compliant iteration using `for`.
      //    Basically, take:
      //
      //    ```js
      //    for (i of a.entries())
      //      if (!b.has(i[0])) return false;
      //    ```
      //
      //    ... and convert to:
      //
      //    ```js
      //    it = a.entries();
      //    while (!(i = it.next()).done)
      //      if (!b.has(i.value[0])) return false;
      //    ```
      //
      //    **Note**: `i` access switches to `i.value`.


      var it;

      if (hasMap && a instanceof Map && b instanceof Map) {
        if (a.size !== b.size) return false;
        it = a.entries();

        while (!(i = it.next()).done) {
          if (!b.has(i.value[0])) return false;
        }

        it = a.entries();

        while (!(i = it.next()).done) {
          if (!equal(i.value[1], b.get(i.value[0]))) return false;
        }

        return true;
      }

      if (hasSet && a instanceof Set && b instanceof Set) {
        if (a.size !== b.size) return false;
        it = a.entries();

        while (!(i = it.next()).done) {
          if (!b.has(i.value[0])) return false;
        }

        return true;
      } // END: Modifications


      if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
        length = a.length;
        if (length != b.length) return false;

        for (i = length; i-- !== 0;) {
          if (a[i] !== b[i]) return false;
        }

        return true;
      }

      if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
      if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
      if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();
      keys = Object.keys(a);
      length = keys.length;
      if (length !== Object.keys(b).length) return false;

      for (i = length; i-- !== 0;) {
        if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
      } // END: fast-deep-equal
      // START: react-fast-compare
      // custom handling for DOM elements


      if (hasElementType && a instanceof Element) return false; // custom handling for React/Preact

      for (i = length; i-- !== 0;) {
        if ((keys[i] === '_owner' || keys[i] === '__v' || keys[i] === '__o') && a.$$typeof) {
          // React-specific: avoid traversing React elements' _owner
          // Preact-specific: avoid traversing Preact elements' __v and __o
          //    __v = $_original / $_vnode
          //    __o = $_owner
          // These properties contain circular references and are not needed when
          // comparing the actual elements (and not their owners)
          // .$$typeof and ._store on just reasonable markers of elements
          continue;
        } // all other properties should be traversed as usual


        if (!equal(a[keys[i]], b[keys[i]])) return false;
      } // END: react-fast-compare
      // START: fast-deep-equal


      return true;
    }

    return a !== a && b !== b;
  } // end fast-deep-equal


  var reactFastCompare = function isEqual(a, b) {
    try {
      return equal(a, b);
    } catch (error) {
      if ((error.message || '').match(/stack|recursion/i)) {
        // warn on circular references, don't crash
        // browsers give this different errors name and messages:
        // chrome/safari: "RangeError", "Maximum call stack size exceeded"
        // firefox: "InternalError", too much recursion"
        // edge: "Error", "Out of stack space"
        console.warn('react-fast-compare cannot handle circular refs');
        return false;
      } // some other error. we should definitely know about these


      throw error;
    }
  };

  var EMPTY_MODIFIERS = [];
  var usePopper = function usePopper(referenceElement, popperElement, options) {
    if (options === void 0) {
      options = {};
    }

    var prevOptions = React__namespace.useRef(null);
    var optionsWithDefaults = {
      onFirstUpdate: options.onFirstUpdate,
      placement: options.placement || 'bottom',
      strategy: options.strategy || 'absolute',
      modifiers: options.modifiers || EMPTY_MODIFIERS
    };

    var _React$useState = React__namespace.useState({
      styles: {
        popper: {
          position: optionsWithDefaults.strategy,
          left: '0',
          top: '0'
        },
        arrow: {
          position: 'absolute'
        }
      },
      attributes: {}
    }),
        state = _React$useState[0],
        setState = _React$useState[1];

    var updateStateModifier = React__namespace.useMemo(function () {
      return {
        name: 'updateState',
        enabled: true,
        phase: 'write',
        fn: function fn(_ref) {
          var state = _ref.state;
          var elements = Object.keys(state.elements);
          setState({
            styles: fromEntries(elements.map(function (element) {
              return [element, state.styles[element] || {}];
            })),
            attributes: fromEntries(elements.map(function (element) {
              return [element, state.attributes[element]];
            }))
          });
        },
        requires: ['computeStyles']
      };
    }, []);
    var popperOptions = React__namespace.useMemo(function () {
      var newOptions = {
        onFirstUpdate: optionsWithDefaults.onFirstUpdate,
        placement: optionsWithDefaults.placement,
        strategy: optionsWithDefaults.strategy,
        modifiers: [].concat(optionsWithDefaults.modifiers, [updateStateModifier, {
          name: 'applyStyles',
          enabled: false
        }])
      };

      if (reactFastCompare(prevOptions.current, newOptions)) {
        return prevOptions.current || newOptions;
      } else {
        prevOptions.current = newOptions;
        return newOptions;
      }
    }, [optionsWithDefaults.onFirstUpdate, optionsWithDefaults.placement, optionsWithDefaults.strategy, optionsWithDefaults.modifiers, updateStateModifier]);
    var popperInstanceRef = React__namespace.useRef();
    useIsomorphicLayoutEffect(function () {
      if (popperInstanceRef.current) {
        popperInstanceRef.current.setOptions(popperOptions);
      }
    }, [popperOptions]);
    useIsomorphicLayoutEffect(function () {
      if (referenceElement == null || popperElement == null) {
        return;
      }

      var createPopper$1 = options.createPopper || createPopper;
      var popperInstance = createPopper$1(referenceElement, popperElement, popperOptions);
      popperInstanceRef.current = popperInstance;
      return function () {
        popperInstance.destroy();
        popperInstanceRef.current = null;
      };
    }, [referenceElement, popperElement, options.createPopper]);
    return {
      state: popperInstanceRef.current ? popperInstanceRef.current.state : null,
      styles: state.styles,
      attributes: state.attributes,
      update: popperInstanceRef.current ? popperInstanceRef.current.update : null,
      forceUpdate: popperInstanceRef.current ? popperInstanceRef.current.forceUpdate : null
    };
  };

  var noop = (function () {});

  function useDefault(value, defaultValue, onChange) {
    var _useState = React.useState(defaultValue),
        _useState2 = _slicedToArray(_useState, 2),
        internalValue = _useState2[0],
        setInternalValue = _useState2[1];

    if (typeof value !== "undefined") {
      return [value, onChange || noop];
    }

    return [internalValue, function (newValue) {
      setInternalValue(newValue);

      if (typeof onChange === "function") {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        onChange.apply(void 0, [newValue].concat(args));
      }
    }];
  }

  function _createForOfIteratorHelper$3(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$3(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray$3(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$3(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$3(o, minLen); }

  function _arrayLikeToArray$3(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function composeRefs() {
    for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {
      refs[_key] = arguments[_key];
    }

    return function (instance) {
      var _iterator = _createForOfIteratorHelper$3(refs),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var ref = _step.value;

          if (typeof ref === "function") {
            ref(instance);
          } else if (ref) {
            ref.current = instance;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    };
  }

  function usePrevious(state) {
    var ref = React.useRef();
    React.useEffect(function () {
      ref.current = state;
    });
    return ref.current;
  }

  var Portal = function Portal(props) {
    var children = props.children,
        attach = props.attach;
    var container = React.useMemo(function () {
      var el = document.createElement("div");
      return el;
    }, []);
    React.useEffect(function () {
      var parentElement = document.body;
      var el = null;

      if (typeof attach === "function") {
        el = attach();
      } else if (typeof attach === "string") {
        el = document.querySelector(attach);
      }

      if (el instanceof HTMLElement) {
        parentElement = el;
      }

      parentElement.appendChild(container);
      return function () {
        parentElement.removeChild(container);
      };
    }, [container, attach]);
    return /*#__PURE__*/ReactDOM.createPortal(children, container);
  };

  function useClickOutside(refs, handler) {
    React.useEffect(function () {
      var listener = function listener(event) {
        if (!Array.isArray(refs) || refs.find(function (ref) {
          var _ref$current;

          return (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.contains(event.target);
        })) {
          return;
        }

        handler(event);
      };

      document.addEventListener("mousedown", listener);
      document.addEventListener("touchstart", listener);
      return function () {
        document.removeEventListener("mousedown", listener);
        document.removeEventListener("touchstart", listener);
      };
    }, [refs, handler]);
  }

  function _createForOfIteratorHelper$2(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$2(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray$2(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$2(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen); }

  function _arrayLikeToArray$2(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
  var ESC_KEY = "Escape";
  function useTriggerProps(ref, triggerNode, triggers, visible, setVisible) {
    var disabled = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
    var originTrigger = arguments.length > 6 ? arguments[6] : undefined;
    var triggerProps = {};
    var popupProps = {};

    var toggle = function toggle(e, trigger) {
      return setVisible(!visible, {
        e: e,
        trigger: trigger
      });
    };

    var show = function show(e, trigger) {
      return setVisible(true, {
        e: e,
        trigger: trigger
      });
    };

    var hide = function hide(e, trigger) {
      return setVisible(false, {
        e: e,
        trigger: trigger
      });
    };

    useClickOutside([ref, triggerNode], function (e) {
      if (visible && (triggers.includes("click") || triggers.includes("context-menu"))) {
        hide(e, "trigger-element-blur");
      }
    });
    if (disabled) return [triggerProps, popupProps];

    var _iterator = _createForOfIteratorHelper$2(triggers),
        _step;

    try {
      var _loop = function _loop() {
        var trigger = _step.value;
        var _originTrigger$props = originTrigger.props,
            onClick = _originTrigger$props.onClick,
            onMouseEnter = _originTrigger$props.onMouseEnter,
            onMouseLeave = _originTrigger$props.onMouseLeave,
            onFocus = _originTrigger$props.onFocus,
            onBlur = _originTrigger$props.onBlur,
            onContextMenu = _originTrigger$props.onContextMenu,
            onKeyDown = _originTrigger$props.onKeyDown;

        if (trigger === "click") {
          triggerProps.onClick = function (e) {
            toggle(e, "trigger-element-click");
            onClick && onClick(e);
          };
        }

        if (trigger === "hover") {
          triggerProps.onMouseEnter = function (e) {
            show(e, "trigger-element-hover");
            onMouseEnter && onMouseEnter(e);
          };

          popupProps.onMouseEnter = function (e) {
            visible && show(e, "trigger-element-hover");
          };

          triggerProps.onMouseLeave = function (e) {
            hide(e, "trigger-element-hover");
            onMouseLeave && onMouseLeave(e);
          };

          popupProps.onMouseLeave = function (e) {
            return hide(e, "trigger-element-hover");
          };
        }

        if (trigger === "focus") {
          triggerProps.onFocus = function (e) {
            show(e, "trigger-element-focus");
            onFocus && onFocus(e);
          };

          triggerProps.onBlur = function (e) {
            hide(e, "trigger-element-blur");
            onBlur && onBlur(e);
          };
        }

        if (trigger === "context-menu") {
          triggerProps.onContextMenu = function (e) {
            show(e, "context-menu");
            onContextMenu && onContextMenu(e);
          };
        }

        triggerProps.onKeyDown = function (e) {
          if (e.key === ESC_KEY) hide(e, "keydown-esc");
          onKeyDown && onKeyDown(e);
        };
      };

      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        _loop();
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return [triggerProps, popupProps];
  }

  function ownKeys$1S(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1S(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1S(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1S(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var usePopupCssTransition = function usePopupCssTransition(_ref) {
    var contentRef = _ref.contentRef,
        classPrefix = _ref.classPrefix,
        expandAnimation = _ref.expandAnimation;

    var _useState = React.useState(null),
        _useState2 = _slicedToArray(_useState, 2),
        presetMaxHeight = _useState2[0],
        setPresetMaxHeight = _useState2[1];

    var contentEle = contentRef === null || contentRef === void 0 ? void 0 : contentRef.current;
    var popupAnimationClassPrefix = "".concat(classPrefix, "-popup--animation");

    var handleEntering = function handleEntering() {
      setPresetMaxHeight(parseInt(getComputedStyle(contentEle).maxHeight, 10) || Infinity);

      if (contentEle) {
        contentEle.style.overflow = "hidden";
        contentEle.style.maxHeight = "0";
      }
    };

    var handleEntered = function handleEntered() {
      if (contentEle) {
        var scrollHeight = contentEle.scrollHeight;
        var minHeight = presetMaxHeight !== Infinity ? presetMaxHeight : scrollHeight;
        contentEle.style.maxHeight = "".concat(minHeight, "px");
        contentEle.style.overflow = "";
      }
    };

    var handleExiting = function handleExiting() {
      if (contentEle) {
        contentEle.style.maxHeight = "0";
        contentEle.style.overflow = "hidden";
      }
    };

    var lifeCircleEvent = expandAnimation ? {
      onEntering: handleEntering,
      onEntered: handleEntered,
      onExiting: handleExiting
    } : {};
    return {
      props: _objectSpread$1S(_objectSpread$1S({
        timeout: 200,
        nodeRef: contentRef
      }, lifeCircleEvent), {}, {
        classNames: {
          appear: "".concat(popupAnimationClassPrefix, "-enter ").concat(popupAnimationClassPrefix, "-enter-active"),
          appearActive: "".concat(popupAnimationClassPrefix, "-enter-active"),
          appearDone: "".concat(popupAnimationClassPrefix, "-enter-active ").concat(popupAnimationClassPrefix, "-enter-to"),
          enter: "".concat(popupAnimationClassPrefix, "-enter ").concat(popupAnimationClassPrefix, "-enter-active"),
          enterActive: "".concat(popupAnimationClassPrefix, "-enter-active"),
          enterDone: "".concat(popupAnimationClassPrefix, "-enter-active ").concat(popupAnimationClassPrefix, "-enter-to"),
          exit: "".concat(popupAnimationClassPrefix, "-leave ").concat(popupAnimationClassPrefix, "-leave-active"),
          exitActive: "".concat(popupAnimationClassPrefix, "-leave-active"),
          exitDone: "".concat(popupAnimationClassPrefix, "-leave-active ").concat(popupAnimationClassPrefix, "-leave-to")
        }
      })
    };
  };

  function ownKeys$1R(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1R(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1R(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1R(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var placementMap = {
    top: "top",
    "top-left": "top-start",
    "top-right": "top-end",
    bottom: "bottom",
    "bottom-left": "bottom-start",
    "bottom-right": "bottom-end",
    left: "left",
    "left-top": "left-start",
    "left-bottom": "left-end",
    right: "right",
    "right-top": "right-start",
    "right-bottom": "right-end"
  };
  var Popup$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _props$trigger = props.trigger,
        trigger = _props$trigger === void 0 ? "hover" : _props$trigger,
        _props$content = props.content,
        content = _props$content === void 0 ? null : _props$content,
        _props$placement = props.placement,
        placement = _props$placement === void 0 ? "top" : _props$placement,
        _props$attach = props.attach,
        attach = _props$attach === void 0 ? "body" : _props$attach,
        _props$showArrow = props.showArrow,
        showArrow = _props$showArrow === void 0 ? false : _props$showArrow,
        _props$destroyOnClose = props.destroyOnClose,
        destroyOnClose = _props$destroyOnClose === void 0 ? false : _props$destroyOnClose,
        className = props.className,
        style = props.style,
        overlayClassName = props.overlayClassName,
        overlayStyle = props.overlayStyle,
        triggerElement = props.triggerElement,
        _props$children = props.children,
        children = _props$children === void 0 ? triggerElement : _props$children,
        disabled = props.disabled,
        _props$defaultVisible = props.defaultVisible,
        defaultVisible = _props$defaultVisible === void 0 ? false : _props$defaultVisible,
        zIndex = props.zIndex,
        onVisibleChange = props.onVisibleChange,
        expandAnimation = props.expandAnimation;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useDefault = useDefault(props.visible, defaultVisible, onVisibleChange),
        _useDefault2 = _slicedToArray(_useDefault, 2),
        visible = _useDefault2[0],
        setVisible = _useDefault2[1];

    var preVisible = usePrevious(visible);

    var _useState = React.useState(null),
        _useState2 = _slicedToArray(_useState, 2),
        triggerRef = _useState2[0],
        setTriggerRef = _useState2[1];

    var _useState3 = React.useState(null),
        _useState4 = _slicedToArray(_useState3, 2),
        overlayRef = _useState4[0],
        setOverlayRef = _useState4[1];

    var contentRef = React.useRef(null);

    var _useState5 = React.useState(false),
        _useState6 = _slicedToArray(_useState5, 2),
        firstUpdate = _useState6[0],
        setFirstUpdate = _useState6[1];

    var onPopperFirstUpdate = React.useMemo(function () {
      return function () {
        setFirstUpdate(true);
      };
    }, []);
    var popperOptions = React.useMemo(function () {
      var _contentRef$current, _childElement$offsetH, _childElement$offsetW;

      if (!visible) return {
        padding: 0
      };
      var childElement = (_contentRef$current = contentRef.current) === null || _contentRef$current === void 0 ? void 0 : _contentRef$current.firstElementChild;
      var height = (_childElement$offsetH = childElement === null || childElement === void 0 ? void 0 : childElement.offsetHeight) !== null && _childElement$offsetH !== void 0 ? _childElement$offsetH : 0;
      var width = (_childElement$offsetW = childElement === null || childElement === void 0 ? void 0 : childElement.offsetWidth) !== null && _childElement$offsetW !== void 0 ? _childElement$offsetW : 0;
      return {
        padding: {
          top: height,
          left: width,
          right: width,
          bottom: height
        }
      };
    }, [visible, overlayRef]);

    var _usePopper = usePopper(triggerRef, overlayRef, {
      placement: placementMap[placement],
      onFirstUpdate: onPopperFirstUpdate,
      modifiers: [{
        name: "flip",
        options: _objectSpread$1R({}, popperOptions)
      }]
    }),
        styles = _usePopper.styles,
        attributes = _usePopper.attributes,
        update = _usePopper.update;

    var defaultStyles = React.useMemo(function () {
      if (triggerRef && typeof overlayStyle === "function") return _objectSpread$1R(_objectSpread$1R({}, overlayStyle(triggerRef)), {}, {
        zIndex: zIndex
      });
      return _objectSpread$1R(_objectSpread$1R({}, overlayStyle), {}, {
        zIndex: zIndex
      });
    }, [overlayStyle, zIndex, triggerRef]);
    var overlayVisibleStyle = defaultStyles;
    var triggerNodeTemp = React.useMemo(function () {
      var _React$Children$toArr = React__default["default"].Children.toArray(children),
          _React$Children$toArr2 = _slicedToArray(_React$Children$toArr, 1),
          triggerChildNode = _React$Children$toArr2[0];

      if (React__default["default"].Children.count(children) === 1 && /*#__PURE__*/React.isValidElement(triggerChildNode)) {
        return triggerChildNode;
      }

      return /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(classPrefix, "-trigger")
      }, children);
    }, [children, classPrefix]);

    var _useTriggerProps = useTriggerProps({
      current: overlayRef
    }, {
      current: triggerRef
    }, [trigger], visible, setVisible, disabled, triggerNodeTemp),
        _useTriggerProps2 = _slicedToArray(_useTriggerProps, 2),
        triggerProps = _useTriggerProps2[0],
        popupProps = _useTriggerProps2[1];

    var disabledClassName = classNames$1(_defineProperty$2({}, "".concat(classPrefix, "-is-disabled"), disabled));
    var triggerNode = /*#__PURE__*/React.cloneElement(triggerNodeTemp, _objectSpread$1R({
      ref: composeRefs(triggerNodeTemp.ref, setTriggerRef),
      className: classNames$1(disabledClassName, triggerNodeTemp.props.className)
    }, triggerProps));
    var cssTransitionState = usePopupCssTransition({
      contentRef: contentRef,
      classPrefix: classPrefix,
      expandAnimation: expandAnimation
    });
    React.useEffect(function () {
      if ((visible || firstUpdate) && update) {
        update();
      }
    }, [visible, preVisible, update, children, firstUpdate]);

    var handlePopupWrapperMouseDown = function handlePopupWrapperMouseDown() {
      var removeUpdate = function removeUpdate() {
        return window.removeEventListener("mousemove", update);
      };

      window.removeEventListener("mouseup", removeUpdate);
      window.addEventListener("mousemove", update);
      window.addEventListener("mouseup", removeUpdate);
    };

    var portal = visible || overlayRef ? /* @__PURE__ */React__default["default"].createElement(Portal, {
      attach: attach
    }, /* @__PURE__ */React__default["default"].createElement(CSSTransition$1, _objectSpread$1R({
      "in": visible,
      appear: true,
      unmountOnExit: destroyOnClose
    }, cssTransitionState.props), /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$1R(_objectSpread$1R({
      ref: composeRefs(setOverlayRef, ref),
      style: styles.popper,
      className: "".concat(classPrefix, "-popup")
    }, attributes.popper), popupProps), /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-popup__content"), overlayClassName, _defineProperty$2({}, "".concat(classPrefix, "-popup__content--arrow"), showArrow)),
      style: overlayVisibleStyle,
      ref: contentRef
    }, showArrow ? /* @__PURE__ */React__default["default"].createElement("div", {
      style: styles.arrow,
      className: "".concat(classPrefix, "-popup__arrow")
    }) : null, content)))) : null;
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-popup__reference"), className),
      onMouseDown: handlePopupWrapperMouseDown,
      style: style
    }, triggerNode, portal);
  });
  Popup$1.displayName = "Popup";

  var Popup = Popup$1;

  function setStyle(el, styles) {
    var keys = Object.keys(styles);
    keys.forEach(function (key) {
      el.style[key] = styles[key];
    });
  }

  var period = 200;
  var noneRippleBg = "rgba(0, 0, 0, 0)";
  var defaultRippleColor = "rgba(0, 0, 0, 0.35)";

  var getRippleColor = function getRippleColor(el, fixedRippleColor) {
    var _el$dataset;

    if (fixedRippleColor) {
      return fixedRippleColor;
    }

    if (el !== null && el !== void 0 && (_el$dataset = el.dataset) !== null && _el$dataset !== void 0 && _el$dataset.ripple) {
      var rippleColor = el.dataset.ripple;
      return rippleColor;
    }

    var cssVariable = getComputedStyle(el).getPropertyValue("--ripple-color");

    if (cssVariable) {
      return cssVariable;
    }

    return defaultRippleColor;
  };

  function useRipple(ref, fixedRippleColor) {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var rippleContainer = document.createElement("div");
    var handleAddRipple = React.useCallback(function (e) {
      var el = ref === null || ref === void 0 ? void 0 : ref.current;
      var rippleColor = getRippleColor(el, fixedRippleColor);
      if (e.button !== 0 || !el) return;
      if (el.classList.contains("".concat(classPrefix, "-is-active")) || el.classList.contains("".concat(classPrefix, "-is-disabled")) || el.classList.contains("".concat(classPrefix, "-is-checked"))) return;
      var elStyle = getComputedStyle(el);
      var elBorder = parseInt(elStyle.borderWidth, 10);
      var border = elBorder > 0 ? elBorder : 0;
      var width = el.offsetWidth;
      var height = el.offsetHeight;

      if (rippleContainer.parentNode === null) {
        setStyle(rippleContainer, {
          position: "absolute",
          left: "".concat(0 - border, "px"),
          top: "".concat(0 - border, "px"),
          width: "".concat(width, "px"),
          height: "".concat(height, "px"),
          borderRadius: elStyle.borderRadius,
          pointerEvents: "none",
          overflow: "hidden"
        });
        el.appendChild(rippleContainer);
      }

      var ripple = document.createElement("div");
      setStyle(ripple, {
        marginTop: "0",
        marginLeft: "0",
        right: "".concat(width, "px"),
        width: "".concat(width + 20, "px"),
        height: "100%",
        transition: "transform ".concat(period, "ms cubic-bezier(.38, 0, .24, 1), background ").concat(period * 2, "ms linear"),
        transform: "skewX(-8deg)",
        pointerEvents: "none",
        position: "absolute",
        zIndex: 0,
        backgroundColor: rippleColor,
        opacity: "0.9"
      });
      var elMap = /* @__PURE__ */new WeakMap();

      for (var n = el.children.length, i = 0; i < n; ++i) {
        var child = el.children[i];

        if (child.style.zIndex === "" && child !== rippleContainer) {
          child.style.zIndex = "1";
          elMap.set(child, true);
        }
      }

      var initPosition = el.style.position ? el.style.position : getComputedStyle(el).position;

      if (initPosition === "" || initPosition === "static") {
        el.style.position = "relative";
      }

      rippleContainer.insertBefore(ripple, rippleContainer.firstChild);
      setTimeout(function () {
        ripple.style.transform = "translateX(".concat(width, "px)");
      }, 0);

      var handleClearRipple = function handleClearRipple() {
        var el2 = ref === null || ref === void 0 ? void 0 : ref.current;
        ripple.style.backgroundColor = noneRippleBg;
        if (!el2) return;
        el2.removeEventListener("pointerup", handleClearRipple, false);
        el2.removeEventListener("pointerleave", handleClearRipple, false);
        setTimeout(function () {
          ripple.remove();
          if (rippleContainer.children.length === 0) rippleContainer.remove();
        }, period * 2 + 100);
      };

      el.addEventListener("pointerup", handleClearRipple, false);
      el.addEventListener("pointerleave", handleClearRipple, false);
    }, [classPrefix, ref, fixedRippleColor, rippleContainer]);
    var initRippleElement = React.useCallback(function () {
      var _el$style;

      var el = ref === null || ref === void 0 ? void 0 : ref.current;
      if (!el) return;
      var initPosition = ((_el$style = el.style) === null || _el$style === void 0 ? void 0 : _el$style.position) || getComputedStyle(el).position;

      if (["", "static"].includes(initPosition)) {
        el.style.position = "relative";
      }
    }, [ref]);
    React.useEffect(function () {
      var el = ref === null || ref === void 0 ? void 0 : ref.current;
      if (!el) return;
      initRippleElement();
      el.addEventListener("pointerdown", handleAddRipple, false);
      return function () {
        el.removeEventListener("pointerdown", handleAddRipple, false);
      };
    }, [initRippleElement, handleAddRipple, fixedRippleColor, ref]);
  }

  var _excluded$q = ["type", "theme", "variant", "icon", "disabled", "loading", "size", "block", "ghost", "shape", "children", "content", "className", "onClick"];

  function ownKeys$1Q(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1Q(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1Q(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1Q(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var Button$1 = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
    var _classNames;

    var _ref$type = _ref.type,
        type = _ref$type === void 0 ? "button" : _ref$type,
        theme = _ref.theme,
        _ref$variant = _ref.variant,
        variant = _ref$variant === void 0 ? "base" : _ref$variant,
        icon = _ref.icon,
        disabled = _ref.disabled,
        loading = _ref.loading,
        size = _ref.size,
        block = _ref.block,
        ghost = _ref.ghost,
        _ref$shape = _ref.shape,
        shape = _ref$shape === void 0 ? "rectangle" : _ref$shape,
        children = _ref.children,
        content = _ref.content,
        className = _ref.className,
        _ref$onClick = _ref.onClick,
        onClick = _ref$onClick === void 0 ? noop : _ref$onClick,
        buttonProps = _objectWithoutProperties$1(_ref, _excluded$q);

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var btnRef = React.useRef();
    useRipple(ref || btnRef);
    var hasChildren = typeof children !== "undefined";
    var hasContent = typeof content !== "undefined";
    var childrenNode = children;

    if (!hasChildren && hasContent) {
      childrenNode = content;
    }

    var iconNode = icon;
    if (loading) iconNode = /* @__PURE__ */React__default["default"].createElement(Loading, {
      loading: loading,
      inheritColor: true
    });
    var renderTheme = theme;

    if (!theme) {
      if (variant === "base") {
        renderTheme = "primary";
      } else {
        renderTheme = "default";
      }
    }

    return /* @__PURE__ */React__default["default"].createElement("button", _objectSpread$1Q({
      ref: ref || btnRef,
      type: type,
      className: classNames$1(className, ["".concat(classPrefix, "-button"), "".concat(classPrefix, "-button--theme-").concat(renderTheme), "".concat(classPrefix, "-button--variant-").concat(variant)], (_classNames = {}, _defineProperty$2(_classNames, "".concat(classPrefix, "-button--shape-").concat(shape), shape !== "rectangle"), _defineProperty$2(_classNames, "".concat(classPrefix, "-button--ghost"), ghost), _defineProperty$2(_classNames, "".concat(classPrefix, "-is-loading"), loading), _defineProperty$2(_classNames, "".concat(classPrefix, "-is-disabled"), disabled || loading), _defineProperty$2(_classNames, "".concat(classPrefix, "-size-s"), size === "small"), _defineProperty$2(_classNames, "".concat(classPrefix, "-size-l"), size === "large"), _defineProperty$2(_classNames, "".concat(classPrefix, "-size-full-width"), block), _classNames)),
      onClick: !disabled && !loading ? onClick : void 0,
      disabled: disabled || loading
    }, buttonProps), iconNode ? /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, iconNode, (hasChildren || hasContent) && /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-button__text")
    }, childrenNode)) : /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-button__text")
    }, childrenNode));
  });
  Button$1.displayName = "Button";

  var Button = Button$1;

  var baseGetTag$8 = _baseGetTag,
      isObject$a = isObject_1;
  /** `Object#toString` result references. */

  var asyncTag = '[object AsyncFunction]',
      funcTag$2 = '[object Function]',
      genTag$1 = '[object GeneratorFunction]',
      proxyTag = '[object Proxy]';
  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a function, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */

  function isFunction$3(value) {
    if (!isObject$a(value)) {
      return false;
    } // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.


    var tag = baseGetTag$8(value);
    return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
  }

  var isFunction_1 = isFunction$3;

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};

    var target = _objectWithoutPropertiesLoose(source, excluded);

    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  function _defineProperty$1(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  var classnames = {
    exports: {}
  };
  /*!
    Copyright (c) 2018 Jed Watson.
    Licensed under the MIT License (MIT), see
    http://jedwatson.github.io/classnames
  */

  (function (module) {
    /* global define */
    (function () {

      var hasOwn = {}.hasOwnProperty;

      function classNames() {
        var classes = [];

        for (var i = 0; i < arguments.length; i++) {
          var arg = arguments[i];
          if (!arg) continue;

          var argType = _typeof(arg);

          if (argType === 'string' || argType === 'number') {
            classes.push(arg);
          } else if (Array.isArray(arg)) {
            if (arg.length) {
              var inner = classNames.apply(null, arg);

              if (inner) {
                classes.push(inner);
              }
            }
          } else if (argType === 'object') {
            if (arg.toString === Object.prototype.toString) {
              for (var key in arg) {
                if (hasOwn.call(arg, key) && arg[key]) {
                  classes.push(key);
                }
              }
            } else {
              classes.push(arg.toString());
            }
          }
        }

        return classes.join(' ');
      }

      if (module.exports) {
        classNames["default"] = classNames;
        module.exports = classNames;
      } else {
        window.classNames = classNames;
      }
    })();
  })(classnames);

  var classNames = classnames.exports;

  var DEFAULT_CLASS_PREFIX = "t";
  var DEFAULT_LOCALE = "zh-CN";
  var ConfigContext = /*#__PURE__*/React.createContext({
    classPrefix: DEFAULT_CLASS_PREFIX,
    locale: DEFAULT_LOCALE
  });

  var useConfig = function useConfig() {
    return React.useContext(ConfigContext);
  };

  function useCommonClassName$1() {
    var _useConfig = useConfig(),
        classPrefix = _useConfig.classPrefix;

    return React.useMemo(function () {
      return {
        SIZE: {
          "default": "",
          xs: "".concat(classPrefix, "-size-xs"),
          small: "".concat(classPrefix, "-size-s"),
          middle: "".concat(classPrefix, "-size-m"),
          large: "".concat(classPrefix, "-size-l"),
          xl: "".concat(classPrefix, "-size-xl"),
          block: "".concat(classPrefix, "-size-full-width")
        },
        STATUS: {
          loading: "".concat(classPrefix, "-is-loading"),
          disabled: "".concat(classPrefix, "-is-disabled"),
          focused: "".concat(classPrefix, "-is-focused"),
          success: "".concat(classPrefix, "-is-success"),
          error: "".concat(classPrefix, "-is-error"),
          warning: "".concat(classPrefix, "-is-warning"),
          selected: "".concat(classPrefix, "-is-selected"),
          active: "".concat(classPrefix, "-is-active"),
          checked: "".concat(classPrefix, "-is-checked"),
          current: "".concat(classPrefix, "-is-current"),
          hidden: "".concat(classPrefix, "-is-hidden"),
          visible: "".concat(classPrefix, "-is-visible"),
          expanded: "".concat(classPrefix, "-is-expanded"),
          indeterminate: "".concat(classPrefix, "-is-indeterminate")
        }
      };
    }, [classPrefix]);
  }

  function useSizeProps(size) {
    var COMMON_SIZE_CLASS_NAMES = useCommonClassName$1().SIZE;

    if (typeof size === "undefined") {
      return {};
    }

    if (!(size in COMMON_SIZE_CLASS_NAMES)) {
      return {
        className: "",
        style: {
          fontSize: size
        }
      };
    }

    return {
      className: COMMON_SIZE_CLASS_NAMES[size],
      style: {}
    };
  }

  var _excluded$p = ["icon", "id", "className", "size", "style"];

  function ownKeys$1P(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1P(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1P(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1P(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  function render(node, id, rootProps) {
    return /*#__PURE__*/React.createElement(node.tag, _objectSpread$1P(_objectSpread$1P({
      key: id
    }, node.attrs), rootProps), (node.children || []).map(function (child, index) {
      return render(child, "".concat(id, "-").concat(node.tag, "-").concat(index));
    }));
  }

  var IconBase = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var icon = props.icon,
        id = props.id,
        className = props.className,
        size = props.size,
        style = props.style,
        restProps = _objectWithoutProperties(props, _excluded$p);

    var _useSizeProps = useSizeProps(size),
        sizeClassName = _useSizeProps.className,
        sizeStyle = _useSizeProps.style;

    var cls = classNames("t-icon", "t-icon-".concat(id), className, sizeClassName);
    return render(icon, "".concat(id), _objectSpread$1P({
      ref: ref,
      className: cls,
      style: _objectSpread$1P(_objectSpread$1P({}, style), sizeStyle)
    }, restProps));
  });
  IconBase.displayName = "TIconBase";

  function ownKeys$1O(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1O(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1O(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1O(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$u = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7.35 8.65v3.85h1.3V8.65h3.85v-1.3H8.65V3.5h-1.3v3.85H3.5v1.3h3.85z",
        "fillOpacity": 0.9
      }
    }]
  };
  var AddIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$1O(_objectSpread$1O({}, props), {}, {
      id: "add",
      ref: ref,
      icon: element$u
    }));
  });
  AddIcon.displayName = "AddIcon";

  function ownKeys$1N(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1N(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1N(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1N(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$t = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10.88 8a2.88 2.88 0 11-5.76 0 2.88 2.88 0 015.76 0zm-1 0a1.88 1.88 0 10-3.76 0 1.88 1.88 0 003.76 0z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M1.12 8.23A7.72 7.72 0 008 12.5c2.9 0 5.54-1.63 6.88-4.27L15 8l-.12-.23A7.73 7.73 0 008 3.5a7.74 7.74 0 00-6.88 4.27L1 8l.12.23zM8 11.5A6.73 6.73 0 012.11 8 6.73 6.73 0 0113.9 8 6.74 6.74 0 018 11.5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var BrowseIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$1N(_objectSpread$1N({}, props), {}, {
      id: "browse",
      ref: ref,
      icon: element$t
    }));
  });
  BrowseIcon.displayName = "BrowseIcon";

  function ownKeys$1M(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1M(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1M(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1M(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$s = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10 3H6V1.5H5V3H3a1 1 0 00-1 1v9a1 1 0 001 1h10a1 1 0 001-1V4a1 1 0 00-1-1h-2V1.5h-1V3zM5 5h1V4h4v1h1V4h2v2H3V4h2v1zM3 7h10v6H3V7z",
        "fillOpacity": 0.9
      }
    }]
  };
  var CalendarIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$1M(_objectSpread$1M({}, props), {}, {
      id: "calendar",
      ref: ref,
      icon: element$s
    }));
  });
  CalendarIcon.displayName = "CalendarIcon";

  function ownKeys$1L(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1L(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1L(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1L(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$r = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6 5v6l4.5-3L6 5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var CaretRightSmallIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$1L(_objectSpread$1L({}, props), {}, {
      id: "caret-right-small",
      ref: ref,
      icon: element$r
    }));
  });
  CaretRightSmallIcon.displayName = "CaretRightSmallIcon";

  function ownKeys$1K(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1K(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1K(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1K(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$q = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 15A7 7 0 108 1a7 7 0 000 14zM4.5 8.2l.7-.7L7 9.3l3.8-3.8.7.7L7 10.7 4.5 8.2z",
        "fillOpacity": 0.9
      }
    }]
  };
  var CheckCircleFilledIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$1K(_objectSpread$1K({}, props), {}, {
      id: "check-circle-filled",
      ref: ref,
      icon: element$q
    }));
  });
  CheckCircleFilledIcon.displayName = "CheckCircleFilledIcon";

  function ownKeys$1J(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1J(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1J(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1J(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$p = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4.5 8.2L7 10.7l4.5-4.5-.7-.7L7 9.3 5.2 7.5l-.7.7z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4.11 2.18a7 7 0 117.78 11.64A7 7 0 014.1 2.18zm.56 10.8a6 6 0 106.66-9.97A6 6 0 004.67 13z",
        "fillOpacity": 0.9
      }
    }]
  };
  var CheckCircleIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$1J(_objectSpread$1J({}, props), {}, {
      id: "check-circle",
      ref: ref,
      icon: element$p
    }));
  });
  CheckCircleIcon.displayName = "CheckCircleIcon";

  function ownKeys$1I(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1I(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1I(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1I(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$o = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6.43 9.92l6.23-6.22.92.92-7.15 7.14L1.97 7.3l.92-.92 3.54 3.54z",
        "fillOpacity": 0.9
      }
    }]
  };
  var CheckIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$1I(_objectSpread$1I({}, props), {}, {
      id: "check",
      ref: ref,
      icon: element$o
    }));
  });
  CheckIcon.displayName = "CheckIcon";

  function ownKeys$1H(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1H(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1H(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1H(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$n = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10.8 6.2L8 9 5.2 6.2l-.7.71 3.5 3.5 3.5-3.5-.7-.7z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M1 8a7 7 0 1114 0A7 7 0 011 8zm1 0a6 6 0 1012 0A6 6 0 002 8z",
        "fillOpacity": 0.9
      }
    }]
  };
  var ChevronDownCircleIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$1H(_objectSpread$1H({}, props), {}, {
      id: "chevron-down-circle",
      ref: ref,
      icon: element$n
    }));
  });
  ChevronDownCircleIcon.displayName = "ChevronDownCircleIcon";

  function ownKeys$1G(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1G(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1G(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1G(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$m = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3.54 6.46l.92-.92L8 9.08l3.54-3.54.92.92L8 10.92 3.54 6.46z",
        "fillOpacity": 0.9
      }
    }]
  };
  var ChevronDownIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$1G(_objectSpread$1G({}, props), {}, {
      id: "chevron-down",
      ref: ref,
      icon: element$m
    }));
  });
  ChevronDownIcon.displayName = "ChevronDownIcon";

  function ownKeys$1F(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1F(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1F(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1F(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$l = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M13.04 4.46l-.92-.92L7.66 8l4.46 4.46.92-.92L9.5 8l3.54-3.54z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8.04 4.46l-.92-.92L2.66 8l4.46 4.46.92-.92L4.5 8l3.54-3.54z",
        "fillOpacity": 0.9
      }
    }]
  };
  var ChevronLeftDoubleIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$1F(_objectSpread$1F({}, props), {}, {
      id: "chevron-left-double",
      ref: ref,
      icon: element$l
    }));
  });
  ChevronLeftDoubleIcon.displayName = "ChevronLeftDoubleIcon";

  function ownKeys$1E(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1E(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1E(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1E(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$k = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M9.54 3.54l.92.92L6.92 8l3.54 3.54-.92.92L5.08 8l4.46-4.46z",
        "fillOpacity": 0.9
      }
    }]
  };
  var ChevronLeftIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$1E(_objectSpread$1E({}, props), {}, {
      id: "chevron-left",
      ref: ref,
      icon: element$k
    }));
  });
  ChevronLeftIcon.displayName = "ChevronLeftIcon";

  function ownKeys$1D(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1D(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1D(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1D(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$j = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2.96 11.54l.92.92L8.34 8 3.88 3.54l-.92.92L6.5 8l-3.54 3.54zm5 0l.92.92L13.34 8 8.88 3.54l-.92.92L11.5 8l-3.54 3.54z",
        "fillOpacity": 0.9
      }
    }]
  };
  var ChevronRightDoubleIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$1D(_objectSpread$1D({}, props), {}, {
      id: "chevron-right-double",
      ref: ref,
      icon: element$j
    }));
  });
  ChevronRightDoubleIcon.displayName = "ChevronRightDoubleIcon";

  function ownKeys$1C(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1C(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1C(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1C(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$i = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6.46 12.46l-.92-.92L9.08 8 5.54 4.46l.92-.92L10.92 8l-4.46 4.46z",
        "fillOpacity": 0.9
      }
    }]
  };
  var ChevronRightIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$1C(_objectSpread$1C({}, props), {}, {
      id: "chevron-right",
      ref: ref,
      icon: element$i
    }));
  });
  ChevronRightIcon.displayName = "ChevronRightIcon";

  function ownKeys$1B(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1B(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1B(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1B(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$h = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M12.46 9.54l-.92.92L8 6.92l-3.54 3.54-.92-.92L8 5.08l4.46 4.46z",
        "fillOpacity": 0.9
      }
    }]
  };
  var ChevronUpIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$1B(_objectSpread$1B({}, props), {}, {
      id: "chevron-up",
      ref: ref,
      icon: element$h
    }));
  });
  ChevronUpIcon.displayName = "ChevronUpIcon";

  function ownKeys$1A(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1A(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1A(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1A(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$g = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15 8A7 7 0 101 8a7 7 0 0014 0zM5.67 4.95L8 7.29l2.33-2.34.7.7L8.7 8l2.34 2.35-.71.7L8 8.71l-2.33 2.34-.7-.7L7.3 8 4.96 5.65l.71-.7z",
        "fillOpacity": 0.9
      }
    }]
  };
  var CloseCircleFilledIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$1A(_objectSpread$1A({}, props), {}, {
      id: "close-circle-filled",
      ref: ref,
      icon: element$g
    }));
  });
  CloseCircleFilledIcon.displayName = "CloseCircleFilledIcon";

  function ownKeys$1z(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1z(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1z(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1z(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$f = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4.98 10.31L7.3 8 5 5.69l.7-.7L8 7.28 10.31 5l.7.7L8.72 8l2.3 2.31-.7.7L8 8.72 5.69 11l-.7-.7z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 1a7 7 0 110 14A7 7 0 018 1zm0 1a6 6 0 100 12A6 6 0 008 2z",
        "fillOpacity": 0.9
      }
    }]
  };
  var CloseCircleIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$1z(_objectSpread$1z({}, props), {}, {
      id: "close-circle",
      ref: ref,
      icon: element$f
    }));
  });
  CloseCircleIcon.displayName = "CloseCircleIcon";

  function ownKeys$1y(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1y(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1y(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1y(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$e = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 8.92L11.08 12l.92-.92L8.92 8 12 4.92 11.08 4 8 7.08 4.92 4 4 4.92 7.08 8 4 11.08l.92.92L8 8.92z",
        "fillOpacity": 0.9
      }
    }]
  };
  var CloseIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$1y(_objectSpread$1y({}, props), {}, {
      id: "close",
      ref: ref,
      icon: element$e
    }));
  });
  CloseIcon.displayName = "CloseIcon";

  function ownKeys$1x(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1x(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1x(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1x(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$d = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6 12V6h1v6H6zM9 6v6h1V6H9z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10.5 3H14v1h-1v10a1 1 0 01-1 1H4a1 1 0 01-1-1V4H2V3h3.5V1.8c0-.44.36-.8.8-.8h3.4c.44 0 .8.36.8.8V3zm-4 0h3V2h-3v1zM4 4v10h8V4H4z",
        "fillOpacity": 0.9
      }
    }]
  };
  var DeleteIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$1x(_objectSpread$1x({}, props), {}, {
      id: "delete",
      ref: ref,
      icon: element$d
    }));
  });
  DeleteIcon.displayName = "DeleteIcon";

  function ownKeys$1w(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1w(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1w(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1w(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$c = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3 9a1 1 0 110-2 1 1 0 010 2zM7 8a1 1 0 102 0 1 1 0 00-2 0zM12 8a1 1 0 102 0 1 1 0 00-2 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var EllipsisIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$1w(_objectSpread$1w({}, props), {}, {
      id: "ellipsis",
      ref: ref,
      icon: element$c
    }));
  });
  EllipsisIcon.displayName = "EllipsisIcon";

  function ownKeys$1v(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1v(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1v(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1v(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$b = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15 8A7 7 0 101 8a7 7 0 0014 0zM8.5 4v5.5h-1V4h1zm-1.1 7h1.2v1.2H7.4V11z",
        "fillOpacity": 0.9
      }
    }]
  };
  var ErrorCircleFilledIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$1v(_objectSpread$1v({}, props), {}, {
      id: "error-circle-filled",
      ref: ref,
      icon: element$b
    }));
  });
  ErrorCircleFilledIcon.displayName = "ErrorCircleFilledIcon";

  function ownKeys$1u(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1u(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1u(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1u(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$a = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8.5 4v5.5h-1V4h1zM8.6 10.5H7.4v1.2h1.2v-1.2z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15 8A7 7 0 101 8a7 7 0 0014 0zm-1 0A6 6 0 112 8a6 6 0 0112 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var ErrorCircleIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$1u(_objectSpread$1u({}, props), {}, {
      id: "error-circle",
      ref: ref,
      icon: element$a
    }));
  });
  ErrorCircleIcon.displayName = "ErrorCircleIcon";

  function ownKeys$1t(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1t(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1t(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1t(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$9 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4 1.92C4 1.34 4.52 1 5 1h4.37a1 1 0 01.71.3L13.71 5a1 1 0 01.29.7v6.38c0 .58-.52.92-1 .92H5c-.48 0-1-.34-1-.92V1.92zM5 2v10h8V6.01H9V2H5zm5 .65V5h2.32L10 2.65z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 5v9.01a1 1 0 001 1h8v-1H3V5H2z",
        "fillOpacity": 0.9
      }
    }]
  };
  var FileCopyIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$1t(_objectSpread$1t({}, props), {}, {
      id: "file-copy",
      ref: ref,
      icon: element$9
    }));
  });
  FileCopyIcon.displayName = "FileCopyIcon";

  function ownKeys$1s(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1s(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1s(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1s(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$8 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 3a1 1 0 011-1h10a1 1 0 011 1v1.79l-4.25 2.5V14h-3.5V7.29L2 4.79V3zm11 0H3v1.21l4.25 2.5V13h1.5V6.71L13 4.21V3z",
        "fillOpacity": 0.9
      }
    }]
  };
  var FilterIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$1s(_objectSpread$1s({}, props), {}, {
      id: "filter",
      ref: ref,
      icon: element$8
    }));
  });
  FilterIcon.displayName = "FilterIcon";

  function ownKeys$1r(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1r(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1r(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1r(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$7 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15 8A7 7 0 101 8a7 7 0 0014 0zM5.8 6.63a2.2 2.2 0 014.39 0c0 .97-.75 1.72-1.49 2.02a.34.34 0 00-.2.32v.8h-1v-.8c0-.56.33-1.04.82-1.24.5-.2.87-.66.87-1.1a1.2 1.2 0 00-2.39 0h-1zm1.67 4.54a.53.53 0 111.05 0 .53.53 0 01-1.05 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var HelpCircleFilledIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$1r(_objectSpread$1r({}, props), {}, {
      id: "help-circle-filled",
      ref: ref,
      icon: element$7
    }));
  });
  HelpCircleFilledIcon.displayName = "HelpCircleFilledIcon";

  function ownKeys$1q(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1q(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1q(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1q(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$6 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 15A7 7 0 108 1a7 7 0 000 14zM7.4 4h1.2v1.2H7.4V4zm.1 2.5h1V12h-1V6.5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var InfoCircleFilledIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$1q(_objectSpread$1q({}, props), {}, {
      id: "info-circle-filled",
      ref: ref,
      icon: element$6
    }));
  });
  InfoCircleFilledIcon.displayName = "InfoCircleFilledIcon";

  function ownKeys$1p(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1p(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1p(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1p(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$5 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3.5 7.35h9v1.3h-9v-1.3z",
        "fillOpacity": 0.9
      }
    }]
  };
  var RemoveIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$1p(_objectSpread$1p({}, props), {}, {
      id: "remove",
      ref: ref,
      icon: element$5
    }));
  });
  RemoveIcon.displayName = "RemoveIcon";

  function ownKeys$1o(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1o(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1o(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1o(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$4 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 11.5a3.5 3.5 0 110-7 3.5 3.5 0 010 7zM8 13A5 5 0 108 3a5 5 0 000 10z",
        "fillOpacity": 0.9
      }
    }]
  };
  var RoundIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$1o(_objectSpread$1o({}, props), {}, {
      id: "round",
      ref: ref,
      icon: element$4
    }));
  });
  RoundIcon.displayName = "RoundIcon";

  function ownKeys$1n(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1n(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1n(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1n(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$3 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M9.51 10.22a4.76 4.76 0 11.7-.7l3.54 3.52-.7.71-3.54-3.53zm.77-3.7a3.76 3.76 0 10-7.53 0 3.76 3.76 0 007.53 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var SearchIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$1n(_objectSpread$1n({}, props), {}, {
      id: "search",
      ref: ref,
      icon: element$3
    }));
  });
  SearchIcon.displayName = "SearchIcon";

  function ownKeys$1m(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1m(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1m(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1m(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$2 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 15A7 7 0 108 1a7 7 0 000 14zM7.5 5h1v2.97l2.85 2.86-.7.7L7.5 8.4V5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var TimeFilledIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$1m(_objectSpread$1m({}, props), {}, {
      id: "time-filled",
      ref: ref,
      icon: element$2
    }));
  });
  TimeFilledIcon.displayName = "TimeFilledIcon";

  function ownKeys$1l(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1l(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1l(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1l(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$1 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7.5 4v4.39L10 11l.7-.7-2.2-2.33V4h-1z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15 8A7 7 0 111 8a7 7 0 0114 0zm-1 0A6 6 0 102 8a6 6 0 0012 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var TimeIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$1l(_objectSpread$1l({}, props), {}, {
      id: "time",
      ref: ref,
      icon: element$1
    }));
  });
  TimeIcon.displayName = "TimeIcon";

  function ownKeys$1k(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1k(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1k(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1k(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3.74 6.68L7.5 2.9v8.59h1V2.91l3.76 3.77.71-.7-4.62-4.63a.5.5 0 00-.7 0L3.03 5.97l.7.7z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 11v2a1 1 0 001 1h10a1 1 0 001-1v-2h-1v2H3v-2H2z",
        "fillOpacity": 0.9
      }
    }]
  };
  var UploadIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(IconBase, _objectSpread$1k(_objectSpread$1k({}, props), {}, {
      id: "upload",
      ref: ref,
      icon: element
    }));
  });
  UploadIcon.displayName = "UploadIcon";

  var reactIs = reactIs$1.exports;
  /**
   * Copyright 2015, Yahoo! Inc.
   * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
   */

  var REACT_STATICS = {
    childContextTypes: true,
    contextType: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    getDerivedStateFromError: true,
    getDerivedStateFromProps: true,
    mixins: true,
    propTypes: true,
    type: true
  };
  var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    callee: true,
    arguments: true,
    arity: true
  };
  var FORWARD_REF_STATICS = {
    '$$typeof': true,
    render: true,
    defaultProps: true,
    displayName: true,
    propTypes: true
  };
  var MEMO_STATICS = {
    '$$typeof': true,
    compare: true,
    defaultProps: true,
    displayName: true,
    propTypes: true,
    type: true
  };
  var TYPE_STATICS = {};
  TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
  TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;

  function getStatics(component) {
    // React v16.11 and below
    if (reactIs.isMemo(component)) {
      return MEMO_STATICS;
    } // React v16.12 and above


    return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
  }

  var defineProperty$3 = Object.defineProperty;
  var getOwnPropertyNames = Object.getOwnPropertyNames;
  var getOwnPropertySymbols = Object.getOwnPropertySymbols;
  var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
  var getPrototypeOf = Object.getPrototypeOf;
  var objectPrototype = Object.prototype;

  function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
    if (typeof sourceComponent !== 'string') {
      // don't hoist over string (html) components
      if (objectPrototype) {
        var inheritedComponent = getPrototypeOf(sourceComponent);

        if (inheritedComponent && inheritedComponent !== objectPrototype) {
          hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
        }
      }

      var keys = getOwnPropertyNames(sourceComponent);

      if (getOwnPropertySymbols) {
        keys = keys.concat(getOwnPropertySymbols(sourceComponent));
      }

      var targetStatics = getStatics(targetComponent);
      var sourceStatics = getStatics(sourceComponent);

      for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];

        if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
          var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

          try {
            // Avoid failures from read-only properties
            defineProperty$3(targetComponent, key, descriptor);
          } catch (e) {}
        }
      }
    }

    return targetComponent;
  }

  var hoistNonReactStatics_cjs = hoistNonReactStatics;

  function forwardRefWithStatics(component, statics) {
    return hoistNonReactStatics_cjs( /*#__PURE__*/React.forwardRef(component), statics);
  }

  var _excluded$o = ["seperate", "children", "className"];

  function ownKeys$1j(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1j(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1j(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1j(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var InputGroup = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var seperate = props.seperate,
        children = props.children,
        className = props.className,
        wrapperProps = _objectWithoutProperties$1(props, _excluded$o);

    return /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$1j({
      ref: ref,
      className: classNames$1(className, "".concat(classPrefix, "-input-group"), _defineProperty$2({}, "".concat(classPrefix, "-input-group--seperate"), seperate))
    }, wrapperProps), children);
  });
  InputGroup.displayName = "InputGroup";

  var _excluded$n = ["defaultValue", "value", "onChange"];

  function ownKeys$1i(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1i(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1i(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1i(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function useDefaultValue$1(props, defaultDefaultValue) {
    var defaultValue = props.defaultValue,
        value = props.value,
        _props$onChange = props.onChange,
        onChange = _props$onChange === void 0 ? noop : _props$onChange,
        restProps = _objectWithoutProperties$1(props, _excluded$n);

    var _useDefault = useDefault(value, typeof defaultValue === "undefined" ? defaultDefaultValue : defaultValue, onChange),
        _useDefault2 = _slicedToArray(_useDefault, 2),
        finalValue = _useDefault2[0],
        finalOnChange = _useDefault2[1];

    return _objectSpread$1i({
      value: finalValue,
      onChange: finalOnChange
    }, restProps);
  }

  var _excluded$m = ["disabled", "status", "size", "className", "style", "prefixIcon", "suffixIcon", "clearable", "value", "onChange", "onClear", "onEnter", "onKeydown", "onCompositionStart", "onCompositionEnd", "autofocus", "readonly"];

  function ownKeys$1h(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1h(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1h(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1h(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var renderIcon$1 = function renderIcon(classPrefix, type, icon) {
    var result = null;
    if (icon) result = icon;
    if (typeof icon === "function") result = icon();

    if (result) {
      result = /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(classPrefix, "-input__").concat(type)
      }, result);
    }

    return result;
  };

  var Input$1 = forwardRefWithStatics(function (props, ref) {
    var _classNames;

    var _useDefaultValue = useDefaultValue$1(props, ""),
        disabled = _useDefaultValue.disabled,
        status = _useDefaultValue.status,
        size = _useDefaultValue.size,
        className = _useDefaultValue.className,
        style = _useDefaultValue.style,
        prefixIcon = _useDefaultValue.prefixIcon,
        suffixIcon = _useDefaultValue.suffixIcon,
        clearable = _useDefaultValue.clearable,
        value = _useDefaultValue.value,
        onChange = _useDefaultValue.onChange,
        onClear = _useDefaultValue.onClear,
        onEnter = _useDefaultValue.onEnter,
        onKeydown = _useDefaultValue.onKeydown,
        onCompositionStart = _useDefaultValue.onCompositionStart,
        onCompositionEnd = _useDefaultValue.onCompositionEnd,
        autofocus = _useDefaultValue.autofocus,
        readonly = _useDefaultValue.readonly,
        restProps = _objectWithoutProperties$1(_useDefaultValue, _excluded$m);

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var composingRef = React.useRef(false);

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        isHover = _useState2[0],
        toggleIsHover = _useState2[1];

    var _useState3 = React.useState(false),
        _useState4 = _slicedToArray(_useState3, 2),
        isFocused = _useState4[0],
        toggleIsFocused = _useState4[1];

    var _useState5 = React.useState(""),
        _useState6 = _slicedToArray(_useState5, 2),
        composingRefValue = _useState6[0],
        setComposingValue = _useState6[1];

    var isShowClearIcon = clearable && value && !disabled && isHover;
    var componentType = "input";
    var prefixIconContent = renderIcon$1(classPrefix, "prefix", prefixIcon);
    var suffixIconNew = isShowClearIcon ? /* @__PURE__ */React__default["default"].createElement(CloseCircleFilledIcon, {
      className: "".concat(classPrefix, "-input__suffix-clear"),
      onClick: handleClear,
      onMouseUp: function onMouseUp(e) {
        return e.preventDefault();
      },
      onMouseDown: function onMouseDown(e) {
        return e.preventDefault();
      }
    }) : suffixIcon;
    var suffixIconContent = renderIcon$1(classPrefix, "suffix", suffixIconNew);
    var inputPropsNames = Object.keys(restProps).filter(function (key) {
      return !/^on[A-Z]/.test(key);
    });
    var inputProps = inputPropsNames.reduce(function (inputProps2, key) {
      return Object.assign(inputProps2, _defineProperty$2({}, key, props[key]));
    }, {});
    var eventPropsNames = Object.keys(restProps).filter(function (key) {
      return /^on[A-Z]/.test(key);
    });
    var eventProps = eventPropsNames.reduce(function (eventProps2, key) {
      Object.assign(eventProps2, _defineProperty$2({}, key, function (e) {
        return props[key](e.currentTarget.value, {
          e: e
        });
      }));
      return eventProps2;
    }, {});
    var renderInput = /* @__PURE__ */React__default["default"].createElement("input", _objectSpread$1h(_objectSpread$1h(_objectSpread$1h({
      readOnly: readonly,
      disabled: disabled,
      className: "".concat(classPrefix, "-").concat(componentType, "__inner")
    }, inputProps), {}, {
      value: composingRef.current ? composingRefValue : value
    }, eventProps), {}, {
      autoFocus: autofocus,
      onChange: handleChange,
      onKeyDown: handleKeyDown,
      onCompositionStart: handleCompositionStart,
      onCompositionEnd: handleCompositionEnd
    }));

    function handleChange(e) {
      var value2 = e.currentTarget.value;

      if (composingRef.current) {
        setComposingValue(value2);
      } else {
        onChange(value2, {
          e: e
        });
      }
    }

    function handleClear(e) {
      isFunction_1(onChange) && onChange("", {
        e: e
      });
      isFunction_1(onClear) && onClear({
        e: e
      });
    }

    function handleKeyDown(e) {
      var key = e.key,
          value2 = e.currentTarget.value;
      isFunction_1(onEnter) && key === "Enter" && onEnter(value2, {
        e: e
      });
      isFunction_1(onKeydown) && onKeydown(value2, {
        e: e
      });
    }

    function handleCompositionStart(event) {
      composingRef.current = true;
      isFunction_1(onCompositionStart) && onCompositionStart(event);
    }

    function handleCompositionEnd(event) {
      if (composingRef.current) {
        composingRef.current = false;
        handleChange(event);
      }

      setComposingValue("");
      isFunction_1(onCompositionEnd) && onCompositionEnd(event);
    }

    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: ref,
      style: style,
      className: classNames$1("".concat(classPrefix, "-").concat(componentType), (_classNames = {}, _defineProperty$2(_classNames, "".concat(classPrefix, "-is-disabled"), disabled), _defineProperty$2(_classNames, "".concat(classPrefix, "-is-focused"), isFocused), _defineProperty$2(_classNames, "".concat(classPrefix, "-size-s"), size === "small"), _defineProperty$2(_classNames, "".concat(classPrefix, "-size-l"), size === "large"), _defineProperty$2(_classNames, "".concat(classPrefix, "-is-").concat(status), status), _defineProperty$2(_classNames, "".concat(classPrefix, "-").concat(componentType, "--prefix"), prefixIcon), _defineProperty$2(_classNames, "".concat(classPrefix, "-").concat(componentType, "--suffix"), suffixIconContent), _defineProperty$2(_classNames, "".concat(classPrefix, "-").concat(componentType, "--focused"), isFocused), _classNames), className),
      onMouseEnter: function onMouseEnter() {
        return toggleIsHover(true);
      },
      onMouseLeave: function onMouseLeave() {
        return toggleIsHover(false);
      },
      onFocus: function onFocus() {
        return toggleIsFocused(true);
      },
      onBlur: function onBlur() {
        return toggleIsFocused(false);
      }
    }, prefixIconContent, renderInput, suffixIconContent);
  }, {
    Group: InputGroup
  });
  Input$1.displayName = "Input";

  var Input = Input$1;

  var _excluded$l = ["prepend", "append", "children", "className"];

  function ownKeys$1g(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1g(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1g(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1g(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var renderAddon = function renderAddon(type, classPrefix, Content) {
    var result;

    if (typeof Content === "function") {
      result = /* @__PURE__ */React__default["default"].createElement(Content, null);
    } else if (typeof Content !== "undefined") {
      result = Content;
    }

    if (result || typeof result === "number") {
      result = /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(classPrefix, "-addon__").concat(type)
      }, result);
    }

    return result;
  };

  var Addon$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _classNames;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var prepend = props.prepend,
        append = props.append,
        children = props.children,
        className = props.className,
        wrapperProps = _objectWithoutProperties$1(props, _excluded$l);

    return /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$1g({
      ref: ref,
      className: classNames$1(className, "".concat(classPrefix, "-addon"), (_classNames = {}, _defineProperty$2(_classNames, "".concat(classPrefix, "-addon--prepend"), !!prepend), _defineProperty$2(_classNames, "".concat(classPrefix, "-addon--append"), !!append), _classNames))
    }, wrapperProps), renderAddon("prepend", classPrefix, prepend), children, renderAddon("append", classPrefix, append));
  });
  Addon$1.displayName = "Addon";

  var Addon = Addon$1;

  var _excluded$k = ["message", "title", "operation", "theme", "icon", "close", "maxLine", "onClose"];

  function ownKeys$1f(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1f(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1f(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1f(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var Alert$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var message = props.message,
        title = props.title,
        operation = props.operation,
        _props$theme = props.theme,
        theme = _props$theme === void 0 ? "info" : _props$theme,
        icon = props.icon,
        close = props.close,
        maxLine = props.maxLine,
        _props$onClose = props.onClose,
        onClose = _props$onClose === void 0 ? noop : _props$onClose,
        alertProps = _objectWithoutProperties$1(props, _excluded$k);

    var _React$useState = React__default["default"].useState(false),
        _React$useState2 = _slicedToArray(_React$useState, 2),
        closed = _React$useState2[0],
        setClosed = _React$useState2[1];

    var _React$useState3 = React__default["default"].useState(false),
        _React$useState4 = _slicedToArray(_React$useState3, 2),
        collapsed = _React$useState4[0],
        setCollapsed = _React$useState4[1];

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var iconMap = {
      success: CheckCircleFilledIcon,
      info: InfoCircleFilledIcon,
      error: ErrorCircleFilledIcon,
      warning: ErrorCircleFilledIcon
    };

    var handleClose = function handleClose(e) {
      setClosed(true);
      onClose === null || onClose === void 0 ? void 0 : onClose({
        e: e
      });
    };

    var handleCollapse = function handleCollapse() {
      setCollapsed(!collapsed);
    };

    var renderIconNode = function renderIconNode() {
      if ( /*#__PURE__*/React__default["default"].isValidElement(icon)) {
        return /*#__PURE__*/React__default["default"].cloneElement(icon, {
          className: classNames$1(_defineProperty$2({}, icon.props.className, icon.props.className))
        });
      }

      return /*#__PURE__*/React__default["default"].createElement(iconMap[theme]);
    };

    var renderMessage = function renderMessage() {
      if (+maxLine > 0 && Array.isArray(message)) {
        return /* @__PURE__ */React__default["default"].createElement("div", {
          className: "".concat(classPrefix, "-alert__description")
        }, message.map(function (item, index) {
          if (!collapsed) {
            if (index < maxLine) {
              return /* @__PURE__ */React__default["default"].createElement("div", {
                key: index
              }, item);
            }
          } else {
            return /* @__PURE__ */React__default["default"].createElement("div", {
              key: index
            }, item);
          }

          return true;
        }), +maxLine > 0 ? /* @__PURE__ */React__default["default"].createElement("div", {
          className: "".concat(classPrefix, "-alert__collapse"),
          onClick: handleCollapse
        }, !collapsed ? "\u5C55\u5F00\u66F4\u591A" : "\u6536\u8D77") : null);
      }

      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-alert__description")
      }, message);
    };

    var renderClose = function renderClose() {
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-alert__close"),
        onClick: handleClose
      }, typeof close === "boolean" ? /* @__PURE__ */React__default["default"].createElement(CloseIcon, null) : close);
    };

    return closed ? null : /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$1f({
      ref: ref,
      className: classNames$1("".concat(classPrefix, "-alert"), _defineProperty$2({}, "".concat(classPrefix, "-alert--").concat(theme), true))
    }, alertProps), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-alert__icon")
    }, renderIconNode()), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-alert__content")
    }, title ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-alert__title")
    }, title) : null, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-alert__message")
    }, renderMessage(), operation ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-alert__operation")
    }, operation) : null)), close ? renderClose() : null);
  });
  Alert$1.displayName = "Alert";

  var Alert = Alert$1;

  var _excluded$j = ["color", "dot", "maxCount", "count", "size", "shape", "showZero", "offset", "className", "children", "style"];

  function ownKeys$1e(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1e(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1e(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1e(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var Badge$1 = function Badge(_ref) {
    var color = _ref.color,
        _ref$dot = _ref.dot,
        dot = _ref$dot === void 0 ? false : _ref$dot,
        _ref$maxCount = _ref.maxCount,
        maxCount = _ref$maxCount === void 0 ? 99 : _ref$maxCount,
        count = _ref.count,
        _ref$size = _ref.size,
        size = _ref$size === void 0 ? "medium" : _ref$size,
        _ref$shape = _ref.shape,
        shape = _ref$shape === void 0 ? "circle" : _ref$shape,
        _ref$showZero = _ref.showZero,
        showZero = _ref$showZero === void 0 ? false : _ref$showZero,
        _ref$offset = _ref.offset,
        offset = _ref$offset === void 0 ? [] : _ref$offset,
        className = _ref.className,
        _ref$children = _ref.children,
        children = _ref$children === void 0 ? null : _ref$children,
        _ref$style = _ref.style,
        style = _ref$style === void 0 ? {} : _ref$style,
        restProps = _objectWithoutProperties$1(_ref, _excluded$j);

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var badgeClassName = classNames$1(!children && "".concat(classPrefix, "-badge--static"), dot ? "".concat(classPrefix, "-badge--dot") : shape && "".concat(classPrefix, "-badge--").concat(shape), size === "small" && "".concat(classPrefix, "-size-s"), !children && className);

    var getDisplayCount = function getDisplayCount() {
      if (typeof count === "number" && count > maxCount) {
        return "".concat(maxCount, "+");
      }

      return count;
    };

    var isHidden = !count;

    if (typeof count === "number") {
      isHidden = count < 1 && !showZero;
    }

    var getStyle = function getStyle() {
      var mergedStyle = _objectSpread$1e({}, style);

      if (color) mergedStyle.backgroundColor = color;

      if (offset) {
        if (offset[0]) {
          mergedStyle.right = -offset[0];
        }

        if (offset[1]) {
          mergedStyle.marginTop = -offset[1];
        }
      }

      return mergedStyle;
    };

    var badge = !isHidden ? /* @__PURE__ */React__default["default"].createElement("span", _objectSpread$1e(_objectSpread$1e({}, children ? {} : restProps), {}, {
      className: badgeClassName,
      style: getStyle()
    }), !dot ? getDisplayCount() : null) : null;
    if (!children) return badge;
    return /* @__PURE__ */React__default["default"].createElement("span", _objectSpread$1e(_objectSpread$1e({}, restProps), {}, {
      className: classNames$1("".concat(classPrefix, "-badge"), className)
    }), children, badge);
  };

  Badge$1.displayName = "Badge";

  var Badge = Badge$1;

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */

  function arrayMap$3(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }

    return result;
  }

  var _arrayMap = arrayMap$3;

  var baseGetTag$7 = _baseGetTag,
      isObjectLike$b = isObjectLike_1;
  /** `Object#toString` result references. */

  var symbolTag$3 = '[object Symbol]';
  /**
   * Checks if `value` is classified as a `Symbol` primitive or object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
   * @example
   *
   * _.isSymbol(Symbol.iterator);
   * // => true
   *
   * _.isSymbol('abc');
   * // => false
   */

  function isSymbol$4(value) {
    return _typeof(value) == 'symbol' || isObjectLike$b(value) && baseGetTag$7(value) == symbolTag$3;
  }

  var isSymbol_1 = isSymbol$4;

  var _Symbol$3 = _Symbol$6,
      arrayMap$2 = _arrayMap,
      isArray$a = isArray_1,
      isSymbol$3 = isSymbol_1;
  /** Used as references for various `Number` constants. */

  var INFINITY$2 = 1 / 0;
  /** Used to convert symbols to primitives and strings. */

  var symbolProto$2 = _Symbol$3 ? _Symbol$3.prototype : undefined,
      symbolToString = symbolProto$2 ? symbolProto$2.toString : undefined;
  /**
   * The base implementation of `_.toString` which doesn't convert nullish
   * values to empty strings.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */

  function baseToString$2(value) {
    // Exit early for strings to avoid a performance hit in some environments.
    if (typeof value == 'string') {
      return value;
    }

    if (isArray$a(value)) {
      // Recursively convert values (susceptible to call stack limits).
      return arrayMap$2(value, baseToString$2) + '';
    }

    if (isSymbol$3(value)) {
      return symbolToString ? symbolToString.call(value) : '';
    }

    var result = value + '';
    return result == '0' && 1 / value == -INFINITY$2 ? '-0' : result;
  }

  var _baseToString = baseToString$2;

  var baseToString$1 = _baseToString;
  /**
   * Converts `value` to a string. An empty string is returned for `null`
   * and `undefined` values. The sign of `-0` is preserved.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   * @example
   *
   * _.toString(null);
   * // => ''
   *
   * _.toString(-0);
   * // => '-0'
   *
   * _.toString([1, 2, 3]);
   * // => '1,2,3'
   */

  function toString$7(value) {
    return value == null ? '' : baseToString$1(value);
  }

  var toString_1 = toString$7;

  /**
   * The base implementation of `_.slice` without an iteratee call guard.
   *
   * @private
   * @param {Array} array The array to slice.
   * @param {number} [start=0] The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the slice of `array`.
   */

  function baseSlice$3(array, start, end) {
    var index = -1,
        length = array.length;

    if (start < 0) {
      start = -start > length ? 0 : length + start;
    }

    end = end > length ? length : end;

    if (end < 0) {
      end += length;
    }

    length = start > end ? 0 : end - start >>> 0;
    start >>>= 0;
    var result = Array(length);

    while (++index < length) {
      result[index] = array[index + start];
    }

    return result;
  }

  var _baseSlice = baseSlice$3;

  var baseSlice$2 = _baseSlice;
  /**
   * Casts `array` to a slice if it's needed.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {number} start The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the cast slice.
   */

  function castSlice$2(array, start, end) {
    var length = array.length;
    end = end === undefined ? length : end;
    return !start && end >= length ? array : baseSlice$2(array, start, end);
  }

  var _castSlice = castSlice$2;

  /** Used to compose unicode character classes. */
  var rsAstralRange$3 = "\\ud800-\\udfff",
      rsComboMarksRange$4 = "\\u0300-\\u036f",
      reComboHalfMarksRange$4 = "\\ufe20-\\ufe2f",
      rsComboSymbolsRange$4 = "\\u20d0-\\u20ff",
      rsComboRange$4 = rsComboMarksRange$4 + reComboHalfMarksRange$4 + rsComboSymbolsRange$4,
      rsVarRange$3 = "\\ufe0e\\ufe0f";
  /** Used to compose unicode capture groups. */

  var rsZWJ$3 = "\\u200d";
  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */

  var reHasUnicode = RegExp('[' + rsZWJ$3 + rsAstralRange$3 + rsComboRange$4 + rsVarRange$3 + ']');
  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */

  function hasUnicode$4(string) {
    return reHasUnicode.test(string);
  }

  var _hasUnicode = hasUnicode$4;

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */

  function asciiToArray$1(string) {
    return string.split('');
  }

  var _asciiToArray = asciiToArray$1;

  /** Used to compose unicode character classes. */
  var rsAstralRange$2 = "\\ud800-\\udfff",
      rsComboMarksRange$3 = "\\u0300-\\u036f",
      reComboHalfMarksRange$3 = "\\ufe20-\\ufe2f",
      rsComboSymbolsRange$3 = "\\u20d0-\\u20ff",
      rsComboRange$3 = rsComboMarksRange$3 + reComboHalfMarksRange$3 + rsComboSymbolsRange$3,
      rsVarRange$2 = "\\ufe0e\\ufe0f";
  /** Used to compose unicode capture groups. */

  var rsAstral$1 = '[' + rsAstralRange$2 + ']',
      rsCombo$3 = '[' + rsComboRange$3 + ']',
      rsFitz$2 = "\\ud83c[\\udffb-\\udfff]",
      rsModifier$2 = '(?:' + rsCombo$3 + '|' + rsFitz$2 + ')',
      rsNonAstral$2 = '[^' + rsAstralRange$2 + ']',
      rsRegional$2 = "(?:\\ud83c[\\udde6-\\uddff]){2}",
      rsSurrPair$2 = "[\\ud800-\\udbff][\\udc00-\\udfff]",
      rsZWJ$2 = "\\u200d";
  /** Used to compose unicode regexes. */

  var reOptMod$2 = rsModifier$2 + '?',
      rsOptVar$2 = '[' + rsVarRange$2 + ']?',
      rsOptJoin$2 = '(?:' + rsZWJ$2 + '(?:' + [rsNonAstral$2, rsRegional$2, rsSurrPair$2].join('|') + ')' + rsOptVar$2 + reOptMod$2 + ')*',
      rsSeq$2 = rsOptVar$2 + reOptMod$2 + rsOptJoin$2,
      rsSymbol$1 = '(?:' + [rsNonAstral$2 + rsCombo$3 + '?', rsCombo$3, rsRegional$2, rsSurrPair$2, rsAstral$1].join('|') + ')';
  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */

  var reUnicode$1 = RegExp(rsFitz$2 + '(?=' + rsFitz$2 + ')|' + rsSymbol$1 + rsSeq$2, 'g');
  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */

  function unicodeToArray$1(string) {
    return string.match(reUnicode$1) || [];
  }

  var _unicodeToArray = unicodeToArray$1;

  var asciiToArray = _asciiToArray,
      hasUnicode$3 = _hasUnicode,
      unicodeToArray = _unicodeToArray;
  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */

  function stringToArray$2(string) {
    return hasUnicode$3(string) ? unicodeToArray(string) : asciiToArray(string);
  }

  var _stringToArray = stringToArray$2;

  var castSlice$1 = _castSlice,
      hasUnicode$2 = _hasUnicode,
      stringToArray$1 = _stringToArray,
      toString$6 = toString_1;
  /**
   * Creates a function like `_.lowerFirst`.
   *
   * @private
   * @param {string} methodName The name of the `String` case method to use.
   * @returns {Function} Returns the new case function.
   */

  function createCaseFirst$1(methodName) {
    return function (string) {
      string = toString$6(string);
      var strSymbols = hasUnicode$2(string) ? stringToArray$1(string) : undefined;
      var chr = strSymbols ? strSymbols[0] : string.charAt(0);
      var trailing = strSymbols ? castSlice$1(strSymbols, 1).join('') : string.slice(1);
      return chr[methodName]() + trailing;
    };
  }

  var _createCaseFirst = createCaseFirst$1;

  var createCaseFirst = _createCaseFirst;
  /**
   * Converts the first character of `string` to upper case.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category String
   * @param {string} [string=''] The string to convert.
   * @returns {string} Returns the converted string.
   * @example
   *
   * _.upperFirst('fred');
   * // => 'Fred'
   *
   * _.upperFirst('FRED');
   * // => 'FRED'
   */

  var upperFirst$1 = createCaseFirst('toUpperCase');
  var upperFirst_1 = upperFirst$1;

  var toString$5 = toString_1,
      upperFirst = upperFirst_1;
  /**
   * Converts the first character of `string` to upper case and the remaining
   * to lower case.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to capitalize.
   * @returns {string} Returns the capitalized string.
   * @example
   *
   * _.capitalize('FRED');
   * // => 'Fred'
   */

  function capitalize$1(string) {
    return upperFirst(toString$5(string).toLowerCase());
  }

  var capitalize_1 = capitalize$1;

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */

  function arrayReduce$1(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }

    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }

    return accumulator;
  }

  var _arrayReduce = arrayReduce$1;

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */

  function basePropertyOf$1(object) {
    return function (key) {
      return object == null ? undefined : object[key];
    };
  }

  var _basePropertyOf = basePropertyOf$1;

  var basePropertyOf = _basePropertyOf;
  /** Used to map Latin Unicode letters to basic Latin letters. */

  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',
    '\xc1': 'A',
    '\xc2': 'A',
    '\xc3': 'A',
    '\xc4': 'A',
    '\xc5': 'A',
    '\xe0': 'a',
    '\xe1': 'a',
    '\xe2': 'a',
    '\xe3': 'a',
    '\xe4': 'a',
    '\xe5': 'a',
    '\xc7': 'C',
    '\xe7': 'c',
    '\xd0': 'D',
    '\xf0': 'd',
    '\xc8': 'E',
    '\xc9': 'E',
    '\xca': 'E',
    '\xcb': 'E',
    '\xe8': 'e',
    '\xe9': 'e',
    '\xea': 'e',
    '\xeb': 'e',
    '\xcc': 'I',
    '\xcd': 'I',
    '\xce': 'I',
    '\xcf': 'I',
    '\xec': 'i',
    '\xed': 'i',
    '\xee': 'i',
    '\xef': 'i',
    '\xd1': 'N',
    '\xf1': 'n',
    '\xd2': 'O',
    '\xd3': 'O',
    '\xd4': 'O',
    '\xd5': 'O',
    '\xd6': 'O',
    '\xd8': 'O',
    '\xf2': 'o',
    '\xf3': 'o',
    '\xf4': 'o',
    '\xf5': 'o',
    '\xf6': 'o',
    '\xf8': 'o',
    '\xd9': 'U',
    '\xda': 'U',
    '\xdb': 'U',
    '\xdc': 'U',
    '\xf9': 'u',
    '\xfa': 'u',
    '\xfb': 'u',
    '\xfc': 'u',
    '\xdd': 'Y',
    '\xfd': 'y',
    '\xff': 'y',
    '\xc6': 'Ae',
    '\xe6': 'ae',
    '\xde': 'Th',
    '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    "\u0100": 'A',
    "\u0102": 'A',
    "\u0104": 'A',
    "\u0101": 'a',
    "\u0103": 'a',
    "\u0105": 'a',
    "\u0106": 'C',
    "\u0108": 'C',
    "\u010A": 'C',
    "\u010C": 'C',
    "\u0107": 'c',
    "\u0109": 'c',
    "\u010B": 'c',
    "\u010D": 'c',
    "\u010E": 'D',
    "\u0110": 'D',
    "\u010F": 'd',
    "\u0111": 'd',
    "\u0112": 'E',
    "\u0114": 'E',
    "\u0116": 'E',
    "\u0118": 'E',
    "\u011A": 'E',
    "\u0113": 'e',
    "\u0115": 'e',
    "\u0117": 'e',
    "\u0119": 'e',
    "\u011B": 'e',
    "\u011C": 'G',
    "\u011E": 'G',
    "\u0120": 'G',
    "\u0122": 'G',
    "\u011D": 'g',
    "\u011F": 'g',
    "\u0121": 'g',
    "\u0123": 'g',
    "\u0124": 'H',
    "\u0126": 'H',
    "\u0125": 'h',
    "\u0127": 'h',
    "\u0128": 'I',
    "\u012A": 'I',
    "\u012C": 'I',
    "\u012E": 'I',
    "\u0130": 'I',
    "\u0129": 'i',
    "\u012B": 'i',
    "\u012D": 'i',
    "\u012F": 'i',
    "\u0131": 'i',
    "\u0134": 'J',
    "\u0135": 'j',
    "\u0136": 'K',
    "\u0137": 'k',
    "\u0138": 'k',
    "\u0139": 'L',
    "\u013B": 'L',
    "\u013D": 'L',
    "\u013F": 'L',
    "\u0141": 'L',
    "\u013A": 'l',
    "\u013C": 'l',
    "\u013E": 'l',
    "\u0140": 'l',
    "\u0142": 'l',
    "\u0143": 'N',
    "\u0145": 'N',
    "\u0147": 'N',
    "\u014A": 'N',
    "\u0144": 'n',
    "\u0146": 'n',
    "\u0148": 'n',
    "\u014B": 'n',
    "\u014C": 'O',
    "\u014E": 'O',
    "\u0150": 'O',
    "\u014D": 'o',
    "\u014F": 'o',
    "\u0151": 'o',
    "\u0154": 'R',
    "\u0156": 'R',
    "\u0158": 'R',
    "\u0155": 'r',
    "\u0157": 'r',
    "\u0159": 'r',
    "\u015A": 'S',
    "\u015C": 'S',
    "\u015E": 'S',
    "\u0160": 'S',
    "\u015B": 's',
    "\u015D": 's',
    "\u015F": 's',
    "\u0161": 's',
    "\u0162": 'T',
    "\u0164": 'T',
    "\u0166": 'T',
    "\u0163": 't',
    "\u0165": 't',
    "\u0167": 't',
    "\u0168": 'U',
    "\u016A": 'U',
    "\u016C": 'U',
    "\u016E": 'U',
    "\u0170": 'U',
    "\u0172": 'U',
    "\u0169": 'u',
    "\u016B": 'u',
    "\u016D": 'u',
    "\u016F": 'u',
    "\u0171": 'u',
    "\u0173": 'u',
    "\u0174": 'W',
    "\u0175": 'w',
    "\u0176": 'Y',
    "\u0177": 'y',
    "\u0178": 'Y',
    "\u0179": 'Z',
    "\u017B": 'Z',
    "\u017D": 'Z',
    "\u017A": 'z',
    "\u017C": 'z',
    "\u017E": 'z',
    "\u0132": 'IJ',
    "\u0133": 'ij',
    "\u0152": 'Oe',
    "\u0153": 'oe',
    "\u0149": "'n",
    "\u017F": 's'
  };
  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */

  var deburrLetter$1 = basePropertyOf(deburredLetters);
  var _deburrLetter = deburrLetter$1;

  var deburrLetter = _deburrLetter,
      toString$4 = toString_1;
  /** Used to match Latin Unicode letters (excluding mathematical operators). */

  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
  /** Used to compose unicode character classes. */

  var rsComboMarksRange$2 = "\\u0300-\\u036f",
      reComboHalfMarksRange$2 = "\\ufe20-\\ufe2f",
      rsComboSymbolsRange$2 = "\\u20d0-\\u20ff",
      rsComboRange$2 = rsComboMarksRange$2 + reComboHalfMarksRange$2 + rsComboSymbolsRange$2;
  /** Used to compose unicode capture groups. */

  var rsCombo$2 = '[' + rsComboRange$2 + ']';
  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */

  var reComboMark = RegExp(rsCombo$2, 'g');
  /**
   * Deburrs `string` by converting
   * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
   * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
   * letters to basic Latin letters and removing
   * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to deburr.
   * @returns {string} Returns the deburred string.
   * @example
   *
   * _.deburr('déjà vu');
   * // => 'deja vu'
   */

  function deburr$1(string) {
    string = toString$4(string);
    return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
  }

  var deburr_1 = deburr$1;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */

  function asciiWords$1(string) {
    return string.match(reAsciiWord) || [];
  }

  var _asciiWords = asciiWords$1;

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */

  function hasUnicodeWord$1(string) {
    return reHasUnicodeWord.test(string);
  }

  var _hasUnicodeWord = hasUnicodeWord$1;

  /** Used to compose unicode character classes. */
  var rsAstralRange$1 = "\\ud800-\\udfff",
      rsComboMarksRange$1 = "\\u0300-\\u036f",
      reComboHalfMarksRange$1 = "\\ufe20-\\ufe2f",
      rsComboSymbolsRange$1 = "\\u20d0-\\u20ff",
      rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1,
      rsDingbatRange = "\\u2700-\\u27bf",
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = "\\u2000-\\u206f",
      rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange$1 = "\\ufe0e\\ufe0f",
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
  /** Used to compose unicode capture groups. */

  var rsApos$1 = "['\u2019]",
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo$1 = '[' + rsComboRange$1 + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange$1 + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz$1 = "\\ud83c[\\udffb-\\udfff]",
      rsModifier$1 = '(?:' + rsCombo$1 + '|' + rsFitz$1 + ')',
      rsNonAstral$1 = '[^' + rsAstralRange$1 + ']',
      rsRegional$1 = "(?:\\ud83c[\\udde6-\\uddff]){2}",
      rsSurrPair$1 = "[\\ud800-\\udbff][\\udc00-\\udfff]",
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ$1 = "\\u200d";
  /** Used to compose unicode regexes. */

  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos$1 + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos$1 + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod$1 = rsModifier$1 + '?',
      rsOptVar$1 = '[' + rsVarRange$1 + ']?',
      rsOptJoin$1 = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral$1, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsOptVar$1 + reOptMod$1 + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq$1 = rsOptVar$1 + reOptMod$1 + rsOptJoin$1,
      rsEmoji = '(?:' + [rsDingbat, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsSeq$1;
  /** Used to match complex or compound words. */

  var reUnicodeWord = RegExp([rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')', rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')', rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower, rsUpper + '+' + rsOptContrUpper, rsOrdUpper, rsOrdLower, rsDigits, rsEmoji].join('|'), 'g');
  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */

  function unicodeWords$1(string) {
    return string.match(reUnicodeWord) || [];
  }

  var _unicodeWords = unicodeWords$1;

  var asciiWords = _asciiWords,
      hasUnicodeWord = _hasUnicodeWord,
      toString$3 = toString_1,
      unicodeWords = _unicodeWords;
  /**
   * Splits `string` into an array of its words.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to inspect.
   * @param {RegExp|string} [pattern] The pattern to match words.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {Array} Returns the words of `string`.
   * @example
   *
   * _.words('fred, barney, & pebbles');
   * // => ['fred', 'barney', 'pebbles']
   *
   * _.words('fred, barney, & pebbles', /[^, ]+/g);
   * // => ['fred', 'barney', '&', 'pebbles']
   */

  function words$1(string, pattern, guard) {
    string = toString$3(string);
    pattern = guard ? undefined : pattern;

    if (pattern === undefined) {
      return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
    }

    return string.match(pattern) || [];
  }

  var words_1 = words$1;

  var arrayReduce = _arrayReduce,
      deburr = deburr_1,
      words = words_1;
  /** Used to compose unicode capture groups. */

  var rsApos = "['\u2019]";
  /** Used to match apostrophes. */

  var reApos = RegExp(rsApos, 'g');
  /**
   * Creates a function like `_.camelCase`.
   *
   * @private
   * @param {Function} callback The function to combine each word.
   * @returns {Function} Returns the new compounder function.
   */

  function createCompounder$1(callback) {
    return function (string) {
      return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
    };
  }

  var _createCompounder = createCompounder$1;

  var capitalize = capitalize_1,
      createCompounder = _createCompounder;
  /**
   * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to convert.
   * @returns {string} Returns the camel cased string.
   * @example
   *
   * _.camelCase('Foo Bar');
   * // => 'fooBar'
   *
   * _.camelCase('--foo-bar--');
   * // => 'fooBar'
   *
   * _.camelCase('__FOO_BAR__');
   * // => 'fooBar'
   */

  var camelCase = createCompounder(function (result, word, index) {
    word = word.toLowerCase();
    return result + (index ? capitalize(word) : word);
  });
  var camelCase_1 = camelCase;

  function ownKeys$1d(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1d(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1d(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1d(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function omit$1(obj, fields) {
    var shallowCopy = _objectSpread$1d({}, obj);

    for (var i = 0; i < fields.length; i++) {
      var key = fields[i];
      delete shallowCopy[key];
    }

    return shallowCopy;
  }
  function getCharacterLength(str, maxCharacter) {
    var hasMaxCharacter = typeof maxCharacter === "number";

    if (!str || str.length === 0) {
      if (hasMaxCharacter) {
        return {
          length: 0,
          characters: str
        };
      }

      return 0;
    }

    var len = 0;

    for (var i = 0; i < str.length; i++) {
      var currentStringLength = 0;

      if (str.charCodeAt(i) > 127 || str.charCodeAt(i) === 94) {
        currentStringLength = 2;
      } else {
        currentStringLength = 1;
      }

      if (hasMaxCharacter && len + currentStringLength > maxCharacter) {
        return {
          length: len,
          characters: str.slice(0, i)
        };
      }

      len += currentStringLength;
    }

    if (hasMaxCharacter) {
      return {
        length: len,
        characters: str
      };
    }

    return len;
  }
  function pxCompat(param) {
    return typeof param === "number" ? "".concat(param, "px") : param;
  }

  var _excluded$i = ["type", "checked", "defaultChecked", "disabled", "name", "value", "onChange", "indeterminate", "children", "label", "className", "style"];

  function ownKeys$1c(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1c(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1c(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1c(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var CheckContext = /*#__PURE__*/React__default["default"].createContext(null);
  var Check = /*#__PURE__*/React.forwardRef(function (_props, ref) {
    var _classNames;

    var context = React.useContext(CheckContext);
    var props = context ? context.inject(_props) : _props;

    var type = props.type,
        checked = props.checked,
        defaultChecked = props.defaultChecked,
        disabled = props.disabled,
        name = props.name,
        value = props.value,
        onChange = props.onChange,
        indeterminate = props.indeterminate,
        children = props.children,
        label = props.label,
        className = props.className,
        style = props.style,
        htmlProps = _objectWithoutProperties$1(props, _excluded$i);

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useDefault = useDefault(checked, defaultChecked, onChange),
        _useDefault2 = _slicedToArray(_useDefault, 2),
        internalChecked = _useDefault2[0],
        setInternalChecked = _useDefault2[1];

    var labelClassName = classNames$1(className, "".concat(classPrefix, "-").concat(type), (_classNames = {}, _defineProperty$2(_classNames, "".concat(classPrefix, "-is-checked"), internalChecked), _defineProperty$2(_classNames, "".concat(classPrefix, "-is-disabled"), disabled), _defineProperty$2(_classNames, "".concat(classPrefix, "-is-indeterminate"), indeterminate), _classNames));
    var input = /* @__PURE__ */React__default["default"].createElement("input", {
      readOnly: true,
      type: type === "radio-button" ? "radio" : type,
      className: "".concat(classPrefix, "-").concat(type, "__former"),
      checked: internalChecked,
      disabled: disabled,
      name: name,
      value: value,
      onClick: function onClick(e) {
        return e.stopPropagation();
      },
      onChange: function onChange(e) {
        return setInternalChecked(e.currentTarget.checked, {
          e: e
        });
      }
    });
    return /* @__PURE__ */React__default["default"].createElement("label", _objectSpread$1c({
      ref: ref,
      className: labelClassName,
      style: style
    }, omit$1(htmlProps, ["checkAll"])), input, /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-").concat(type, "__input")
    }), /* @__PURE__ */React__default["default"].createElement("span", {
      key: "label",
      className: "".concat(classPrefix, "-").concat(type, "__label")
    }, children || label));
  });
  Check.displayName = "Check";

  function useCommonClassName() {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    return React.useMemo(function () {
      return {
        SIZE: {
          "default": "",
          xs: "".concat(classPrefix, "-size-xs"),
          small: "".concat(classPrefix, "-size-s"),
          medium: "".concat(classPrefix, "-size-m"),
          large: "".concat(classPrefix, "-size-l"),
          xl: "".concat(classPrefix, "-size-xl"),
          block: "".concat(classPrefix, "-size-full-width")
        },
        STATUS: {
          loading: "".concat(classPrefix, "-is-loading"),
          disabled: "".concat(classPrefix, "-is-disabled"),
          focused: "".concat(classPrefix, "-is-focused"),
          success: "".concat(classPrefix, "-is-success"),
          error: "".concat(classPrefix, "-is-error"),
          warning: "".concat(classPrefix, "-is-warning"),
          selected: "".concat(classPrefix, "-is-selected"),
          active: "".concat(classPrefix, "-is-active"),
          checked: "".concat(classPrefix, "-is-checked"),
          current: "".concat(classPrefix, "-is-current"),
          hidden: "".concat(classPrefix, "-is-hidden"),
          visible: "".concat(classPrefix, "-is-visible"),
          expanded: "".concat(classPrefix, "-is-expanded"),
          indeterminate: "".concat(classPrefix, "-is-indeterminate")
        }
      };
    }, [classPrefix]);
  }

  function ownKeys$1b(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1b(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1b(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1b(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var RadioGroup = function RadioGroup(props) {
    var _classNames;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var disabled = props.disabled,
        children = props.children,
        value = props.value,
        defaultValue = props.defaultValue,
        onChange = props.onChange,
        _props$size = props.size,
        size = _props$size === void 0 ? "medium" : _props$size,
        _props$variant = props.variant,
        variant = _props$variant === void 0 ? "outline" : _props$variant,
        _props$options = props.options,
        options = _props$options === void 0 ? [] : _props$options;

    var _useDefault = useDefault(value, defaultValue, onChange),
        _useDefault2 = _slicedToArray(_useDefault, 2),
        internalValue = _useDefault2[0],
        setInternalValue = _useDefault2[1];

    var _useState = React.useState({}),
        _useState2 = _slicedToArray(_useState, 2),
        barStyle = _useState2[0],
        setBarStyle = _useState2[1];

    var groupRef = React.useRef(null);

    var _useCommonClassName = useCommonClassName(),
        sizeMap = _useCommonClassName.SIZE;

    var context = {
      inject: function inject(checkProps) {
        if (typeof checkProps.checked !== "undefined") {
          return checkProps;
        }

        var checkValue = checkProps.value;
        return _objectSpread$1b(_objectSpread$1b({}, checkProps), {}, {
          checked: internalValue === checkProps.value,
          disabled: checkProps.disabled || disabled,
          onChange: function onChange(checked, _ref) {
            var e = _ref.e;

            if (typeof checkProps.onChange === "function") {
              checkProps.onChange(checked, {
                e: e
              });
            }

            setInternalValue(checkValue, {
              e: e
            });
          }
        });
      }
    };

    function calcBarStyle() {
      if (!variant.includes("filled")) return;
      var checkedRadioCls = ".".concat(classPrefix, "-radio-button.").concat(classPrefix, "-is-checked");
      var checkedRadio = groupRef.current.querySelector(checkedRadioCls);
      if (!checkedRadio) return;
      var offsetWidth = checkedRadio.offsetWidth,
          offsetLeft = checkedRadio.offsetLeft;
      setBarStyle({
        width: "".concat(offsetWidth, "px"),
        left: "".concat(offsetLeft, "px")
      });
    }

    React.useEffect(function () {
      calcBarStyle();
    }, [internalValue]);

    var renderBlock = function renderBlock() {
      if (!variant.includes("filled")) return null;
      return /* @__PURE__ */React__default["default"].createElement("div", {
        style: barStyle,
        className: "".concat(classPrefix, "-radio-group__bg-block")
      });
    };

    var renderOptions = function renderOptions() {
      return options.map(function (item) {
        if (typeof item === "string" || typeof item === "number") {
          return /* @__PURE__ */React__default["default"].createElement(Radio$1, {
            value: item,
            key: item
          }, item);
        }

        return /* @__PURE__ */React__default["default"].createElement(Radio$1, {
          value: item.value,
          key: item.value,
          disabled: item.disabled
        }, item.label);
      });
    };

    return /* @__PURE__ */React__default["default"].createElement(CheckContext.Provider, {
      value: context
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      ref: groupRef,
      className: classNames$1("".concat(classPrefix, "-radio-group"), sizeMap[size], (_classNames = {}, _defineProperty$2(_classNames, "".concat(classPrefix, "-radio-group__outline"), variant === "outline"), _defineProperty$2(_classNames, "".concat(classPrefix, "-radio-group--filled"), variant.includes("filled")), _defineProperty$2(_classNames, "".concat(classPrefix, "-radio-group--primary-filled"), variant === "primary-filled"), _classNames))
    }, children || renderOptions(), renderBlock()));
  };

  RadioGroup.displayName = "RadioGroup";

  function ownKeys$1a(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1a(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1a(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1a(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var Radio$1 = forwardRefWithStatics(function (props, ref) {
    return /* @__PURE__ */React__default["default"].createElement(Check, _objectSpread$1a({
      ref: ref,
      type: "radio"
    }, props));
  }, {
    Group: RadioGroup,
    Button: /*#__PURE__*/React.forwardRef(function (props, ref) {
      return /* @__PURE__ */React__default["default"].createElement(Check, _objectSpread$1a({
        ref: ref,
        type: "radio-button"
      }, props));
    })
  });
  Radio$1.displayName = "Radio";

  var Radio = Radio$1;

  var baseGetTag$6 = _baseGetTag,
      isObjectLike$a = isObjectLike_1;
  /** `Object#toString` result references. */

  var numberTag$4 = '[object Number]';
  /**
   * Checks if `value` is classified as a `Number` primitive or object.
   *
   * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
   * classified as numbers, use the `_.isFinite` method.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a number, else `false`.
   * @example
   *
   * _.isNumber(3);
   * // => true
   *
   * _.isNumber(Number.MIN_VALUE);
   * // => true
   *
   * _.isNumber(Infinity);
   * // => true
   *
   * _.isNumber('3');
   * // => false
   */

  function isNumber(value) {
    return typeof value == 'number' || isObjectLike$a(value) && baseGetTag$6(value) == numberTag$4;
  }

  var isNumber_1 = isNumber;

  function ownKeys$19(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$19(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$19(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$19(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var getCheckboxValue = function getCheckboxValue(v) {
    switch (_typeof(v)) {
      case "number":
        return v;

      case "object":
        {
          var vs = v;
          return vs.value;
        }

      default:
        return void 0;
    }
  };

  function CheckboxGroup(props) {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var value = props.value,
        defaultValue = props.defaultValue,
        onChange = props.onChange,
        disabled = props.disabled,
        className = props.className,
        style = props.style,
        children = props.children,
        max = props.max,
        _props$options = props.options,
        options = _props$options === void 0 ? [] : _props$options;
    var intervalOptions = Array.isArray(options) && options.length > 0 ? options : React__default["default"].Children.map(children, function (child) {
      return child.props;
    });
    var optionsWithoutCheckAll = intervalOptions.filter(function (t) {
      return _typeof(t) !== "object" || !t.checkAll;
    });
    var optionsWithoutCheckAllValues = [];
    optionsWithoutCheckAll.forEach(function (v) {
      var vs = getCheckboxValue(v);
      optionsWithoutCheckAllValues.push(vs);
    });

    var _useDefault = useDefault(value, defaultValue, onChange),
        _useDefault2 = _slicedToArray(_useDefault, 2),
        internalValue = _useDefault2[0],
        setInternalValue = _useDefault2[1];

    var _useState = React.useState(max),
        _useState2 = _slicedToArray(_useState, 2),
        localMax = _useState2[0],
        setLocalMax = _useState2[1];

    var checkedSet = React.useMemo(function () {
      if (!Array.isArray(internalValue)) return /* @__PURE__ */new Set([]);
      return new Set([].concat(internalValue));
    }, [internalValue]);
    var indeterminate = React.useMemo(function () {
      var list = Array.from(checkedSet);
      return list.length !== 0 && list.length !== optionsWithoutCheckAll.length;
    }, [checkedSet, optionsWithoutCheckAll]);
    var checkAllChecked = React.useMemo(function () {
      var list = Array.from(checkedSet);
      return list.length === optionsWithoutCheckAll.length;
    }, [checkedSet, optionsWithoutCheckAll]);
    React.useEffect(function () {
      if (!isNumber_1(max)) return;

      if (max < checkedSet.size) {
        console.warn("[TDesign] max should be less than the length of value, change is invalid");
      } else {
        setLocalMax(max);
      }
    }, [max, checkedSet]);
    var context = {
      inject: function inject(checkProps) {
        if (typeof checkProps.checked !== "undefined") {
          return checkProps;
        }

        var checkValue = checkProps.value;
        return _objectSpread$19(_objectSpread$19({}, checkProps), {}, {
          checked: checkProps.checkAll ? checkAllChecked : checkedSet.has(checkValue),
          indeterminate: checkProps.checkAll ? indeterminate : checkProps.indeterminate,
          disabled: checkProps.disabled || disabled || checkedSet.size >= localMax && !checkedSet.has(checkValue),
          onChange: function onChange(checked, _ref) {
            var e = _ref.e;

            if (typeof checkProps.onChange === "function") {
              checkProps.onChange(checked, {
                e: e
              });
            }

            if (checkProps.checkAll) {
              checkedSet.clear();

              if (checked) {
                optionsWithoutCheckAllValues.forEach(function (v) {
                  checkedSet.add(v);
                });
              }
            } else if (checked) {
              if (checkedSet.size >= localMax && isNumber_1(max)) return;
              checkedSet.add(checkValue);
            } else {
              checkedSet["delete"](checkValue);
            }

            setInternalValue(Array.from(checkedSet), {
              e: e
            });
          }
        });
      }
    };
    var useOptions = Array.isArray(options) && options.length !== 0;
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-checkbox-group"), className),
      style: style
    }, /* @__PURE__ */React__default["default"].createElement(CheckContext.Provider, {
      value: context
    }, useOptions ? options.map(function (v, index) {
      var type = _typeof(v);

      switch (type) {
        case "number":
          {
            var vs = v;
            return /* @__PURE__ */React__default["default"].createElement(Checkbox$1, {
              key: vs,
              label: vs,
              value: vs
            }, v);
          }

        case "object":
          {
            var _vs = v;
            return _vs.checkAll ? /* @__PURE__ */React__default["default"].createElement(Checkbox$1, _objectSpread$19(_objectSpread$19({}, v), {}, {
              key: "checkAll_".concat(index),
              indeterminate: indeterminate
            })) : /* @__PURE__ */React__default["default"].createElement(Checkbox$1, _objectSpread$19(_objectSpread$19({}, v), {}, {
              key: _vs.value,
              disabled: _vs.disabled || disabled
            }));
          }

        default:
          return null;
      }
    }) : children));
  }

  function ownKeys$18(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$18(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$18(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$18(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var Checkbox$1 = forwardRefWithStatics(function (props, ref) {
    return /* @__PURE__ */React__default["default"].createElement(Check, _objectSpread$18({
      ref: ref,
      type: "checkbox"
    }, props));
  }, {
    Group: CheckboxGroup
  });
  Checkbox$1.displayName = "Checkbox";

  var Checkbox = Checkbox$1;

  var useUpdateEffect = function useUpdateEffect(callback, dependency) {
    var ref = React.useRef(false);
    React.useLayoutEffect(function () {
      if (!ref.current) {
        ref.current = true;
        return void 0;
      }

      return callback();
    }, dependency);
  };

  function StepHandler(props) {
    var prefixClassName = props.prefixClassName,
        theme = props.theme,
        onStep = props.onStep,
        disabledDecrease = props.disabledDecrease,
        disabledIncrease = props.disabledIncrease;
    var commonClassNames = useCommonClassName();
    var decreaseIcon = theme === "column" ? /* @__PURE__ */React__default["default"].createElement(ChevronDownIcon, null) : /* @__PURE__ */React__default["default"].createElement(RemoveIcon, null);
    var increaseIcon = theme === "column" ? /* @__PURE__ */React__default["default"].createElement(ChevronUpIcon, null) : /* @__PURE__ */React__default["default"].createElement(AddIcon, null);

    var onStepDecrease = function onStepDecrease(e) {
      return disabledDecrease || onStep({
        type: "reduce",
        e: e
      });
    };

    var onStepIncrease = function onStepIncrease(e) {
      return disabledIncrease || onStep({
        type: "add",
        e: e
      });
    };

    return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, /* @__PURE__ */React__default["default"].createElement(Button, {
      variant: "outline",
      className: classNames$1("".concat(prefixClassName, "__decrease"), _defineProperty$2({}, commonClassNames.STATUS.disabled, disabledDecrease)),
      onClick: onStepDecrease,
      icon: decreaseIcon,
      shape: "square"
    }), /* @__PURE__ */React__default["default"].createElement(Button, {
      variant: "outline",
      className: classNames$1("".concat(prefixClassName, "__increase"), _defineProperty$2({}, commonClassNames.STATUS.disabled, disabledIncrease)),
      onClick: onStepIncrease,
      icon: increaseIcon,
      shape: "square"
    }));
  }

  var isInvalidNumber = function isInvalidNumber(number) {
    if (typeof number === "number") {
      return Number.isNaN(number);
    }

    if (!number) {
      return true;
    }

    return !(/^\s*-?\d+(\.\d+)?\s*$/.test(number) || /^\s*-?\d+\.\s*$/.test(number) || /^\s*-?\.\d+\s*$/.test(number));
  };
  var getNumberPrecision = function getNumberPrecision(number) {
    var numStr = String(number);
    return numStr.includes(".") ? numStr.length - numStr.indexOf(".") - 1 : 0;
  };

  var multiE = function multiE(s) {
    var m = s.match(/[e]/gi);
    return m === null ? false : m.length > 1;
  };

  var multiDot = function multiDot(s) {
    var m = s.match(/[.]/g);
    return m === null ? false : m.length > 1;
  };

  var multiNegative = function multiNegative(s) {
    var m = s.match(/[-]/g);
    return m === null ? false : m.length > 1;
  };

  var strToNumber = function strToNumber(s) {
    if (["", void 0].includes(s)) {
      return 0;
    }

    var filterVal = s.replace(/[^\d.eE。-]/g, "").replace("\u3002", ".");

    if (multiE(filterVal) || multiDot(filterVal) || multiNegative(filterVal)) {
      filterVal = filterVal.substr(0, filterVal.length - 1);
    }

    return Number(filterVal);
  };

  var _excluded$h = ["className", "style", "defaultValue", "value", "disabled", "size", "theme", "step", "max", "min", "decimalPlaces", "format", "onChange", "onBlur", "onFocus", "onEnter", "onKeydown", "onKeyup", "onKeypress"],
      _excluded2$1 = ["value"];

  function ownKeys$17(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$17(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$17(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$17(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var InputNumber$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _classNames;

    var className = props.className,
        style = props.style,
        defaultValue = props.defaultValue,
        value = props.value,
        _props$disabled = props.disabled,
        disabled = _props$disabled === void 0 ? false : _props$disabled,
        _props$size = props.size,
        size = _props$size === void 0 ? "medium" : _props$size,
        _props$theme = props.theme,
        theme = _props$theme === void 0 ? "row" : _props$theme,
        _props$step = props.step,
        step = _props$step === void 0 ? 1 : _props$step,
        _props$max = props.max,
        max = _props$max === void 0 ? Number.MAX_SAFE_INTEGER : _props$max,
        _props$min = props.min,
        min = _props$min === void 0 ? Number.MIN_SAFE_INTEGER : _props$min,
        decimalPlaces = props.decimalPlaces,
        format = props.format,
        onChange = props.onChange,
        onBlur = props.onBlur,
        onFocus = props.onFocus,
        onEnter = props.onEnter,
        onKeydown = props.onKeydown,
        onKeyup = props.onKeyup,
        onKeypress = props.onKeypress,
        restInputProps = _objectWithoutProperties$1(props, _excluded$h);

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var commonClassNames = useCommonClassName();
    var componentType = "input-number";
    var inputClassName = "".concat(classPrefix, "-").concat(componentType);

    var getRangeValue = function getRangeValue(value2) {
      if (value2 < min) return min;
      if (value2 > max) return max;
      return value2;
    };

    var _useState = React.useState(function () {
      var initialValue = "";

      if (!isInvalidNumber(defaultValue)) {
        initialValue = getRangeValue(Number(defaultValue));
      }

      if (!isInvalidNumber(value)) {
        initialValue = value;
      }

      if (format && initialValue !== "") {
        return format(getRangeValue(Number(initialValue))) || "";
      }

      return initialValue;
    }),
        _useState2 = _slicedToArray(_useState, 2),
        internalInputValue = _useState2[0],
        setInternalInputValue = _useState2[1];

    var decimalValue = internalInputValue;

    if (typeof internalInputValue === "string") {
      decimalValue = strToNumber(internalInputValue) || 0;
    }

    var setInputValue = function setInputValue(inputStr) {
      var _format;

      if (["", void 0].includes(inputStr)) {
        return setInternalInputValue("");
      }

      var formattedInputValue = (_format = format === null || format === void 0 ? void 0 : format(Number(inputStr))) !== null && _format !== void 0 ? _format : inputStr;
      setInternalInputValue(formattedInputValue);
    };

    var _useState3 = React.useState(false),
        _useState4 = _slicedToArray(_useState3, 2),
        isError = _useState4[0],
        setError = _useState4[1];

    var disabledDecrease = disabled || isError || decimalValue - step < min;
    var disabledIncrease = disabled || isError || decimalValue + step > max;

    var isOutOfRange = function isOutOfRange(number) {
      return number > max || number < min;
    };

    var checkInput = function checkInput(inputStr) {
      if (inputStr === "") {
        setError(false);
        return true;
      }

      var hasError = isInvalidNumber(inputStr) || isOutOfRange(Number(inputStr));
      setError(hasError);
      return !hasError;
    };

    var stepPrecision = React.useMemo(function () {
      return getNumberPrecision(step);
    }, [step]);
    var getPrecision = React.useCallback(function (str) {
      var numberPrecision = getNumberPrecision(str);
      return decimalPlaces !== null && decimalPlaces !== void 0 ? decimalPlaces : Math.max(numberPrecision, stepPrecision);
    }, [stepPrecision, decimalPlaces]);
    React.useEffect(function () {
      if (value !== void 0) {
        checkInput(value);
      }
    }, [value]);
    useUpdateEffect(function () {
      setInputValue((value !== null && value !== void 0 ? value : "").toString());
    }, [value]);

    var triggerValueUpdate = function triggerValueUpdate(action) {
      var value2 = action.value,
          context = _objectWithoutProperties$1(action, _excluded2$1);

      if (!disabled) {
        onChange === null || onChange === void 0 ? void 0 : onChange(value2, context);
      }
    };

    var onInternalInput = function onInternalInput(inputStr, _ref) {
      var e = _ref.e;

      if (inputStr === "") {
        setInputValue(inputStr);
        return triggerValueUpdate({
          type: "input",
          value: void 0,
          e: e
        });
      }

      var filteredInputStr = strToNumber(inputStr);

      if (Number.isNaN(filteredInputStr)) {
        setInternalInputValue(inputStr);
        if (!checkInput(inputStr)) return;
      }

      setInputValue(filteredInputStr.toString());
      if (!checkInput(filteredInputStr)) return;
      triggerValueUpdate({
        type: "input",
        value: filteredInputStr,
        e: e
      });
    };

    var onInternalStep = function onInternalStep(action) {
      var type = action.type,
          e = action.e;
      var currentValue = decimalValue || 0;
      var precision = getPrecision(currentValue);
      var updateValue;

      switch (type) {
        case "add":
          {
            updateValue = Number((currentValue + step).toFixed(precision));
            break;
          }

        case "reduce":
          {
            updateValue = Number((currentValue - step).toFixed(precision));
            break;
          }
      }

      setInputValue(updateValue);
      triggerValueUpdate({
        value: updateValue,
        type: type,
        e: e
      });
      e.preventDefault();
    };

    var handleBlur = function handleBlur(e) {
      var _updateValue;

      var updateValue;
      var internalFloatValue = parseFloat(internalInputValue);

      if (internalInputValue === "") {
        updateValue = void 0;
      } else if (!Number.isNaN(internalFloatValue)) {
        updateValue = getRangeValue(internalFloatValue);
      } else {
        var checkVal = internalInputValue.replace(/[^0-9]/gi, "");
        updateValue = checkVal;

        if (!checkVal) {
          updateValue = value;
        }
      }

      onBlur === null || onBlur === void 0 ? void 0 : onBlur(updateValue, {
        e: e
      });
      setInputValue(((_updateValue = updateValue) !== null && _updateValue !== void 0 ? _updateValue : "").toString());
      setError(false);

      if (updateValue !== value) {
        triggerValueUpdate({
          value: updateValue,
          e: e,
          type: ""
        });
      }
    };

    var handleFocus = function handleFocus(e) {
      return onFocus === null || onFocus === void 0 ? void 0 : onFocus(decimalValue, {
        e: e
      });
    };

    var handleKeydownEnter = function handleKeydownEnter(e) {
      e.key === "Enter" && (onEnter === null || onEnter === void 0 ? void 0 : onEnter(decimalValue, {
        e: e
      }));
    };

    var handleKeydown = function handleKeydown(e) {
      onKeydown === null || onKeydown === void 0 ? void 0 : onKeydown(decimalValue, {
        e: e
      });
      handleKeydownEnter(e);
    };

    var handleKeyup = function handleKeyup(e) {
      return onKeyup === null || onKeyup === void 0 ? void 0 : onKeyup(decimalValue, {
        e: e
      });
    };

    var handleKeypress = function handleKeypress(e) {
      return onKeypress === null || onKeypress === void 0 ? void 0 : onKeypress(decimalValue, {
        e: e
      });
    };

    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: ref,
      className: classNames$1(className, inputClassName, commonClassNames.SIZE[size], (_classNames = {}, _defineProperty$2(_classNames, commonClassNames.STATUS.disabled, disabled), _defineProperty$2(_classNames, "".concat(classPrefix, "-is-controls-right"), theme === "column"), _defineProperty$2(_classNames, "".concat(inputClassName, "--").concat(theme), theme), _classNames)),
      style: style,
      onBlur: handleBlur,
      onFocus: handleFocus,
      onKeyDown: handleKeydown,
      onKeyUp: handleKeyup,
      onKeyPress: handleKeypress
    }, theme !== "normal" && /* @__PURE__ */React__default["default"].createElement(StepHandler, {
      prefixClassName: inputClassName,
      theme: theme,
      disabledDecrease: disabledDecrease,
      disabledIncrease: disabledIncrease,
      onStep: onInternalStep
    }), /* @__PURE__ */React__default["default"].createElement(Input, _objectSpread$17({
      disabled: disabled,
      value: internalInputValue,
      onChange: onInternalInput,
      status: isError ? "error" : void 0
    }, restInputProps)));
  });
  InputNumber$1.displayName = "InputNumber";

  var InputNumber = InputNumber$1;

  var _excluded$g = ["children"];

  function ownKeys$16(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$16(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$16(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$16(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function ConfigProvider(_ref) {
    var children = _ref.children,
        configProps = _objectWithoutProperties$1(_ref, _excluded$g);

    return /* @__PURE__ */React__default["default"].createElement(ConfigContext$1.Provider, {
      value: _objectSpread$16(_objectSpread$16({}, defaultContext), configProps)
    }, children);
  }
  ConfigProvider.displayName = "ConfigProvider";

  var StepsContext = /*#__PURE__*/React__default["default"].createContext({
    current: 0,
    theme: "default"
  });

  function StepItem(props) {
    var _classnames;

    var icon = props.icon,
        title = props.title,
        content = props.content,
        value = props.value,
        children = props.children,
        style = props.style;
    var status = props.status;

    var _useContext = React.useContext(StepsContext),
        current = _useContext.current,
        theme = _useContext.theme;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    if (!status) {
      if (value < current) {
        status = "finish";
      } else if (value === current) {
        status = "process";
      } else {
        status = "default";
      }
    }

    var className = classNames$1((_classnames = {}, _defineProperty$2(_classnames, "".concat(classPrefix, "-steps-item"), true), _defineProperty$2(_classnames, "".concat(classPrefix, "-steps-item--wait"), status === "default"), _defineProperty$2(_classnames, "".concat(classPrefix, "-steps-item--error"), status === "error"), _defineProperty$2(_classnames, "".concat(classPrefix, "-steps-item--finish"), status === "finish"), _defineProperty$2(_classnames, "".concat(classPrefix, "-steps-item--process"), status === "process"), _defineProperty$2(_classnames, props.className, !!props.className), _classnames));
    var valueNum = Number(value);
    var iconEle = null;

    if (icon) {
      iconEle = icon;
    } else if (theme === "default") {
      switch (status) {
        case "error":
          iconEle = /* @__PURE__ */React__default["default"].createElement("span", {
            className: "".concat(classPrefix, "-steps-item__icon--number")
          }, /* @__PURE__ */React__default["default"].createElement(CloseIcon, null));
          break;

        case "finish":
          iconEle = /* @__PURE__ */React__default["default"].createElement("span", {
            className: "".concat(classPrefix, "-steps-item__icon--number")
          }, /* @__PURE__ */React__default["default"].createElement(CheckIcon, null));
          break;

        case "default":
        case "process":
          iconEle = /* @__PURE__ */React__default["default"].createElement("span", {
            className: "".concat(classPrefix, "-steps-item__icon--number")
          }, Number.isNaN(valueNum) ? value : valueNum + 1);
          break;
      }
    } else {
      iconEle = null;
    }

    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: className,
      style: style
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-steps-item__inner")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-steps-item__icon ").concat(status === "finish" ? "".concat(classPrefix, "-steps-item-finish") : "")
    }, iconEle), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-steps-item__content")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-steps-item__title")
    }, title), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-steps-item__description")
    }, content), children ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-steps-item__extra")
    }, children) : null)));
  }
  StepItem.displayName = "StepItem";

  function ownKeys$15(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$15(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$15(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$15(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function Steps$1(props) {
    var _classnames;

    var style = props.style,
        _props$current = props.current,
        current = _props$current === void 0 ? 0 : _props$current,
        _props$layout = props.layout,
        layout = _props$layout === void 0 ? "horizontal" : _props$layout,
        _props$theme = props.theme,
        theme = _props$theme === void 0 ? "default" : _props$theme,
        _props$sequence = props.sequence,
        sequence = _props$sequence === void 0 ? "positive" : _props$sequence,
        children = props.children,
        onChange = props.onChange,
        _props$options = props.options,
        options = _props$options === void 0 ? [] : _props$options;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var className = classNames$1((_classnames = {}, _defineProperty$2(_classnames, "".concat(classPrefix, "-steps"), true), _defineProperty$2(_classnames, "".concat(classPrefix, "-steps--horizontal"), layout === "horizontal"), _defineProperty$2(_classnames, "".concat(classPrefix, "-steps--vertical"), layout === "vertical"), _defineProperty$2(_classnames, "".concat(classPrefix, "-steps--default-anchor"), theme === "default"), _defineProperty$2(_classnames, "".concat(classPrefix, "-steps--positive"), sequence === "positive"), _defineProperty$2(_classnames, "".concat(classPrefix, "-steps--reverse"), sequence === "reverse"), _defineProperty$2(_classnames, "".concat(classPrefix, "-steps--dot-anchor"), theme === "dot"), _defineProperty$2(_classnames, props.className, !!props.className), _classnames));
    var previousRef = React.useRef(current);
    React.useEffect(function () {
      var previous = previousRef.current;

      if (previous !== current && onChange) {
        onChange(current, previous);
      }
    }, [current, onChange]);
    var shouldReserve = sequence === "reverse" && layout === "vertical";
    var childrenList = React__default["default"].Children.toArray(children);
    var childrenDisplayList = shouldReserve ? childrenList.reverse() : childrenList;
    var optionsDisplayList = shouldReserve ? options.reverse() : options;
    var stepItemList = null;

    if (childrenList.length !== 0) {
      stepItemList = childrenDisplayList.map(function (child, index) {
        return /*#__PURE__*/React__default["default"].cloneElement(child, _objectSpread$15({
          value: index
        }, child.props));
      });
    } else {
      stepItemList = optionsDisplayList.map(function (v, index) {
        return /* @__PURE__ */React__default["default"].createElement(StepItem, _objectSpread$15(_objectSpread$15({}, v), {}, {
          value: index,
          key: index
        }));
      });
    }

    return /* @__PURE__ */React__default["default"].createElement(StepsContext.Provider, {
      value: {
        current: current,
        theme: theme
      }
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: className,
      style: style
    }, stepItemList));
  }

  Steps$1.StepItem = StepItem;
  Steps$1.displayName = "Steps";

  var Steps = Steps$1;

  var Distance = "32px";
  var PlacementOffset = {
    center: {
      left: "50%",
      top: "50%",
      transform: "translateX(-50%) translateY(-50%)"
    },
    left: {
      left: Distance,
      top: "50%",
      transform: "translateY(-50%)"
    },
    bottom: {
      bottom: Distance,
      left: "50%",
      transform: "translateX(-50%)"
    },
    right: {
      right: Distance,
      top: "50%",
      transform: "translateY(-50%)"
    },
    top: {
      top: Distance,
      left: "50%",
      transform: "translateX(-50%)"
    },
    "top-left": {
      left: Distance,
      top: Distance
    },
    "top-right": {
      right: Distance,
      top: Distance
    },
    "bottom-left": {
      left: Distance,
      bottom: Distance
    },
    "bottom-right": {
      right: Distance,
      bottom: Distance
    }
  };

  function useMessageClass() {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var tdMessagePrefix = "".concat(classPrefix, "-message");
    var tdMessageListClass = "".concat(tdMessagePrefix, "__list");

    var tdClassIsGenerator = function tdClassIsGenerator(append) {
      return "".concat(classPrefix, "-is-").concat(append);
    };

    var tdMessageClassGenerator = function tdMessageClassGenerator(append) {
      return "".concat(tdMessagePrefix, "__").concat(append);
    };

    return {
      tdMessagePrefix: tdMessagePrefix,
      tdMessageListClass: tdMessageListClass,
      tdClassIsGenerator: tdClassIsGenerator,
      tdMessageClassGenerator: tdMessageClassGenerator
    };
  }

  function MessageClose(_ref) {
    var closeBtn = _ref.closeBtn,
        onCloseBtnClick = _ref.onCloseBtnClick;

    var _useMessageClass = useMessageClass(),
        tdMessageClassGenerator = _useMessageClass.tdMessageClassGenerator;

    if (!closeBtn) {
      return null;
    }

    if (typeof closeBtn === "function") {
      return /*#__PURE__*/React__default["default"].cloneElement(closeBtn(), {
        className: classNames$1(closeBtn().props.className, tdMessageClassGenerator("close"))
      });
    }

    if (typeof closeBtn === "string" || typeof closeBtn === "number") {
      return /* @__PURE__ */React__default["default"].createElement("span", {
        className: tdMessageClassGenerator("close"),
        onClick: function onClick(e) {
          return onCloseBtnClick === null || onCloseBtnClick === void 0 ? void 0 : onCloseBtnClick({
            e: e
          });
        }
      }, closeBtn);
    }

    if ( /*#__PURE__*/React__default["default"].isValidElement(closeBtn)) {
      return /*#__PURE__*/React__default["default"].cloneElement(closeBtn, {
        className: classNames$1(closeBtn.props.className, tdMessageClassGenerator("close"))
      });
    }

    return /* @__PURE__ */React__default["default"].createElement(CloseIcon, {
      className: tdMessageClassGenerator("close")
    });
  }

  var iconMap = {
    info: InfoCircleFilledIcon,
    success: CheckCircleFilledIcon,
    warning: ErrorCircleFilledIcon,
    error: ErrorCircleFilledIcon,
    question: HelpCircleFilledIcon,
    loading: Loading
  };
  function MessageIcon(_ref) {
    var theme = _ref.theme,
        onCloseBtnClick = _ref.onCloseBtnClick;
    var Icon = iconMap[theme];

    if (theme === "loading") {
      return /* @__PURE__ */React__default["default"].createElement(Icon, {
        loading: true
      });
    }

    return Icon ? /* @__PURE__ */React__default["default"].createElement(Icon, {
      onClick: function onClick(e) {
        return onCloseBtnClick === null || onCloseBtnClick === void 0 ? void 0 : onCloseBtnClick({
          e: e
        });
      }
    }) : null;
  }

  function ownKeys$14(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$14(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$14(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$14(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var MessageComponent = function MessageComponent(props) {
    var _useMessageClass = useMessageClass(),
        tdMessagePrefix = _useMessageClass.tdMessagePrefix,
        tdClassIsGenerator = _useMessageClass.tdClassIsGenerator;

    var _props$theme = props.theme,
        theme = _props$theme === void 0 ? "info" : _props$theme,
        children = props.children,
        closeBtn = props.closeBtn,
        _props$onCloseBtnClic = props.onCloseBtnClick,
        onCloseBtnClick = _props$onCloseBtnClic === void 0 ? noop : _props$onCloseBtnClic,
        style = props.style,
        icon = props.icon,
        content = props.content;
    return /* @__PURE__ */React__default["default"].createElement("div", {
      key: "message",
      style: style,
      className: classNames$1("".concat(tdMessagePrefix), tdClassIsGenerator(theme), closeBtn ? tdClassIsGenerator("closable") : "")
    }, icon ? icon : /* @__PURE__ */React__default["default"].createElement(MessageIcon, {
      theme: theme,
      onCloseBtnClick: onCloseBtnClick
    }), content ? content : children, /* @__PURE__ */React__default["default"].createElement(MessageClose, _objectSpread$14({}, props)));
  };

  function ownKeys$13(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$13(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$13(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$13(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var MessageList = [];
  var keyIndex = 1;
  var globalConfig = {
    zIndex: 5e3,
    duration: 3e3,
    top: 32
  };

  function createContainer(_ref) {
    var attach = _ref.attach,
        zIndex = _ref.zIndex,
        _ref$placement = _ref.placement,
        placement = _ref$placement === void 0 ? "top" : _ref$placement;
    var mountedDom = document.body;

    if (typeof attach === "string") {
      var result = document.querySelectorAll(attach);

      if (result.length >= 1) {
        mountedDom = result[0];
      }
    } else if (typeof attach === "function") {
      mountedDom = attach();
    }

    var tdMessageListClass = "t-message__list";
    var tdMessagePlacementClass = "t-message-placement--".concat(placement);
    var container = Array.from(mountedDom.querySelectorAll(".".concat(tdMessageListClass, ".").concat(tdMessagePlacementClass)));

    if (container.length < 1) {
      var div = document.createElement("div");
      div.className = classNames$1(tdMessageListClass, tdMessagePlacementClass);
      div.style.zIndex = String(zIndex || globalConfig.zIndex);
      Object.keys(PlacementOffset[placement]).forEach(function (key) {
        div.style[key] = PlacementOffset[placement][key];
      });

      if (placement.includes("top")) {
        div.style.top = "".concat(globalConfig.top, "px");
      }

      mountedDom.appendChild(div);
      return div;
    }

    return container[0];
  }

  function renderElement(theme, config) {
    var container = createContainer(config);
    var _config$duration = config.duration,
        duration = _config$duration === void 0 ? globalConfig.duration : _config$duration;
    var content = config.content,
        offset = config.offset,
        _config$onDurationEnd = config.onDurationEnd,
        onDurationEnd = _config$onDurationEnd === void 0 ? noop : _config$onDurationEnd;
    var div = document.createElement("div");
    keyIndex += 1;
    var message2 = {
      close: function close() {
        ReactDOM__default["default"].unmountComponentAtNode(div);
        div.remove();
      },
      key: keyIndex
    };

    if (duration < 0) {
      duration = 3e3;
    }

    if (duration !== 0) {
      setTimeout(function () {
        message2.close();
        onDurationEnd();
      }, duration);
    }

    var style = {};

    if (Array.isArray(offset) && offset.length === 2) {
      var _offset = _slicedToArray(offset, 2),
          left = _offset[0],
          top = _offset[1];

      style = {
        left: left,
        top: top,
        position: "relative"
      };
    }

    return new Promise(function (resolve) {
      ReactDOM__default["default"].render( /* @__PURE__ */React__default["default"].createElement(MessageComponent, _objectSpread$13({
        theme: theme,
        style: style,
        key: keyIndex
      }, config), content), div);
      container.appendChild(div);
      MessageList.push(message2);
      resolve(message2);
    });
  }

  function isConfig(content) {
    return Object.prototype.toString.call(content) === "[object Object]" && !!content.content;
  }

  var messageMethod = function messageMethod(theme, content) {
    var duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : globalConfig.duration;
    var config = {};

    if (isConfig(content)) {
      config = _objectSpread$13({
        duration: duration
      }, content);
    } else {
      config = {
        content: content,
        duration: duration
      };
    }

    config = _objectSpread$13(_objectSpread$13({}, config), {}, {
      zIndex: config.zIndex || globalConfig.zIndex
    });
    return renderElement(theme, config);
  };

  var MessagePlugin = function MessagePlugin(theme, message2, duration) {
    return messageMethod(theme, message2, duration);
  };

  MessagePlugin.info = function (content, duration) {
    return messageMethod("info", content, duration);
  };

  MessagePlugin.error = function (content, duration) {
    return messageMethod("error", content, duration);
  };

  MessagePlugin.warning = function (content, duration) {
    return messageMethod("warning", content, duration);
  };

  MessagePlugin.success = function (content, duration) {
    return messageMethod("success", content, duration);
  };

  MessagePlugin.question = function (content, duration) {
    return messageMethod("question", content, duration);
  };

  MessagePlugin.loading = function (content, duration) {
    return messageMethod("loading", content, duration);
  };

  MessagePlugin.close = function (messageInstance) {
    messageInstance.then(function (instance) {
      return instance.close();
    });
  };

  MessagePlugin.closeAll = function () {
    MessageList.forEach(function (message2) {
      typeof message2.close === "function" && message2.close();
    });
    MessageList = [];
    return;
  };

  var message = MessagePlugin;

  var Message = MessageComponent;

  var root$7 = _root;
  /**
   * Gets the timestamp of the number of milliseconds that have elapsed since
   * the Unix epoch (1 January 1970 00:00:00 UTC).
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Date
   * @returns {number} Returns the timestamp.
   * @example
   *
   * _.defer(function(stamp) {
   *   console.log(_.now() - stamp);
   * }, _.now());
   * // => Logs the number of milliseconds it took for the deferred invocation.
   */

  var now$1 = function now() {
    return root$7.Date.now();
  };

  var now_1 = now$1;

  /** Used to match a single whitespace character. */
  var reWhitespace = /\s/;
  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */

  function trimmedEndIndex$1(string) {
    var index = string.length;

    while (index-- && reWhitespace.test(string.charAt(index))) {}

    return index;
  }

  var _trimmedEndIndex = trimmedEndIndex$1;

  var trimmedEndIndex = _trimmedEndIndex;
  /** Used to match leading whitespace. */

  var reTrimStart = /^\s+/;
  /**
   * The base implementation of `_.trim`.
   *
   * @private
   * @param {string} string The string to trim.
   * @returns {string} Returns the trimmed string.
   */

  function baseTrim$1(string) {
    return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '') : string;
  }

  var _baseTrim = baseTrim$1;

  var baseTrim = _baseTrim,
      isObject$9 = isObject_1,
      isSymbol$2 = isSymbol_1;
  /** Used as references for various `Number` constants. */

  var NAN = 0 / 0;
  /** Used to detect bad signed hexadecimal string values. */

  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
  /** Used to detect binary string values. */

  var reIsBinary = /^0b[01]+$/i;
  /** Used to detect octal string values. */

  var reIsOctal = /^0o[0-7]+$/i;
  /** Built-in method references without a dependency on `root`. */

  var freeParseInt = parseInt;
  /**
   * Converts `value` to a number.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to process.
   * @returns {number} Returns the number.
   * @example
   *
   * _.toNumber(3.2);
   * // => 3.2
   *
   * _.toNumber(Number.MIN_VALUE);
   * // => 5e-324
   *
   * _.toNumber(Infinity);
   * // => Infinity
   *
   * _.toNumber('3.2');
   * // => 3.2
   */

  function toNumber$2(value) {
    if (typeof value == 'number') {
      return value;
    }

    if (isSymbol$2(value)) {
      return NAN;
    }

    if (isObject$9(value)) {
      var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
      value = isObject$9(other) ? other + '' : other;
    }

    if (typeof value != 'string') {
      return value === 0 ? value : +value;
    }

    value = baseTrim(value);
    var isBinary = reIsBinary.test(value);
    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
  }

  var toNumber_1 = toNumber$2;

  var isObject$8 = isObject_1,
      now = now_1,
      toNumber$1 = toNumber_1;
  /** Error message constants. */

  var FUNC_ERROR_TEXT$2 = 'Expected a function';
  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeMax$4 = Math.max,
      nativeMin = Math.min;
  /**
   * Creates a debounced function that delays invoking `func` until after `wait`
   * milliseconds have elapsed since the last time the debounced function was
   * invoked. The debounced function comes with a `cancel` method to cancel
   * delayed `func` invocations and a `flush` method to immediately invoke them.
   * Provide `options` to indicate whether `func` should be invoked on the
   * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
   * with the last arguments provided to the debounced function. Subsequent
   * calls to the debounced function return the result of the last `func`
   * invocation.
   *
   * **Note:** If `leading` and `trailing` options are `true`, `func` is
   * invoked on the trailing edge of the timeout only if the debounced function
   * is invoked more than once during the `wait` timeout.
   *
   * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
   * until to the next tick, similar to `setTimeout` with a timeout of `0`.
   *
   * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
   * for details over the differences between `_.debounce` and `_.throttle`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to debounce.
   * @param {number} [wait=0] The number of milliseconds to delay.
   * @param {Object} [options={}] The options object.
   * @param {boolean} [options.leading=false]
   *  Specify invoking on the leading edge of the timeout.
   * @param {number} [options.maxWait]
   *  The maximum time `func` is allowed to be delayed before it's invoked.
   * @param {boolean} [options.trailing=true]
   *  Specify invoking on the trailing edge of the timeout.
   * @returns {Function} Returns the new debounced function.
   * @example
   *
   * // Avoid costly calculations while the window size is in flux.
   * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
   *
   * // Invoke `sendMail` when clicked, debouncing subsequent calls.
   * jQuery(element).on('click', _.debounce(sendMail, 300, {
   *   'leading': true,
   *   'trailing': false
   * }));
   *
   * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
   * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
   * var source = new EventSource('/stream');
   * jQuery(source).on('message', debounced);
   *
   * // Cancel the trailing debounced invocation.
   * jQuery(window).on('popstate', debounced.cancel);
   */

  function debounce$1(func, wait, options) {
    var lastArgs,
        lastThis,
        maxWait,
        result,
        timerId,
        lastCallTime,
        lastInvokeTime = 0,
        leading = false,
        maxing = false,
        trailing = true;

    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT$2);
    }

    wait = toNumber$1(wait) || 0;

    if (isObject$8(options)) {
      leading = !!options.leading;
      maxing = 'maxWait' in options;
      maxWait = maxing ? nativeMax$4(toNumber$1(options.maxWait) || 0, wait) : maxWait;
      trailing = 'trailing' in options ? !!options.trailing : trailing;
    }

    function invokeFunc(time) {
      var args = lastArgs,
          thisArg = lastThis;
      lastArgs = lastThis = undefined;
      lastInvokeTime = time;
      result = func.apply(thisArg, args);
      return result;
    }

    function leadingEdge(time) {
      // Reset any `maxWait` timer.
      lastInvokeTime = time; // Start the timer for the trailing edge.

      timerId = setTimeout(timerExpired, wait); // Invoke the leading edge.

      return leading ? invokeFunc(time) : result;
    }

    function remainingWait(time) {
      var timeSinceLastCall = time - lastCallTime,
          timeSinceLastInvoke = time - lastInvokeTime,
          timeWaiting = wait - timeSinceLastCall;
      return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
    }

    function shouldInvoke(time) {
      var timeSinceLastCall = time - lastCallTime,
          timeSinceLastInvoke = time - lastInvokeTime; // Either this is the first call, activity has stopped and we're at the
      // trailing edge, the system time has gone backwards and we're treating
      // it as the trailing edge, or we've hit the `maxWait` limit.

      return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
    }

    function timerExpired() {
      var time = now();

      if (shouldInvoke(time)) {
        return trailingEdge(time);
      } // Restart the timer.


      timerId = setTimeout(timerExpired, remainingWait(time));
    }

    function trailingEdge(time) {
      timerId = undefined; // Only invoke if we have `lastArgs` which means `func` has been
      // debounced at least once.

      if (trailing && lastArgs) {
        return invokeFunc(time);
      }

      lastArgs = lastThis = undefined;
      return result;
    }

    function cancel() {
      if (timerId !== undefined) {
        clearTimeout(timerId);
      }

      lastInvokeTime = 0;
      lastArgs = lastCallTime = lastThis = timerId = undefined;
    }

    function flush() {
      return timerId === undefined ? result : trailingEdge(now());
    }

    function debounced() {
      var time = now(),
          isInvoking = shouldInvoke(time);
      lastArgs = arguments;
      lastThis = this;
      lastCallTime = time;

      if (isInvoking) {
        if (timerId === undefined) {
          return leadingEdge(lastCallTime);
        }

        if (maxing) {
          // Handle invocations in a tight loop.
          clearTimeout(timerId);
          timerId = setTimeout(timerExpired, wait);
          return invokeFunc(lastCallTime);
        }
      }

      if (timerId === undefined) {
        timerId = setTimeout(timerExpired, wait);
      }

      return result;
    }

    debounced.cancel = cancel;
    debounced.flush = flush;
    return debounced;
  }

  var debounce_1 = debounce$1;

  var debounce = debounce_1,
      isObject$7 = isObject_1;
  /** Error message constants. */

  var FUNC_ERROR_TEXT$1 = 'Expected a function';
  /**
   * Creates a throttled function that only invokes `func` at most once per
   * every `wait` milliseconds. The throttled function comes with a `cancel`
   * method to cancel delayed `func` invocations and a `flush` method to
   * immediately invoke them. Provide `options` to indicate whether `func`
   * should be invoked on the leading and/or trailing edge of the `wait`
   * timeout. The `func` is invoked with the last arguments provided to the
   * throttled function. Subsequent calls to the throttled function return the
   * result of the last `func` invocation.
   *
   * **Note:** If `leading` and `trailing` options are `true`, `func` is
   * invoked on the trailing edge of the timeout only if the throttled function
   * is invoked more than once during the `wait` timeout.
   *
   * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
   * until to the next tick, similar to `setTimeout` with a timeout of `0`.
   *
   * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
   * for details over the differences between `_.throttle` and `_.debounce`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to throttle.
   * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
   * @param {Object} [options={}] The options object.
   * @param {boolean} [options.leading=true]
   *  Specify invoking on the leading edge of the timeout.
   * @param {boolean} [options.trailing=true]
   *  Specify invoking on the trailing edge of the timeout.
   * @returns {Function} Returns the new throttled function.
   * @example
   *
   * // Avoid excessively updating the position while scrolling.
   * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
   *
   * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
   * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
   * jQuery(element).on('click', throttled);
   *
   * // Cancel the trailing throttled invocation.
   * jQuery(window).on('popstate', throttled.cancel);
   */

  function throttle(func, wait, options) {
    var leading = true,
        trailing = true;

    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT$1);
    }

    if (isObject$7(options)) {
      leading = 'leading' in options ? !!options.leading : leading;
      trailing = 'trailing' in options ? !!options.trailing : trailing;
    }

    return debounce(func, wait, {
      'leading': leading,
      'maxWait': wait,
      'trailing': trailing
    });
  }

  var throttle_1 = throttle;

  var isArray$9 = isArray_1,
      isSymbol$1 = isSymbol_1;
  /** Used to match property names within property paths. */

  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/;
  /**
   * Checks if `value` is a property name and not a property path.
   *
   * @private
   * @param {*} value The value to check.
   * @param {Object} [object] The object to query keys on.
   * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
   */

  function isKey$3(value, object) {
    if (isArray$9(value)) {
      return false;
    }

    var type = _typeof(value);

    if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol$1(value)) {
      return true;
    }

    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
  }

  var _isKey = isKey$3;

  var root$6 = _root;
  /** Used to detect overreaching core-js shims. */

  var coreJsData$1 = root$6['__core-js_shared__'];
  var _coreJsData = coreJsData$1;

  var coreJsData = _coreJsData;
  /** Used to detect methods masquerading as native. */

  var maskSrcKey = function () {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    return uid ? 'Symbol(src)_1.' + uid : '';
  }();
  /**
   * Checks if `func` has its source masked.
   *
   * @private
   * @param {Function} func The function to check.
   * @returns {boolean} Returns `true` if `func` is masked, else `false`.
   */


  function isMasked$1(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }

  var _isMasked = isMasked$1;

  /** Used for built-in method references. */
  var funcProto$2 = Function.prototype;
  /** Used to resolve the decompiled source of functions. */

  var funcToString$2 = funcProto$2.toString;
  /**
   * Converts `func` to its source code.
   *
   * @private
   * @param {Function} func The function to convert.
   * @returns {string} Returns the source code.
   */

  function toSource$2(func) {
    if (func != null) {
      try {
        return funcToString$2.call(func);
      } catch (e) {}

      try {
        return func + '';
      } catch (e) {}
    }

    return '';
  }

  var _toSource = toSource$2;

  var isFunction$2 = isFunction_1,
      isMasked = _isMasked,
      isObject$6 = isObject_1,
      toSource$1 = _toSource;
  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */

  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  /** Used to detect host constructors (Safari). */

  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  /** Used for built-in method references. */

  var funcProto$1 = Function.prototype,
      objectProto$e = Object.prototype;
  /** Used to resolve the decompiled source of functions. */

  var funcToString$1 = funcProto$1.toString;
  /** Used to check objects for own properties. */

  var hasOwnProperty$d = objectProto$e.hasOwnProperty;
  /** Used to detect if a method is native. */

  var reIsNative = RegExp('^' + funcToString$1.call(hasOwnProperty$d).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
  /**
   * The base implementation of `_.isNative` without bad shim checks.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a native function,
   *  else `false`.
   */

  function baseIsNative$1(value) {
    if (!isObject$6(value) || isMasked(value)) {
      return false;
    }

    var pattern = isFunction$2(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource$1(value));
  }

  var _baseIsNative = baseIsNative$1;

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */

  function getValue$1(object, key) {
    return object == null ? undefined : object[key];
  }

  var _getValue = getValue$1;

  var baseIsNative = _baseIsNative,
      getValue = _getValue;
  /**
   * Gets the native function at `key` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the method to get.
   * @returns {*} Returns the function if it's native, else `undefined`.
   */

  function getNative$7(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
  }

  var _getNative = getNative$7;

  var getNative$6 = _getNative;
  /* Built-in method references that are verified to be native. */

  var nativeCreate$4 = getNative$6(Object, 'create');
  var _nativeCreate = nativeCreate$4;

  var nativeCreate$3 = _nativeCreate;
  /**
   * Removes all key-value entries from the hash.
   *
   * @private
   * @name clear
   * @memberOf Hash
   */

  function hashClear$1() {
    this.__data__ = nativeCreate$3 ? nativeCreate$3(null) : {};
    this.size = 0;
  }

  var _hashClear = hashClear$1;

  /**
   * Removes `key` and its value from the hash.
   *
   * @private
   * @name delete
   * @memberOf Hash
   * @param {Object} hash The hash to modify.
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */

  function hashDelete$1(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }

  var _hashDelete = hashDelete$1;

  var nativeCreate$2 = _nativeCreate;
  /** Used to stand-in for `undefined` hash values. */

  var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';
  /** Used for built-in method references. */

  var objectProto$d = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$c = objectProto$d.hasOwnProperty;
  /**
   * Gets the hash value for `key`.
   *
   * @private
   * @name get
   * @memberOf Hash
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */

  function hashGet$1(key) {
    var data = this.__data__;

    if (nativeCreate$2) {
      var result = data[key];
      return result === HASH_UNDEFINED$2 ? undefined : result;
    }

    return hasOwnProperty$c.call(data, key) ? data[key] : undefined;
  }

  var _hashGet = hashGet$1;

  var nativeCreate$1 = _nativeCreate;
  /** Used for built-in method references. */

  var objectProto$c = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$b = objectProto$c.hasOwnProperty;
  /**
   * Checks if a hash value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Hash
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */

  function hashHas$1(key) {
    var data = this.__data__;
    return nativeCreate$1 ? data[key] !== undefined : hasOwnProperty$b.call(data, key);
  }

  var _hashHas = hashHas$1;

  var nativeCreate = _nativeCreate;
  /** Used to stand-in for `undefined` hash values. */

  var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';
  /**
   * Sets the hash `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Hash
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the hash instance.
   */

  function hashSet$1(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED$1 : value;
    return this;
  }

  var _hashSet = hashSet$1;

  var hashClear = _hashClear,
      hashDelete = _hashDelete,
      hashGet = _hashGet,
      hashHas = _hashHas,
      hashSet = _hashSet;
  /**
   * Creates a hash object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */

  function Hash$1(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  } // Add methods to `Hash`.


  Hash$1.prototype.clear = hashClear;
  Hash$1.prototype['delete'] = hashDelete;
  Hash$1.prototype.get = hashGet;
  Hash$1.prototype.has = hashHas;
  Hash$1.prototype.set = hashSet;
  var _Hash = Hash$1;

  /**
   * Removes all key-value entries from the list cache.
   *
   * @private
   * @name clear
   * @memberOf ListCache
   */

  function listCacheClear$1() {
    this.__data__ = [];
    this.size = 0;
  }

  var _listCacheClear = listCacheClear$1;

  /**
   * Performs a
   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * comparison between two values to determine if they are equivalent.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.eq(object, object);
   * // => true
   *
   * _.eq(object, other);
   * // => false
   *
   * _.eq('a', 'a');
   * // => true
   *
   * _.eq('a', Object('a'));
   * // => false
   *
   * _.eq(NaN, NaN);
   * // => true
   */

  function eq$4(value, other) {
    return value === other || value !== value && other !== other;
  }

  var eq_1 = eq$4;

  var eq$3 = eq_1;
  /**
   * Gets the index at which the `key` is found in `array` of key-value pairs.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} key The key to search for.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */

  function assocIndexOf$4(array, key) {
    var length = array.length;

    while (length--) {
      if (eq$3(array[length][0], key)) {
        return length;
      }
    }

    return -1;
  }

  var _assocIndexOf = assocIndexOf$4;

  var assocIndexOf$3 = _assocIndexOf;
  /** Used for built-in method references. */

  var arrayProto = Array.prototype;
  /** Built-in value references. */

  var splice = arrayProto.splice;
  /**
   * Removes `key` and its value from the list cache.
   *
   * @private
   * @name delete
   * @memberOf ListCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */

  function listCacheDelete$1(key) {
    var data = this.__data__,
        index = assocIndexOf$3(data, key);

    if (index < 0) {
      return false;
    }

    var lastIndex = data.length - 1;

    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }

    --this.size;
    return true;
  }

  var _listCacheDelete = listCacheDelete$1;

  var assocIndexOf$2 = _assocIndexOf;
  /**
   * Gets the list cache value for `key`.
   *
   * @private
   * @name get
   * @memberOf ListCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */

  function listCacheGet$1(key) {
    var data = this.__data__,
        index = assocIndexOf$2(data, key);
    return index < 0 ? undefined : data[index][1];
  }

  var _listCacheGet = listCacheGet$1;

  var assocIndexOf$1 = _assocIndexOf;
  /**
   * Checks if a list cache value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf ListCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */

  function listCacheHas$1(key) {
    return assocIndexOf$1(this.__data__, key) > -1;
  }

  var _listCacheHas = listCacheHas$1;

  var assocIndexOf = _assocIndexOf;
  /**
   * Sets the list cache `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf ListCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the list cache instance.
   */

  function listCacheSet$1(key, value) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }

    return this;
  }

  var _listCacheSet = listCacheSet$1;

  var listCacheClear = _listCacheClear,
      listCacheDelete = _listCacheDelete,
      listCacheGet = _listCacheGet,
      listCacheHas = _listCacheHas,
      listCacheSet = _listCacheSet;
  /**
   * Creates an list cache object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */

  function ListCache$4(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  } // Add methods to `ListCache`.


  ListCache$4.prototype.clear = listCacheClear;
  ListCache$4.prototype['delete'] = listCacheDelete;
  ListCache$4.prototype.get = listCacheGet;
  ListCache$4.prototype.has = listCacheHas;
  ListCache$4.prototype.set = listCacheSet;
  var _ListCache = ListCache$4;

  var getNative$5 = _getNative,
      root$5 = _root;
  /* Built-in method references that are verified to be native. */

  var Map$4 = getNative$5(root$5, 'Map');
  var _Map = Map$4;

  var Hash = _Hash,
      ListCache$3 = _ListCache,
      Map$3 = _Map;
  /**
   * Removes all key-value entries from the map.
   *
   * @private
   * @name clear
   * @memberOf MapCache
   */

  function mapCacheClear$1() {
    this.size = 0;
    this.__data__ = {
      'hash': new Hash(),
      'map': new (Map$3 || ListCache$3)(),
      'string': new Hash()
    };
  }

  var _mapCacheClear = mapCacheClear$1;

  function isKeyable$1(value) {
    var type = _typeof(value);

    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
  }

  var _isKeyable = isKeyable$1;

  var isKeyable = _isKeyable;
  /**
   * Gets the data for `map`.
   *
   * @private
   * @param {Object} map The map to query.
   * @param {string} key The reference key.
   * @returns {*} Returns the map data.
   */

  function getMapData$4(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
  }

  var _getMapData = getMapData$4;

  var getMapData$3 = _getMapData;
  /**
   * Removes `key` and its value from the map.
   *
   * @private
   * @name delete
   * @memberOf MapCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */

  function mapCacheDelete$1(key) {
    var result = getMapData$3(this, key)['delete'](key);
    this.size -= result ? 1 : 0;
    return result;
  }

  var _mapCacheDelete = mapCacheDelete$1;

  var getMapData$2 = _getMapData;
  /**
   * Gets the map value for `key`.
   *
   * @private
   * @name get
   * @memberOf MapCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */

  function mapCacheGet$1(key) {
    return getMapData$2(this, key).get(key);
  }

  var _mapCacheGet = mapCacheGet$1;

  var getMapData$1 = _getMapData;
  /**
   * Checks if a map value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf MapCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */

  function mapCacheHas$1(key) {
    return getMapData$1(this, key).has(key);
  }

  var _mapCacheHas = mapCacheHas$1;

  var getMapData = _getMapData;
  /**
   * Sets the map `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf MapCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the map cache instance.
   */

  function mapCacheSet$1(key, value) {
    var data = getMapData(this, key),
        size = data.size;
    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
  }

  var _mapCacheSet = mapCacheSet$1;

  var mapCacheClear = _mapCacheClear,
      mapCacheDelete = _mapCacheDelete,
      mapCacheGet = _mapCacheGet,
      mapCacheHas = _mapCacheHas,
      mapCacheSet = _mapCacheSet;
  /**
   * Creates a map cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */

  function MapCache$3(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  } // Add methods to `MapCache`.


  MapCache$3.prototype.clear = mapCacheClear;
  MapCache$3.prototype['delete'] = mapCacheDelete;
  MapCache$3.prototype.get = mapCacheGet;
  MapCache$3.prototype.has = mapCacheHas;
  MapCache$3.prototype.set = mapCacheSet;
  var _MapCache = MapCache$3;

  var MapCache$2 = _MapCache;
  /** Error message constants. */

  var FUNC_ERROR_TEXT = 'Expected a function';
  /**
   * Creates a function that memoizes the result of `func`. If `resolver` is
   * provided, it determines the cache key for storing the result based on the
   * arguments provided to the memoized function. By default, the first argument
   * provided to the memoized function is used as the map cache key. The `func`
   * is invoked with the `this` binding of the memoized function.
   *
   * **Note:** The cache is exposed as the `cache` property on the memoized
   * function. Its creation may be customized by replacing the `_.memoize.Cache`
   * constructor with one whose instances implement the
   * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
   * method interface of `clear`, `delete`, `get`, `has`, and `set`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to have its output memoized.
   * @param {Function} [resolver] The function to resolve the cache key.
   * @returns {Function} Returns the new memoized function.
   * @example
   *
   * var object = { 'a': 1, 'b': 2 };
   * var other = { 'c': 3, 'd': 4 };
   *
   * var values = _.memoize(_.values);
   * values(object);
   * // => [1, 2]
   *
   * values(other);
   * // => [3, 4]
   *
   * object.a = 2;
   * values(object);
   * // => [1, 2]
   *
   * // Modify the result cache.
   * values.cache.set(object, ['a', 'b']);
   * values(object);
   * // => ['a', 'b']
   *
   * // Replace `_.memoize.Cache`.
   * _.memoize.Cache = WeakMap;
   */

  function memoize$1(func, resolver) {
    if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }

    var memoized = function memoized() {
      var args = arguments,
          key = resolver ? resolver.apply(this, args) : args[0],
          cache = memoized.cache;

      if (cache.has(key)) {
        return cache.get(key);
      }

      var result = func.apply(this, args);
      memoized.cache = cache.set(key, result) || cache;
      return result;
    };

    memoized.cache = new (memoize$1.Cache || MapCache$2)();
    return memoized;
  } // Expose `MapCache`.


  memoize$1.Cache = MapCache$2;
  var memoize_1 = memoize$1;

  var memoize = memoize_1;
  /** Used as the maximum memoize cache size. */

  var MAX_MEMOIZE_SIZE = 500;
  /**
   * A specialized version of `_.memoize` which clears the memoized function's
   * cache when it exceeds `MAX_MEMOIZE_SIZE`.
   *
   * @private
   * @param {Function} func The function to have its output memoized.
   * @returns {Function} Returns the new memoized function.
   */

  function memoizeCapped$1(func) {
    var result = memoize(func, function (key) {
      if (cache.size === MAX_MEMOIZE_SIZE) {
        cache.clear();
      }

      return key;
    });
    var cache = result.cache;
    return result;
  }

  var _memoizeCapped = memoizeCapped$1;

  var memoizeCapped = _memoizeCapped;
  /** Used to match property names within property paths. */

  var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
  /** Used to match backslashes in property paths. */

  var reEscapeChar = /\\(\\)?/g;
  /**
   * Converts `string` to a property path array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the property path array.
   */

  var stringToPath$1 = memoizeCapped(function (string) {
    var result = [];

    if (string.charCodeAt(0) === 46
    /* . */
    ) {
      result.push('');
    }

    string.replace(rePropName, function (match, number, quote, subString) {
      result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
    });
    return result;
  });
  var _stringToPath = stringToPath$1;

  var isArray$8 = isArray_1,
      isKey$2 = _isKey,
      stringToPath = _stringToPath,
      toString$2 = toString_1;
  /**
   * Casts `value` to a path array if it's not one.
   *
   * @private
   * @param {*} value The value to inspect.
   * @param {Object} [object] The object to query keys on.
   * @returns {Array} Returns the cast property path array.
   */

  function castPath$6(value, object) {
    if (isArray$8(value)) {
      return value;
    }

    return isKey$2(value, object) ? [value] : stringToPath(toString$2(value));
  }

  var _castPath = castPath$6;

  var isSymbol = isSymbol_1;
  /** Used as references for various `Number` constants. */

  var INFINITY$1 = 1 / 0;
  /**
   * Converts `value` to a string key if it's not a string or symbol.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {string|symbol} Returns the key.
   */

  function toKey$6(value) {
    if (typeof value == 'string' || isSymbol(value)) {
      return value;
    }

    var result = value + '';
    return result == '0' && 1 / value == -INFINITY$1 ? '-0' : result;
  }

  var _toKey = toKey$6;

  var castPath$5 = _castPath,
      toKey$5 = _toKey;
  /**
   * The base implementation of `_.get` without support for default values.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @returns {*} Returns the resolved value.
   */

  function baseGet$4(object, path) {
    path = castPath$5(path, object);
    var index = 0,
        length = path.length;

    while (object != null && index < length) {
      object = object[toKey$5(path[index++])];
    }

    return index && index == length ? object : undefined;
  }

  var _baseGet = baseGet$4;

  var baseGet$3 = _baseGet;
  /**
   * Gets the value at `path` of `object`. If the resolved value is
   * `undefined`, the `defaultValue` is returned in its place.
   *
   * @static
   * @memberOf _
   * @since 3.7.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @param {*} [defaultValue] The value returned for `undefined` resolved values.
   * @returns {*} Returns the resolved value.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c': 3 } }] };
   *
   * _.get(object, 'a[0].b.c');
   * // => 3
   *
   * _.get(object, ['a', '0', 'b', 'c']);
   * // => 3
   *
   * _.get(object, 'a.b.c', 'default');
   * // => 'default'
   */

  function get$1(object, path, defaultValue) {
    var result = object == null ? undefined : baseGet$3(object, path);
    return result === undefined ? defaultValue : result;
  }

  var get_1 = get$1;

  var lodash = {exports: {}};

  (function(module,exports){(function(){/** Used as a safe reference for `undefined` in pre-ES5 environments. */var undefined$1;/** Used as the semantic version number. */var VERSION='4.17.21';/** Used as the size to enable large array optimizations. */var LARGE_ARRAY_SIZE=200;/** Error message constants. */var CORE_ERROR_TEXT='Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',FUNC_ERROR_TEXT='Expected a function',INVALID_TEMPL_VAR_ERROR_TEXT='Invalid `variable` option passed into `_.template`';/** Used to stand-in for `undefined` hash values. */var HASH_UNDEFINED='__lodash_hash_undefined__';/** Used as the maximum memoize cache size. */var MAX_MEMOIZE_SIZE=500;/** Used as the internal argument placeholder. */var PLACEHOLDER='__lodash_placeholder__';/** Used to compose bitmasks for cloning. */var CLONE_DEEP_FLAG=1,CLONE_FLAT_FLAG=2,CLONE_SYMBOLS_FLAG=4;/** Used to compose bitmasks for value comparisons. */var COMPARE_PARTIAL_FLAG=1,COMPARE_UNORDERED_FLAG=2;/** Used to compose bitmasks for function metadata. */var WRAP_BIND_FLAG=1,WRAP_BIND_KEY_FLAG=2,WRAP_CURRY_BOUND_FLAG=4,WRAP_CURRY_FLAG=8,WRAP_CURRY_RIGHT_FLAG=16,WRAP_PARTIAL_FLAG=32,WRAP_PARTIAL_RIGHT_FLAG=64,WRAP_ARY_FLAG=128,WRAP_REARG_FLAG=256,WRAP_FLIP_FLAG=512;/** Used as default options for `_.truncate`. */var DEFAULT_TRUNC_LENGTH=30,DEFAULT_TRUNC_OMISSION='...';/** Used to detect hot functions by number of calls within a span of milliseconds. */var HOT_COUNT=800,HOT_SPAN=16;/** Used to indicate the type of lazy iteratees. */var LAZY_FILTER_FLAG=1,LAZY_MAP_FLAG=2,LAZY_WHILE_FLAG=3;/** Used as references for various `Number` constants. */var INFINITY=1/0,MAX_SAFE_INTEGER=9007199254740991,MAX_INTEGER=1.7976931348623157e+308,NAN=0/0;/** Used as references for the maximum length and index of an array. */var MAX_ARRAY_LENGTH=4294967295,MAX_ARRAY_INDEX=MAX_ARRAY_LENGTH-1,HALF_MAX_ARRAY_LENGTH=MAX_ARRAY_LENGTH>>>1;/** Used to associate wrap methods with their bit flags. */var wrapFlags=[['ary',WRAP_ARY_FLAG],['bind',WRAP_BIND_FLAG],['bindKey',WRAP_BIND_KEY_FLAG],['curry',WRAP_CURRY_FLAG],['curryRight',WRAP_CURRY_RIGHT_FLAG],['flip',WRAP_FLIP_FLAG],['partial',WRAP_PARTIAL_FLAG],['partialRight',WRAP_PARTIAL_RIGHT_FLAG],['rearg',WRAP_REARG_FLAG]];/** `Object#toString` result references. */var argsTag='[object Arguments]',arrayTag='[object Array]',asyncTag='[object AsyncFunction]',boolTag='[object Boolean]',dateTag='[object Date]',domExcTag='[object DOMException]',errorTag='[object Error]',funcTag='[object Function]',genTag='[object GeneratorFunction]',mapTag='[object Map]',numberTag='[object Number]',nullTag='[object Null]',objectTag='[object Object]',promiseTag='[object Promise]',proxyTag='[object Proxy]',regexpTag='[object RegExp]',setTag='[object Set]',stringTag='[object String]',symbolTag='[object Symbol]',undefinedTag='[object Undefined]',weakMapTag='[object WeakMap]',weakSetTag='[object WeakSet]';var arrayBufferTag='[object ArrayBuffer]',dataViewTag='[object DataView]',float32Tag='[object Float32Array]',float64Tag='[object Float64Array]',int8Tag='[object Int8Array]',int16Tag='[object Int16Array]',int32Tag='[object Int32Array]',uint8Tag='[object Uint8Array]',uint8ClampedTag='[object Uint8ClampedArray]',uint16Tag='[object Uint16Array]',uint32Tag='[object Uint32Array]';/** Used to match empty string literals in compiled template source. */var reEmptyStringLeading=/\b__p \+= '';/g,reEmptyStringMiddle=/\b(__p \+=) '' \+/g,reEmptyStringTrailing=/(__e\(.*?\)|\b__t\)) \+\n'';/g;/** Used to match HTML entities and HTML characters. */var reEscapedHtml=/&(?:amp|lt|gt|quot|#39);/g,reUnescapedHtml=/[&<>"']/g,reHasEscapedHtml=RegExp(reEscapedHtml.source),reHasUnescapedHtml=RegExp(reUnescapedHtml.source);/** Used to match template delimiters. */var reEscape=/<%-([\s\S]+?)%>/g,reEvaluate=/<%([\s\S]+?)%>/g,reInterpolate=/<%=([\s\S]+?)%>/g;/** Used to match property names within property paths. */var reIsDeepProp=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,reIsPlainProp=/^\w*$/,rePropName=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;/**
     * Used to match `RegExp`
     * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
     */var reRegExpChar=/[\\^$.*+?()[\]{}|]/g,reHasRegExpChar=RegExp(reRegExpChar.source);/** Used to match leading whitespace. */var reTrimStart=/^\s+/;/** Used to match a single whitespace character. */var reWhitespace=/\s/;/** Used to match wrap detail comments. */var reWrapComment=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,reWrapDetails=/\{\n\/\* \[wrapped with (.+)\] \*/,reSplitDetails=/,? & /;/** Used to match words composed of alphanumeric characters. */var reAsciiWord=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;/**
     * Used to validate the `validate` option in `_.template` variable.
     *
     * Forbids characters which could potentially change the meaning of the function argument definition:
     * - "()," (modification of function parameters)
     * - "=" (default value)
     * - "[]{}" (destructuring of function parameters)
     * - "/" (beginning of a comment)
     * - whitespace
     */var reForbiddenIdentifierChars=/[()=,{}\[\]\/\s]/;/** Used to match backslashes in property paths. */var reEscapeChar=/\\(\\)?/g;/**
     * Used to match
     * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
     */var reEsTemplate=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;/** Used to match `RegExp` flags from their coerced string values. */var reFlags=/\w*$/;/** Used to detect bad signed hexadecimal string values. */var reIsBadHex=/^[-+]0x[0-9a-f]+$/i;/** Used to detect binary string values. */var reIsBinary=/^0b[01]+$/i;/** Used to detect host constructors (Safari). */var reIsHostCtor=/^\[object .+?Constructor\]$/;/** Used to detect octal string values. */var reIsOctal=/^0o[0-7]+$/i;/** Used to detect unsigned integer values. */var reIsUint=/^(?:0|[1-9]\d*)$/;/** Used to match Latin Unicode letters (excluding mathematical operators). */var reLatin=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;/** Used to ensure capturing order of template delimiters. */var reNoMatch=/($^)/;/** Used to match unescaped characters in compiled string literals. */var reUnescapedString=/['\n\r\u2028\u2029\\]/g;/** Used to compose unicode character classes. */var rsAstralRange="\\ud800-\\udfff",rsComboMarksRange="\\u0300-\\u036f",reComboHalfMarksRange="\\ufe20-\\ufe2f",rsComboSymbolsRange="\\u20d0-\\u20ff",rsComboRange=rsComboMarksRange+reComboHalfMarksRange+rsComboSymbolsRange,rsDingbatRange="\\u2700-\\u27bf",rsLowerRange='a-z\\xdf-\\xf6\\xf8-\\xff',rsMathOpRange='\\xac\\xb1\\xd7\\xf7',rsNonCharRange='\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',rsPunctuationRange="\\u2000-\\u206f",rsSpaceRange=" \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",rsUpperRange='A-Z\\xc0-\\xd6\\xd8-\\xde',rsVarRange="\\ufe0e\\ufe0f",rsBreakRange=rsMathOpRange+rsNonCharRange+rsPunctuationRange+rsSpaceRange;/** Used to compose unicode capture groups. */var rsApos="['\u2019]",rsAstral='['+rsAstralRange+']',rsBreak='['+rsBreakRange+']',rsCombo='['+rsComboRange+']',rsDigits='\\d+',rsDingbat='['+rsDingbatRange+']',rsLower='['+rsLowerRange+']',rsMisc='[^'+rsAstralRange+rsBreakRange+rsDigits+rsDingbatRange+rsLowerRange+rsUpperRange+']',rsFitz="\\ud83c[\\udffb-\\udfff]",rsModifier='(?:'+rsCombo+'|'+rsFitz+')',rsNonAstral='[^'+rsAstralRange+']',rsRegional="(?:\\ud83c[\\udde6-\\uddff]){2}",rsSurrPair="[\\ud800-\\udbff][\\udc00-\\udfff]",rsUpper='['+rsUpperRange+']',rsZWJ="\\u200d";/** Used to compose unicode regexes. */var rsMiscLower='(?:'+rsLower+'|'+rsMisc+')',rsMiscUpper='(?:'+rsUpper+'|'+rsMisc+')',rsOptContrLower='(?:'+rsApos+'(?:d|ll|m|re|s|t|ve))?',rsOptContrUpper='(?:'+rsApos+'(?:D|LL|M|RE|S|T|VE))?',reOptMod=rsModifier+'?',rsOptVar='['+rsVarRange+']?',rsOptJoin='(?:'+rsZWJ+'(?:'+[rsNonAstral,rsRegional,rsSurrPair].join('|')+')'+rsOptVar+reOptMod+')*',rsOrdLower='\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',rsOrdUpper='\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',rsSeq=rsOptVar+reOptMod+rsOptJoin,rsEmoji='(?:'+[rsDingbat,rsRegional,rsSurrPair].join('|')+')'+rsSeq,rsSymbol='(?:'+[rsNonAstral+rsCombo+'?',rsCombo,rsRegional,rsSurrPair,rsAstral].join('|')+')';/** Used to match apostrophes. */var reApos=RegExp(rsApos,'g');/**
     * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
     * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
     */var reComboMark=RegExp(rsCombo,'g');/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */var reUnicode=RegExp(rsFitz+'(?='+rsFitz+')|'+rsSymbol+rsSeq,'g');/** Used to match complex or compound words. */var reUnicodeWord=RegExp([rsUpper+'?'+rsLower+'+'+rsOptContrLower+'(?='+[rsBreak,rsUpper,'$'].join('|')+')',rsMiscUpper+'+'+rsOptContrUpper+'(?='+[rsBreak,rsUpper+rsMiscLower,'$'].join('|')+')',rsUpper+'?'+rsMiscLower+'+'+rsOptContrLower,rsUpper+'+'+rsOptContrUpper,rsOrdUpper,rsOrdLower,rsDigits,rsEmoji].join('|'),'g');/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */var reHasUnicode=RegExp('['+rsZWJ+rsAstralRange+rsComboRange+rsVarRange+']');/** Used to detect strings that need a more robust regexp to match words. */var reHasUnicodeWord=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;/** Used to assign default `context` object properties. */var contextProps=['Array','Buffer','DataView','Date','Error','Float32Array','Float64Array','Function','Int8Array','Int16Array','Int32Array','Map','Math','Object','Promise','RegExp','Set','String','Symbol','TypeError','Uint8Array','Uint8ClampedArray','Uint16Array','Uint32Array','WeakMap','_','clearTimeout','isFinite','parseInt','setTimeout'];/** Used to make template sourceURLs easier to identify. */var templateCounter=-1;/** Used to identify `toStringTag` values of typed arrays. */var typedArrayTags={};typedArrayTags[float32Tag]=typedArrayTags[float64Tag]=typedArrayTags[int8Tag]=typedArrayTags[int16Tag]=typedArrayTags[int32Tag]=typedArrayTags[uint8Tag]=typedArrayTags[uint8ClampedTag]=typedArrayTags[uint16Tag]=typedArrayTags[uint32Tag]=true;typedArrayTags[argsTag]=typedArrayTags[arrayTag]=typedArrayTags[arrayBufferTag]=typedArrayTags[boolTag]=typedArrayTags[dataViewTag]=typedArrayTags[dateTag]=typedArrayTags[errorTag]=typedArrayTags[funcTag]=typedArrayTags[mapTag]=typedArrayTags[numberTag]=typedArrayTags[objectTag]=typedArrayTags[regexpTag]=typedArrayTags[setTag]=typedArrayTags[stringTag]=typedArrayTags[weakMapTag]=false;/** Used to identify `toStringTag` values supported by `_.clone`. */var cloneableTags={};cloneableTags[argsTag]=cloneableTags[arrayTag]=cloneableTags[arrayBufferTag]=cloneableTags[dataViewTag]=cloneableTags[boolTag]=cloneableTags[dateTag]=cloneableTags[float32Tag]=cloneableTags[float64Tag]=cloneableTags[int8Tag]=cloneableTags[int16Tag]=cloneableTags[int32Tag]=cloneableTags[mapTag]=cloneableTags[numberTag]=cloneableTags[objectTag]=cloneableTags[regexpTag]=cloneableTags[setTag]=cloneableTags[stringTag]=cloneableTags[symbolTag]=cloneableTags[uint8Tag]=cloneableTags[uint8ClampedTag]=cloneableTags[uint16Tag]=cloneableTags[uint32Tag]=true;cloneableTags[errorTag]=cloneableTags[funcTag]=cloneableTags[weakMapTag]=false;/** Used to map Latin Unicode letters to basic Latin letters. */var deburredLetters={// Latin-1 Supplement block.
  '\xc0':'A','\xc1':'A','\xc2':'A','\xc3':'A','\xc4':'A','\xc5':'A','\xe0':'a','\xe1':'a','\xe2':'a','\xe3':'a','\xe4':'a','\xe5':'a','\xc7':'C','\xe7':'c','\xd0':'D','\xf0':'d','\xc8':'E','\xc9':'E','\xca':'E','\xcb':'E','\xe8':'e','\xe9':'e','\xea':'e','\xeb':'e','\xcc':'I','\xcd':'I','\xce':'I','\xcf':'I','\xec':'i','\xed':'i','\xee':'i','\xef':'i','\xd1':'N','\xf1':'n','\xd2':'O','\xd3':'O','\xd4':'O','\xd5':'O','\xd6':'O','\xd8':'O','\xf2':'o','\xf3':'o','\xf4':'o','\xf5':'o','\xf6':'o','\xf8':'o','\xd9':'U','\xda':'U','\xdb':'U','\xdc':'U','\xf9':'u','\xfa':'u','\xfb':'u','\xfc':'u','\xdd':'Y','\xfd':'y','\xff':'y','\xc6':'Ae','\xe6':'ae','\xde':'Th','\xfe':'th','\xdf':'ss',// Latin Extended-A block.
  "\u0100":'A',"\u0102":'A',"\u0104":'A',"\u0101":'a',"\u0103":'a',"\u0105":'a',"\u0106":'C',"\u0108":'C',"\u010A":'C',"\u010C":'C',"\u0107":'c',"\u0109":'c',"\u010B":'c',"\u010D":'c',"\u010E":'D',"\u0110":'D',"\u010F":'d',"\u0111":'d',"\u0112":'E',"\u0114":'E',"\u0116":'E',"\u0118":'E',"\u011A":'E',"\u0113":'e',"\u0115":'e',"\u0117":'e',"\u0119":'e',"\u011B":'e',"\u011C":'G',"\u011E":'G',"\u0120":'G',"\u0122":'G',"\u011D":'g',"\u011F":'g',"\u0121":'g',"\u0123":'g',"\u0124":'H',"\u0126":'H',"\u0125":'h',"\u0127":'h',"\u0128":'I',"\u012A":'I',"\u012C":'I',"\u012E":'I',"\u0130":'I',"\u0129":'i',"\u012B":'i',"\u012D":'i',"\u012F":'i',"\u0131":'i',"\u0134":'J',"\u0135":'j',"\u0136":'K',"\u0137":'k',"\u0138":'k',"\u0139":'L',"\u013B":'L',"\u013D":'L',"\u013F":'L',"\u0141":'L',"\u013A":'l',"\u013C":'l',"\u013E":'l',"\u0140":'l',"\u0142":'l',"\u0143":'N',"\u0145":'N',"\u0147":'N',"\u014A":'N',"\u0144":'n',"\u0146":'n',"\u0148":'n',"\u014B":'n',"\u014C":'O',"\u014E":'O',"\u0150":'O',"\u014D":'o',"\u014F":'o',"\u0151":'o',"\u0154":'R',"\u0156":'R',"\u0158":'R',"\u0155":'r',"\u0157":'r',"\u0159":'r',"\u015A":'S',"\u015C":'S',"\u015E":'S',"\u0160":'S',"\u015B":'s',"\u015D":'s',"\u015F":'s',"\u0161":'s',"\u0162":'T',"\u0164":'T',"\u0166":'T',"\u0163":'t',"\u0165":'t',"\u0167":'t',"\u0168":'U',"\u016A":'U',"\u016C":'U',"\u016E":'U',"\u0170":'U',"\u0172":'U',"\u0169":'u',"\u016B":'u',"\u016D":'u',"\u016F":'u',"\u0171":'u',"\u0173":'u',"\u0174":'W',"\u0175":'w',"\u0176":'Y',"\u0177":'y',"\u0178":'Y',"\u0179":'Z',"\u017B":'Z',"\u017D":'Z',"\u017A":'z',"\u017C":'z',"\u017E":'z',"\u0132":'IJ',"\u0133":'ij',"\u0152":'Oe',"\u0153":'oe',"\u0149":"'n","\u017F":'s'};/** Used to map characters to HTML entities. */var htmlEscapes={'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'};/** Used to map HTML entities to characters. */var htmlUnescapes={'&amp;':'&','&lt;':'<','&gt;':'>','&quot;':'"','&#39;':"'"};/** Used to escape characters for inclusion in compiled string literals. */var stringEscapes={'\\':'\\',"'":"'",'\n':'n','\r':'r',"\u2028":'u2028',"\u2029":'u2029'};/** Built-in method references without a dependency on `root`. */var freeParseFloat=parseFloat,freeParseInt=parseInt;/** Detect free variable `global` from Node.js. */var freeGlobal=_typeof(commonjsGlobal)=='object'&&commonjsGlobal&&commonjsGlobal.Object===Object&&commonjsGlobal;/** Detect free variable `self`. */var freeSelf=(typeof self==="undefined"?"undefined":_typeof(self))=='object'&&self&&self.Object===Object&&self;/** Used as a reference to the global object. */var root=freeGlobal||freeSelf||Function('return this')();/** Detect free variable `exports`. */var freeExports=exports&&!exports.nodeType&&exports;/** Detect free variable `module`. */var freeModule=freeExports&&'object'=='object'&&module&&!module.nodeType&&module;/** Detect the popular CommonJS extension `module.exports`. */var moduleExports=freeModule&&freeModule.exports===freeExports;/** Detect free variable `process` from Node.js. */var freeProcess=moduleExports&&freeGlobal.process;/** Used to access faster Node.js helpers. */var nodeUtil=function(){try{// Use `util.types` for Node.js 10+.
  var types=freeModule&&freeModule.require&&freeModule.require('util').types;if(types){return types;}// Legacy `process.binding('util')` for Node.js < 10.
  return freeProcess&&freeProcess.binding&&freeProcess.binding('util');}catch(e){}}();/* Node.js helper references. */var nodeIsArrayBuffer=nodeUtil&&nodeUtil.isArrayBuffer,nodeIsDate=nodeUtil&&nodeUtil.isDate,nodeIsMap=nodeUtil&&nodeUtil.isMap,nodeIsRegExp=nodeUtil&&nodeUtil.isRegExp,nodeIsSet=nodeUtil&&nodeUtil.isSet,nodeIsTypedArray=nodeUtil&&nodeUtil.isTypedArray;/*--------------------------------------------------------------------------*/ /**
     * A faster alternative to `Function#apply`, this function invokes `func`
     * with the `this` binding of `thisArg` and the arguments of `args`.
     *
     * @private
     * @param {Function} func The function to invoke.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} args The arguments to invoke `func` with.
     * @returns {*} Returns the result of `func`.
     */function apply(func,thisArg,args){switch(args.length){case 0:return func.call(thisArg);case 1:return func.call(thisArg,args[0]);case 2:return func.call(thisArg,args[0],args[1]);case 3:return func.call(thisArg,args[0],args[1],args[2]);}return func.apply(thisArg,args);}/**
     * A specialized version of `baseAggregator` for arrays.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */function arrayAggregator(array,setter,iteratee,accumulator){var index=-1,length=array==null?0:array.length;while(++index<length){var value=array[index];setter(accumulator,value,iteratee(value),array);}return accumulator;}/**
     * A specialized version of `_.forEach` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */function arrayEach(array,iteratee){var index=-1,length=array==null?0:array.length;while(++index<length){if(iteratee(array[index],index,array)===false){break;}}return array;}/**
     * A specialized version of `_.forEachRight` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */function arrayEachRight(array,iteratee){var length=array==null?0:array.length;while(length--){if(iteratee(array[length],length,array)===false){break;}}return array;}/**
     * A specialized version of `_.every` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     */function arrayEvery(array,predicate){var index=-1,length=array==null?0:array.length;while(++index<length){if(!predicate(array[index],index,array)){return false;}}return true;}/**
     * A specialized version of `_.filter` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */function arrayFilter(array,predicate){var index=-1,length=array==null?0:array.length,resIndex=0,result=[];while(++index<length){var value=array[index];if(predicate(value,index,array)){result[resIndex++]=value;}}return result;}/**
     * A specialized version of `_.includes` for arrays without support for
     * specifying an index to search from.
     *
     * @private
     * @param {Array} [array] The array to inspect.
     * @param {*} target The value to search for.
     * @returns {boolean} Returns `true` if `target` is found, else `false`.
     */function arrayIncludes(array,value){var length=array==null?0:array.length;return !!length&&baseIndexOf(array,value,0)>-1;}/**
     * This function is like `arrayIncludes` except that it accepts a comparator.
     *
     * @private
     * @param {Array} [array] The array to inspect.
     * @param {*} target The value to search for.
     * @param {Function} comparator The comparator invoked per element.
     * @returns {boolean} Returns `true` if `target` is found, else `false`.
     */function arrayIncludesWith(array,value,comparator){var index=-1,length=array==null?0:array.length;while(++index<length){if(comparator(value,array[index])){return true;}}return false;}/**
     * A specialized version of `_.map` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */function arrayMap(array,iteratee){var index=-1,length=array==null?0:array.length,result=Array(length);while(++index<length){result[index]=iteratee(array[index],index,array);}return result;}/**
     * Appends the elements of `values` to `array`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to append.
     * @returns {Array} Returns `array`.
     */function arrayPush(array,values){var index=-1,length=values.length,offset=array.length;while(++index<length){array[offset+index]=values[index];}return array;}/**
     * A specialized version of `_.reduce` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initAccum] Specify using the first element of `array` as
     *  the initial value.
     * @returns {*} Returns the accumulated value.
     */function arrayReduce(array,iteratee,accumulator,initAccum){var index=-1,length=array==null?0:array.length;if(initAccum&&length){accumulator=array[++index];}while(++index<length){accumulator=iteratee(accumulator,array[index],index,array);}return accumulator;}/**
     * A specialized version of `_.reduceRight` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initAccum] Specify using the last element of `array` as
     *  the initial value.
     * @returns {*} Returns the accumulated value.
     */function arrayReduceRight(array,iteratee,accumulator,initAccum){var length=array==null?0:array.length;if(initAccum&&length){accumulator=array[--length];}while(length--){accumulator=iteratee(accumulator,array[length],length,array);}return accumulator;}/**
     * A specialized version of `_.some` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */function arraySome(array,predicate){var index=-1,length=array==null?0:array.length;while(++index<length){if(predicate(array[index],index,array)){return true;}}return false;}/**
     * Gets the size of an ASCII `string`.
     *
     * @private
     * @param {string} string The string inspect.
     * @returns {number} Returns the string size.
     */var asciiSize=baseProperty('length');/**
     * Converts an ASCII `string` to an array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the converted array.
     */function asciiToArray(string){return string.split('');}/**
     * Splits an ASCII `string` into an array of its words.
     *
     * @private
     * @param {string} The string to inspect.
     * @returns {Array} Returns the words of `string`.
     */function asciiWords(string){return string.match(reAsciiWord)||[];}/**
     * The base implementation of methods like `_.findKey` and `_.findLastKey`,
     * without support for iteratee shorthands, which iterates over `collection`
     * using `eachFunc`.
     *
     * @private
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} predicate The function invoked per iteration.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @returns {*} Returns the found element or its key, else `undefined`.
     */function baseFindKey(collection,predicate,eachFunc){var result;eachFunc(collection,function(value,key,collection){if(predicate(value,key,collection)){result=key;return false;}});return result;}/**
     * The base implementation of `_.findIndex` and `_.findLastIndex` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} predicate The function invoked per iteration.
     * @param {number} fromIndex The index to search from.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */function baseFindIndex(array,predicate,fromIndex,fromRight){var length=array.length,index=fromIndex+(fromRight?1:-1);while(fromRight?index--:++index<length){if(predicate(array[index],index,array)){return index;}}return -1;}/**
     * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */function baseIndexOf(array,value,fromIndex){return value===value?strictIndexOf(array,value,fromIndex):baseFindIndex(array,baseIsNaN,fromIndex);}/**
     * This function is like `baseIndexOf` except that it accepts a comparator.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @param {Function} comparator The comparator invoked per element.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */function baseIndexOfWith(array,value,fromIndex,comparator){var index=fromIndex-1,length=array.length;while(++index<length){if(comparator(array[index],value)){return index;}}return -1;}/**
     * The base implementation of `_.isNaN` without support for number objects.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     */function baseIsNaN(value){return value!==value;}/**
     * The base implementation of `_.mean` and `_.meanBy` without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the mean.
     */function baseMean(array,iteratee){var length=array==null?0:array.length;return length?baseSum(array,iteratee)/length:NAN;}/**
     * The base implementation of `_.property` without support for deep paths.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new accessor function.
     */function baseProperty(key){return function(object){return object==null?undefined$1:object[key];};}/**
     * The base implementation of `_.propertyOf` without support for deep paths.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     */function basePropertyOf(object){return function(key){return object==null?undefined$1:object[key];};}/**
     * The base implementation of `_.reduce` and `_.reduceRight`, without support
     * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} accumulator The initial value.
     * @param {boolean} initAccum Specify using the first or last element of
     *  `collection` as the initial value.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @returns {*} Returns the accumulated value.
     */function baseReduce(collection,iteratee,accumulator,initAccum,eachFunc){eachFunc(collection,function(value,index,collection){accumulator=initAccum?(initAccum=false,value):iteratee(accumulator,value,index,collection);});return accumulator;}/**
     * The base implementation of `_.sortBy` which uses `comparer` to define the
     * sort order of `array` and replaces criteria objects with their corresponding
     * values.
     *
     * @private
     * @param {Array} array The array to sort.
     * @param {Function} comparer The function to define sort order.
     * @returns {Array} Returns `array`.
     */function baseSortBy(array,comparer){var length=array.length;array.sort(comparer);while(length--){array[length]=array[length].value;}return array;}/**
     * The base implementation of `_.sum` and `_.sumBy` without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the sum.
     */function baseSum(array,iteratee){var result,index=-1,length=array.length;while(++index<length){var current=iteratee(array[index]);if(current!==undefined$1){result=result===undefined$1?current:result+current;}}return result;}/**
     * The base implementation of `_.times` without support for iteratee shorthands
     * or max array length checks.
     *
     * @private
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     */function baseTimes(n,iteratee){var index=-1,result=Array(n);while(++index<n){result[index]=iteratee(index);}return result;}/**
     * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
     * of key-value pairs for `object` corresponding to the property names of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the key-value pairs.
     */function baseToPairs(object,props){return arrayMap(props,function(key){return [key,object[key]];});}/**
     * The base implementation of `_.trim`.
     *
     * @private
     * @param {string} string The string to trim.
     * @returns {string} Returns the trimmed string.
     */function baseTrim(string){return string?string.slice(0,trimmedEndIndex(string)+1).replace(reTrimStart,''):string;}/**
     * The base implementation of `_.unary` without support for storing metadata.
     *
     * @private
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     */function baseUnary(func){return function(value){return func(value);};}/**
     * The base implementation of `_.values` and `_.valuesIn` which creates an
     * array of `object` property values corresponding to the property names
     * of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the array of property values.
     */function baseValues(object,props){return arrayMap(props,function(key){return object[key];});}/**
     * Checks if a `cache` value for `key` exists.
     *
     * @private
     * @param {Object} cache The cache to query.
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */function cacheHas(cache,key){return cache.has(key);}/**
     * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
     * that is not found in the character symbols.
     *
     * @private
     * @param {Array} strSymbols The string symbols to inspect.
     * @param {Array} chrSymbols The character symbols to find.
     * @returns {number} Returns the index of the first unmatched string symbol.
     */function charsStartIndex(strSymbols,chrSymbols){var index=-1,length=strSymbols.length;while(++index<length&&baseIndexOf(chrSymbols,strSymbols[index],0)>-1){}return index;}/**
     * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
     * that is not found in the character symbols.
     *
     * @private
     * @param {Array} strSymbols The string symbols to inspect.
     * @param {Array} chrSymbols The character symbols to find.
     * @returns {number} Returns the index of the last unmatched string symbol.
     */function charsEndIndex(strSymbols,chrSymbols){var index=strSymbols.length;while(index--&&baseIndexOf(chrSymbols,strSymbols[index],0)>-1){}return index;}/**
     * Gets the number of `placeholder` occurrences in `array`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} placeholder The placeholder to search for.
     * @returns {number} Returns the placeholder count.
     */function countHolders(array,placeholder){var length=array.length,result=0;while(length--){if(array[length]===placeholder){++result;}}return result;}/**
     * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
     * letters to basic Latin letters.
     *
     * @private
     * @param {string} letter The matched letter to deburr.
     * @returns {string} Returns the deburred letter.
     */var deburrLetter=basePropertyOf(deburredLetters);/**
     * Used by `_.escape` to convert characters to HTML entities.
     *
     * @private
     * @param {string} chr The matched character to escape.
     * @returns {string} Returns the escaped character.
     */var escapeHtmlChar=basePropertyOf(htmlEscapes);/**
     * Used by `_.template` to escape characters for inclusion in compiled string literals.
     *
     * @private
     * @param {string} chr The matched character to escape.
     * @returns {string} Returns the escaped character.
     */function escapeStringChar(chr){return '\\'+stringEscapes[chr];}/**
     * Gets the value at `key` of `object`.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */function getValue(object,key){return object==null?undefined$1:object[key];}/**
     * Checks if `string` contains Unicode symbols.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {boolean} Returns `true` if a symbol is found, else `false`.
     */function hasUnicode(string){return reHasUnicode.test(string);}/**
     * Checks if `string` contains a word composed of Unicode symbols.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {boolean} Returns `true` if a word is found, else `false`.
     */function hasUnicodeWord(string){return reHasUnicodeWord.test(string);}/**
     * Converts `iterator` to an array.
     *
     * @private
     * @param {Object} iterator The iterator to convert.
     * @returns {Array} Returns the converted array.
     */function iteratorToArray(iterator){var data,result=[];while(!(data=iterator.next()).done){result.push(data.value);}return result;}/**
     * Converts `map` to its key-value pairs.
     *
     * @private
     * @param {Object} map The map to convert.
     * @returns {Array} Returns the key-value pairs.
     */function mapToArray(map){var index=-1,result=Array(map.size);map.forEach(function(value,key){result[++index]=[key,value];});return result;}/**
     * Creates a unary function that invokes `func` with its argument transformed.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {Function} transform The argument transform.
     * @returns {Function} Returns the new function.
     */function overArg(func,transform){return function(arg){return func(transform(arg));};}/**
     * Replaces all `placeholder` elements in `array` with an internal placeholder
     * and returns an array of their indexes.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {*} placeholder The placeholder to replace.
     * @returns {Array} Returns the new array of placeholder indexes.
     */function replaceHolders(array,placeholder){var index=-1,length=array.length,resIndex=0,result=[];while(++index<length){var value=array[index];if(value===placeholder||value===PLACEHOLDER){array[index]=PLACEHOLDER;result[resIndex++]=index;}}return result;}/**
     * Converts `set` to an array of its values.
     *
     * @private
     * @param {Object} set The set to convert.
     * @returns {Array} Returns the values.
     */function setToArray(set){var index=-1,result=Array(set.size);set.forEach(function(value){result[++index]=value;});return result;}/**
     * Converts `set` to its value-value pairs.
     *
     * @private
     * @param {Object} set The set to convert.
     * @returns {Array} Returns the value-value pairs.
     */function setToPairs(set){var index=-1,result=Array(set.size);set.forEach(function(value){result[++index]=[value,value];});return result;}/**
     * A specialized version of `_.indexOf` which performs strict equality
     * comparisons of values, i.e. `===`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */function strictIndexOf(array,value,fromIndex){var index=fromIndex-1,length=array.length;while(++index<length){if(array[index]===value){return index;}}return -1;}/**
     * A specialized version of `_.lastIndexOf` which performs strict equality
     * comparisons of values, i.e. `===`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */function strictLastIndexOf(array,value,fromIndex){var index=fromIndex+1;while(index--){if(array[index]===value){return index;}}return index;}/**
     * Gets the number of symbols in `string`.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {number} Returns the string size.
     */function stringSize(string){return hasUnicode(string)?unicodeSize(string):asciiSize(string);}/**
     * Converts `string` to an array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the converted array.
     */function stringToArray(string){return hasUnicode(string)?unicodeToArray(string):asciiToArray(string);}/**
     * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
     * character of `string`.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {number} Returns the index of the last non-whitespace character.
     */function trimmedEndIndex(string){var index=string.length;while(index--&&reWhitespace.test(string.charAt(index))){}return index;}/**
     * Used by `_.unescape` to convert HTML entities to characters.
     *
     * @private
     * @param {string} chr The matched character to unescape.
     * @returns {string} Returns the unescaped character.
     */var unescapeHtmlChar=basePropertyOf(htmlUnescapes);/**
     * Gets the size of a Unicode `string`.
     *
     * @private
     * @param {string} string The string inspect.
     * @returns {number} Returns the string size.
     */function unicodeSize(string){var result=reUnicode.lastIndex=0;while(reUnicode.test(string)){++result;}return result;}/**
     * Converts a Unicode `string` to an array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the converted array.
     */function unicodeToArray(string){return string.match(reUnicode)||[];}/**
     * Splits a Unicode `string` into an array of its words.
     *
     * @private
     * @param {string} The string to inspect.
     * @returns {Array} Returns the words of `string`.
     */function unicodeWords(string){return string.match(reUnicodeWord)||[];}/*--------------------------------------------------------------------------*/ /**
     * Create a new pristine `lodash` function using the `context` object.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Util
     * @param {Object} [context=root] The context object.
     * @returns {Function} Returns a new `lodash` function.
     * @example
     *
     * _.mixin({ 'foo': _.constant('foo') });
     *
     * var lodash = _.runInContext();
     * lodash.mixin({ 'bar': lodash.constant('bar') });
     *
     * _.isFunction(_.foo);
     * // => true
     * _.isFunction(_.bar);
     * // => false
     *
     * lodash.isFunction(lodash.foo);
     * // => false
     * lodash.isFunction(lodash.bar);
     * // => true
     *
     * // Create a suped-up `defer` in Node.js.
     * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
     */var runInContext=function runInContext(context){context=context==null?root:_.defaults(root.Object(),context,_.pick(root,contextProps));/** Built-in constructor references. */var Array=context.Array,Date=context.Date,Error=context.Error,Function=context.Function,Math=context.Math,Object=context.Object,RegExp=context.RegExp,String=context.String,TypeError=context.TypeError;/** Used for built-in method references. */var arrayProto=Array.prototype,funcProto=Function.prototype,objectProto=Object.prototype;/** Used to detect overreaching core-js shims. */var coreJsData=context['__core-js_shared__'];/** Used to resolve the decompiled source of functions. */var funcToString=funcProto.toString;/** Used to check objects for own properties. */var hasOwnProperty=objectProto.hasOwnProperty;/** Used to generate unique IDs. */var idCounter=0;/** Used to detect methods masquerading as native. */var maskSrcKey=function(){var uid=/[^.]+$/.exec(coreJsData&&coreJsData.keys&&coreJsData.keys.IE_PROTO||'');return uid?'Symbol(src)_1.'+uid:'';}();/**
       * Used to resolve the
       * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
       * of values.
       */var nativeObjectToString=objectProto.toString;/** Used to infer the `Object` constructor. */var objectCtorString=funcToString.call(Object);/** Used to restore the original `_` reference in `_.noConflict`. */var oldDash=root._;/** Used to detect if a method is native. */var reIsNative=RegExp('^'+funcToString.call(hasOwnProperty).replace(reRegExpChar,'\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,'$1.*?')+'$');/** Built-in value references. */var Buffer=moduleExports?context.Buffer:undefined$1,_Symbol=context.Symbol,Uint8Array=context.Uint8Array,allocUnsafe=Buffer?Buffer.allocUnsafe:undefined$1,getPrototype=overArg(Object.getPrototypeOf,Object),objectCreate=Object.create,propertyIsEnumerable=objectProto.propertyIsEnumerable,splice=arrayProto.splice,spreadableSymbol=_Symbol?_Symbol.isConcatSpreadable:undefined$1,symIterator=_Symbol?_Symbol.iterator:undefined$1,symToStringTag=_Symbol?_Symbol.toStringTag:undefined$1;var defineProperty=function(){try{var func=getNative(Object,'defineProperty');func({},'',{});return func;}catch(e){}}();/** Mocked built-ins. */var ctxClearTimeout=context.clearTimeout!==root.clearTimeout&&context.clearTimeout,ctxNow=Date&&Date.now!==root.Date.now&&Date.now,ctxSetTimeout=context.setTimeout!==root.setTimeout&&context.setTimeout;/* Built-in method references for those with the same name as other `lodash` methods. */var nativeCeil=Math.ceil,nativeFloor=Math.floor,nativeGetSymbols=Object.getOwnPropertySymbols,nativeIsBuffer=Buffer?Buffer.isBuffer:undefined$1,nativeIsFinite=context.isFinite,nativeJoin=arrayProto.join,nativeKeys=overArg(Object.keys,Object),nativeMax=Math.max,nativeMin=Math.min,nativeNow=Date.now,nativeParseInt=context.parseInt,nativeRandom=Math.random,nativeReverse=arrayProto.reverse;/* Built-in method references that are verified to be native. */var DataView=getNative(context,'DataView'),Map=getNative(context,'Map'),Promise=getNative(context,'Promise'),Set=getNative(context,'Set'),WeakMap=getNative(context,'WeakMap'),nativeCreate=getNative(Object,'create');/** Used to store function metadata. */var metaMap=WeakMap&&new WeakMap();/** Used to lookup unminified function names. */var realNames={};/** Used to detect maps, sets, and weakmaps. */var dataViewCtorString=toSource(DataView),mapCtorString=toSource(Map),promiseCtorString=toSource(Promise),setCtorString=toSource(Set),weakMapCtorString=toSource(WeakMap);/** Used to convert symbols to primitives and strings. */var symbolProto=_Symbol?_Symbol.prototype:undefined$1,symbolValueOf=symbolProto?symbolProto.valueOf:undefined$1,symbolToString=symbolProto?symbolProto.toString:undefined$1;/*------------------------------------------------------------------------*/ /**
       * Creates a `lodash` object which wraps `value` to enable implicit method
       * chain sequences. Methods that operate on and return arrays, collections,
       * and functions can be chained together. Methods that retrieve a single value
       * or may return a primitive value will automatically end the chain sequence
       * and return the unwrapped value. Otherwise, the value must be unwrapped
       * with `_#value`.
       *
       * Explicit chain sequences, which must be unwrapped with `_#value`, may be
       * enabled using `_.chain`.
       *
       * The execution of chained methods is lazy, that is, it's deferred until
       * `_#value` is implicitly or explicitly called.
       *
       * Lazy evaluation allows several methods to support shortcut fusion.
       * Shortcut fusion is an optimization to merge iteratee calls; this avoids
       * the creation of intermediate arrays and can greatly reduce the number of
       * iteratee executions. Sections of a chain sequence qualify for shortcut
       * fusion if the section is applied to an array and iteratees accept only
       * one argument. The heuristic for whether a section qualifies for shortcut
       * fusion is subject to change.
       *
       * Chaining is supported in custom builds as long as the `_#value` method is
       * directly or indirectly included in the build.
       *
       * In addition to lodash methods, wrappers have `Array` and `String` methods.
       *
       * The wrapper `Array` methods are:
       * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
       *
       * The wrapper `String` methods are:
       * `replace` and `split`
       *
       * The wrapper methods that support shortcut fusion are:
       * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
       * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
       * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
       *
       * The chainable wrapper methods are:
       * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
       * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
       * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
       * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
       * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
       * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
       * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
       * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
       * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
       * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
       * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
       * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
       * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
       * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
       * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
       * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
       * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
       * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
       * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
       * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
       * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
       * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
       * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
       * `zipObject`, `zipObjectDeep`, and `zipWith`
       *
       * The wrapper methods that are **not** chainable by default are:
       * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
       * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
       * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
       * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
       * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
       * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
       * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
       * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
       * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
       * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
       * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
       * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
       * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
       * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
       * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
       * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
       * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
       * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
       * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
       * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
       * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
       * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
       * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
       * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
       * `upperFirst`, `value`, and `words`
       *
       * @name _
       * @constructor
       * @category Seq
       * @param {*} value The value to wrap in a `lodash` instance.
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var wrapped = _([1, 2, 3]);
       *
       * // Returns an unwrapped value.
       * wrapped.reduce(_.add);
       * // => 6
       *
       * // Returns a wrapped value.
       * var squares = wrapped.map(square);
       *
       * _.isArray(squares);
       * // => false
       *
       * _.isArray(squares.value());
       * // => true
       */function lodash(value){if(isObjectLike(value)&&!isArray(value)&&!(value instanceof LazyWrapper)){if(value instanceof LodashWrapper){return value;}if(hasOwnProperty.call(value,'__wrapped__')){return wrapperClone(value);}}return new LodashWrapper(value);}/**
       * The base implementation of `_.create` without support for assigning
       * properties to the created object.
       *
       * @private
       * @param {Object} proto The object to inherit from.
       * @returns {Object} Returns the new object.
       */var baseCreate=function(){function object(){}return function(proto){if(!isObject(proto)){return {};}if(objectCreate){return objectCreate(proto);}object.prototype=proto;var result=new object();object.prototype=undefined$1;return result;};}();/**
       * The function whose prototype chain sequence wrappers inherit from.
       *
       * @private
       */function baseLodash(){// No operation performed.
  }/**
       * The base constructor for creating `lodash` wrapper objects.
       *
       * @private
       * @param {*} value The value to wrap.
       * @param {boolean} [chainAll] Enable explicit method chain sequences.
       */function LodashWrapper(value,chainAll){this.__wrapped__=value;this.__actions__=[];this.__chain__=!!chainAll;this.__index__=0;this.__values__=undefined$1;}/**
       * By default, the template delimiters used by lodash are like those in
       * embedded Ruby (ERB) as well as ES2015 template strings. Change the
       * following template settings to use alternative delimiters.
       *
       * @static
       * @memberOf _
       * @type {Object}
       */lodash.templateSettings={/**
         * Used to detect `data` property values to be HTML-escaped.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */'escape':reEscape,/**
         * Used to detect code to be evaluated.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */'evaluate':reEvaluate,/**
         * Used to detect `data` property values to inject.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */'interpolate':reInterpolate,/**
         * Used to reference the data object in the template text.
         *
         * @memberOf _.templateSettings
         * @type {string}
         */'variable':'',/**
         * Used to import variables into the compiled template.
         *
         * @memberOf _.templateSettings
         * @type {Object}
         */'imports':{/**
           * A reference to the `lodash` function.
           *
           * @memberOf _.templateSettings.imports
           * @type {Function}
           */'_':lodash}};// Ensure wrappers are instances of `baseLodash`.
  lodash.prototype=baseLodash.prototype;lodash.prototype.constructor=lodash;LodashWrapper.prototype=baseCreate(baseLodash.prototype);LodashWrapper.prototype.constructor=LodashWrapper;/*------------------------------------------------------------------------*/ /**
       * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
       *
       * @private
       * @constructor
       * @param {*} value The value to wrap.
       */function LazyWrapper(value){this.__wrapped__=value;this.__actions__=[];this.__dir__=1;this.__filtered__=false;this.__iteratees__=[];this.__takeCount__=MAX_ARRAY_LENGTH;this.__views__=[];}/**
       * Creates a clone of the lazy wrapper object.
       *
       * @private
       * @name clone
       * @memberOf LazyWrapper
       * @returns {Object} Returns the cloned `LazyWrapper` object.
       */function lazyClone(){var result=new LazyWrapper(this.__wrapped__);result.__actions__=copyArray(this.__actions__);result.__dir__=this.__dir__;result.__filtered__=this.__filtered__;result.__iteratees__=copyArray(this.__iteratees__);result.__takeCount__=this.__takeCount__;result.__views__=copyArray(this.__views__);return result;}/**
       * Reverses the direction of lazy iteration.
       *
       * @private
       * @name reverse
       * @memberOf LazyWrapper
       * @returns {Object} Returns the new reversed `LazyWrapper` object.
       */function lazyReverse(){if(this.__filtered__){var result=new LazyWrapper(this);result.__dir__=-1;result.__filtered__=true;}else {result=this.clone();result.__dir__*=-1;}return result;}/**
       * Extracts the unwrapped value from its lazy wrapper.
       *
       * @private
       * @name value
       * @memberOf LazyWrapper
       * @returns {*} Returns the unwrapped value.
       */function lazyValue(){var array=this.__wrapped__.value(),dir=this.__dir__,isArr=isArray(array),isRight=dir<0,arrLength=isArr?array.length:0,view=getView(0,arrLength,this.__views__),start=view.start,end=view.end,length=end-start,index=isRight?end:start-1,iteratees=this.__iteratees__,iterLength=iteratees.length,resIndex=0,takeCount=nativeMin(length,this.__takeCount__);if(!isArr||!isRight&&arrLength==length&&takeCount==length){return baseWrapperValue(array,this.__actions__);}var result=[];outer:while(length--&&resIndex<takeCount){index+=dir;var iterIndex=-1,value=array[index];while(++iterIndex<iterLength){var data=iteratees[iterIndex],iteratee=data.iteratee,type=data.type,computed=iteratee(value);if(type==LAZY_MAP_FLAG){value=computed;}else if(!computed){if(type==LAZY_FILTER_FLAG){continue outer;}else {break outer;}}}result[resIndex++]=value;}return result;}// Ensure `LazyWrapper` is an instance of `baseLodash`.
  LazyWrapper.prototype=baseCreate(baseLodash.prototype);LazyWrapper.prototype.constructor=LazyWrapper;/*------------------------------------------------------------------------*/ /**
       * Creates a hash object.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */function Hash(entries){var index=-1,length=entries==null?0:entries.length;this.clear();while(++index<length){var entry=entries[index];this.set(entry[0],entry[1]);}}/**
       * Removes all key-value entries from the hash.
       *
       * @private
       * @name clear
       * @memberOf Hash
       */function hashClear(){this.__data__=nativeCreate?nativeCreate(null):{};this.size=0;}/**
       * Removes `key` and its value from the hash.
       *
       * @private
       * @name delete
       * @memberOf Hash
       * @param {Object} hash The hash to modify.
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */function hashDelete(key){var result=this.has(key)&&delete this.__data__[key];this.size-=result?1:0;return result;}/**
       * Gets the hash value for `key`.
       *
       * @private
       * @name get
       * @memberOf Hash
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */function hashGet(key){var data=this.__data__;if(nativeCreate){var result=data[key];return result===HASH_UNDEFINED?undefined$1:result;}return hasOwnProperty.call(data,key)?data[key]:undefined$1;}/**
       * Checks if a hash value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf Hash
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */function hashHas(key){var data=this.__data__;return nativeCreate?data[key]!==undefined$1:hasOwnProperty.call(data,key);}/**
       * Sets the hash `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf Hash
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the hash instance.
       */function hashSet(key,value){var data=this.__data__;this.size+=this.has(key)?0:1;data[key]=nativeCreate&&value===undefined$1?HASH_UNDEFINED:value;return this;}// Add methods to `Hash`.
  Hash.prototype.clear=hashClear;Hash.prototype['delete']=hashDelete;Hash.prototype.get=hashGet;Hash.prototype.has=hashHas;Hash.prototype.set=hashSet;/*------------------------------------------------------------------------*/ /**
       * Creates an list cache object.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */function ListCache(entries){var index=-1,length=entries==null?0:entries.length;this.clear();while(++index<length){var entry=entries[index];this.set(entry[0],entry[1]);}}/**
       * Removes all key-value entries from the list cache.
       *
       * @private
       * @name clear
       * @memberOf ListCache
       */function listCacheClear(){this.__data__=[];this.size=0;}/**
       * Removes `key` and its value from the list cache.
       *
       * @private
       * @name delete
       * @memberOf ListCache
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */function listCacheDelete(key){var data=this.__data__,index=assocIndexOf(data,key);if(index<0){return false;}var lastIndex=data.length-1;if(index==lastIndex){data.pop();}else {splice.call(data,index,1);}--this.size;return true;}/**
       * Gets the list cache value for `key`.
       *
       * @private
       * @name get
       * @memberOf ListCache
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */function listCacheGet(key){var data=this.__data__,index=assocIndexOf(data,key);return index<0?undefined$1:data[index][1];}/**
       * Checks if a list cache value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf ListCache
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */function listCacheHas(key){return assocIndexOf(this.__data__,key)>-1;}/**
       * Sets the list cache `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf ListCache
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the list cache instance.
       */function listCacheSet(key,value){var data=this.__data__,index=assocIndexOf(data,key);if(index<0){++this.size;data.push([key,value]);}else {data[index][1]=value;}return this;}// Add methods to `ListCache`.
  ListCache.prototype.clear=listCacheClear;ListCache.prototype['delete']=listCacheDelete;ListCache.prototype.get=listCacheGet;ListCache.prototype.has=listCacheHas;ListCache.prototype.set=listCacheSet;/*------------------------------------------------------------------------*/ /**
       * Creates a map cache object to store key-value pairs.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */function MapCache(entries){var index=-1,length=entries==null?0:entries.length;this.clear();while(++index<length){var entry=entries[index];this.set(entry[0],entry[1]);}}/**
       * Removes all key-value entries from the map.
       *
       * @private
       * @name clear
       * @memberOf MapCache
       */function mapCacheClear(){this.size=0;this.__data__={'hash':new Hash(),'map':new(Map||ListCache)(),'string':new Hash()};}/**
       * Removes `key` and its value from the map.
       *
       * @private
       * @name delete
       * @memberOf MapCache
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */function mapCacheDelete(key){var result=getMapData(this,key)['delete'](key);this.size-=result?1:0;return result;}/**
       * Gets the map value for `key`.
       *
       * @private
       * @name get
       * @memberOf MapCache
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */function mapCacheGet(key){return getMapData(this,key).get(key);}/**
       * Checks if a map value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf MapCache
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */function mapCacheHas(key){return getMapData(this,key).has(key);}/**
       * Sets the map `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf MapCache
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the map cache instance.
       */function mapCacheSet(key,value){var data=getMapData(this,key),size=data.size;data.set(key,value);this.size+=data.size==size?0:1;return this;}// Add methods to `MapCache`.
  MapCache.prototype.clear=mapCacheClear;MapCache.prototype['delete']=mapCacheDelete;MapCache.prototype.get=mapCacheGet;MapCache.prototype.has=mapCacheHas;MapCache.prototype.set=mapCacheSet;/*------------------------------------------------------------------------*/ /**
       *
       * Creates an array cache object to store unique values.
       *
       * @private
       * @constructor
       * @param {Array} [values] The values to cache.
       */function SetCache(values){var index=-1,length=values==null?0:values.length;this.__data__=new MapCache();while(++index<length){this.add(values[index]);}}/**
       * Adds `value` to the array cache.
       *
       * @private
       * @name add
       * @memberOf SetCache
       * @alias push
       * @param {*} value The value to cache.
       * @returns {Object} Returns the cache instance.
       */function setCacheAdd(value){this.__data__.set(value,HASH_UNDEFINED);return this;}/**
       * Checks if `value` is in the array cache.
       *
       * @private
       * @name has
       * @memberOf SetCache
       * @param {*} value The value to search for.
       * @returns {number} Returns `true` if `value` is found, else `false`.
       */function setCacheHas(value){return this.__data__.has(value);}// Add methods to `SetCache`.
  SetCache.prototype.add=SetCache.prototype.push=setCacheAdd;SetCache.prototype.has=setCacheHas;/*------------------------------------------------------------------------*/ /**
       * Creates a stack cache object to store key-value pairs.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */function Stack(entries){var data=this.__data__=new ListCache(entries);this.size=data.size;}/**
       * Removes all key-value entries from the stack.
       *
       * @private
       * @name clear
       * @memberOf Stack
       */function stackClear(){this.__data__=new ListCache();this.size=0;}/**
       * Removes `key` and its value from the stack.
       *
       * @private
       * @name delete
       * @memberOf Stack
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */function stackDelete(key){var data=this.__data__,result=data['delete'](key);this.size=data.size;return result;}/**
       * Gets the stack value for `key`.
       *
       * @private
       * @name get
       * @memberOf Stack
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */function stackGet(key){return this.__data__.get(key);}/**
       * Checks if a stack value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf Stack
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */function stackHas(key){return this.__data__.has(key);}/**
       * Sets the stack `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf Stack
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the stack cache instance.
       */function stackSet(key,value){var data=this.__data__;if(data instanceof ListCache){var pairs=data.__data__;if(!Map||pairs.length<LARGE_ARRAY_SIZE-1){pairs.push([key,value]);this.size=++data.size;return this;}data=this.__data__=new MapCache(pairs);}data.set(key,value);this.size=data.size;return this;}// Add methods to `Stack`.
  Stack.prototype.clear=stackClear;Stack.prototype['delete']=stackDelete;Stack.prototype.get=stackGet;Stack.prototype.has=stackHas;Stack.prototype.set=stackSet;/*------------------------------------------------------------------------*/ /**
       * Creates an array of the enumerable property names of the array-like `value`.
       *
       * @private
       * @param {*} value The value to query.
       * @param {boolean} inherited Specify returning inherited property names.
       * @returns {Array} Returns the array of property names.
       */function arrayLikeKeys(value,inherited){var isArr=isArray(value),isArg=!isArr&&isArguments(value),isBuff=!isArr&&!isArg&&isBuffer(value),isType=!isArr&&!isArg&&!isBuff&&isTypedArray(value),skipIndexes=isArr||isArg||isBuff||isType,result=skipIndexes?baseTimes(value.length,String):[],length=result.length;for(var key in value){if((inherited||hasOwnProperty.call(value,key))&&!(skipIndexes&&(// Safari 9 has enumerable `arguments.length` in strict mode.
  key=='length'||// Node.js 0.10 has enumerable non-index properties on buffers.
  isBuff&&(key=='offset'||key=='parent')||// PhantomJS 2 has enumerable non-index properties on typed arrays.
  isType&&(key=='buffer'||key=='byteLength'||key=='byteOffset')||// Skip index properties.
  isIndex(key,length)))){result.push(key);}}return result;}/**
       * A specialized version of `_.sample` for arrays.
       *
       * @private
       * @param {Array} array The array to sample.
       * @returns {*} Returns the random element.
       */function arraySample(array){var length=array.length;return length?array[baseRandom(0,length-1)]:undefined$1;}/**
       * A specialized version of `_.sampleSize` for arrays.
       *
       * @private
       * @param {Array} array The array to sample.
       * @param {number} n The number of elements to sample.
       * @returns {Array} Returns the random elements.
       */function arraySampleSize(array,n){return shuffleSelf(copyArray(array),baseClamp(n,0,array.length));}/**
       * A specialized version of `_.shuffle` for arrays.
       *
       * @private
       * @param {Array} array The array to shuffle.
       * @returns {Array} Returns the new shuffled array.
       */function arrayShuffle(array){return shuffleSelf(copyArray(array));}/**
       * This function is like `assignValue` except that it doesn't assign
       * `undefined` values.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {string} key The key of the property to assign.
       * @param {*} value The value to assign.
       */function assignMergeValue(object,key,value){if(value!==undefined$1&&!eq(object[key],value)||value===undefined$1&&!(key in object)){baseAssignValue(object,key,value);}}/**
       * Assigns `value` to `key` of `object` if the existing value is not equivalent
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {string} key The key of the property to assign.
       * @param {*} value The value to assign.
       */function assignValue(object,key,value){var objValue=object[key];if(!(hasOwnProperty.call(object,key)&&eq(objValue,value))||value===undefined$1&&!(key in object)){baseAssignValue(object,key,value);}}/**
       * Gets the index at which the `key` is found in `array` of key-value pairs.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} key The key to search for.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */function assocIndexOf(array,key){var length=array.length;while(length--){if(eq(array[length][0],key)){return length;}}return -1;}/**
       * Aggregates elements of `collection` on `accumulator` with keys transformed
       * by `iteratee` and values set by `setter`.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} setter The function to set `accumulator` values.
       * @param {Function} iteratee The iteratee to transform keys.
       * @param {Object} accumulator The initial aggregated object.
       * @returns {Function} Returns `accumulator`.
       */function baseAggregator(collection,setter,iteratee,accumulator){baseEach(collection,function(value,key,collection){setter(accumulator,value,iteratee(value),collection);});return accumulator;}/**
       * The base implementation of `_.assign` without support for multiple sources
       * or `customizer` functions.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @returns {Object} Returns `object`.
       */function baseAssign(object,source){return object&&copyObject(source,keys(source),object);}/**
       * The base implementation of `_.assignIn` without support for multiple sources
       * or `customizer` functions.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @returns {Object} Returns `object`.
       */function baseAssignIn(object,source){return object&&copyObject(source,keysIn(source),object);}/**
       * The base implementation of `assignValue` and `assignMergeValue` without
       * value checks.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {string} key The key of the property to assign.
       * @param {*} value The value to assign.
       */function baseAssignValue(object,key,value){if(key=='__proto__'&&defineProperty){defineProperty(object,key,{'configurable':true,'enumerable':true,'value':value,'writable':true});}else {object[key]=value;}}/**
       * The base implementation of `_.at` without support for individual paths.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {string[]} paths The property paths to pick.
       * @returns {Array} Returns the picked elements.
       */function baseAt(object,paths){var index=-1,length=paths.length,result=Array(length),skip=object==null;while(++index<length){result[index]=skip?undefined$1:get(object,paths[index]);}return result;}/**
       * The base implementation of `_.clamp` which doesn't coerce arguments.
       *
       * @private
       * @param {number} number The number to clamp.
       * @param {number} [lower] The lower bound.
       * @param {number} upper The upper bound.
       * @returns {number} Returns the clamped number.
       */function baseClamp(number,lower,upper){if(number===number){if(upper!==undefined$1){number=number<=upper?number:upper;}if(lower!==undefined$1){number=number>=lower?number:lower;}}return number;}/**
       * The base implementation of `_.clone` and `_.cloneDeep` which tracks
       * traversed objects.
       *
       * @private
       * @param {*} value The value to clone.
       * @param {boolean} bitmask The bitmask flags.
       *  1 - Deep clone
       *  2 - Flatten inherited properties
       *  4 - Clone symbols
       * @param {Function} [customizer] The function to customize cloning.
       * @param {string} [key] The key of `value`.
       * @param {Object} [object] The parent object of `value`.
       * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
       * @returns {*} Returns the cloned value.
       */function baseClone(value,bitmask,customizer,key,object,stack){var result,isDeep=bitmask&CLONE_DEEP_FLAG,isFlat=bitmask&CLONE_FLAT_FLAG,isFull=bitmask&CLONE_SYMBOLS_FLAG;if(customizer){result=object?customizer(value,key,object,stack):customizer(value);}if(result!==undefined$1){return result;}if(!isObject(value)){return value;}var isArr=isArray(value);if(isArr){result=initCloneArray(value);if(!isDeep){return copyArray(value,result);}}else {var tag=getTag(value),isFunc=tag==funcTag||tag==genTag;if(isBuffer(value)){return cloneBuffer(value,isDeep);}if(tag==objectTag||tag==argsTag||isFunc&&!object){result=isFlat||isFunc?{}:initCloneObject(value);if(!isDeep){return isFlat?copySymbolsIn(value,baseAssignIn(result,value)):copySymbols(value,baseAssign(result,value));}}else {if(!cloneableTags[tag]){return object?value:{};}result=initCloneByTag(value,tag,isDeep);}}// Check for circular references and return its corresponding clone.
  stack||(stack=new Stack());var stacked=stack.get(value);if(stacked){return stacked;}stack.set(value,result);if(isSet(value)){value.forEach(function(subValue){result.add(baseClone(subValue,bitmask,customizer,subValue,value,stack));});}else if(isMap(value)){value.forEach(function(subValue,key){result.set(key,baseClone(subValue,bitmask,customizer,key,value,stack));});}var keysFunc=isFull?isFlat?getAllKeysIn:getAllKeys:isFlat?keysIn:keys;var props=isArr?undefined$1:keysFunc(value);arrayEach(props||value,function(subValue,key){if(props){key=subValue;subValue=value[key];}// Recursively populate clone (susceptible to call stack limits).
  assignValue(result,key,baseClone(subValue,bitmask,customizer,key,value,stack));});return result;}/**
       * The base implementation of `_.conforms` which doesn't clone `source`.
       *
       * @private
       * @param {Object} source The object of property predicates to conform to.
       * @returns {Function} Returns the new spec function.
       */function baseConforms(source){var props=keys(source);return function(object){return baseConformsTo(object,source,props);};}/**
       * The base implementation of `_.conformsTo` which accepts `props` to check.
       *
       * @private
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property predicates to conform to.
       * @returns {boolean} Returns `true` if `object` conforms, else `false`.
       */function baseConformsTo(object,source,props){var length=props.length;if(object==null){return !length;}object=Object(object);while(length--){var key=props[length],predicate=source[key],value=object[key];if(value===undefined$1&&!(key in object)||!predicate(value)){return false;}}return true;}/**
       * The base implementation of `_.delay` and `_.defer` which accepts `args`
       * to provide to `func`.
       *
       * @private
       * @param {Function} func The function to delay.
       * @param {number} wait The number of milliseconds to delay invocation.
       * @param {Array} args The arguments to provide to `func`.
       * @returns {number|Object} Returns the timer id or timeout object.
       */function baseDelay(func,wait,args){if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}return setTimeout(function(){func.apply(undefined$1,args);},wait);}/**
       * The base implementation of methods like `_.difference` without support
       * for excluding multiple arrays or iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {Array} values The values to exclude.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       */function baseDifference(array,values,iteratee,comparator){var index=-1,includes=arrayIncludes,isCommon=true,length=array.length,result=[],valuesLength=values.length;if(!length){return result;}if(iteratee){values=arrayMap(values,baseUnary(iteratee));}if(comparator){includes=arrayIncludesWith;isCommon=false;}else if(values.length>=LARGE_ARRAY_SIZE){includes=cacheHas;isCommon=false;values=new SetCache(values);}outer:while(++index<length){var value=array[index],computed=iteratee==null?value:iteratee(value);value=comparator||value!==0?value:0;if(isCommon&&computed===computed){var valuesIndex=valuesLength;while(valuesIndex--){if(values[valuesIndex]===computed){continue outer;}}result.push(value);}else if(!includes(values,computed,comparator)){result.push(value);}}return result;}/**
       * The base implementation of `_.forEach` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array|Object} Returns `collection`.
       */var baseEach=createBaseEach(baseForOwn);/**
       * The base implementation of `_.forEachRight` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array|Object} Returns `collection`.
       */var baseEachRight=createBaseEach(baseForOwnRight,true);/**
       * The base implementation of `_.every` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {boolean} Returns `true` if all elements pass the predicate check,
       *  else `false`
       */function baseEvery(collection,predicate){var result=true;baseEach(collection,function(value,index,collection){result=!!predicate(value,index,collection);return result;});return result;}/**
       * The base implementation of methods like `_.max` and `_.min` which accepts a
       * `comparator` to determine the extremum value.
       *
       * @private
       * @param {Array} array The array to iterate over.
       * @param {Function} iteratee The iteratee invoked per iteration.
       * @param {Function} comparator The comparator used to compare values.
       * @returns {*} Returns the extremum value.
       */function baseExtremum(array,iteratee,comparator){var index=-1,length=array.length;while(++index<length){var value=array[index],current=iteratee(value);if(current!=null&&(computed===undefined$1?current===current&&!isSymbol(current):comparator(current,computed))){var computed=current,result=value;}}return result;}/**
       * The base implementation of `_.fill` without an iteratee call guard.
       *
       * @private
       * @param {Array} array The array to fill.
       * @param {*} value The value to fill `array` with.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns `array`.
       */function baseFill(array,value,start,end){var length=array.length;start=toInteger(start);if(start<0){start=-start>length?0:length+start;}end=end===undefined$1||end>length?length:toInteger(end);if(end<0){end+=length;}end=start>end?0:toLength(end);while(start<end){array[start++]=value;}return array;}/**
       * The base implementation of `_.filter` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {Array} Returns the new filtered array.
       */function baseFilter(collection,predicate){var result=[];baseEach(collection,function(value,index,collection){if(predicate(value,index,collection)){result.push(value);}});return result;}/**
       * The base implementation of `_.flatten` with support for restricting flattening.
       *
       * @private
       * @param {Array} array The array to flatten.
       * @param {number} depth The maximum recursion depth.
       * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
       * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
       * @param {Array} [result=[]] The initial result value.
       * @returns {Array} Returns the new flattened array.
       */function baseFlatten(array,depth,predicate,isStrict,result){var index=-1,length=array.length;predicate||(predicate=isFlattenable);result||(result=[]);while(++index<length){var value=array[index];if(depth>0&&predicate(value)){if(depth>1){// Recursively flatten arrays (susceptible to call stack limits).
  baseFlatten(value,depth-1,predicate,isStrict,result);}else {arrayPush(result,value);}}else if(!isStrict){result[result.length]=value;}}return result;}/**
       * The base implementation of `baseForOwn` which iterates over `object`
       * properties returned by `keysFunc` and invokes `iteratee` for each property.
       * Iteratee functions may exit iteration early by explicitly returning `false`.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {Function} keysFunc The function to get the keys of `object`.
       * @returns {Object} Returns `object`.
       */var baseFor=createBaseFor();/**
       * This function is like `baseFor` except that it iterates over properties
       * in the opposite order.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {Function} keysFunc The function to get the keys of `object`.
       * @returns {Object} Returns `object`.
       */var baseForRight=createBaseFor(true);/**
       * The base implementation of `_.forOwn` without support for iteratee shorthands.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Object} Returns `object`.
       */function baseForOwn(object,iteratee){return object&&baseFor(object,iteratee,keys);}/**
       * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Object} Returns `object`.
       */function baseForOwnRight(object,iteratee){return object&&baseForRight(object,iteratee,keys);}/**
       * The base implementation of `_.functions` which creates an array of
       * `object` function property names filtered from `props`.
       *
       * @private
       * @param {Object} object The object to inspect.
       * @param {Array} props The property names to filter.
       * @returns {Array} Returns the function names.
       */function baseFunctions(object,props){return arrayFilter(props,function(key){return isFunction(object[key]);});}/**
       * The base implementation of `_.get` without support for default values.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the property to get.
       * @returns {*} Returns the resolved value.
       */function baseGet(object,path){path=castPath(path,object);var index=0,length=path.length;while(object!=null&&index<length){object=object[toKey(path[index++])];}return index&&index==length?object:undefined$1;}/**
       * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
       * `keysFunc` and `symbolsFunc` to get the enumerable property names and
       * symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Function} keysFunc The function to get the keys of `object`.
       * @param {Function} symbolsFunc The function to get the symbols of `object`.
       * @returns {Array} Returns the array of property names and symbols.
       */function baseGetAllKeys(object,keysFunc,symbolsFunc){var result=keysFunc(object);return isArray(object)?result:arrayPush(result,symbolsFunc(object));}/**
       * The base implementation of `getTag` without fallbacks for buggy environments.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the `toStringTag`.
       */function baseGetTag(value){if(value==null){return value===undefined$1?undefinedTag:nullTag;}return symToStringTag&&symToStringTag in Object(value)?getRawTag(value):objectToString(value);}/**
       * The base implementation of `_.gt` which doesn't coerce arguments.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is greater than `other`,
       *  else `false`.
       */function baseGt(value,other){return value>other;}/**
       * The base implementation of `_.has` without support for deep paths.
       *
       * @private
       * @param {Object} [object] The object to query.
       * @param {Array|string} key The key to check.
       * @returns {boolean} Returns `true` if `key` exists, else `false`.
       */function baseHas(object,key){return object!=null&&hasOwnProperty.call(object,key);}/**
       * The base implementation of `_.hasIn` without support for deep paths.
       *
       * @private
       * @param {Object} [object] The object to query.
       * @param {Array|string} key The key to check.
       * @returns {boolean} Returns `true` if `key` exists, else `false`.
       */function baseHasIn(object,key){return object!=null&&key in Object(object);}/**
       * The base implementation of `_.inRange` which doesn't coerce arguments.
       *
       * @private
       * @param {number} number The number to check.
       * @param {number} start The start of the range.
       * @param {number} end The end of the range.
       * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
       */function baseInRange(number,start,end){return number>=nativeMin(start,end)&&number<nativeMax(start,end);}/**
       * The base implementation of methods like `_.intersection`, without support
       * for iteratee shorthands, that accepts an array of arrays to inspect.
       *
       * @private
       * @param {Array} arrays The arrays to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of shared values.
       */function baseIntersection(arrays,iteratee,comparator){var includes=comparator?arrayIncludesWith:arrayIncludes,length=arrays[0].length,othLength=arrays.length,othIndex=othLength,caches=Array(othLength),maxLength=Infinity,result=[];while(othIndex--){var array=arrays[othIndex];if(othIndex&&iteratee){array=arrayMap(array,baseUnary(iteratee));}maxLength=nativeMin(array.length,maxLength);caches[othIndex]=!comparator&&(iteratee||length>=120&&array.length>=120)?new SetCache(othIndex&&array):undefined$1;}array=arrays[0];var index=-1,seen=caches[0];outer:while(++index<length&&result.length<maxLength){var value=array[index],computed=iteratee?iteratee(value):value;value=comparator||value!==0?value:0;if(!(seen?cacheHas(seen,computed):includes(result,computed,comparator))){othIndex=othLength;while(--othIndex){var cache=caches[othIndex];if(!(cache?cacheHas(cache,computed):includes(arrays[othIndex],computed,comparator))){continue outer;}}if(seen){seen.push(computed);}result.push(value);}}return result;}/**
       * The base implementation of `_.invert` and `_.invertBy` which inverts
       * `object` with values transformed by `iteratee` and set by `setter`.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} setter The function to set `accumulator` values.
       * @param {Function} iteratee The iteratee to transform values.
       * @param {Object} accumulator The initial inverted object.
       * @returns {Function} Returns `accumulator`.
       */function baseInverter(object,setter,iteratee,accumulator){baseForOwn(object,function(value,key,object){setter(accumulator,iteratee(value),key,object);});return accumulator;}/**
       * The base implementation of `_.invoke` without support for individual
       * method arguments.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the method to invoke.
       * @param {Array} args The arguments to invoke the method with.
       * @returns {*} Returns the result of the invoked method.
       */function baseInvoke(object,path,args){path=castPath(path,object);object=parent(object,path);var func=object==null?object:object[toKey(last(path))];return func==null?undefined$1:apply(func,object,args);}/**
       * The base implementation of `_.isArguments`.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an `arguments` object,
       */function baseIsArguments(value){return isObjectLike(value)&&baseGetTag(value)==argsTag;}/**
       * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
       */function baseIsArrayBuffer(value){return isObjectLike(value)&&baseGetTag(value)==arrayBufferTag;}/**
       * The base implementation of `_.isDate` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
       */function baseIsDate(value){return isObjectLike(value)&&baseGetTag(value)==dateTag;}/**
       * The base implementation of `_.isEqual` which supports partial comparisons
       * and tracks traversed objects.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @param {boolean} bitmask The bitmask flags.
       *  1 - Unordered comparison
       *  2 - Partial comparison
       * @param {Function} [customizer] The function to customize comparisons.
       * @param {Object} [stack] Tracks traversed `value` and `other` objects.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       */function baseIsEqual(value,other,bitmask,customizer,stack){if(value===other){return true;}if(value==null||other==null||!isObjectLike(value)&&!isObjectLike(other)){return value!==value&&other!==other;}return baseIsEqualDeep(value,other,bitmask,customizer,baseIsEqual,stack);}/**
       * A specialized version of `baseIsEqual` for arrays and objects which performs
       * deep comparisons and tracks traversed objects enabling objects with circular
       * references to be compared.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
       * @param {Function} customizer The function to customize comparisons.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Object} [stack] Tracks traversed `object` and `other` objects.
       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
       */function baseIsEqualDeep(object,other,bitmask,customizer,equalFunc,stack){var objIsArr=isArray(object),othIsArr=isArray(other),objTag=objIsArr?arrayTag:getTag(object),othTag=othIsArr?arrayTag:getTag(other);objTag=objTag==argsTag?objectTag:objTag;othTag=othTag==argsTag?objectTag:othTag;var objIsObj=objTag==objectTag,othIsObj=othTag==objectTag,isSameTag=objTag==othTag;if(isSameTag&&isBuffer(object)){if(!isBuffer(other)){return false;}objIsArr=true;objIsObj=false;}if(isSameTag&&!objIsObj){stack||(stack=new Stack());return objIsArr||isTypedArray(object)?equalArrays(object,other,bitmask,customizer,equalFunc,stack):equalByTag(object,other,objTag,bitmask,customizer,equalFunc,stack);}if(!(bitmask&COMPARE_PARTIAL_FLAG)){var objIsWrapped=objIsObj&&hasOwnProperty.call(object,'__wrapped__'),othIsWrapped=othIsObj&&hasOwnProperty.call(other,'__wrapped__');if(objIsWrapped||othIsWrapped){var objUnwrapped=objIsWrapped?object.value():object,othUnwrapped=othIsWrapped?other.value():other;stack||(stack=new Stack());return equalFunc(objUnwrapped,othUnwrapped,bitmask,customizer,stack);}}if(!isSameTag){return false;}stack||(stack=new Stack());return equalObjects(object,other,bitmask,customizer,equalFunc,stack);}/**
       * The base implementation of `_.isMap` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a map, else `false`.
       */function baseIsMap(value){return isObjectLike(value)&&getTag(value)==mapTag;}/**
       * The base implementation of `_.isMatch` without support for iteratee shorthands.
       *
       * @private
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property values to match.
       * @param {Array} matchData The property names, values, and compare flags to match.
       * @param {Function} [customizer] The function to customize comparisons.
       * @returns {boolean} Returns `true` if `object` is a match, else `false`.
       */function baseIsMatch(object,source,matchData,customizer){var index=matchData.length,length=index,noCustomizer=!customizer;if(object==null){return !length;}object=Object(object);while(index--){var data=matchData[index];if(noCustomizer&&data[2]?data[1]!==object[data[0]]:!(data[0]in object)){return false;}}while(++index<length){data=matchData[index];var key=data[0],objValue=object[key],srcValue=data[1];if(noCustomizer&&data[2]){if(objValue===undefined$1&&!(key in object)){return false;}}else {var stack=new Stack();if(customizer){var result=customizer(objValue,srcValue,key,object,source,stack);}if(!(result===undefined$1?baseIsEqual(srcValue,objValue,COMPARE_PARTIAL_FLAG|COMPARE_UNORDERED_FLAG,customizer,stack):result)){return false;}}}return true;}/**
       * The base implementation of `_.isNative` without bad shim checks.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a native function,
       *  else `false`.
       */function baseIsNative(value){if(!isObject(value)||isMasked(value)){return false;}var pattern=isFunction(value)?reIsNative:reIsHostCtor;return pattern.test(toSource(value));}/**
       * The base implementation of `_.isRegExp` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
       */function baseIsRegExp(value){return isObjectLike(value)&&baseGetTag(value)==regexpTag;}/**
       * The base implementation of `_.isSet` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a set, else `false`.
       */function baseIsSet(value){return isObjectLike(value)&&getTag(value)==setTag;}/**
       * The base implementation of `_.isTypedArray` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
       */function baseIsTypedArray(value){return isObjectLike(value)&&isLength(value.length)&&!!typedArrayTags[baseGetTag(value)];}/**
       * The base implementation of `_.iteratee`.
       *
       * @private
       * @param {*} [value=_.identity] The value to convert to an iteratee.
       * @returns {Function} Returns the iteratee.
       */function baseIteratee(value){// Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if(typeof value=='function'){return value;}if(value==null){return identity;}if(_typeof(value)=='object'){return isArray(value)?baseMatchesProperty(value[0],value[1]):baseMatches(value);}return property(value);}/**
       * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       */function baseKeys(object){if(!isPrototype(object)){return nativeKeys(object);}var result=[];for(var key in Object(object)){if(hasOwnProperty.call(object,key)&&key!='constructor'){result.push(key);}}return result;}/**
       * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       */function baseKeysIn(object){if(!isObject(object)){return nativeKeysIn(object);}var isProto=isPrototype(object),result=[];for(var key in object){if(!(key=='constructor'&&(isProto||!hasOwnProperty.call(object,key)))){result.push(key);}}return result;}/**
       * The base implementation of `_.lt` which doesn't coerce arguments.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is less than `other`,
       *  else `false`.
       */function baseLt(value,other){return value<other;}/**
       * The base implementation of `_.map` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns the new mapped array.
       */function baseMap(collection,iteratee){var index=-1,result=isArrayLike(collection)?Array(collection.length):[];baseEach(collection,function(value,key,collection){result[++index]=iteratee(value,key,collection);});return result;}/**
       * The base implementation of `_.matches` which doesn't clone `source`.
       *
       * @private
       * @param {Object} source The object of property values to match.
       * @returns {Function} Returns the new spec function.
       */function baseMatches(source){var matchData=getMatchData(source);if(matchData.length==1&&matchData[0][2]){return matchesStrictComparable(matchData[0][0],matchData[0][1]);}return function(object){return object===source||baseIsMatch(object,source,matchData);};}/**
       * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
       *
       * @private
       * @param {string} path The path of the property to get.
       * @param {*} srcValue The value to match.
       * @returns {Function} Returns the new spec function.
       */function baseMatchesProperty(path,srcValue){if(isKey(path)&&isStrictComparable(srcValue)){return matchesStrictComparable(toKey(path),srcValue);}return function(object){var objValue=get(object,path);return objValue===undefined$1&&objValue===srcValue?hasIn(object,path):baseIsEqual(srcValue,objValue,COMPARE_PARTIAL_FLAG|COMPARE_UNORDERED_FLAG);};}/**
       * The base implementation of `_.merge` without support for multiple sources.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @param {number} srcIndex The index of `source`.
       * @param {Function} [customizer] The function to customize merged values.
       * @param {Object} [stack] Tracks traversed source values and their merged
       *  counterparts.
       */function baseMerge(object,source,srcIndex,customizer,stack){if(object===source){return;}baseFor(source,function(srcValue,key){stack||(stack=new Stack());if(isObject(srcValue)){baseMergeDeep(object,source,key,srcIndex,baseMerge,customizer,stack);}else {var newValue=customizer?customizer(safeGet(object,key),srcValue,key+'',object,source,stack):undefined$1;if(newValue===undefined$1){newValue=srcValue;}assignMergeValue(object,key,newValue);}},keysIn);}/**
       * A specialized version of `baseMerge` for arrays and objects which performs
       * deep merges and tracks traversed objects enabling objects with circular
       * references to be merged.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @param {string} key The key of the value to merge.
       * @param {number} srcIndex The index of `source`.
       * @param {Function} mergeFunc The function to merge values.
       * @param {Function} [customizer] The function to customize assigned values.
       * @param {Object} [stack] Tracks traversed source values and their merged
       *  counterparts.
       */function baseMergeDeep(object,source,key,srcIndex,mergeFunc,customizer,stack){var objValue=safeGet(object,key),srcValue=safeGet(source,key),stacked=stack.get(srcValue);if(stacked){assignMergeValue(object,key,stacked);return;}var newValue=customizer?customizer(objValue,srcValue,key+'',object,source,stack):undefined$1;var isCommon=newValue===undefined$1;if(isCommon){var isArr=isArray(srcValue),isBuff=!isArr&&isBuffer(srcValue),isTyped=!isArr&&!isBuff&&isTypedArray(srcValue);newValue=srcValue;if(isArr||isBuff||isTyped){if(isArray(objValue)){newValue=objValue;}else if(isArrayLikeObject(objValue)){newValue=copyArray(objValue);}else if(isBuff){isCommon=false;newValue=cloneBuffer(srcValue,true);}else if(isTyped){isCommon=false;newValue=cloneTypedArray(srcValue,true);}else {newValue=[];}}else if(isPlainObject(srcValue)||isArguments(srcValue)){newValue=objValue;if(isArguments(objValue)){newValue=toPlainObject(objValue);}else if(!isObject(objValue)||isFunction(objValue)){newValue=initCloneObject(srcValue);}}else {isCommon=false;}}if(isCommon){// Recursively merge objects and arrays (susceptible to call stack limits).
  stack.set(srcValue,newValue);mergeFunc(newValue,srcValue,srcIndex,customizer,stack);stack['delete'](srcValue);}assignMergeValue(object,key,newValue);}/**
       * The base implementation of `_.nth` which doesn't coerce arguments.
       *
       * @private
       * @param {Array} array The array to query.
       * @param {number} n The index of the element to return.
       * @returns {*} Returns the nth element of `array`.
       */function baseNth(array,n){var length=array.length;if(!length){return;}n+=n<0?length:0;return isIndex(n,length)?array[n]:undefined$1;}/**
       * The base implementation of `_.orderBy` without param guards.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
       * @param {string[]} orders The sort orders of `iteratees`.
       * @returns {Array} Returns the new sorted array.
       */function baseOrderBy(collection,iteratees,orders){if(iteratees.length){iteratees=arrayMap(iteratees,function(iteratee){if(isArray(iteratee)){return function(value){return baseGet(value,iteratee.length===1?iteratee[0]:iteratee);};}return iteratee;});}else {iteratees=[identity];}var index=-1;iteratees=arrayMap(iteratees,baseUnary(getIteratee()));var result=baseMap(collection,function(value,key,collection){var criteria=arrayMap(iteratees,function(iteratee){return iteratee(value);});return {'criteria':criteria,'index':++index,'value':value};});return baseSortBy(result,function(object,other){return compareMultiple(object,other,orders);});}/**
       * The base implementation of `_.pick` without support for individual
       * property identifiers.
       *
       * @private
       * @param {Object} object The source object.
       * @param {string[]} paths The property paths to pick.
       * @returns {Object} Returns the new object.
       */function basePick(object,paths){return basePickBy(object,paths,function(value,path){return hasIn(object,path);});}/**
       * The base implementation of  `_.pickBy` without support for iteratee shorthands.
       *
       * @private
       * @param {Object} object The source object.
       * @param {string[]} paths The property paths to pick.
       * @param {Function} predicate The function invoked per property.
       * @returns {Object} Returns the new object.
       */function basePickBy(object,paths,predicate){var index=-1,length=paths.length,result={};while(++index<length){var path=paths[index],value=baseGet(object,path);if(predicate(value,path)){baseSet(result,castPath(path,object),value);}}return result;}/**
       * A specialized version of `baseProperty` which supports deep paths.
       *
       * @private
       * @param {Array|string} path The path of the property to get.
       * @returns {Function} Returns the new accessor function.
       */function basePropertyDeep(path){return function(object){return baseGet(object,path);};}/**
       * The base implementation of `_.pullAllBy` without support for iteratee
       * shorthands.
       *
       * @private
       * @param {Array} array The array to modify.
       * @param {Array} values The values to remove.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns `array`.
       */function basePullAll(array,values,iteratee,comparator){var indexOf=comparator?baseIndexOfWith:baseIndexOf,index=-1,length=values.length,seen=array;if(array===values){values=copyArray(values);}if(iteratee){seen=arrayMap(array,baseUnary(iteratee));}while(++index<length){var fromIndex=0,value=values[index],computed=iteratee?iteratee(value):value;while((fromIndex=indexOf(seen,computed,fromIndex,comparator))>-1){if(seen!==array){splice.call(seen,fromIndex,1);}splice.call(array,fromIndex,1);}}return array;}/**
       * The base implementation of `_.pullAt` without support for individual
       * indexes or capturing the removed elements.
       *
       * @private
       * @param {Array} array The array to modify.
       * @param {number[]} indexes The indexes of elements to remove.
       * @returns {Array} Returns `array`.
       */function basePullAt(array,indexes){var length=array?indexes.length:0,lastIndex=length-1;while(length--){var index=indexes[length];if(length==lastIndex||index!==previous){var previous=index;if(isIndex(index)){splice.call(array,index,1);}else {baseUnset(array,index);}}}return array;}/**
       * The base implementation of `_.random` without support for returning
       * floating-point numbers.
       *
       * @private
       * @param {number} lower The lower bound.
       * @param {number} upper The upper bound.
       * @returns {number} Returns the random number.
       */function baseRandom(lower,upper){return lower+nativeFloor(nativeRandom()*(upper-lower+1));}/**
       * The base implementation of `_.range` and `_.rangeRight` which doesn't
       * coerce arguments.
       *
       * @private
       * @param {number} start The start of the range.
       * @param {number} end The end of the range.
       * @param {number} step The value to increment or decrement by.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Array} Returns the range of numbers.
       */function baseRange(start,end,step,fromRight){var index=-1,length=nativeMax(nativeCeil((end-start)/(step||1)),0),result=Array(length);while(length--){result[fromRight?length:++index]=start;start+=step;}return result;}/**
       * The base implementation of `_.repeat` which doesn't coerce arguments.
       *
       * @private
       * @param {string} string The string to repeat.
       * @param {number} n The number of times to repeat the string.
       * @returns {string} Returns the repeated string.
       */function baseRepeat(string,n){var result='';if(!string||n<1||n>MAX_SAFE_INTEGER){return result;}// Leverage the exponentiation by squaring algorithm for a faster repeat.
  // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
  do{if(n%2){result+=string;}n=nativeFloor(n/2);if(n){string+=string;}}while(n);return result;}/**
       * The base implementation of `_.rest` which doesn't validate or coerce arguments.
       *
       * @private
       * @param {Function} func The function to apply a rest parameter to.
       * @param {number} [start=func.length-1] The start position of the rest parameter.
       * @returns {Function} Returns the new function.
       */function baseRest(func,start){return setToString(overRest(func,start,identity),func+'');}/**
       * The base implementation of `_.sample`.
       *
       * @private
       * @param {Array|Object} collection The collection to sample.
       * @returns {*} Returns the random element.
       */function baseSample(collection){return arraySample(values(collection));}/**
       * The base implementation of `_.sampleSize` without param guards.
       *
       * @private
       * @param {Array|Object} collection The collection to sample.
       * @param {number} n The number of elements to sample.
       * @returns {Array} Returns the random elements.
       */function baseSampleSize(collection,n){var array=values(collection);return shuffleSelf(array,baseClamp(n,0,array.length));}/**
       * The base implementation of `_.set`.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {*} value The value to set.
       * @param {Function} [customizer] The function to customize path creation.
       * @returns {Object} Returns `object`.
       */function baseSet(object,path,value,customizer){if(!isObject(object)){return object;}path=castPath(path,object);var index=-1,length=path.length,lastIndex=length-1,nested=object;while(nested!=null&&++index<length){var key=toKey(path[index]),newValue=value;if(key==='__proto__'||key==='constructor'||key==='prototype'){return object;}if(index!=lastIndex){var objValue=nested[key];newValue=customizer?customizer(objValue,key,nested):undefined$1;if(newValue===undefined$1){newValue=isObject(objValue)?objValue:isIndex(path[index+1])?[]:{};}}assignValue(nested,key,newValue);nested=nested[key];}return object;}/**
       * The base implementation of `setData` without support for hot loop shorting.
       *
       * @private
       * @param {Function} func The function to associate metadata with.
       * @param {*} data The metadata.
       * @returns {Function} Returns `func`.
       */var baseSetData=!metaMap?identity:function(func,data){metaMap.set(func,data);return func;};/**
       * The base implementation of `setToString` without support for hot loop shorting.
       *
       * @private
       * @param {Function} func The function to modify.
       * @param {Function} string The `toString` result.
       * @returns {Function} Returns `func`.
       */var baseSetToString=!defineProperty?identity:function(func,string){return defineProperty(func,'toString',{'configurable':true,'enumerable':false,'value':constant(string),'writable':true});};/**
       * The base implementation of `_.shuffle`.
       *
       * @private
       * @param {Array|Object} collection The collection to shuffle.
       * @returns {Array} Returns the new shuffled array.
       */function baseShuffle(collection){return shuffleSelf(values(collection));}/**
       * The base implementation of `_.slice` without an iteratee call guard.
       *
       * @private
       * @param {Array} array The array to slice.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns the slice of `array`.
       */function baseSlice(array,start,end){var index=-1,length=array.length;if(start<0){start=-start>length?0:length+start;}end=end>length?length:end;if(end<0){end+=length;}length=start>end?0:end-start>>>0;start>>>=0;var result=Array(length);while(++index<length){result[index]=array[index+start];}return result;}/**
       * The base implementation of `_.some` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {boolean} Returns `true` if any element passes the predicate check,
       *  else `false`.
       */function baseSome(collection,predicate){var result;baseEach(collection,function(value,index,collection){result=predicate(value,index,collection);return !result;});return !!result;}/**
       * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
       * performs a binary search of `array` to determine the index at which `value`
       * should be inserted into `array` in order to maintain its sort order.
       *
       * @private
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @param {boolean} [retHighest] Specify returning the highest qualified index.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       */function baseSortedIndex(array,value,retHighest){var low=0,high=array==null?low:array.length;if(typeof value=='number'&&value===value&&high<=HALF_MAX_ARRAY_LENGTH){while(low<high){var mid=low+high>>>1,computed=array[mid];if(computed!==null&&!isSymbol(computed)&&(retHighest?computed<=value:computed<value)){low=mid+1;}else {high=mid;}}return high;}return baseSortedIndexBy(array,value,identity,retHighest);}/**
       * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
       * which invokes `iteratee` for `value` and each element of `array` to compute
       * their sort ranking. The iteratee is invoked with one argument; (value).
       *
       * @private
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @param {Function} iteratee The iteratee invoked per element.
       * @param {boolean} [retHighest] Specify returning the highest qualified index.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       */function baseSortedIndexBy(array,value,iteratee,retHighest){var low=0,high=array==null?0:array.length;if(high===0){return 0;}value=iteratee(value);var valIsNaN=value!==value,valIsNull=value===null,valIsSymbol=isSymbol(value),valIsUndefined=value===undefined$1;while(low<high){var mid=nativeFloor((low+high)/2),computed=iteratee(array[mid]),othIsDefined=computed!==undefined$1,othIsNull=computed===null,othIsReflexive=computed===computed,othIsSymbol=isSymbol(computed);if(valIsNaN){var setLow=retHighest||othIsReflexive;}else if(valIsUndefined){setLow=othIsReflexive&&(retHighest||othIsDefined);}else if(valIsNull){setLow=othIsReflexive&&othIsDefined&&(retHighest||!othIsNull);}else if(valIsSymbol){setLow=othIsReflexive&&othIsDefined&&!othIsNull&&(retHighest||!othIsSymbol);}else if(othIsNull||othIsSymbol){setLow=false;}else {setLow=retHighest?computed<=value:computed<value;}if(setLow){low=mid+1;}else {high=mid;}}return nativeMin(high,MAX_ARRAY_INDEX);}/**
       * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
       * support for iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       */function baseSortedUniq(array,iteratee){var index=-1,length=array.length,resIndex=0,result=[];while(++index<length){var value=array[index],computed=iteratee?iteratee(value):value;if(!index||!eq(computed,seen)){var seen=computed;result[resIndex++]=value===0?0:value;}}return result;}/**
       * The base implementation of `_.toNumber` which doesn't ensure correct
       * conversions of binary, hexadecimal, or octal string values.
       *
       * @private
       * @param {*} value The value to process.
       * @returns {number} Returns the number.
       */function baseToNumber(value){if(typeof value=='number'){return value;}if(isSymbol(value)){return NAN;}return +value;}/**
       * The base implementation of `_.toString` which doesn't convert nullish
       * values to empty strings.
       *
       * @private
       * @param {*} value The value to process.
       * @returns {string} Returns the string.
       */function baseToString(value){// Exit early for strings to avoid a performance hit in some environments.
  if(typeof value=='string'){return value;}if(isArray(value)){// Recursively convert values (susceptible to call stack limits).
  return arrayMap(value,baseToString)+'';}if(isSymbol(value)){return symbolToString?symbolToString.call(value):'';}var result=value+'';return result=='0'&&1/value==-INFINITY?'-0':result;}/**
       * The base implementation of `_.uniqBy` without support for iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       */function baseUniq(array,iteratee,comparator){var index=-1,includes=arrayIncludes,length=array.length,isCommon=true,result=[],seen=result;if(comparator){isCommon=false;includes=arrayIncludesWith;}else if(length>=LARGE_ARRAY_SIZE){var set=iteratee?null:createSet(array);if(set){return setToArray(set);}isCommon=false;includes=cacheHas;seen=new SetCache();}else {seen=iteratee?[]:result;}outer:while(++index<length){var value=array[index],computed=iteratee?iteratee(value):value;value=comparator||value!==0?value:0;if(isCommon&&computed===computed){var seenIndex=seen.length;while(seenIndex--){if(seen[seenIndex]===computed){continue outer;}}if(iteratee){seen.push(computed);}result.push(value);}else if(!includes(seen,computed,comparator)){if(seen!==result){seen.push(computed);}result.push(value);}}return result;}/**
       * The base implementation of `_.unset`.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {Array|string} path The property path to unset.
       * @returns {boolean} Returns `true` if the property is deleted, else `false`.
       */function baseUnset(object,path){path=castPath(path,object);object=parent(object,path);return object==null||delete object[toKey(last(path))];}/**
       * The base implementation of `_.update`.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to update.
       * @param {Function} updater The function to produce the updated value.
       * @param {Function} [customizer] The function to customize path creation.
       * @returns {Object} Returns `object`.
       */function baseUpdate(object,path,updater,customizer){return baseSet(object,path,updater(baseGet(object,path)),customizer);}/**
       * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
       * without support for iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to query.
       * @param {Function} predicate The function invoked per iteration.
       * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Array} Returns the slice of `array`.
       */function baseWhile(array,predicate,isDrop,fromRight){var length=array.length,index=fromRight?length:-1;while((fromRight?index--:++index<length)&&predicate(array[index],index,array)){}return isDrop?baseSlice(array,fromRight?0:index,fromRight?index+1:length):baseSlice(array,fromRight?index+1:0,fromRight?length:index);}/**
       * The base implementation of `wrapperValue` which returns the result of
       * performing a sequence of actions on the unwrapped `value`, where each
       * successive action is supplied the return value of the previous.
       *
       * @private
       * @param {*} value The unwrapped value.
       * @param {Array} actions Actions to perform to resolve the unwrapped value.
       * @returns {*} Returns the resolved value.
       */function baseWrapperValue(value,actions){var result=value;if(result instanceof LazyWrapper){result=result.value();}return arrayReduce(actions,function(result,action){return action.func.apply(action.thisArg,arrayPush([result],action.args));},result);}/**
       * The base implementation of methods like `_.xor`, without support for
       * iteratee shorthands, that accepts an array of arrays to inspect.
       *
       * @private
       * @param {Array} arrays The arrays to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of values.
       */function baseXor(arrays,iteratee,comparator){var length=arrays.length;if(length<2){return length?baseUniq(arrays[0]):[];}var index=-1,result=Array(length);while(++index<length){var array=arrays[index],othIndex=-1;while(++othIndex<length){if(othIndex!=index){result[index]=baseDifference(result[index]||array,arrays[othIndex],iteratee,comparator);}}}return baseUniq(baseFlatten(result,1),iteratee,comparator);}/**
       * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
       *
       * @private
       * @param {Array} props The property identifiers.
       * @param {Array} values The property values.
       * @param {Function} assignFunc The function to assign values.
       * @returns {Object} Returns the new object.
       */function baseZipObject(props,values,assignFunc){var index=-1,length=props.length,valsLength=values.length,result={};while(++index<length){var value=index<valsLength?values[index]:undefined$1;assignFunc(result,props[index],value);}return result;}/**
       * Casts `value` to an empty array if it's not an array like object.
       *
       * @private
       * @param {*} value The value to inspect.
       * @returns {Array|Object} Returns the cast array-like object.
       */function castArrayLikeObject(value){return isArrayLikeObject(value)?value:[];}/**
       * Casts `value` to `identity` if it's not a function.
       *
       * @private
       * @param {*} value The value to inspect.
       * @returns {Function} Returns cast function.
       */function castFunction(value){return typeof value=='function'?value:identity;}/**
       * Casts `value` to a path array if it's not one.
       *
       * @private
       * @param {*} value The value to inspect.
       * @param {Object} [object] The object to query keys on.
       * @returns {Array} Returns the cast property path array.
       */function castPath(value,object){if(isArray(value)){return value;}return isKey(value,object)?[value]:stringToPath(toString(value));}/**
       * A `baseRest` alias which can be replaced with `identity` by module
       * replacement plugins.
       *
       * @private
       * @type {Function}
       * @param {Function} func The function to apply a rest parameter to.
       * @returns {Function} Returns the new function.
       */var castRest=baseRest;/**
       * Casts `array` to a slice if it's needed.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {number} start The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns the cast slice.
       */function castSlice(array,start,end){var length=array.length;end=end===undefined$1?length:end;return !start&&end>=length?array:baseSlice(array,start,end);}/**
       * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
       *
       * @private
       * @param {number|Object} id The timer id or timeout object of the timer to clear.
       */var clearTimeout=ctxClearTimeout||function(id){return root.clearTimeout(id);};/**
       * Creates a clone of  `buffer`.
       *
       * @private
       * @param {Buffer} buffer The buffer to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Buffer} Returns the cloned buffer.
       */function cloneBuffer(buffer,isDeep){if(isDeep){return buffer.slice();}var length=buffer.length,result=allocUnsafe?allocUnsafe(length):new buffer.constructor(length);buffer.copy(result);return result;}/**
       * Creates a clone of `arrayBuffer`.
       *
       * @private
       * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
       * @returns {ArrayBuffer} Returns the cloned array buffer.
       */function cloneArrayBuffer(arrayBuffer){var result=new arrayBuffer.constructor(arrayBuffer.byteLength);new Uint8Array(result).set(new Uint8Array(arrayBuffer));return result;}/**
       * Creates a clone of `dataView`.
       *
       * @private
       * @param {Object} dataView The data view to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Object} Returns the cloned data view.
       */function cloneDataView(dataView,isDeep){var buffer=isDeep?cloneArrayBuffer(dataView.buffer):dataView.buffer;return new dataView.constructor(buffer,dataView.byteOffset,dataView.byteLength);}/**
       * Creates a clone of `regexp`.
       *
       * @private
       * @param {Object} regexp The regexp to clone.
       * @returns {Object} Returns the cloned regexp.
       */function cloneRegExp(regexp){var result=new regexp.constructor(regexp.source,reFlags.exec(regexp));result.lastIndex=regexp.lastIndex;return result;}/**
       * Creates a clone of the `symbol` object.
       *
       * @private
       * @param {Object} symbol The symbol object to clone.
       * @returns {Object} Returns the cloned symbol object.
       */function cloneSymbol(symbol){return symbolValueOf?Object(symbolValueOf.call(symbol)):{};}/**
       * Creates a clone of `typedArray`.
       *
       * @private
       * @param {Object} typedArray The typed array to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Object} Returns the cloned typed array.
       */function cloneTypedArray(typedArray,isDeep){var buffer=isDeep?cloneArrayBuffer(typedArray.buffer):typedArray.buffer;return new typedArray.constructor(buffer,typedArray.byteOffset,typedArray.length);}/**
       * Compares values to sort them in ascending order.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {number} Returns the sort order indicator for `value`.
       */function compareAscending(value,other){if(value!==other){var valIsDefined=value!==undefined$1,valIsNull=value===null,valIsReflexive=value===value,valIsSymbol=isSymbol(value);var othIsDefined=other!==undefined$1,othIsNull=other===null,othIsReflexive=other===other,othIsSymbol=isSymbol(other);if(!othIsNull&&!othIsSymbol&&!valIsSymbol&&value>other||valIsSymbol&&othIsDefined&&othIsReflexive&&!othIsNull&&!othIsSymbol||valIsNull&&othIsDefined&&othIsReflexive||!valIsDefined&&othIsReflexive||!valIsReflexive){return 1;}if(!valIsNull&&!valIsSymbol&&!othIsSymbol&&value<other||othIsSymbol&&valIsDefined&&valIsReflexive&&!valIsNull&&!valIsSymbol||othIsNull&&valIsDefined&&valIsReflexive||!othIsDefined&&valIsReflexive||!othIsReflexive){return -1;}}return 0;}/**
       * Used by `_.orderBy` to compare multiple properties of a value to another
       * and stable sort them.
       *
       * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
       * specify an order of "desc" for descending or "asc" for ascending sort order
       * of corresponding values.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {boolean[]|string[]} orders The order to sort by for each property.
       * @returns {number} Returns the sort order indicator for `object`.
       */function compareMultiple(object,other,orders){var index=-1,objCriteria=object.criteria,othCriteria=other.criteria,length=objCriteria.length,ordersLength=orders.length;while(++index<length){var result=compareAscending(objCriteria[index],othCriteria[index]);if(result){if(index>=ordersLength){return result;}var order=orders[index];return result*(order=='desc'?-1:1);}}// Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
  // that causes it, under certain circumstances, to provide the same value for
  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
  // for more details.
  //
  // This also ensures a stable sort in V8 and other engines.
  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
  return object.index-other.index;}/**
       * Creates an array that is the composition of partially applied arguments,
       * placeholders, and provided arguments into a single array of arguments.
       *
       * @private
       * @param {Array} args The provided arguments.
       * @param {Array} partials The arguments to prepend to those provided.
       * @param {Array} holders The `partials` placeholder indexes.
       * @params {boolean} [isCurried] Specify composing for a curried function.
       * @returns {Array} Returns the new array of composed arguments.
       */function composeArgs(args,partials,holders,isCurried){var argsIndex=-1,argsLength=args.length,holdersLength=holders.length,leftIndex=-1,leftLength=partials.length,rangeLength=nativeMax(argsLength-holdersLength,0),result=Array(leftLength+rangeLength),isUncurried=!isCurried;while(++leftIndex<leftLength){result[leftIndex]=partials[leftIndex];}while(++argsIndex<holdersLength){if(isUncurried||argsIndex<argsLength){result[holders[argsIndex]]=args[argsIndex];}}while(rangeLength--){result[leftIndex++]=args[argsIndex++];}return result;}/**
       * This function is like `composeArgs` except that the arguments composition
       * is tailored for `_.partialRight`.
       *
       * @private
       * @param {Array} args The provided arguments.
       * @param {Array} partials The arguments to append to those provided.
       * @param {Array} holders The `partials` placeholder indexes.
       * @params {boolean} [isCurried] Specify composing for a curried function.
       * @returns {Array} Returns the new array of composed arguments.
       */function composeArgsRight(args,partials,holders,isCurried){var argsIndex=-1,argsLength=args.length,holdersIndex=-1,holdersLength=holders.length,rightIndex=-1,rightLength=partials.length,rangeLength=nativeMax(argsLength-holdersLength,0),result=Array(rangeLength+rightLength),isUncurried=!isCurried;while(++argsIndex<rangeLength){result[argsIndex]=args[argsIndex];}var offset=argsIndex;while(++rightIndex<rightLength){result[offset+rightIndex]=partials[rightIndex];}while(++holdersIndex<holdersLength){if(isUncurried||argsIndex<argsLength){result[offset+holders[holdersIndex]]=args[argsIndex++];}}return result;}/**
       * Copies the values of `source` to `array`.
       *
       * @private
       * @param {Array} source The array to copy values from.
       * @param {Array} [array=[]] The array to copy values to.
       * @returns {Array} Returns `array`.
       */function copyArray(source,array){var index=-1,length=source.length;array||(array=Array(length));while(++index<length){array[index]=source[index];}return array;}/**
       * Copies properties of `source` to `object`.
       *
       * @private
       * @param {Object} source The object to copy properties from.
       * @param {Array} props The property identifiers to copy.
       * @param {Object} [object={}] The object to copy properties to.
       * @param {Function} [customizer] The function to customize copied values.
       * @returns {Object} Returns `object`.
       */function copyObject(source,props,object,customizer){var isNew=!object;object||(object={});var index=-1,length=props.length;while(++index<length){var key=props[index];var newValue=customizer?customizer(object[key],source[key],key,object,source):undefined$1;if(newValue===undefined$1){newValue=source[key];}if(isNew){baseAssignValue(object,key,newValue);}else {assignValue(object,key,newValue);}}return object;}/**
       * Copies own symbols of `source` to `object`.
       *
       * @private
       * @param {Object} source The object to copy symbols from.
       * @param {Object} [object={}] The object to copy symbols to.
       * @returns {Object} Returns `object`.
       */function copySymbols(source,object){return copyObject(source,getSymbols(source),object);}/**
       * Copies own and inherited symbols of `source` to `object`.
       *
       * @private
       * @param {Object} source The object to copy symbols from.
       * @param {Object} [object={}] The object to copy symbols to.
       * @returns {Object} Returns `object`.
       */function copySymbolsIn(source,object){return copyObject(source,getSymbolsIn(source),object);}/**
       * Creates a function like `_.groupBy`.
       *
       * @private
       * @param {Function} setter The function to set accumulator values.
       * @param {Function} [initializer] The accumulator object initializer.
       * @returns {Function} Returns the new aggregator function.
       */function createAggregator(setter,initializer){return function(collection,iteratee){var func=isArray(collection)?arrayAggregator:baseAggregator,accumulator=initializer?initializer():{};return func(collection,setter,getIteratee(iteratee,2),accumulator);};}/**
       * Creates a function like `_.assign`.
       *
       * @private
       * @param {Function} assigner The function to assign values.
       * @returns {Function} Returns the new assigner function.
       */function createAssigner(assigner){return baseRest(function(object,sources){var index=-1,length=sources.length,customizer=length>1?sources[length-1]:undefined$1,guard=length>2?sources[2]:undefined$1;customizer=assigner.length>3&&typeof customizer=='function'?(length--,customizer):undefined$1;if(guard&&isIterateeCall(sources[0],sources[1],guard)){customizer=length<3?undefined$1:customizer;length=1;}object=Object(object);while(++index<length){var source=sources[index];if(source){assigner(object,source,index,customizer);}}return object;});}/**
       * Creates a `baseEach` or `baseEachRight` function.
       *
       * @private
       * @param {Function} eachFunc The function to iterate over a collection.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new base function.
       */function createBaseEach(eachFunc,fromRight){return function(collection,iteratee){if(collection==null){return collection;}if(!isArrayLike(collection)){return eachFunc(collection,iteratee);}var length=collection.length,index=fromRight?length:-1,iterable=Object(collection);while(fromRight?index--:++index<length){if(iteratee(iterable[index],index,iterable)===false){break;}}return collection;};}/**
       * Creates a base function for methods like `_.forIn` and `_.forOwn`.
       *
       * @private
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new base function.
       */function createBaseFor(fromRight){return function(object,iteratee,keysFunc){var index=-1,iterable=Object(object),props=keysFunc(object),length=props.length;while(length--){var key=props[fromRight?length:++index];if(iteratee(iterable[key],key,iterable)===false){break;}}return object;};}/**
       * Creates a function that wraps `func` to invoke it with the optional `this`
       * binding of `thisArg`.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {*} [thisArg] The `this` binding of `func`.
       * @returns {Function} Returns the new wrapped function.
       */function createBind(func,bitmask,thisArg){var isBind=bitmask&WRAP_BIND_FLAG,Ctor=createCtor(func);function wrapper(){var fn=this&&this!==root&&this instanceof wrapper?Ctor:func;return fn.apply(isBind?thisArg:this,arguments);}return wrapper;}/**
       * Creates a function like `_.lowerFirst`.
       *
       * @private
       * @param {string} methodName The name of the `String` case method to use.
       * @returns {Function} Returns the new case function.
       */function createCaseFirst(methodName){return function(string){string=toString(string);var strSymbols=hasUnicode(string)?stringToArray(string):undefined$1;var chr=strSymbols?strSymbols[0]:string.charAt(0);var trailing=strSymbols?castSlice(strSymbols,1).join(''):string.slice(1);return chr[methodName]()+trailing;};}/**
       * Creates a function like `_.camelCase`.
       *
       * @private
       * @param {Function} callback The function to combine each word.
       * @returns {Function} Returns the new compounder function.
       */function createCompounder(callback){return function(string){return arrayReduce(words(deburr(string).replace(reApos,'')),callback,'');};}/**
       * Creates a function that produces an instance of `Ctor` regardless of
       * whether it was invoked as part of a `new` expression or by `call` or `apply`.
       *
       * @private
       * @param {Function} Ctor The constructor to wrap.
       * @returns {Function} Returns the new wrapped function.
       */function createCtor(Ctor){return function(){// Use a `switch` statement to work with class constructors. See
  // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
  // for more details.
  var args=arguments;switch(args.length){case 0:return new Ctor();case 1:return new Ctor(args[0]);case 2:return new Ctor(args[0],args[1]);case 3:return new Ctor(args[0],args[1],args[2]);case 4:return new Ctor(args[0],args[1],args[2],args[3]);case 5:return new Ctor(args[0],args[1],args[2],args[3],args[4]);case 6:return new Ctor(args[0],args[1],args[2],args[3],args[4],args[5]);case 7:return new Ctor(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);}var thisBinding=baseCreate(Ctor.prototype),result=Ctor.apply(thisBinding,args);// Mimic the constructor's `return` behavior.
  // See https://es5.github.io/#x13.2.2 for more details.
  return isObject(result)?result:thisBinding;};}/**
       * Creates a function that wraps `func` to enable currying.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {number} arity The arity of `func`.
       * @returns {Function} Returns the new wrapped function.
       */function createCurry(func,bitmask,arity){var Ctor=createCtor(func);function wrapper(){var length=arguments.length,args=Array(length),index=length,placeholder=getHolder(wrapper);while(index--){args[index]=arguments[index];}var holders=length<3&&args[0]!==placeholder&&args[length-1]!==placeholder?[]:replaceHolders(args,placeholder);length-=holders.length;if(length<arity){return createRecurry(func,bitmask,createHybrid,wrapper.placeholder,undefined$1,args,holders,undefined$1,undefined$1,arity-length);}var fn=this&&this!==root&&this instanceof wrapper?Ctor:func;return apply(fn,this,args);}return wrapper;}/**
       * Creates a `_.find` or `_.findLast` function.
       *
       * @private
       * @param {Function} findIndexFunc The function to find the collection index.
       * @returns {Function} Returns the new find function.
       */function createFind(findIndexFunc){return function(collection,predicate,fromIndex){var iterable=Object(collection);if(!isArrayLike(collection)){var iteratee=getIteratee(predicate,3);collection=keys(collection);predicate=function predicate(key){return iteratee(iterable[key],key,iterable);};}var index=findIndexFunc(collection,predicate,fromIndex);return index>-1?iterable[iteratee?collection[index]:index]:undefined$1;};}/**
       * Creates a `_.flow` or `_.flowRight` function.
       *
       * @private
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new flow function.
       */function createFlow(fromRight){return flatRest(function(funcs){var length=funcs.length,index=length,prereq=LodashWrapper.prototype.thru;if(fromRight){funcs.reverse();}while(index--){var func=funcs[index];if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}if(prereq&&!wrapper&&getFuncName(func)=='wrapper'){var wrapper=new LodashWrapper([],true);}}index=wrapper?index:length;while(++index<length){func=funcs[index];var funcName=getFuncName(func),data=funcName=='wrapper'?getData(func):undefined$1;if(data&&isLaziable(data[0])&&data[1]==(WRAP_ARY_FLAG|WRAP_CURRY_FLAG|WRAP_PARTIAL_FLAG|WRAP_REARG_FLAG)&&!data[4].length&&data[9]==1){wrapper=wrapper[getFuncName(data[0])].apply(wrapper,data[3]);}else {wrapper=func.length==1&&isLaziable(func)?wrapper[funcName]():wrapper.thru(func);}}return function(){var args=arguments,value=args[0];if(wrapper&&args.length==1&&isArray(value)){return wrapper.plant(value).value();}var index=0,result=length?funcs[index].apply(this,args):value;while(++index<length){result=funcs[index].call(this,result);}return result;};});}/**
       * Creates a function that wraps `func` to invoke it with optional `this`
       * binding of `thisArg`, partial application, and currying.
       *
       * @private
       * @param {Function|string} func The function or method name to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {*} [thisArg] The `this` binding of `func`.
       * @param {Array} [partials] The arguments to prepend to those provided to
       *  the new function.
       * @param {Array} [holders] The `partials` placeholder indexes.
       * @param {Array} [partialsRight] The arguments to append to those provided
       *  to the new function.
       * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
       * @param {Array} [argPos] The argument positions of the new function.
       * @param {number} [ary] The arity cap of `func`.
       * @param {number} [arity] The arity of `func`.
       * @returns {Function} Returns the new wrapped function.
       */function createHybrid(func,bitmask,thisArg,partials,holders,partialsRight,holdersRight,argPos,ary,arity){var isAry=bitmask&WRAP_ARY_FLAG,isBind=bitmask&WRAP_BIND_FLAG,isBindKey=bitmask&WRAP_BIND_KEY_FLAG,isCurried=bitmask&(WRAP_CURRY_FLAG|WRAP_CURRY_RIGHT_FLAG),isFlip=bitmask&WRAP_FLIP_FLAG,Ctor=isBindKey?undefined$1:createCtor(func);function wrapper(){var length=arguments.length,args=Array(length),index=length;while(index--){args[index]=arguments[index];}if(isCurried){var placeholder=getHolder(wrapper),holdersCount=countHolders(args,placeholder);}if(partials){args=composeArgs(args,partials,holders,isCurried);}if(partialsRight){args=composeArgsRight(args,partialsRight,holdersRight,isCurried);}length-=holdersCount;if(isCurried&&length<arity){var newHolders=replaceHolders(args,placeholder);return createRecurry(func,bitmask,createHybrid,wrapper.placeholder,thisArg,args,newHolders,argPos,ary,arity-length);}var thisBinding=isBind?thisArg:this,fn=isBindKey?thisBinding[func]:func;length=args.length;if(argPos){args=reorder(args,argPos);}else if(isFlip&&length>1){args.reverse();}if(isAry&&ary<length){args.length=ary;}if(this&&this!==root&&this instanceof wrapper){fn=Ctor||createCtor(fn);}return fn.apply(thisBinding,args);}return wrapper;}/**
       * Creates a function like `_.invertBy`.
       *
       * @private
       * @param {Function} setter The function to set accumulator values.
       * @param {Function} toIteratee The function to resolve iteratees.
       * @returns {Function} Returns the new inverter function.
       */function createInverter(setter,toIteratee){return function(object,iteratee){return baseInverter(object,setter,toIteratee(iteratee),{});};}/**
       * Creates a function that performs a mathematical operation on two values.
       *
       * @private
       * @param {Function} operator The function to perform the operation.
       * @param {number} [defaultValue] The value used for `undefined` arguments.
       * @returns {Function} Returns the new mathematical operation function.
       */function createMathOperation(operator,defaultValue){return function(value,other){var result;if(value===undefined$1&&other===undefined$1){return defaultValue;}if(value!==undefined$1){result=value;}if(other!==undefined$1){if(result===undefined$1){return other;}if(typeof value=='string'||typeof other=='string'){value=baseToString(value);other=baseToString(other);}else {value=baseToNumber(value);other=baseToNumber(other);}result=operator(value,other);}return result;};}/**
       * Creates a function like `_.over`.
       *
       * @private
       * @param {Function} arrayFunc The function to iterate over iteratees.
       * @returns {Function} Returns the new over function.
       */function createOver(arrayFunc){return flatRest(function(iteratees){iteratees=arrayMap(iteratees,baseUnary(getIteratee()));return baseRest(function(args){var thisArg=this;return arrayFunc(iteratees,function(iteratee){return apply(iteratee,thisArg,args);});});});}/**
       * Creates the padding for `string` based on `length`. The `chars` string
       * is truncated if the number of characters exceeds `length`.
       *
       * @private
       * @param {number} length The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padding for `string`.
       */function createPadding(length,chars){chars=chars===undefined$1?' ':baseToString(chars);var charsLength=chars.length;if(charsLength<2){return charsLength?baseRepeat(chars,length):chars;}var result=baseRepeat(chars,nativeCeil(length/stringSize(chars)));return hasUnicode(chars)?castSlice(stringToArray(result),0,length).join(''):result.slice(0,length);}/**
       * Creates a function that wraps `func` to invoke it with the `this` binding
       * of `thisArg` and `partials` prepended to the arguments it receives.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {*} thisArg The `this` binding of `func`.
       * @param {Array} partials The arguments to prepend to those provided to
       *  the new function.
       * @returns {Function} Returns the new wrapped function.
       */function createPartial(func,bitmask,thisArg,partials){var isBind=bitmask&WRAP_BIND_FLAG,Ctor=createCtor(func);function wrapper(){var argsIndex=-1,argsLength=arguments.length,leftIndex=-1,leftLength=partials.length,args=Array(leftLength+argsLength),fn=this&&this!==root&&this instanceof wrapper?Ctor:func;while(++leftIndex<leftLength){args[leftIndex]=partials[leftIndex];}while(argsLength--){args[leftIndex++]=arguments[++argsIndex];}return apply(fn,isBind?thisArg:this,args);}return wrapper;}/**
       * Creates a `_.range` or `_.rangeRight` function.
       *
       * @private
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new range function.
       */function createRange(fromRight){return function(start,end,step){if(step&&typeof step!='number'&&isIterateeCall(start,end,step)){end=step=undefined$1;}// Ensure the sign of `-0` is preserved.
  start=toFinite(start);if(end===undefined$1){end=start;start=0;}else {end=toFinite(end);}step=step===undefined$1?start<end?1:-1:toFinite(step);return baseRange(start,end,step,fromRight);};}/**
       * Creates a function that performs a relational operation on two values.
       *
       * @private
       * @param {Function} operator The function to perform the operation.
       * @returns {Function} Returns the new relational operation function.
       */function createRelationalOperation(operator){return function(value,other){if(!(typeof value=='string'&&typeof other=='string')){value=toNumber(value);other=toNumber(other);}return operator(value,other);};}/**
       * Creates a function that wraps `func` to continue currying.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {Function} wrapFunc The function to create the `func` wrapper.
       * @param {*} placeholder The placeholder value.
       * @param {*} [thisArg] The `this` binding of `func`.
       * @param {Array} [partials] The arguments to prepend to those provided to
       *  the new function.
       * @param {Array} [holders] The `partials` placeholder indexes.
       * @param {Array} [argPos] The argument positions of the new function.
       * @param {number} [ary] The arity cap of `func`.
       * @param {number} [arity] The arity of `func`.
       * @returns {Function} Returns the new wrapped function.
       */function createRecurry(func,bitmask,wrapFunc,placeholder,thisArg,partials,holders,argPos,ary,arity){var isCurry=bitmask&WRAP_CURRY_FLAG,newHolders=isCurry?holders:undefined$1,newHoldersRight=isCurry?undefined$1:holders,newPartials=isCurry?partials:undefined$1,newPartialsRight=isCurry?undefined$1:partials;bitmask|=isCurry?WRAP_PARTIAL_FLAG:WRAP_PARTIAL_RIGHT_FLAG;bitmask&=~(isCurry?WRAP_PARTIAL_RIGHT_FLAG:WRAP_PARTIAL_FLAG);if(!(bitmask&WRAP_CURRY_BOUND_FLAG)){bitmask&=~(WRAP_BIND_FLAG|WRAP_BIND_KEY_FLAG);}var newData=[func,bitmask,thisArg,newPartials,newHolders,newPartialsRight,newHoldersRight,argPos,ary,arity];var result=wrapFunc.apply(undefined$1,newData);if(isLaziable(func)){setData(result,newData);}result.placeholder=placeholder;return setWrapToString(result,func,bitmask);}/**
       * Creates a function like `_.round`.
       *
       * @private
       * @param {string} methodName The name of the `Math` method to use when rounding.
       * @returns {Function} Returns the new round function.
       */function createRound(methodName){var func=Math[methodName];return function(number,precision){number=toNumber(number);precision=precision==null?0:nativeMin(toInteger(precision),292);if(precision&&nativeIsFinite(number)){// Shift with exponential notation to avoid floating-point issues.
  // See [MDN](https://mdn.io/round#Examples) for more details.
  var pair=(toString(number)+'e').split('e'),value=func(pair[0]+'e'+(+pair[1]+precision));pair=(toString(value)+'e').split('e');return +(pair[0]+'e'+(+pair[1]-precision));}return func(number);};}/**
       * Creates a set object of `values`.
       *
       * @private
       * @param {Array} values The values to add to the set.
       * @returns {Object} Returns the new set.
       */var createSet=!(Set&&1/setToArray(new Set([,-0]))[1]==INFINITY)?noop:function(values){return new Set(values);};/**
       * Creates a `_.toPairs` or `_.toPairsIn` function.
       *
       * @private
       * @param {Function} keysFunc The function to get the keys of a given object.
       * @returns {Function} Returns the new pairs function.
       */function createToPairs(keysFunc){return function(object){var tag=getTag(object);if(tag==mapTag){return mapToArray(object);}if(tag==setTag){return setToPairs(object);}return baseToPairs(object,keysFunc(object));};}/**
       * Creates a function that either curries or invokes `func` with optional
       * `this` binding and partially applied arguments.
       *
       * @private
       * @param {Function|string} func The function or method name to wrap.
       * @param {number} bitmask The bitmask flags.
       *    1 - `_.bind`
       *    2 - `_.bindKey`
       *    4 - `_.curry` or `_.curryRight` of a bound function
       *    8 - `_.curry`
       *   16 - `_.curryRight`
       *   32 - `_.partial`
       *   64 - `_.partialRight`
       *  128 - `_.rearg`
       *  256 - `_.ary`
       *  512 - `_.flip`
       * @param {*} [thisArg] The `this` binding of `func`.
       * @param {Array} [partials] The arguments to be partially applied.
       * @param {Array} [holders] The `partials` placeholder indexes.
       * @param {Array} [argPos] The argument positions of the new function.
       * @param {number} [ary] The arity cap of `func`.
       * @param {number} [arity] The arity of `func`.
       * @returns {Function} Returns the new wrapped function.
       */function createWrap(func,bitmask,thisArg,partials,holders,argPos,ary,arity){var isBindKey=bitmask&WRAP_BIND_KEY_FLAG;if(!isBindKey&&typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}var length=partials?partials.length:0;if(!length){bitmask&=~(WRAP_PARTIAL_FLAG|WRAP_PARTIAL_RIGHT_FLAG);partials=holders=undefined$1;}ary=ary===undefined$1?ary:nativeMax(toInteger(ary),0);arity=arity===undefined$1?arity:toInteger(arity);length-=holders?holders.length:0;if(bitmask&WRAP_PARTIAL_RIGHT_FLAG){var partialsRight=partials,holdersRight=holders;partials=holders=undefined$1;}var data=isBindKey?undefined$1:getData(func);var newData=[func,bitmask,thisArg,partials,holders,partialsRight,holdersRight,argPos,ary,arity];if(data){mergeData(newData,data);}func=newData[0];bitmask=newData[1];thisArg=newData[2];partials=newData[3];holders=newData[4];arity=newData[9]=newData[9]===undefined$1?isBindKey?0:func.length:nativeMax(newData[9]-length,0);if(!arity&&bitmask&(WRAP_CURRY_FLAG|WRAP_CURRY_RIGHT_FLAG)){bitmask&=~(WRAP_CURRY_FLAG|WRAP_CURRY_RIGHT_FLAG);}if(!bitmask||bitmask==WRAP_BIND_FLAG){var result=createBind(func,bitmask,thisArg);}else if(bitmask==WRAP_CURRY_FLAG||bitmask==WRAP_CURRY_RIGHT_FLAG){result=createCurry(func,bitmask,arity);}else if((bitmask==WRAP_PARTIAL_FLAG||bitmask==(WRAP_BIND_FLAG|WRAP_PARTIAL_FLAG))&&!holders.length){result=createPartial(func,bitmask,thisArg,partials);}else {result=createHybrid.apply(undefined$1,newData);}var setter=data?baseSetData:setData;return setWrapToString(setter(result,newData),func,bitmask);}/**
       * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
       * of source objects to the destination object for all destination properties
       * that resolve to `undefined`.
       *
       * @private
       * @param {*} objValue The destination value.
       * @param {*} srcValue The source value.
       * @param {string} key The key of the property to assign.
       * @param {Object} object The parent object of `objValue`.
       * @returns {*} Returns the value to assign.
       */function customDefaultsAssignIn(objValue,srcValue,key,object){if(objValue===undefined$1||eq(objValue,objectProto[key])&&!hasOwnProperty.call(object,key)){return srcValue;}return objValue;}/**
       * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
       * objects into destination objects that are passed thru.
       *
       * @private
       * @param {*} objValue The destination value.
       * @param {*} srcValue The source value.
       * @param {string} key The key of the property to merge.
       * @param {Object} object The parent object of `objValue`.
       * @param {Object} source The parent object of `srcValue`.
       * @param {Object} [stack] Tracks traversed source values and their merged
       *  counterparts.
       * @returns {*} Returns the value to assign.
       */function customDefaultsMerge(objValue,srcValue,key,object,source,stack){if(isObject(objValue)&&isObject(srcValue)){// Recursively merge objects and arrays (susceptible to call stack limits).
  stack.set(srcValue,objValue);baseMerge(objValue,srcValue,undefined$1,customDefaultsMerge,stack);stack['delete'](srcValue);}return objValue;}/**
       * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
       * objects.
       *
       * @private
       * @param {*} value The value to inspect.
       * @param {string} key The key of the property to inspect.
       * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
       */function customOmitClone(value){return isPlainObject(value)?undefined$1:value;}/**
       * A specialized version of `baseIsEqualDeep` for arrays with support for
       * partial deep comparisons.
       *
       * @private
       * @param {Array} array The array to compare.
       * @param {Array} other The other array to compare.
       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
       * @param {Function} customizer The function to customize comparisons.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Object} stack Tracks traversed `array` and `other` objects.
       * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
       */function equalArrays(array,other,bitmask,customizer,equalFunc,stack){var isPartial=bitmask&COMPARE_PARTIAL_FLAG,arrLength=array.length,othLength=other.length;if(arrLength!=othLength&&!(isPartial&&othLength>arrLength)){return false;}// Check that cyclic values are equal.
  var arrStacked=stack.get(array);var othStacked=stack.get(other);if(arrStacked&&othStacked){return arrStacked==other&&othStacked==array;}var index=-1,result=true,seen=bitmask&COMPARE_UNORDERED_FLAG?new SetCache():undefined$1;stack.set(array,other);stack.set(other,array);// Ignore non-index properties.
  while(++index<arrLength){var arrValue=array[index],othValue=other[index];if(customizer){var compared=isPartial?customizer(othValue,arrValue,index,other,array,stack):customizer(arrValue,othValue,index,array,other,stack);}if(compared!==undefined$1){if(compared){continue;}result=false;break;}// Recursively compare arrays (susceptible to call stack limits).
  if(seen){if(!arraySome(other,function(othValue,othIndex){if(!cacheHas(seen,othIndex)&&(arrValue===othValue||equalFunc(arrValue,othValue,bitmask,customizer,stack))){return seen.push(othIndex);}})){result=false;break;}}else if(!(arrValue===othValue||equalFunc(arrValue,othValue,bitmask,customizer,stack))){result=false;break;}}stack['delete'](array);stack['delete'](other);return result;}/**
       * A specialized version of `baseIsEqualDeep` for comparing objects of
       * the same `toStringTag`.
       *
       * **Note:** This function only supports comparing values with tags of
       * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {string} tag The `toStringTag` of the objects to compare.
       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
       * @param {Function} customizer The function to customize comparisons.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Object} stack Tracks traversed `object` and `other` objects.
       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
       */function equalByTag(object,other,tag,bitmask,customizer,equalFunc,stack){switch(tag){case dataViewTag:if(object.byteLength!=other.byteLength||object.byteOffset!=other.byteOffset){return false;}object=object.buffer;other=other.buffer;case arrayBufferTag:if(object.byteLength!=other.byteLength||!equalFunc(new Uint8Array(object),new Uint8Array(other))){return false;}return true;case boolTag:case dateTag:case numberTag:// Coerce booleans to `1` or `0` and dates to milliseconds.
  // Invalid dates are coerced to `NaN`.
  return eq(+object,+other);case errorTag:return object.name==other.name&&object.message==other.message;case regexpTag:case stringTag:// Coerce regexes to strings and treat strings, primitives and objects,
  // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
  // for more details.
  return object==other+'';case mapTag:var convert=mapToArray;case setTag:var isPartial=bitmask&COMPARE_PARTIAL_FLAG;convert||(convert=setToArray);if(object.size!=other.size&&!isPartial){return false;}// Assume cyclic values are equal.
  var stacked=stack.get(object);if(stacked){return stacked==other;}bitmask|=COMPARE_UNORDERED_FLAG;// Recursively compare objects (susceptible to call stack limits).
  stack.set(object,other);var result=equalArrays(convert(object),convert(other),bitmask,customizer,equalFunc,stack);stack['delete'](object);return result;case symbolTag:if(symbolValueOf){return symbolValueOf.call(object)==symbolValueOf.call(other);}}return false;}/**
       * A specialized version of `baseIsEqualDeep` for objects with support for
       * partial deep comparisons.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
       * @param {Function} customizer The function to customize comparisons.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Object} stack Tracks traversed `object` and `other` objects.
       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
       */function equalObjects(object,other,bitmask,customizer,equalFunc,stack){var isPartial=bitmask&COMPARE_PARTIAL_FLAG,objProps=getAllKeys(object),objLength=objProps.length,othProps=getAllKeys(other),othLength=othProps.length;if(objLength!=othLength&&!isPartial){return false;}var index=objLength;while(index--){var key=objProps[index];if(!(isPartial?key in other:hasOwnProperty.call(other,key))){return false;}}// Check that cyclic values are equal.
  var objStacked=stack.get(object);var othStacked=stack.get(other);if(objStacked&&othStacked){return objStacked==other&&othStacked==object;}var result=true;stack.set(object,other);stack.set(other,object);var skipCtor=isPartial;while(++index<objLength){key=objProps[index];var objValue=object[key],othValue=other[key];if(customizer){var compared=isPartial?customizer(othValue,objValue,key,other,object,stack):customizer(objValue,othValue,key,object,other,stack);}// Recursively compare objects (susceptible to call stack limits).
  if(!(compared===undefined$1?objValue===othValue||equalFunc(objValue,othValue,bitmask,customizer,stack):compared)){result=false;break;}skipCtor||(skipCtor=key=='constructor');}if(result&&!skipCtor){var objCtor=object.constructor,othCtor=other.constructor;// Non `Object` object instances with different constructors are not equal.
  if(objCtor!=othCtor&&'constructor'in object&&'constructor'in other&&!(typeof objCtor=='function'&&objCtor instanceof objCtor&&typeof othCtor=='function'&&othCtor instanceof othCtor)){result=false;}}stack['delete'](object);stack['delete'](other);return result;}/**
       * A specialized version of `baseRest` which flattens the rest array.
       *
       * @private
       * @param {Function} func The function to apply a rest parameter to.
       * @returns {Function} Returns the new function.
       */function flatRest(func){return setToString(overRest(func,undefined$1,flatten),func+'');}/**
       * Creates an array of own enumerable property names and symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names and symbols.
       */function getAllKeys(object){return baseGetAllKeys(object,keys,getSymbols);}/**
       * Creates an array of own and inherited enumerable property names and
       * symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names and symbols.
       */function getAllKeysIn(object){return baseGetAllKeys(object,keysIn,getSymbolsIn);}/**
       * Gets metadata for `func`.
       *
       * @private
       * @param {Function} func The function to query.
       * @returns {*} Returns the metadata for `func`.
       */var getData=!metaMap?noop:function(func){return metaMap.get(func);};/**
       * Gets the name of `func`.
       *
       * @private
       * @param {Function} func The function to query.
       * @returns {string} Returns the function name.
       */function getFuncName(func){var result=func.name+'',array=realNames[result],length=hasOwnProperty.call(realNames,result)?array.length:0;while(length--){var data=array[length],otherFunc=data.func;if(otherFunc==null||otherFunc==func){return data.name;}}return result;}/**
       * Gets the argument placeholder value for `func`.
       *
       * @private
       * @param {Function} func The function to inspect.
       * @returns {*} Returns the placeholder value.
       */function getHolder(func){var object=hasOwnProperty.call(lodash,'placeholder')?lodash:func;return object.placeholder;}/**
       * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
       * this function returns the custom method, otherwise it returns `baseIteratee`.
       * If arguments are provided, the chosen function is invoked with them and
       * its result is returned.
       *
       * @private
       * @param {*} [value] The value to convert to an iteratee.
       * @param {number} [arity] The arity of the created iteratee.
       * @returns {Function} Returns the chosen function or its result.
       */function getIteratee(){var result=lodash.iteratee||iteratee;result=result===iteratee?baseIteratee:result;return arguments.length?result(arguments[0],arguments[1]):result;}/**
       * Gets the data for `map`.
       *
       * @private
       * @param {Object} map The map to query.
       * @param {string} key The reference key.
       * @returns {*} Returns the map data.
       */function getMapData(map,key){var data=map.__data__;return isKeyable(key)?data[typeof key=='string'?'string':'hash']:data.map;}/**
       * Gets the property names, values, and compare flags of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the match data of `object`.
       */function getMatchData(object){var result=keys(object),length=result.length;while(length--){var key=result[length],value=object[key];result[length]=[key,value,isStrictComparable(value)];}return result;}/**
       * Gets the native function at `key` of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {string} key The key of the method to get.
       * @returns {*} Returns the function if it's native, else `undefined`.
       */function getNative(object,key){var value=getValue(object,key);return baseIsNative(value)?value:undefined$1;}/**
       * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the raw `toStringTag`.
       */function getRawTag(value){var isOwn=hasOwnProperty.call(value,symToStringTag),tag=value[symToStringTag];try{value[symToStringTag]=undefined$1;var unmasked=true;}catch(e){}var result=nativeObjectToString.call(value);if(unmasked){if(isOwn){value[symToStringTag]=tag;}else {delete value[symToStringTag];}}return result;}/**
       * Creates an array of the own enumerable symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of symbols.
       */var getSymbols=!nativeGetSymbols?stubArray:function(object){if(object==null){return [];}object=Object(object);return arrayFilter(nativeGetSymbols(object),function(symbol){return propertyIsEnumerable.call(object,symbol);});};/**
       * Creates an array of the own and inherited enumerable symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of symbols.
       */var getSymbolsIn=!nativeGetSymbols?stubArray:function(object){var result=[];while(object){arrayPush(result,getSymbols(object));object=getPrototype(object);}return result;};/**
       * Gets the `toStringTag` of `value`.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the `toStringTag`.
       */var getTag=baseGetTag;// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
  if(DataView&&getTag(new DataView(new ArrayBuffer(1)))!=dataViewTag||Map&&getTag(new Map())!=mapTag||Promise&&getTag(Promise.resolve())!=promiseTag||Set&&getTag(new Set())!=setTag||WeakMap&&getTag(new WeakMap())!=weakMapTag){getTag=function getTag(value){var result=baseGetTag(value),Ctor=result==objectTag?value.constructor:undefined$1,ctorString=Ctor?toSource(Ctor):'';if(ctorString){switch(ctorString){case dataViewCtorString:return dataViewTag;case mapCtorString:return mapTag;case promiseCtorString:return promiseTag;case setCtorString:return setTag;case weakMapCtorString:return weakMapTag;}}return result;};}/**
       * Gets the view, applying any `transforms` to the `start` and `end` positions.
       *
       * @private
       * @param {number} start The start of the view.
       * @param {number} end The end of the view.
       * @param {Array} transforms The transformations to apply to the view.
       * @returns {Object} Returns an object containing the `start` and `end`
       *  positions of the view.
       */function getView(start,end,transforms){var index=-1,length=transforms.length;while(++index<length){var data=transforms[index],size=data.size;switch(data.type){case'drop':start+=size;break;case'dropRight':end-=size;break;case'take':end=nativeMin(end,start+size);break;case'takeRight':start=nativeMax(start,end-size);break;}}return {'start':start,'end':end};}/**
       * Extracts wrapper details from the `source` body comment.
       *
       * @private
       * @param {string} source The source to inspect.
       * @returns {Array} Returns the wrapper details.
       */function getWrapDetails(source){var match=source.match(reWrapDetails);return match?match[1].split(reSplitDetails):[];}/**
       * Checks if `path` exists on `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array|string} path The path to check.
       * @param {Function} hasFunc The function to check properties.
       * @returns {boolean} Returns `true` if `path` exists, else `false`.
       */function hasPath(object,path,hasFunc){path=castPath(path,object);var index=-1,length=path.length,result=false;while(++index<length){var key=toKey(path[index]);if(!(result=object!=null&&hasFunc(object,key))){break;}object=object[key];}if(result||++index!=length){return result;}length=object==null?0:object.length;return !!length&&isLength(length)&&isIndex(key,length)&&(isArray(object)||isArguments(object));}/**
       * Initializes an array clone.
       *
       * @private
       * @param {Array} array The array to clone.
       * @returns {Array} Returns the initialized clone.
       */function initCloneArray(array){var length=array.length,result=new array.constructor(length);// Add properties assigned by `RegExp#exec`.
  if(length&&typeof array[0]=='string'&&hasOwnProperty.call(array,'index')){result.index=array.index;result.input=array.input;}return result;}/**
       * Initializes an object clone.
       *
       * @private
       * @param {Object} object The object to clone.
       * @returns {Object} Returns the initialized clone.
       */function initCloneObject(object){return typeof object.constructor=='function'&&!isPrototype(object)?baseCreate(getPrototype(object)):{};}/**
       * Initializes an object clone based on its `toStringTag`.
       *
       * **Note:** This function only supports cloning values with tags of
       * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
       *
       * @private
       * @param {Object} object The object to clone.
       * @param {string} tag The `toStringTag` of the object to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Object} Returns the initialized clone.
       */function initCloneByTag(object,tag,isDeep){var Ctor=object.constructor;switch(tag){case arrayBufferTag:return cloneArrayBuffer(object);case boolTag:case dateTag:return new Ctor(+object);case dataViewTag:return cloneDataView(object,isDeep);case float32Tag:case float64Tag:case int8Tag:case int16Tag:case int32Tag:case uint8Tag:case uint8ClampedTag:case uint16Tag:case uint32Tag:return cloneTypedArray(object,isDeep);case mapTag:return new Ctor();case numberTag:case stringTag:return new Ctor(object);case regexpTag:return cloneRegExp(object);case setTag:return new Ctor();case symbolTag:return cloneSymbol(object);}}/**
       * Inserts wrapper `details` in a comment at the top of the `source` body.
       *
       * @private
       * @param {string} source The source to modify.
       * @returns {Array} details The details to insert.
       * @returns {string} Returns the modified source.
       */function insertWrapDetails(source,details){var length=details.length;if(!length){return source;}var lastIndex=length-1;details[lastIndex]=(length>1?'& ':'')+details[lastIndex];details=details.join(length>2?', ':' ');return source.replace(reWrapComment,'{\n/* [wrapped with '+details+'] */\n');}/**
       * Checks if `value` is a flattenable `arguments` object or array.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
       */function isFlattenable(value){return isArray(value)||isArguments(value)||!!(spreadableSymbol&&value&&value[spreadableSymbol]);}/**
       * Checks if `value` is a valid array-like index.
       *
       * @private
       * @param {*} value The value to check.
       * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
       * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
       */function isIndex(value,length){var type=_typeof(value);length=length==null?MAX_SAFE_INTEGER:length;return !!length&&(type=='number'||type!='symbol'&&reIsUint.test(value))&&value>-1&&value%1==0&&value<length;}/**
       * Checks if the given arguments are from an iteratee call.
       *
       * @private
       * @param {*} value The potential iteratee value argument.
       * @param {*} index The potential iteratee index or key argument.
       * @param {*} object The potential iteratee object argument.
       * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
       *  else `false`.
       */function isIterateeCall(value,index,object){if(!isObject(object)){return false;}var type=_typeof(index);if(type=='number'?isArrayLike(object)&&isIndex(index,object.length):type=='string'&&index in object){return eq(object[index],value);}return false;}/**
       * Checks if `value` is a property name and not a property path.
       *
       * @private
       * @param {*} value The value to check.
       * @param {Object} [object] The object to query keys on.
       * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
       */function isKey(value,object){if(isArray(value)){return false;}var type=_typeof(value);if(type=='number'||type=='symbol'||type=='boolean'||value==null||isSymbol(value)){return true;}return reIsPlainProp.test(value)||!reIsDeepProp.test(value)||object!=null&&value in Object(object);}/**
       * Checks if `value` is suitable for use as unique object key.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
       */function isKeyable(value){var type=_typeof(value);return type=='string'||type=='number'||type=='symbol'||type=='boolean'?value!=='__proto__':value===null;}/**
       * Checks if `func` has a lazy counterpart.
       *
       * @private
       * @param {Function} func The function to check.
       * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
       *  else `false`.
       */function isLaziable(func){var funcName=getFuncName(func),other=lodash[funcName];if(typeof other!='function'||!(funcName in LazyWrapper.prototype)){return false;}if(func===other){return true;}var data=getData(other);return !!data&&func===data[0];}/**
       * Checks if `func` has its source masked.
       *
       * @private
       * @param {Function} func The function to check.
       * @returns {boolean} Returns `true` if `func` is masked, else `false`.
       */function isMasked(func){return !!maskSrcKey&&maskSrcKey in func;}/**
       * Checks if `func` is capable of being masked.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
       */var isMaskable=coreJsData?isFunction:stubFalse;/**
       * Checks if `value` is likely a prototype object.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
       */function isPrototype(value){var Ctor=value&&value.constructor,proto=typeof Ctor=='function'&&Ctor.prototype||objectProto;return value===proto;}/**
       * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` if suitable for strict
       *  equality comparisons, else `false`.
       */function isStrictComparable(value){return value===value&&!isObject(value);}/**
       * A specialized version of `matchesProperty` for source values suitable
       * for strict equality comparisons, i.e. `===`.
       *
       * @private
       * @param {string} key The key of the property to get.
       * @param {*} srcValue The value to match.
       * @returns {Function} Returns the new spec function.
       */function matchesStrictComparable(key,srcValue){return function(object){if(object==null){return false;}return object[key]===srcValue&&(srcValue!==undefined$1||key in Object(object));};}/**
       * A specialized version of `_.memoize` which clears the memoized function's
       * cache when it exceeds `MAX_MEMOIZE_SIZE`.
       *
       * @private
       * @param {Function} func The function to have its output memoized.
       * @returns {Function} Returns the new memoized function.
       */function memoizeCapped(func){var result=memoize(func,function(key){if(cache.size===MAX_MEMOIZE_SIZE){cache.clear();}return key;});var cache=result.cache;return result;}/**
       * Merges the function metadata of `source` into `data`.
       *
       * Merging metadata reduces the number of wrappers used to invoke a function.
       * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
       * may be applied regardless of execution order. Methods like `_.ary` and
       * `_.rearg` modify function arguments, making the order in which they are
       * executed important, preventing the merging of metadata. However, we make
       * an exception for a safe combined case where curried functions have `_.ary`
       * and or `_.rearg` applied.
       *
       * @private
       * @param {Array} data The destination metadata.
       * @param {Array} source The source metadata.
       * @returns {Array} Returns `data`.
       */function mergeData(data,source){var bitmask=data[1],srcBitmask=source[1],newBitmask=bitmask|srcBitmask,isCommon=newBitmask<(WRAP_BIND_FLAG|WRAP_BIND_KEY_FLAG|WRAP_ARY_FLAG);var isCombo=srcBitmask==WRAP_ARY_FLAG&&bitmask==WRAP_CURRY_FLAG||srcBitmask==WRAP_ARY_FLAG&&bitmask==WRAP_REARG_FLAG&&data[7].length<=source[8]||srcBitmask==(WRAP_ARY_FLAG|WRAP_REARG_FLAG)&&source[7].length<=source[8]&&bitmask==WRAP_CURRY_FLAG;// Exit early if metadata can't be merged.
  if(!(isCommon||isCombo)){return data;}// Use source `thisArg` if available.
  if(srcBitmask&WRAP_BIND_FLAG){data[2]=source[2];// Set when currying a bound function.
  newBitmask|=bitmask&WRAP_BIND_FLAG?0:WRAP_CURRY_BOUND_FLAG;}// Compose partial arguments.
  var value=source[3];if(value){var partials=data[3];data[3]=partials?composeArgs(partials,value,source[4]):value;data[4]=partials?replaceHolders(data[3],PLACEHOLDER):source[4];}// Compose partial right arguments.
  value=source[5];if(value){partials=data[5];data[5]=partials?composeArgsRight(partials,value,source[6]):value;data[6]=partials?replaceHolders(data[5],PLACEHOLDER):source[6];}// Use source `argPos` if available.
  value=source[7];if(value){data[7]=value;}// Use source `ary` if it's smaller.
  if(srcBitmask&WRAP_ARY_FLAG){data[8]=data[8]==null?source[8]:nativeMin(data[8],source[8]);}// Use source `arity` if one is not provided.
  if(data[9]==null){data[9]=source[9];}// Use source `func` and merge bitmasks.
  data[0]=source[0];data[1]=newBitmask;return data;}/**
       * This function is like
       * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
       * except that it includes inherited enumerable properties.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       */function nativeKeysIn(object){var result=[];if(object!=null){for(var key in Object(object)){result.push(key);}}return result;}/**
       * Converts `value` to a string using `Object.prototype.toString`.
       *
       * @private
       * @param {*} value The value to convert.
       * @returns {string} Returns the converted string.
       */function objectToString(value){return nativeObjectToString.call(value);}/**
       * A specialized version of `baseRest` which transforms the rest array.
       *
       * @private
       * @param {Function} func The function to apply a rest parameter to.
       * @param {number} [start=func.length-1] The start position of the rest parameter.
       * @param {Function} transform The rest array transform.
       * @returns {Function} Returns the new function.
       */function overRest(func,start,transform){start=nativeMax(start===undefined$1?func.length-1:start,0);return function(){var args=arguments,index=-1,length=nativeMax(args.length-start,0),array=Array(length);while(++index<length){array[index]=args[start+index];}index=-1;var otherArgs=Array(start+1);while(++index<start){otherArgs[index]=args[index];}otherArgs[start]=transform(array);return apply(func,this,otherArgs);};}/**
       * Gets the parent value at `path` of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array} path The path to get the parent value of.
       * @returns {*} Returns the parent value.
       */function parent(object,path){return path.length<2?object:baseGet(object,baseSlice(path,0,-1));}/**
       * Reorder `array` according to the specified indexes where the element at
       * the first index is assigned as the first element, the element at
       * the second index is assigned as the second element, and so on.
       *
       * @private
       * @param {Array} array The array to reorder.
       * @param {Array} indexes The arranged array indexes.
       * @returns {Array} Returns `array`.
       */function reorder(array,indexes){var arrLength=array.length,length=nativeMin(indexes.length,arrLength),oldArray=copyArray(array);while(length--){var index=indexes[length];array[length]=isIndex(index,arrLength)?oldArray[index]:undefined$1;}return array;}/**
       * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
       *
       * @private
       * @param {Object} object The object to query.
       * @param {string} key The key of the property to get.
       * @returns {*} Returns the property value.
       */function safeGet(object,key){if(key==='constructor'&&typeof object[key]==='function'){return;}if(key=='__proto__'){return;}return object[key];}/**
       * Sets metadata for `func`.
       *
       * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
       * period of time, it will trip its breaker and transition to an identity
       * function to avoid garbage collection pauses in V8. See
       * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
       * for more details.
       *
       * @private
       * @param {Function} func The function to associate metadata with.
       * @param {*} data The metadata.
       * @returns {Function} Returns `func`.
       */var setData=shortOut(baseSetData);/**
       * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
       *
       * @private
       * @param {Function} func The function to delay.
       * @param {number} wait The number of milliseconds to delay invocation.
       * @returns {number|Object} Returns the timer id or timeout object.
       */var setTimeout=ctxSetTimeout||function(func,wait){return root.setTimeout(func,wait);};/**
       * Sets the `toString` method of `func` to return `string`.
       *
       * @private
       * @param {Function} func The function to modify.
       * @param {Function} string The `toString` result.
       * @returns {Function} Returns `func`.
       */var setToString=shortOut(baseSetToString);/**
       * Sets the `toString` method of `wrapper` to mimic the source of `reference`
       * with wrapper details in a comment at the top of the source body.
       *
       * @private
       * @param {Function} wrapper The function to modify.
       * @param {Function} reference The reference function.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @returns {Function} Returns `wrapper`.
       */function setWrapToString(wrapper,reference,bitmask){var source=reference+'';return setToString(wrapper,insertWrapDetails(source,updateWrapDetails(getWrapDetails(source),bitmask)));}/**
       * Creates a function that'll short out and invoke `identity` instead
       * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
       * milliseconds.
       *
       * @private
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new shortable function.
       */function shortOut(func){var count=0,lastCalled=0;return function(){var stamp=nativeNow(),remaining=HOT_SPAN-(stamp-lastCalled);lastCalled=stamp;if(remaining>0){if(++count>=HOT_COUNT){return arguments[0];}}else {count=0;}return func.apply(undefined$1,arguments);};}/**
       * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
       *
       * @private
       * @param {Array} array The array to shuffle.
       * @param {number} [size=array.length] The size of `array`.
       * @returns {Array} Returns `array`.
       */function shuffleSelf(array,size){var index=-1,length=array.length,lastIndex=length-1;size=size===undefined$1?length:size;while(++index<size){var rand=baseRandom(index,lastIndex),value=array[rand];array[rand]=array[index];array[index]=value;}array.length=size;return array;}/**
       * Converts `string` to a property path array.
       *
       * @private
       * @param {string} string The string to convert.
       * @returns {Array} Returns the property path array.
       */var stringToPath=memoizeCapped(function(string){var result=[];if(string.charCodeAt(0)===46/* . */){result.push('');}string.replace(rePropName,function(match,number,quote,subString){result.push(quote?subString.replace(reEscapeChar,'$1'):number||match);});return result;});/**
       * Converts `value` to a string key if it's not a string or symbol.
       *
       * @private
       * @param {*} value The value to inspect.
       * @returns {string|symbol} Returns the key.
       */function toKey(value){if(typeof value=='string'||isSymbol(value)){return value;}var result=value+'';return result=='0'&&1/value==-INFINITY?'-0':result;}/**
       * Converts `func` to its source code.
       *
       * @private
       * @param {Function} func The function to convert.
       * @returns {string} Returns the source code.
       */function toSource(func){if(func!=null){try{return funcToString.call(func);}catch(e){}try{return func+'';}catch(e){}}return '';}/**
       * Updates wrapper `details` based on `bitmask` flags.
       *
       * @private
       * @returns {Array} details The details to modify.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @returns {Array} Returns `details`.
       */function updateWrapDetails(details,bitmask){arrayEach(wrapFlags,function(pair){var value='_.'+pair[0];if(bitmask&pair[1]&&!arrayIncludes(details,value)){details.push(value);}});return details.sort();}/**
       * Creates a clone of `wrapper`.
       *
       * @private
       * @param {Object} wrapper The wrapper to clone.
       * @returns {Object} Returns the cloned wrapper.
       */function wrapperClone(wrapper){if(wrapper instanceof LazyWrapper){return wrapper.clone();}var result=new LodashWrapper(wrapper.__wrapped__,wrapper.__chain__);result.__actions__=copyArray(wrapper.__actions__);result.__index__=wrapper.__index__;result.__values__=wrapper.__values__;return result;}/*------------------------------------------------------------------------*/ /**
       * Creates an array of elements split into groups the length of `size`.
       * If `array` can't be split evenly, the final chunk will be the remaining
       * elements.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to process.
       * @param {number} [size=1] The length of each chunk
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the new array of chunks.
       * @example
       *
       * _.chunk(['a', 'b', 'c', 'd'], 2);
       * // => [['a', 'b'], ['c', 'd']]
       *
       * _.chunk(['a', 'b', 'c', 'd'], 3);
       * // => [['a', 'b', 'c'], ['d']]
       */function chunk(array,size,guard){if(guard?isIterateeCall(array,size,guard):size===undefined$1){size=1;}else {size=nativeMax(toInteger(size),0);}var length=array==null?0:array.length;if(!length||size<1){return [];}var index=0,resIndex=0,result=Array(nativeCeil(length/size));while(index<length){result[resIndex++]=baseSlice(array,index,index+=size);}return result;}/**
       * Creates an array with all falsey values removed. The values `false`, `null`,
       * `0`, `""`, `undefined`, and `NaN` are falsey.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to compact.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * _.compact([0, 1, false, 2, '', 3]);
       * // => [1, 2, 3]
       */function compact(array){var index=-1,length=array==null?0:array.length,resIndex=0,result=[];while(++index<length){var value=array[index];if(value){result[resIndex++]=value;}}return result;}/**
       * Creates a new array concatenating `array` with any additional arrays
       * and/or values.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to concatenate.
       * @param {...*} [values] The values to concatenate.
       * @returns {Array} Returns the new concatenated array.
       * @example
       *
       * var array = [1];
       * var other = _.concat(array, 2, [3], [[4]]);
       *
       * console.log(other);
       * // => [1, 2, 3, [4]]
       *
       * console.log(array);
       * // => [1]
       */function concat(){var length=arguments.length;if(!length){return [];}var args=Array(length-1),array=arguments[0],index=length;while(index--){args[index-1]=arguments[index];}return arrayPush(isArray(array)?copyArray(array):[array],baseFlatten(args,1));}/**
       * Creates an array of `array` values not included in the other given arrays
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons. The order and references of result values are
       * determined by the first array.
       *
       * **Note:** Unlike `_.pullAll`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {...Array} [values] The values to exclude.
       * @returns {Array} Returns the new array of filtered values.
       * @see _.without, _.xor
       * @example
       *
       * _.difference([2, 1], [2, 3]);
       * // => [1]
       */var difference=baseRest(function(array,values){return isArrayLikeObject(array)?baseDifference(array,baseFlatten(values,1,isArrayLikeObject,true)):[];});/**
       * This method is like `_.difference` except that it accepts `iteratee` which
       * is invoked for each element of `array` and `values` to generate the criterion
       * by which they're compared. The order and references of result values are
       * determined by the first array. The iteratee is invoked with one argument:
       * (value).
       *
       * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {...Array} [values] The values to exclude.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
       * // => [1.2]
       *
       * // The `_.property` iteratee shorthand.
       * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
       * // => [{ 'x': 2 }]
       */var differenceBy=baseRest(function(array,values){var iteratee=last(values);if(isArrayLikeObject(iteratee)){iteratee=undefined$1;}return isArrayLikeObject(array)?baseDifference(array,baseFlatten(values,1,isArrayLikeObject,true),getIteratee(iteratee,2)):[];});/**
       * This method is like `_.difference` except that it accepts `comparator`
       * which is invoked to compare elements of `array` to `values`. The order and
       * references of result values are determined by the first array. The comparator
       * is invoked with two arguments: (arrVal, othVal).
       *
       * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {...Array} [values] The values to exclude.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
       *
       * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
       * // => [{ 'x': 2, 'y': 1 }]
       */var differenceWith=baseRest(function(array,values){var comparator=last(values);if(isArrayLikeObject(comparator)){comparator=undefined$1;}return isArrayLikeObject(array)?baseDifference(array,baseFlatten(values,1,isArrayLikeObject,true),undefined$1,comparator):[];});/**
       * Creates a slice of `array` with `n` elements dropped from the beginning.
       *
       * @static
       * @memberOf _
       * @since 0.5.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=1] The number of elements to drop.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.drop([1, 2, 3]);
       * // => [2, 3]
       *
       * _.drop([1, 2, 3], 2);
       * // => [3]
       *
       * _.drop([1, 2, 3], 5);
       * // => []
       *
       * _.drop([1, 2, 3], 0);
       * // => [1, 2, 3]
       */function drop(array,n,guard){var length=array==null?0:array.length;if(!length){return [];}n=guard||n===undefined$1?1:toInteger(n);return baseSlice(array,n<0?0:n,length);}/**
       * Creates a slice of `array` with `n` elements dropped from the end.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=1] The number of elements to drop.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.dropRight([1, 2, 3]);
       * // => [1, 2]
       *
       * _.dropRight([1, 2, 3], 2);
       * // => [1]
       *
       * _.dropRight([1, 2, 3], 5);
       * // => []
       *
       * _.dropRight([1, 2, 3], 0);
       * // => [1, 2, 3]
       */function dropRight(array,n,guard){var length=array==null?0:array.length;if(!length){return [];}n=guard||n===undefined$1?1:toInteger(n);n=length-n;return baseSlice(array,0,n<0?0:n);}/**
       * Creates a slice of `array` excluding elements dropped from the end.
       * Elements are dropped until `predicate` returns falsey. The predicate is
       * invoked with three arguments: (value, index, array).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': true },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': false }
       * ];
       *
       * _.dropRightWhile(users, function(o) { return !o.active; });
       * // => objects for ['barney']
       *
       * // The `_.matches` iteratee shorthand.
       * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
       * // => objects for ['barney', 'fred']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.dropRightWhile(users, ['active', false]);
       * // => objects for ['barney']
       *
       * // The `_.property` iteratee shorthand.
       * _.dropRightWhile(users, 'active');
       * // => objects for ['barney', 'fred', 'pebbles']
       */function dropRightWhile(array,predicate){return array&&array.length?baseWhile(array,getIteratee(predicate,3),true,true):[];}/**
       * Creates a slice of `array` excluding elements dropped from the beginning.
       * Elements are dropped until `predicate` returns falsey. The predicate is
       * invoked with three arguments: (value, index, array).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': false },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': true }
       * ];
       *
       * _.dropWhile(users, function(o) { return !o.active; });
       * // => objects for ['pebbles']
       *
       * // The `_.matches` iteratee shorthand.
       * _.dropWhile(users, { 'user': 'barney', 'active': false });
       * // => objects for ['fred', 'pebbles']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.dropWhile(users, ['active', false]);
       * // => objects for ['pebbles']
       *
       * // The `_.property` iteratee shorthand.
       * _.dropWhile(users, 'active');
       * // => objects for ['barney', 'fred', 'pebbles']
       */function dropWhile(array,predicate){return array&&array.length?baseWhile(array,getIteratee(predicate,3),true):[];}/**
       * Fills elements of `array` with `value` from `start` up to, but not
       * including, `end`.
       *
       * **Note:** This method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 3.2.0
       * @category Array
       * @param {Array} array The array to fill.
       * @param {*} value The value to fill `array` with.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = [1, 2, 3];
       *
       * _.fill(array, 'a');
       * console.log(array);
       * // => ['a', 'a', 'a']
       *
       * _.fill(Array(3), 2);
       * // => [2, 2, 2]
       *
       * _.fill([4, 6, 8, 10], '*', 1, 3);
       * // => [4, '*', '*', 10]
       */function fill(array,value,start,end){var length=array==null?0:array.length;if(!length){return [];}if(start&&typeof start!='number'&&isIterateeCall(array,value,start)){start=0;end=length;}return baseFill(array,value,start,end);}/**
       * This method is like `_.find` except that it returns the index of the first
       * element `predicate` returns truthy for instead of the element itself.
       *
       * @static
       * @memberOf _
       * @since 1.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param {number} [fromIndex=0] The index to search from.
       * @returns {number} Returns the index of the found element, else `-1`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': false },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': true }
       * ];
       *
       * _.findIndex(users, function(o) { return o.user == 'barney'; });
       * // => 0
       *
       * // The `_.matches` iteratee shorthand.
       * _.findIndex(users, { 'user': 'fred', 'active': false });
       * // => 1
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.findIndex(users, ['active', false]);
       * // => 0
       *
       * // The `_.property` iteratee shorthand.
       * _.findIndex(users, 'active');
       * // => 2
       */function findIndex(array,predicate,fromIndex){var length=array==null?0:array.length;if(!length){return -1;}var index=fromIndex==null?0:toInteger(fromIndex);if(index<0){index=nativeMax(length+index,0);}return baseFindIndex(array,getIteratee(predicate,3),index);}/**
       * This method is like `_.findIndex` except that it iterates over elements
       * of `collection` from right to left.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param {number} [fromIndex=array.length-1] The index to search from.
       * @returns {number} Returns the index of the found element, else `-1`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': true },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': false }
       * ];
       *
       * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
       * // => 2
       *
       * // The `_.matches` iteratee shorthand.
       * _.findLastIndex(users, { 'user': 'barney', 'active': true });
       * // => 0
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.findLastIndex(users, ['active', false]);
       * // => 2
       *
       * // The `_.property` iteratee shorthand.
       * _.findLastIndex(users, 'active');
       * // => 0
       */function findLastIndex(array,predicate,fromIndex){var length=array==null?0:array.length;if(!length){return -1;}var index=length-1;if(fromIndex!==undefined$1){index=toInteger(fromIndex);index=fromIndex<0?nativeMax(length+index,0):nativeMin(index,length-1);}return baseFindIndex(array,getIteratee(predicate,3),index,true);}/**
       * Flattens `array` a single level deep.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to flatten.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * _.flatten([1, [2, [3, [4]], 5]]);
       * // => [1, 2, [3, [4]], 5]
       */function flatten(array){var length=array==null?0:array.length;return length?baseFlatten(array,1):[];}/**
       * Recursively flattens `array`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to flatten.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * _.flattenDeep([1, [2, [3, [4]], 5]]);
       * // => [1, 2, 3, 4, 5]
       */function flattenDeep(array){var length=array==null?0:array.length;return length?baseFlatten(array,INFINITY):[];}/**
       * Recursively flatten `array` up to `depth` times.
       *
       * @static
       * @memberOf _
       * @since 4.4.0
       * @category Array
       * @param {Array} array The array to flatten.
       * @param {number} [depth=1] The maximum recursion depth.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * var array = [1, [2, [3, [4]], 5]];
       *
       * _.flattenDepth(array, 1);
       * // => [1, 2, [3, [4]], 5]
       *
       * _.flattenDepth(array, 2);
       * // => [1, 2, 3, [4], 5]
       */function flattenDepth(array,depth){var length=array==null?0:array.length;if(!length){return [];}depth=depth===undefined$1?1:toInteger(depth);return baseFlatten(array,depth);}/**
       * The inverse of `_.toPairs`; this method returns an object composed
       * from key-value `pairs`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} pairs The key-value pairs.
       * @returns {Object} Returns the new object.
       * @example
       *
       * _.fromPairs([['a', 1], ['b', 2]]);
       * // => { 'a': 1, 'b': 2 }
       */function fromPairs(pairs){var index=-1,length=pairs==null?0:pairs.length,result={};while(++index<length){var pair=pairs[index];result[pair[0]]=pair[1];}return result;}/**
       * Gets the first element of `array`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @alias first
       * @category Array
       * @param {Array} array The array to query.
       * @returns {*} Returns the first element of `array`.
       * @example
       *
       * _.head([1, 2, 3]);
       * // => 1
       *
       * _.head([]);
       * // => undefined
       */function head(array){return array&&array.length?array[0]:undefined$1;}/**
       * Gets the index at which the first occurrence of `value` is found in `array`
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons. If `fromIndex` is negative, it's used as the
       * offset from the end of `array`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} [fromIndex=0] The index to search from.
       * @returns {number} Returns the index of the matched value, else `-1`.
       * @example
       *
       * _.indexOf([1, 2, 1, 2], 2);
       * // => 1
       *
       * // Search from the `fromIndex`.
       * _.indexOf([1, 2, 1, 2], 2, 2);
       * // => 3
       */function indexOf(array,value,fromIndex){var length=array==null?0:array.length;if(!length){return -1;}var index=fromIndex==null?0:toInteger(fromIndex);if(index<0){index=nativeMax(length+index,0);}return baseIndexOf(array,value,index);}/**
       * Gets all but the last element of `array`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to query.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.initial([1, 2, 3]);
       * // => [1, 2]
       */function initial(array){var length=array==null?0:array.length;return length?baseSlice(array,0,-1):[];}/**
       * Creates an array of unique values that are included in all given arrays
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons. The order and references of result values are
       * determined by the first array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @returns {Array} Returns the new array of intersecting values.
       * @example
       *
       * _.intersection([2, 1], [2, 3]);
       * // => [2]
       */var intersection=baseRest(function(arrays){var mapped=arrayMap(arrays,castArrayLikeObject);return mapped.length&&mapped[0]===arrays[0]?baseIntersection(mapped):[];});/**
       * This method is like `_.intersection` except that it accepts `iteratee`
       * which is invoked for each element of each `arrays` to generate the criterion
       * by which they're compared. The order and references of result values are
       * determined by the first array. The iteratee is invoked with one argument:
       * (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new array of intersecting values.
       * @example
       *
       * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
       * // => [2.1]
       *
       * // The `_.property` iteratee shorthand.
       * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
       * // => [{ 'x': 1 }]
       */var intersectionBy=baseRest(function(arrays){var iteratee=last(arrays),mapped=arrayMap(arrays,castArrayLikeObject);if(iteratee===last(mapped)){iteratee=undefined$1;}else {mapped.pop();}return mapped.length&&mapped[0]===arrays[0]?baseIntersection(mapped,getIteratee(iteratee,2)):[];});/**
       * This method is like `_.intersection` except that it accepts `comparator`
       * which is invoked to compare elements of `arrays`. The order and references
       * of result values are determined by the first array. The comparator is
       * invoked with two arguments: (arrVal, othVal).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of intersecting values.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
       * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
       *
       * _.intersectionWith(objects, others, _.isEqual);
       * // => [{ 'x': 1, 'y': 2 }]
       */var intersectionWith=baseRest(function(arrays){var comparator=last(arrays),mapped=arrayMap(arrays,castArrayLikeObject);comparator=typeof comparator=='function'?comparator:undefined$1;if(comparator){mapped.pop();}return mapped.length&&mapped[0]===arrays[0]?baseIntersection(mapped,undefined$1,comparator):[];});/**
       * Converts all elements in `array` into a string separated by `separator`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to convert.
       * @param {string} [separator=','] The element separator.
       * @returns {string} Returns the joined string.
       * @example
       *
       * _.join(['a', 'b', 'c'], '~');
       * // => 'a~b~c'
       */function join(array,separator){return array==null?'':nativeJoin.call(array,separator);}/**
       * Gets the last element of `array`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to query.
       * @returns {*} Returns the last element of `array`.
       * @example
       *
       * _.last([1, 2, 3]);
       * // => 3
       */function last(array){var length=array==null?0:array.length;return length?array[length-1]:undefined$1;}/**
       * This method is like `_.indexOf` except that it iterates over elements of
       * `array` from right to left.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} [fromIndex=array.length-1] The index to search from.
       * @returns {number} Returns the index of the matched value, else `-1`.
       * @example
       *
       * _.lastIndexOf([1, 2, 1, 2], 2);
       * // => 3
       *
       * // Search from the `fromIndex`.
       * _.lastIndexOf([1, 2, 1, 2], 2, 2);
       * // => 1
       */function lastIndexOf(array,value,fromIndex){var length=array==null?0:array.length;if(!length){return -1;}var index=length;if(fromIndex!==undefined$1){index=toInteger(fromIndex);index=index<0?nativeMax(length+index,0):nativeMin(index,length-1);}return value===value?strictLastIndexOf(array,value,index):baseFindIndex(array,baseIsNaN,index,true);}/**
       * Gets the element at index `n` of `array`. If `n` is negative, the nth
       * element from the end is returned.
       *
       * @static
       * @memberOf _
       * @since 4.11.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=0] The index of the element to return.
       * @returns {*} Returns the nth element of `array`.
       * @example
       *
       * var array = ['a', 'b', 'c', 'd'];
       *
       * _.nth(array, 1);
       * // => 'b'
       *
       * _.nth(array, -2);
       * // => 'c';
       */function nth(array,n){return array&&array.length?baseNth(array,toInteger(n)):undefined$1;}/**
       * Removes all given values from `array` using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
       * to remove elements from an array by predicate.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {...*} [values] The values to remove.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
       *
       * _.pull(array, 'a', 'c');
       * console.log(array);
       * // => ['b', 'b']
       */var pull=baseRest(pullAll);/**
       * This method is like `_.pull` except that it accepts an array of values to remove.
       *
       * **Note:** Unlike `_.difference`, this method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {Array} values The values to remove.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
       *
       * _.pullAll(array, ['a', 'c']);
       * console.log(array);
       * // => ['b', 'b']
       */function pullAll(array,values){return array&&array.length&&values&&values.length?basePullAll(array,values):array;}/**
       * This method is like `_.pullAll` except that it accepts `iteratee` which is
       * invoked for each element of `array` and `values` to generate the criterion
       * by which they're compared. The iteratee is invoked with one argument: (value).
       *
       * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {Array} values The values to remove.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
       *
       * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
       * console.log(array);
       * // => [{ 'x': 2 }]
       */function pullAllBy(array,values,iteratee){return array&&array.length&&values&&values.length?basePullAll(array,values,getIteratee(iteratee,2)):array;}/**
       * This method is like `_.pullAll` except that it accepts `comparator` which
       * is invoked to compare elements of `array` to `values`. The comparator is
       * invoked with two arguments: (arrVal, othVal).
       *
       * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 4.6.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {Array} values The values to remove.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
       *
       * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
       * console.log(array);
       * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
       */function pullAllWith(array,values,comparator){return array&&array.length&&values&&values.length?basePullAll(array,values,undefined$1,comparator):array;}/**
       * Removes elements from `array` corresponding to `indexes` and returns an
       * array of removed elements.
       *
       * **Note:** Unlike `_.at`, this method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {...(number|number[])} [indexes] The indexes of elements to remove.
       * @returns {Array} Returns the new array of removed elements.
       * @example
       *
       * var array = ['a', 'b', 'c', 'd'];
       * var pulled = _.pullAt(array, [1, 3]);
       *
       * console.log(array);
       * // => ['a', 'c']
       *
       * console.log(pulled);
       * // => ['b', 'd']
       */var pullAt=flatRest(function(array,indexes){var length=array==null?0:array.length,result=baseAt(array,indexes);basePullAt(array,arrayMap(indexes,function(index){return isIndex(index,length)?+index:index;}).sort(compareAscending));return result;});/**
       * Removes all elements from `array` that `predicate` returns truthy for
       * and returns an array of the removed elements. The predicate is invoked
       * with three arguments: (value, index, array).
       *
       * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
       * to pull elements from an array by value.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new array of removed elements.
       * @example
       *
       * var array = [1, 2, 3, 4];
       * var evens = _.remove(array, function(n) {
       *   return n % 2 == 0;
       * });
       *
       * console.log(array);
       * // => [1, 3]
       *
       * console.log(evens);
       * // => [2, 4]
       */function remove(array,predicate){var result=[];if(!(array&&array.length)){return result;}var index=-1,indexes=[],length=array.length;predicate=getIteratee(predicate,3);while(++index<length){var value=array[index];if(predicate(value,index,array)){result.push(value);indexes.push(index);}}basePullAt(array,indexes);return result;}/**
       * Reverses `array` so that the first element becomes the last, the second
       * element becomes the second to last, and so on.
       *
       * **Note:** This method mutates `array` and is based on
       * [`Array#reverse`](https://mdn.io/Array/reverse).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = [1, 2, 3];
       *
       * _.reverse(array);
       * // => [3, 2, 1]
       *
       * console.log(array);
       * // => [3, 2, 1]
       */function reverse(array){return array==null?array:nativeReverse.call(array);}/**
       * Creates a slice of `array` from `start` up to, but not including, `end`.
       *
       * **Note:** This method is used instead of
       * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
       * returned.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to slice.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns the slice of `array`.
       */function slice(array,start,end){var length=array==null?0:array.length;if(!length){return [];}if(end&&typeof end!='number'&&isIterateeCall(array,start,end)){start=0;end=length;}else {start=start==null?0:toInteger(start);end=end===undefined$1?length:toInteger(end);}return baseSlice(array,start,end);}/**
       * Uses a binary search to determine the lowest index at which `value`
       * should be inserted into `array` in order to maintain its sort order.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       * @example
       *
       * _.sortedIndex([30, 50], 40);
       * // => 1
       */function sortedIndex(array,value){return baseSortedIndex(array,value);}/**
       * This method is like `_.sortedIndex` except that it accepts `iteratee`
       * which is invoked for `value` and each element of `array` to compute their
       * sort ranking. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       * @example
       *
       * var objects = [{ 'x': 4 }, { 'x': 5 }];
       *
       * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
       * // => 0
       *
       * // The `_.property` iteratee shorthand.
       * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
       * // => 0
       */function sortedIndexBy(array,value,iteratee){return baseSortedIndexBy(array,value,getIteratee(iteratee,2));}/**
       * This method is like `_.indexOf` except that it performs a binary
       * search on a sorted `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @returns {number} Returns the index of the matched value, else `-1`.
       * @example
       *
       * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
       * // => 1
       */function sortedIndexOf(array,value){var length=array==null?0:array.length;if(length){var index=baseSortedIndex(array,value);if(index<length&&eq(array[index],value)){return index;}}return -1;}/**
       * This method is like `_.sortedIndex` except that it returns the highest
       * index at which `value` should be inserted into `array` in order to
       * maintain its sort order.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       * @example
       *
       * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
       * // => 4
       */function sortedLastIndex(array,value){return baseSortedIndex(array,value,true);}/**
       * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
       * which is invoked for `value` and each element of `array` to compute their
       * sort ranking. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       * @example
       *
       * var objects = [{ 'x': 4 }, { 'x': 5 }];
       *
       * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
       * // => 1
       *
       * // The `_.property` iteratee shorthand.
       * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
       * // => 1
       */function sortedLastIndexBy(array,value,iteratee){return baseSortedIndexBy(array,value,getIteratee(iteratee,2),true);}/**
       * This method is like `_.lastIndexOf` except that it performs a binary
       * search on a sorted `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @returns {number} Returns the index of the matched value, else `-1`.
       * @example
       *
       * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
       * // => 3
       */function sortedLastIndexOf(array,value){var length=array==null?0:array.length;if(length){var index=baseSortedIndex(array,value,true)-1;if(eq(array[index],value)){return index;}}return -1;}/**
       * This method is like `_.uniq` except that it's designed and optimized
       * for sorted arrays.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * _.sortedUniq([1, 1, 2]);
       * // => [1, 2]
       */function sortedUniq(array){return array&&array.length?baseSortedUniq(array):[];}/**
       * This method is like `_.uniqBy` except that it's designed and optimized
       * for sorted arrays.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
       * // => [1.1, 2.3]
       */function sortedUniqBy(array,iteratee){return array&&array.length?baseSortedUniq(array,getIteratee(iteratee,2)):[];}/**
       * Gets all but the first element of `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.tail([1, 2, 3]);
       * // => [2, 3]
       */function tail(array){var length=array==null?0:array.length;return length?baseSlice(array,1,length):[];}/**
       * Creates a slice of `array` with `n` elements taken from the beginning.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=1] The number of elements to take.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.take([1, 2, 3]);
       * // => [1]
       *
       * _.take([1, 2, 3], 2);
       * // => [1, 2]
       *
       * _.take([1, 2, 3], 5);
       * // => [1, 2, 3]
       *
       * _.take([1, 2, 3], 0);
       * // => []
       */function take(array,n,guard){if(!(array&&array.length)){return [];}n=guard||n===undefined$1?1:toInteger(n);return baseSlice(array,0,n<0?0:n);}/**
       * Creates a slice of `array` with `n` elements taken from the end.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=1] The number of elements to take.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.takeRight([1, 2, 3]);
       * // => [3]
       *
       * _.takeRight([1, 2, 3], 2);
       * // => [2, 3]
       *
       * _.takeRight([1, 2, 3], 5);
       * // => [1, 2, 3]
       *
       * _.takeRight([1, 2, 3], 0);
       * // => []
       */function takeRight(array,n,guard){var length=array==null?0:array.length;if(!length){return [];}n=guard||n===undefined$1?1:toInteger(n);n=length-n;return baseSlice(array,n<0?0:n,length);}/**
       * Creates a slice of `array` with elements taken from the end. Elements are
       * taken until `predicate` returns falsey. The predicate is invoked with
       * three arguments: (value, index, array).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': true },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': false }
       * ];
       *
       * _.takeRightWhile(users, function(o) { return !o.active; });
       * // => objects for ['fred', 'pebbles']
       *
       * // The `_.matches` iteratee shorthand.
       * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
       * // => objects for ['pebbles']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.takeRightWhile(users, ['active', false]);
       * // => objects for ['fred', 'pebbles']
       *
       * // The `_.property` iteratee shorthand.
       * _.takeRightWhile(users, 'active');
       * // => []
       */function takeRightWhile(array,predicate){return array&&array.length?baseWhile(array,getIteratee(predicate,3),false,true):[];}/**
       * Creates a slice of `array` with elements taken from the beginning. Elements
       * are taken until `predicate` returns falsey. The predicate is invoked with
       * three arguments: (value, index, array).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': false },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': true }
       * ];
       *
       * _.takeWhile(users, function(o) { return !o.active; });
       * // => objects for ['barney', 'fred']
       *
       * // The `_.matches` iteratee shorthand.
       * _.takeWhile(users, { 'user': 'barney', 'active': false });
       * // => objects for ['barney']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.takeWhile(users, ['active', false]);
       * // => objects for ['barney', 'fred']
       *
       * // The `_.property` iteratee shorthand.
       * _.takeWhile(users, 'active');
       * // => []
       */function takeWhile(array,predicate){return array&&array.length?baseWhile(array,getIteratee(predicate,3)):[];}/**
       * Creates an array of unique values, in order, from all given arrays using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @returns {Array} Returns the new array of combined values.
       * @example
       *
       * _.union([2], [1, 2]);
       * // => [2, 1]
       */var union=baseRest(function(arrays){return baseUniq(baseFlatten(arrays,1,isArrayLikeObject,true));});/**
       * This method is like `_.union` except that it accepts `iteratee` which is
       * invoked for each element of each `arrays` to generate the criterion by
       * which uniqueness is computed. Result values are chosen from the first
       * array in which the value occurs. The iteratee is invoked with one argument:
       * (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new array of combined values.
       * @example
       *
       * _.unionBy([2.1], [1.2, 2.3], Math.floor);
       * // => [2.1, 1.2]
       *
       * // The `_.property` iteratee shorthand.
       * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
       * // => [{ 'x': 1 }, { 'x': 2 }]
       */var unionBy=baseRest(function(arrays){var iteratee=last(arrays);if(isArrayLikeObject(iteratee)){iteratee=undefined$1;}return baseUniq(baseFlatten(arrays,1,isArrayLikeObject,true),getIteratee(iteratee,2));});/**
       * This method is like `_.union` except that it accepts `comparator` which
       * is invoked to compare elements of `arrays`. Result values are chosen from
       * the first array in which the value occurs. The comparator is invoked
       * with two arguments: (arrVal, othVal).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of combined values.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
       * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
       *
       * _.unionWith(objects, others, _.isEqual);
       * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
       */var unionWith=baseRest(function(arrays){var comparator=last(arrays);comparator=typeof comparator=='function'?comparator:undefined$1;return baseUniq(baseFlatten(arrays,1,isArrayLikeObject,true),undefined$1,comparator);});/**
       * Creates a duplicate-free version of an array, using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons, in which only the first occurrence of each element
       * is kept. The order of result values is determined by the order they occur
       * in the array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * _.uniq([2, 1, 2]);
       * // => [2, 1]
       */function uniq(array){return array&&array.length?baseUniq(array):[];}/**
       * This method is like `_.uniq` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the criterion by which
       * uniqueness is computed. The order of result values is determined by the
       * order they occur in the array. The iteratee is invoked with one argument:
       * (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
       * // => [2.1, 1.2]
       *
       * // The `_.property` iteratee shorthand.
       * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
       * // => [{ 'x': 1 }, { 'x': 2 }]
       */function uniqBy(array,iteratee){return array&&array.length?baseUniq(array,getIteratee(iteratee,2)):[];}/**
       * This method is like `_.uniq` except that it accepts `comparator` which
       * is invoked to compare elements of `array`. The order of result values is
       * determined by the order they occur in the array.The comparator is invoked
       * with two arguments: (arrVal, othVal).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
       *
       * _.uniqWith(objects, _.isEqual);
       * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
       */function uniqWith(array,comparator){comparator=typeof comparator=='function'?comparator:undefined$1;return array&&array.length?baseUniq(array,undefined$1,comparator):[];}/**
       * This method is like `_.zip` except that it accepts an array of grouped
       * elements and creates an array regrouping the elements to their pre-zip
       * configuration.
       *
       * @static
       * @memberOf _
       * @since 1.2.0
       * @category Array
       * @param {Array} array The array of grouped elements to process.
       * @returns {Array} Returns the new array of regrouped elements.
       * @example
       *
       * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
       * // => [['a', 1, true], ['b', 2, false]]
       *
       * _.unzip(zipped);
       * // => [['a', 'b'], [1, 2], [true, false]]
       */function unzip(array){if(!(array&&array.length)){return [];}var length=0;array=arrayFilter(array,function(group){if(isArrayLikeObject(group)){length=nativeMax(group.length,length);return true;}});return baseTimes(length,function(index){return arrayMap(array,baseProperty(index));});}/**
       * This method is like `_.unzip` except that it accepts `iteratee` to specify
       * how regrouped values should be combined. The iteratee is invoked with the
       * elements of each group: (...group).
       *
       * @static
       * @memberOf _
       * @since 3.8.0
       * @category Array
       * @param {Array} array The array of grouped elements to process.
       * @param {Function} [iteratee=_.identity] The function to combine
       *  regrouped values.
       * @returns {Array} Returns the new array of regrouped elements.
       * @example
       *
       * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
       * // => [[1, 10, 100], [2, 20, 200]]
       *
       * _.unzipWith(zipped, _.add);
       * // => [3, 30, 300]
       */function unzipWith(array,iteratee){if(!(array&&array.length)){return [];}var result=unzip(array);if(iteratee==null){return result;}return arrayMap(result,function(group){return apply(iteratee,undefined$1,group);});}/**
       * Creates an array excluding all given values using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * **Note:** Unlike `_.pull`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {...*} [values] The values to exclude.
       * @returns {Array} Returns the new array of filtered values.
       * @see _.difference, _.xor
       * @example
       *
       * _.without([2, 1, 2, 3], 1, 2);
       * // => [3]
       */var without=baseRest(function(array,values){return isArrayLikeObject(array)?baseDifference(array,values):[];});/**
       * Creates an array of unique values that is the
       * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
       * of the given arrays. The order of result values is determined by the order
       * they occur in the arrays.
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @returns {Array} Returns the new array of filtered values.
       * @see _.difference, _.without
       * @example
       *
       * _.xor([2, 1], [2, 3]);
       * // => [1, 3]
       */var xor=baseRest(function(arrays){return baseXor(arrayFilter(arrays,isArrayLikeObject));});/**
       * This method is like `_.xor` except that it accepts `iteratee` which is
       * invoked for each element of each `arrays` to generate the criterion by
       * which by which they're compared. The order of result values is determined
       * by the order they occur in the arrays. The iteratee is invoked with one
       * argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
       * // => [1.2, 3.4]
       *
       * // The `_.property` iteratee shorthand.
       * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
       * // => [{ 'x': 2 }]
       */var xorBy=baseRest(function(arrays){var iteratee=last(arrays);if(isArrayLikeObject(iteratee)){iteratee=undefined$1;}return baseXor(arrayFilter(arrays,isArrayLikeObject),getIteratee(iteratee,2));});/**
       * This method is like `_.xor` except that it accepts `comparator` which is
       * invoked to compare elements of `arrays`. The order of result values is
       * determined by the order they occur in the arrays. The comparator is invoked
       * with two arguments: (arrVal, othVal).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
       * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
       *
       * _.xorWith(objects, others, _.isEqual);
       * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
       */var xorWith=baseRest(function(arrays){var comparator=last(arrays);comparator=typeof comparator=='function'?comparator:undefined$1;return baseXor(arrayFilter(arrays,isArrayLikeObject),undefined$1,comparator);});/**
       * Creates an array of grouped elements, the first of which contains the
       * first elements of the given arrays, the second of which contains the
       * second elements of the given arrays, and so on.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {...Array} [arrays] The arrays to process.
       * @returns {Array} Returns the new array of grouped elements.
       * @example
       *
       * _.zip(['a', 'b'], [1, 2], [true, false]);
       * // => [['a', 1, true], ['b', 2, false]]
       */var zip=baseRest(unzip);/**
       * This method is like `_.fromPairs` except that it accepts two arrays,
       * one of property identifiers and one of corresponding values.
       *
       * @static
       * @memberOf _
       * @since 0.4.0
       * @category Array
       * @param {Array} [props=[]] The property identifiers.
       * @param {Array} [values=[]] The property values.
       * @returns {Object} Returns the new object.
       * @example
       *
       * _.zipObject(['a', 'b'], [1, 2]);
       * // => { 'a': 1, 'b': 2 }
       */function zipObject(props,values){return baseZipObject(props||[],values||[],assignValue);}/**
       * This method is like `_.zipObject` except that it supports property paths.
       *
       * @static
       * @memberOf _
       * @since 4.1.0
       * @category Array
       * @param {Array} [props=[]] The property identifiers.
       * @param {Array} [values=[]] The property values.
       * @returns {Object} Returns the new object.
       * @example
       *
       * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
       * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
       */function zipObjectDeep(props,values){return baseZipObject(props||[],values||[],baseSet);}/**
       * This method is like `_.zip` except that it accepts `iteratee` to specify
       * how grouped values should be combined. The iteratee is invoked with the
       * elements of each group: (...group).
       *
       * @static
       * @memberOf _
       * @since 3.8.0
       * @category Array
       * @param {...Array} [arrays] The arrays to process.
       * @param {Function} [iteratee=_.identity] The function to combine
       *  grouped values.
       * @returns {Array} Returns the new array of grouped elements.
       * @example
       *
       * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
       *   return a + b + c;
       * });
       * // => [111, 222]
       */var zipWith=baseRest(function(arrays){var length=arrays.length,iteratee=length>1?arrays[length-1]:undefined$1;iteratee=typeof iteratee=='function'?(arrays.pop(),iteratee):undefined$1;return unzipWith(arrays,iteratee);});/*------------------------------------------------------------------------*/ /**
       * Creates a `lodash` wrapper instance that wraps `value` with explicit method
       * chain sequences enabled. The result of such sequences must be unwrapped
       * with `_#value`.
       *
       * @static
       * @memberOf _
       * @since 1.3.0
       * @category Seq
       * @param {*} value The value to wrap.
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'age': 36 },
       *   { 'user': 'fred',    'age': 40 },
       *   { 'user': 'pebbles', 'age': 1 }
       * ];
       *
       * var youngest = _
       *   .chain(users)
       *   .sortBy('age')
       *   .map(function(o) {
       *     return o.user + ' is ' + o.age;
       *   })
       *   .head()
       *   .value();
       * // => 'pebbles is 1'
       */function chain(value){var result=lodash(value);result.__chain__=true;return result;}/**
       * This method invokes `interceptor` and returns `value`. The interceptor
       * is invoked with one argument; (value). The purpose of this method is to
       * "tap into" a method chain sequence in order to modify intermediate results.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Seq
       * @param {*} value The value to provide to `interceptor`.
       * @param {Function} interceptor The function to invoke.
       * @returns {*} Returns `value`.
       * @example
       *
       * _([1, 2, 3])
       *  .tap(function(array) {
       *    // Mutate input array.
       *    array.pop();
       *  })
       *  .reverse()
       *  .value();
       * // => [2, 1]
       */function tap(value,interceptor){interceptor(value);return value;}/**
       * This method is like `_.tap` except that it returns the result of `interceptor`.
       * The purpose of this method is to "pass thru" values replacing intermediate
       * results in a method chain sequence.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Seq
       * @param {*} value The value to provide to `interceptor`.
       * @param {Function} interceptor The function to invoke.
       * @returns {*} Returns the result of `interceptor`.
       * @example
       *
       * _('  abc  ')
       *  .chain()
       *  .trim()
       *  .thru(function(value) {
       *    return [value];
       *  })
       *  .value();
       * // => ['abc']
       */function thru(value,interceptor){return interceptor(value);}/**
       * This method is the wrapper version of `_.at`.
       *
       * @name at
       * @memberOf _
       * @since 1.0.0
       * @category Seq
       * @param {...(string|string[])} [paths] The property paths to pick.
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
       *
       * _(object).at(['a[0].b.c', 'a[1]']).value();
       * // => [3, 4]
       */var wrapperAt=flatRest(function(paths){var length=paths.length,start=length?paths[0]:0,value=this.__wrapped__,interceptor=function interceptor(object){return baseAt(object,paths);};if(length>1||this.__actions__.length||!(value instanceof LazyWrapper)||!isIndex(start)){return this.thru(interceptor);}value=value.slice(start,+start+(length?1:0));value.__actions__.push({'func':thru,'args':[interceptor],'thisArg':undefined$1});return new LodashWrapper(value,this.__chain__).thru(function(array){if(length&&!array.length){array.push(undefined$1);}return array;});});/**
       * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
       *
       * @name chain
       * @memberOf _
       * @since 0.1.0
       * @category Seq
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36 },
       *   { 'user': 'fred',   'age': 40 }
       * ];
       *
       * // A sequence without explicit chaining.
       * _(users).head();
       * // => { 'user': 'barney', 'age': 36 }
       *
       * // A sequence with explicit chaining.
       * _(users)
       *   .chain()
       *   .head()
       *   .pick('user')
       *   .value();
       * // => { 'user': 'barney' }
       */function wrapperChain(){return chain(this);}/**
       * Executes the chain sequence and returns the wrapped result.
       *
       * @name commit
       * @memberOf _
       * @since 3.2.0
       * @category Seq
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var array = [1, 2];
       * var wrapped = _(array).push(3);
       *
       * console.log(array);
       * // => [1, 2]
       *
       * wrapped = wrapped.commit();
       * console.log(array);
       * // => [1, 2, 3]
       *
       * wrapped.last();
       * // => 3
       *
       * console.log(array);
       * // => [1, 2, 3]
       */function wrapperCommit(){return new LodashWrapper(this.value(),this.__chain__);}/**
       * Gets the next value on a wrapped object following the
       * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
       *
       * @name next
       * @memberOf _
       * @since 4.0.0
       * @category Seq
       * @returns {Object} Returns the next iterator value.
       * @example
       *
       * var wrapped = _([1, 2]);
       *
       * wrapped.next();
       * // => { 'done': false, 'value': 1 }
       *
       * wrapped.next();
       * // => { 'done': false, 'value': 2 }
       *
       * wrapped.next();
       * // => { 'done': true, 'value': undefined }
       */function wrapperNext(){if(this.__values__===undefined$1){this.__values__=toArray(this.value());}var done=this.__index__>=this.__values__.length,value=done?undefined$1:this.__values__[this.__index__++];return {'done':done,'value':value};}/**
       * Enables the wrapper to be iterable.
       *
       * @name Symbol.iterator
       * @memberOf _
       * @since 4.0.0
       * @category Seq
       * @returns {Object} Returns the wrapper object.
       * @example
       *
       * var wrapped = _([1, 2]);
       *
       * wrapped[Symbol.iterator]() === wrapped;
       * // => true
       *
       * Array.from(wrapped);
       * // => [1, 2]
       */function wrapperToIterator(){return this;}/**
       * Creates a clone of the chain sequence planting `value` as the wrapped value.
       *
       * @name plant
       * @memberOf _
       * @since 3.2.0
       * @category Seq
       * @param {*} value The value to plant.
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var wrapped = _([1, 2]).map(square);
       * var other = wrapped.plant([3, 4]);
       *
       * other.value();
       * // => [9, 16]
       *
       * wrapped.value();
       * // => [1, 4]
       */function wrapperPlant(value){var result,parent=this;while(parent instanceof baseLodash){var clone=wrapperClone(parent);clone.__index__=0;clone.__values__=undefined$1;if(result){previous.__wrapped__=clone;}else {result=clone;}var previous=clone;parent=parent.__wrapped__;}previous.__wrapped__=value;return result;}/**
       * This method is the wrapper version of `_.reverse`.
       *
       * **Note:** This method mutates the wrapped array.
       *
       * @name reverse
       * @memberOf _
       * @since 0.1.0
       * @category Seq
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var array = [1, 2, 3];
       *
       * _(array).reverse().value()
       * // => [3, 2, 1]
       *
       * console.log(array);
       * // => [3, 2, 1]
       */function wrapperReverse(){var value=this.__wrapped__;if(value instanceof LazyWrapper){var wrapped=value;if(this.__actions__.length){wrapped=new LazyWrapper(this);}wrapped=wrapped.reverse();wrapped.__actions__.push({'func':thru,'args':[reverse],'thisArg':undefined$1});return new LodashWrapper(wrapped,this.__chain__);}return this.thru(reverse);}/**
       * Executes the chain sequence to resolve the unwrapped value.
       *
       * @name value
       * @memberOf _
       * @since 0.1.0
       * @alias toJSON, valueOf
       * @category Seq
       * @returns {*} Returns the resolved unwrapped value.
       * @example
       *
       * _([1, 2, 3]).value();
       * // => [1, 2, 3]
       */function wrapperValue(){return baseWrapperValue(this.__wrapped__,this.__actions__);}/*------------------------------------------------------------------------*/ /**
       * Creates an object composed of keys generated from the results of running
       * each element of `collection` thru `iteratee`. The corresponding value of
       * each key is the number of times the key was returned by `iteratee`. The
       * iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 0.5.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
       * @returns {Object} Returns the composed aggregate object.
       * @example
       *
       * _.countBy([6.1, 4.2, 6.3], Math.floor);
       * // => { '4': 1, '6': 2 }
       *
       * // The `_.property` iteratee shorthand.
       * _.countBy(['one', 'two', 'three'], 'length');
       * // => { '3': 2, '5': 1 }
       */var countBy=createAggregator(function(result,value,key){if(hasOwnProperty.call(result,key)){++result[key];}else {baseAssignValue(result,key,1);}});/**
       * Checks if `predicate` returns truthy for **all** elements of `collection`.
       * Iteration is stopped once `predicate` returns falsey. The predicate is
       * invoked with three arguments: (value, index|key, collection).
       *
       * **Note:** This method returns `true` for
       * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
       * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
       * elements of empty collections.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {boolean} Returns `true` if all elements pass the predicate check,
       *  else `false`.
       * @example
       *
       * _.every([true, 1, null, 'yes'], Boolean);
       * // => false
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': false },
       *   { 'user': 'fred',   'age': 40, 'active': false }
       * ];
       *
       * // The `_.matches` iteratee shorthand.
       * _.every(users, { 'user': 'barney', 'active': false });
       * // => false
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.every(users, ['active', false]);
       * // => true
       *
       * // The `_.property` iteratee shorthand.
       * _.every(users, 'active');
       * // => false
       */function every(collection,predicate,guard){var func=isArray(collection)?arrayEvery:baseEvery;if(guard&&isIterateeCall(collection,predicate,guard)){predicate=undefined$1;}return func(collection,getIteratee(predicate,3));}/**
       * Iterates over elements of `collection`, returning an array of all elements
       * `predicate` returns truthy for. The predicate is invoked with three
       * arguments: (value, index|key, collection).
       *
       * **Note:** Unlike `_.remove`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new filtered array.
       * @see _.reject
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': true },
       *   { 'user': 'fred',   'age': 40, 'active': false }
       * ];
       *
       * _.filter(users, function(o) { return !o.active; });
       * // => objects for ['fred']
       *
       * // The `_.matches` iteratee shorthand.
       * _.filter(users, { 'age': 36, 'active': true });
       * // => objects for ['barney']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.filter(users, ['active', false]);
       * // => objects for ['fred']
       *
       * // The `_.property` iteratee shorthand.
       * _.filter(users, 'active');
       * // => objects for ['barney']
       *
       * // Combining several predicates using `_.overEvery` or `_.overSome`.
       * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
       * // => objects for ['fred', 'barney']
       */function filter(collection,predicate){var func=isArray(collection)?arrayFilter:baseFilter;return func(collection,getIteratee(predicate,3));}/**
       * Iterates over elements of `collection`, returning the first element
       * `predicate` returns truthy for. The predicate is invoked with three
       * arguments: (value, index|key, collection).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param {number} [fromIndex=0] The index to search from.
       * @returns {*} Returns the matched element, else `undefined`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'age': 36, 'active': true },
       *   { 'user': 'fred',    'age': 40, 'active': false },
       *   { 'user': 'pebbles', 'age': 1,  'active': true }
       * ];
       *
       * _.find(users, function(o) { return o.age < 40; });
       * // => object for 'barney'
       *
       * // The `_.matches` iteratee shorthand.
       * _.find(users, { 'age': 1, 'active': true });
       * // => object for 'pebbles'
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.find(users, ['active', false]);
       * // => object for 'fred'
       *
       * // The `_.property` iteratee shorthand.
       * _.find(users, 'active');
       * // => object for 'barney'
       */var find=createFind(findIndex);/**
       * This method is like `_.find` except that it iterates over elements of
       * `collection` from right to left.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param {number} [fromIndex=collection.length-1] The index to search from.
       * @returns {*} Returns the matched element, else `undefined`.
       * @example
       *
       * _.findLast([1, 2, 3, 4], function(n) {
       *   return n % 2 == 1;
       * });
       * // => 3
       */var findLast=createFind(findLastIndex);/**
       * Creates a flattened array of values by running each element in `collection`
       * thru `iteratee` and flattening the mapped results. The iteratee is invoked
       * with three arguments: (value, index|key, collection).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * function duplicate(n) {
       *   return [n, n];
       * }
       *
       * _.flatMap([1, 2], duplicate);
       * // => [1, 1, 2, 2]
       */function flatMap(collection,iteratee){return baseFlatten(map(collection,iteratee),1);}/**
       * This method is like `_.flatMap` except that it recursively flattens the
       * mapped results.
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * function duplicate(n) {
       *   return [[[n, n]]];
       * }
       *
       * _.flatMapDeep([1, 2], duplicate);
       * // => [1, 1, 2, 2]
       */function flatMapDeep(collection,iteratee){return baseFlatten(map(collection,iteratee),INFINITY);}/**
       * This method is like `_.flatMap` except that it recursively flattens the
       * mapped results up to `depth` times.
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {number} [depth=1] The maximum recursion depth.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * function duplicate(n) {
       *   return [[[n, n]]];
       * }
       *
       * _.flatMapDepth([1, 2], duplicate, 2);
       * // => [[1, 1], [2, 2]]
       */function flatMapDepth(collection,iteratee,depth){depth=depth===undefined$1?1:toInteger(depth);return baseFlatten(map(collection,iteratee),depth);}/**
       * Iterates over elements of `collection` and invokes `iteratee` for each element.
       * The iteratee is invoked with three arguments: (value, index|key, collection).
       * Iteratee functions may exit iteration early by explicitly returning `false`.
       *
       * **Note:** As with other "Collections" methods, objects with a "length"
       * property are iterated like arrays. To avoid this behavior use `_.forIn`
       * or `_.forOwn` for object iteration.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @alias each
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array|Object} Returns `collection`.
       * @see _.forEachRight
       * @example
       *
       * _.forEach([1, 2], function(value) {
       *   console.log(value);
       * });
       * // => Logs `1` then `2`.
       *
       * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'a' then 'b' (iteration order is not guaranteed).
       */function forEach(collection,iteratee){var func=isArray(collection)?arrayEach:baseEach;return func(collection,getIteratee(iteratee,3));}/**
       * This method is like `_.forEach` except that it iterates over elements of
       * `collection` from right to left.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @alias eachRight
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array|Object} Returns `collection`.
       * @see _.forEach
       * @example
       *
       * _.forEachRight([1, 2], function(value) {
       *   console.log(value);
       * });
       * // => Logs `2` then `1`.
       */function forEachRight(collection,iteratee){var func=isArray(collection)?arrayEachRight:baseEachRight;return func(collection,getIteratee(iteratee,3));}/**
       * Creates an object composed of keys generated from the results of running
       * each element of `collection` thru `iteratee`. The order of grouped values
       * is determined by the order they occur in `collection`. The corresponding
       * value of each key is an array of elements responsible for generating the
       * key. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
       * @returns {Object} Returns the composed aggregate object.
       * @example
       *
       * _.groupBy([6.1, 4.2, 6.3], Math.floor);
       * // => { '4': [4.2], '6': [6.1, 6.3] }
       *
       * // The `_.property` iteratee shorthand.
       * _.groupBy(['one', 'two', 'three'], 'length');
       * // => { '3': ['one', 'two'], '5': ['three'] }
       */var groupBy=createAggregator(function(result,value,key){if(hasOwnProperty.call(result,key)){result[key].push(value);}else {baseAssignValue(result,key,[value]);}});/**
       * Checks if `value` is in `collection`. If `collection` is a string, it's
       * checked for a substring of `value`, otherwise
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * is used for equality comparisons. If `fromIndex` is negative, it's used as
       * the offset from the end of `collection`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object|string} collection The collection to inspect.
       * @param {*} value The value to search for.
       * @param {number} [fromIndex=0] The index to search from.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
       * @returns {boolean} Returns `true` if `value` is found, else `false`.
       * @example
       *
       * _.includes([1, 2, 3], 1);
       * // => true
       *
       * _.includes([1, 2, 3], 1, 2);
       * // => false
       *
       * _.includes({ 'a': 1, 'b': 2 }, 1);
       * // => true
       *
       * _.includes('abcd', 'bc');
       * // => true
       */function includes(collection,value,fromIndex,guard){collection=isArrayLike(collection)?collection:values(collection);fromIndex=fromIndex&&!guard?toInteger(fromIndex):0;var length=collection.length;if(fromIndex<0){fromIndex=nativeMax(length+fromIndex,0);}return isString(collection)?fromIndex<=length&&collection.indexOf(value,fromIndex)>-1:!!length&&baseIndexOf(collection,value,fromIndex)>-1;}/**
       * Invokes the method at `path` of each element in `collection`, returning
       * an array of the results of each invoked method. Any additional arguments
       * are provided to each invoked method. If `path` is a function, it's invoked
       * for, and `this` bound to, each element in `collection`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Array|Function|string} path The path of the method to invoke or
       *  the function invoked per iteration.
       * @param {...*} [args] The arguments to invoke each method with.
       * @returns {Array} Returns the array of results.
       * @example
       *
       * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
       * // => [[1, 5, 7], [1, 2, 3]]
       *
       * _.invokeMap([123, 456], String.prototype.split, '');
       * // => [['1', '2', '3'], ['4', '5', '6']]
       */var invokeMap=baseRest(function(collection,path,args){var index=-1,isFunc=typeof path=='function',result=isArrayLike(collection)?Array(collection.length):[];baseEach(collection,function(value){result[++index]=isFunc?apply(path,value,args):baseInvoke(value,path,args);});return result;});/**
       * Creates an object composed of keys generated from the results of running
       * each element of `collection` thru `iteratee`. The corresponding value of
       * each key is the last element responsible for generating the key. The
       * iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
       * @returns {Object} Returns the composed aggregate object.
       * @example
       *
       * var array = [
       *   { 'dir': 'left', 'code': 97 },
       *   { 'dir': 'right', 'code': 100 }
       * ];
       *
       * _.keyBy(array, function(o) {
       *   return String.fromCharCode(o.code);
       * });
       * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
       *
       * _.keyBy(array, 'dir');
       * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
       */var keyBy=createAggregator(function(result,value,key){baseAssignValue(result,key,value);});/**
       * Creates an array of values by running each element in `collection` thru
       * `iteratee`. The iteratee is invoked with three arguments:
       * (value, index|key, collection).
       *
       * Many lodash methods are guarded to work as iteratees for methods like
       * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
       *
       * The guarded methods are:
       * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
       * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
       * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
       * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new mapped array.
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * _.map([4, 8], square);
       * // => [16, 64]
       *
       * _.map({ 'a': 4, 'b': 8 }, square);
       * // => [16, 64] (iteration order is not guaranteed)
       *
       * var users = [
       *   { 'user': 'barney' },
       *   { 'user': 'fred' }
       * ];
       *
       * // The `_.property` iteratee shorthand.
       * _.map(users, 'user');
       * // => ['barney', 'fred']
       */function map(collection,iteratee){var func=isArray(collection)?arrayMap:baseMap;return func(collection,getIteratee(iteratee,3));}/**
       * This method is like `_.sortBy` except that it allows specifying the sort
       * orders of the iteratees to sort by. If `orders` is unspecified, all values
       * are sorted in ascending order. Otherwise, specify an order of "desc" for
       * descending or "asc" for ascending sort order of corresponding values.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
       *  The iteratees to sort by.
       * @param {string[]} [orders] The sort orders of `iteratees`.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
       * @returns {Array} Returns the new sorted array.
       * @example
       *
       * var users = [
       *   { 'user': 'fred',   'age': 48 },
       *   { 'user': 'barney', 'age': 34 },
       *   { 'user': 'fred',   'age': 40 },
       *   { 'user': 'barney', 'age': 36 }
       * ];
       *
       * // Sort by `user` in ascending order and by `age` in descending order.
       * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
       * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
       */function orderBy(collection,iteratees,orders,guard){if(collection==null){return [];}if(!isArray(iteratees)){iteratees=iteratees==null?[]:[iteratees];}orders=guard?undefined$1:orders;if(!isArray(orders)){orders=orders==null?[]:[orders];}return baseOrderBy(collection,iteratees,orders);}/**
       * Creates an array of elements split into two groups, the first of which
       * contains elements `predicate` returns truthy for, the second of which
       * contains elements `predicate` returns falsey for. The predicate is
       * invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the array of grouped elements.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'age': 36, 'active': false },
       *   { 'user': 'fred',    'age': 40, 'active': true },
       *   { 'user': 'pebbles', 'age': 1,  'active': false }
       * ];
       *
       * _.partition(users, function(o) { return o.active; });
       * // => objects for [['fred'], ['barney', 'pebbles']]
       *
       * // The `_.matches` iteratee shorthand.
       * _.partition(users, { 'age': 1, 'active': false });
       * // => objects for [['pebbles'], ['barney', 'fred']]
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.partition(users, ['active', false]);
       * // => objects for [['barney', 'pebbles'], ['fred']]
       *
       * // The `_.property` iteratee shorthand.
       * _.partition(users, 'active');
       * // => objects for [['fred'], ['barney', 'pebbles']]
       */var partition=createAggregator(function(result,value,key){result[key?0:1].push(value);},function(){return [[],[]];});/**
       * Reduces `collection` to a value which is the accumulated result of running
       * each element in `collection` thru `iteratee`, where each successive
       * invocation is supplied the return value of the previous. If `accumulator`
       * is not given, the first element of `collection` is used as the initial
       * value. The iteratee is invoked with four arguments:
       * (accumulator, value, index|key, collection).
       *
       * Many lodash methods are guarded to work as iteratees for methods like
       * `_.reduce`, `_.reduceRight`, and `_.transform`.
       *
       * The guarded methods are:
       * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
       * and `sortBy`
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {*} [accumulator] The initial value.
       * @returns {*} Returns the accumulated value.
       * @see _.reduceRight
       * @example
       *
       * _.reduce([1, 2], function(sum, n) {
       *   return sum + n;
       * }, 0);
       * // => 3
       *
       * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
       *   (result[value] || (result[value] = [])).push(key);
       *   return result;
       * }, {});
       * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
       */function reduce(collection,iteratee,accumulator){var func=isArray(collection)?arrayReduce:baseReduce,initAccum=arguments.length<3;return func(collection,getIteratee(iteratee,4),accumulator,initAccum,baseEach);}/**
       * This method is like `_.reduce` except that it iterates over elements of
       * `collection` from right to left.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {*} [accumulator] The initial value.
       * @returns {*} Returns the accumulated value.
       * @see _.reduce
       * @example
       *
       * var array = [[0, 1], [2, 3], [4, 5]];
       *
       * _.reduceRight(array, function(flattened, other) {
       *   return flattened.concat(other);
       * }, []);
       * // => [4, 5, 2, 3, 0, 1]
       */function reduceRight(collection,iteratee,accumulator){var func=isArray(collection)?arrayReduceRight:baseReduce,initAccum=arguments.length<3;return func(collection,getIteratee(iteratee,4),accumulator,initAccum,baseEachRight);}/**
       * The opposite of `_.filter`; this method returns the elements of `collection`
       * that `predicate` does **not** return truthy for.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new filtered array.
       * @see _.filter
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': false },
       *   { 'user': 'fred',   'age': 40, 'active': true }
       * ];
       *
       * _.reject(users, function(o) { return !o.active; });
       * // => objects for ['fred']
       *
       * // The `_.matches` iteratee shorthand.
       * _.reject(users, { 'age': 40, 'active': true });
       * // => objects for ['barney']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.reject(users, ['active', false]);
       * // => objects for ['fred']
       *
       * // The `_.property` iteratee shorthand.
       * _.reject(users, 'active');
       * // => objects for ['barney']
       */function reject(collection,predicate){var func=isArray(collection)?arrayFilter:baseFilter;return func(collection,negate(getIteratee(predicate,3)));}/**
       * Gets a random element from `collection`.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to sample.
       * @returns {*} Returns the random element.
       * @example
       *
       * _.sample([1, 2, 3, 4]);
       * // => 2
       */function sample(collection){var func=isArray(collection)?arraySample:baseSample;return func(collection);}/**
       * Gets `n` random elements at unique keys from `collection` up to the
       * size of `collection`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to sample.
       * @param {number} [n=1] The number of elements to sample.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the random elements.
       * @example
       *
       * _.sampleSize([1, 2, 3], 2);
       * // => [3, 1]
       *
       * _.sampleSize([1, 2, 3], 4);
       * // => [2, 3, 1]
       */function sampleSize(collection,n,guard){if(guard?isIterateeCall(collection,n,guard):n===undefined$1){n=1;}else {n=toInteger(n);}var func=isArray(collection)?arraySampleSize:baseSampleSize;return func(collection,n);}/**
       * Creates an array of shuffled values, using a version of the
       * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to shuffle.
       * @returns {Array} Returns the new shuffled array.
       * @example
       *
       * _.shuffle([1, 2, 3, 4]);
       * // => [4, 1, 3, 2]
       */function shuffle(collection){var func=isArray(collection)?arrayShuffle:baseShuffle;return func(collection);}/**
       * Gets the size of `collection` by returning its length for array-like
       * values or the number of own enumerable string keyed properties for objects.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object|string} collection The collection to inspect.
       * @returns {number} Returns the collection size.
       * @example
       *
       * _.size([1, 2, 3]);
       * // => 3
       *
       * _.size({ 'a': 1, 'b': 2 });
       * // => 2
       *
       * _.size('pebbles');
       * // => 7
       */function size(collection){if(collection==null){return 0;}if(isArrayLike(collection)){return isString(collection)?stringSize(collection):collection.length;}var tag=getTag(collection);if(tag==mapTag||tag==setTag){return collection.size;}return baseKeys(collection).length;}/**
       * Checks if `predicate` returns truthy for **any** element of `collection`.
       * Iteration is stopped once `predicate` returns truthy. The predicate is
       * invoked with three arguments: (value, index|key, collection).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {boolean} Returns `true` if any element passes the predicate check,
       *  else `false`.
       * @example
       *
       * _.some([null, 0, 'yes', false], Boolean);
       * // => true
       *
       * var users = [
       *   { 'user': 'barney', 'active': true },
       *   { 'user': 'fred',   'active': false }
       * ];
       *
       * // The `_.matches` iteratee shorthand.
       * _.some(users, { 'user': 'barney', 'active': false });
       * // => false
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.some(users, ['active', false]);
       * // => true
       *
       * // The `_.property` iteratee shorthand.
       * _.some(users, 'active');
       * // => true
       */function some(collection,predicate,guard){var func=isArray(collection)?arraySome:baseSome;if(guard&&isIterateeCall(collection,predicate,guard)){predicate=undefined$1;}return func(collection,getIteratee(predicate,3));}/**
       * Creates an array of elements, sorted in ascending order by the results of
       * running each element in a collection thru each iteratee. This method
       * performs a stable sort, that is, it preserves the original sort order of
       * equal elements. The iteratees are invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {...(Function|Function[])} [iteratees=[_.identity]]
       *  The iteratees to sort by.
       * @returns {Array} Returns the new sorted array.
       * @example
       *
       * var users = [
       *   { 'user': 'fred',   'age': 48 },
       *   { 'user': 'barney', 'age': 36 },
       *   { 'user': 'fred',   'age': 30 },
       *   { 'user': 'barney', 'age': 34 }
       * ];
       *
       * _.sortBy(users, [function(o) { return o.user; }]);
       * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
       *
       * _.sortBy(users, ['user', 'age']);
       * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
       */var sortBy=baseRest(function(collection,iteratees){if(collection==null){return [];}var length=iteratees.length;if(length>1&&isIterateeCall(collection,iteratees[0],iteratees[1])){iteratees=[];}else if(length>2&&isIterateeCall(iteratees[0],iteratees[1],iteratees[2])){iteratees=[iteratees[0]];}return baseOrderBy(collection,baseFlatten(iteratees,1),[]);});/*------------------------------------------------------------------------*/ /**
       * Gets the timestamp of the number of milliseconds that have elapsed since
       * the Unix epoch (1 January 1970 00:00:00 UTC).
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Date
       * @returns {number} Returns the timestamp.
       * @example
       *
       * _.defer(function(stamp) {
       *   console.log(_.now() - stamp);
       * }, _.now());
       * // => Logs the number of milliseconds it took for the deferred invocation.
       */var now=ctxNow||function(){return root.Date.now();};/*------------------------------------------------------------------------*/ /**
       * The opposite of `_.before`; this method creates a function that invokes
       * `func` once it's called `n` or more times.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {number} n The number of calls before `func` is invoked.
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new restricted function.
       * @example
       *
       * var saves = ['profile', 'settings'];
       *
       * var done = _.after(saves.length, function() {
       *   console.log('done saving!');
       * });
       *
       * _.forEach(saves, function(type) {
       *   asyncSave({ 'type': type, 'complete': done });
       * });
       * // => Logs 'done saving!' after the two async saves have completed.
       */function after(n,func){if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}n=toInteger(n);return function(){if(--n<1){return func.apply(this,arguments);}};}/**
       * Creates a function that invokes `func`, with up to `n` arguments,
       * ignoring any additional arguments.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {Function} func The function to cap arguments for.
       * @param {number} [n=func.length] The arity cap.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Function} Returns the new capped function.
       * @example
       *
       * _.map(['6', '8', '10'], _.ary(parseInt, 1));
       * // => [6, 8, 10]
       */function ary(func,n,guard){n=guard?undefined$1:n;n=func&&n==null?func.length:n;return createWrap(func,WRAP_ARY_FLAG,undefined$1,undefined$1,undefined$1,undefined$1,n);}/**
       * Creates a function that invokes `func`, with the `this` binding and arguments
       * of the created function, while it's called less than `n` times. Subsequent
       * calls to the created function return the result of the last `func` invocation.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {number} n The number of calls at which `func` is no longer invoked.
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new restricted function.
       * @example
       *
       * jQuery(element).on('click', _.before(5, addContactToList));
       * // => Allows adding up to 4 contacts to the list.
       */function before(n,func){var result;if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}n=toInteger(n);return function(){if(--n>0){result=func.apply(this,arguments);}if(n<=1){func=undefined$1;}return result;};}/**
       * Creates a function that invokes `func` with the `this` binding of `thisArg`
       * and `partials` prepended to the arguments it receives.
       *
       * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
       * may be used as a placeholder for partially applied arguments.
       *
       * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
       * property of bound functions.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to bind.
       * @param {*} thisArg The `this` binding of `func`.
       * @param {...*} [partials] The arguments to be partially applied.
       * @returns {Function} Returns the new bound function.
       * @example
       *
       * function greet(greeting, punctuation) {
       *   return greeting + ' ' + this.user + punctuation;
       * }
       *
       * var object = { 'user': 'fred' };
       *
       * var bound = _.bind(greet, object, 'hi');
       * bound('!');
       * // => 'hi fred!'
       *
       * // Bound with placeholders.
       * var bound = _.bind(greet, object, _, '!');
       * bound('hi');
       * // => 'hi fred!'
       */var bind=baseRest(function(func,thisArg,partials){var bitmask=WRAP_BIND_FLAG;if(partials.length){var holders=replaceHolders(partials,getHolder(bind));bitmask|=WRAP_PARTIAL_FLAG;}return createWrap(func,bitmask,thisArg,partials,holders);});/**
       * Creates a function that invokes the method at `object[key]` with `partials`
       * prepended to the arguments it receives.
       *
       * This method differs from `_.bind` by allowing bound functions to reference
       * methods that may be redefined or don't yet exist. See
       * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
       * for more details.
       *
       * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
       * builds, may be used as a placeholder for partially applied arguments.
       *
       * @static
       * @memberOf _
       * @since 0.10.0
       * @category Function
       * @param {Object} object The object to invoke the method on.
       * @param {string} key The key of the method.
       * @param {...*} [partials] The arguments to be partially applied.
       * @returns {Function} Returns the new bound function.
       * @example
       *
       * var object = {
       *   'user': 'fred',
       *   'greet': function(greeting, punctuation) {
       *     return greeting + ' ' + this.user + punctuation;
       *   }
       * };
       *
       * var bound = _.bindKey(object, 'greet', 'hi');
       * bound('!');
       * // => 'hi fred!'
       *
       * object.greet = function(greeting, punctuation) {
       *   return greeting + 'ya ' + this.user + punctuation;
       * };
       *
       * bound('!');
       * // => 'hiya fred!'
       *
       * // Bound with placeholders.
       * var bound = _.bindKey(object, 'greet', _, '!');
       * bound('hi');
       * // => 'hiya fred!'
       */var bindKey=baseRest(function(object,key,partials){var bitmask=WRAP_BIND_FLAG|WRAP_BIND_KEY_FLAG;if(partials.length){var holders=replaceHolders(partials,getHolder(bindKey));bitmask|=WRAP_PARTIAL_FLAG;}return createWrap(key,bitmask,object,partials,holders);});/**
       * Creates a function that accepts arguments of `func` and either invokes
       * `func` returning its result, if at least `arity` number of arguments have
       * been provided, or returns a function that accepts the remaining `func`
       * arguments, and so on. The arity of `func` may be specified if `func.length`
       * is not sufficient.
       *
       * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
       * may be used as a placeholder for provided arguments.
       *
       * **Note:** This method doesn't set the "length" property of curried functions.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Function
       * @param {Function} func The function to curry.
       * @param {number} [arity=func.length] The arity of `func`.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Function} Returns the new curried function.
       * @example
       *
       * var abc = function(a, b, c) {
       *   return [a, b, c];
       * };
       *
       * var curried = _.curry(abc);
       *
       * curried(1)(2)(3);
       * // => [1, 2, 3]
       *
       * curried(1, 2)(3);
       * // => [1, 2, 3]
       *
       * curried(1, 2, 3);
       * // => [1, 2, 3]
       *
       * // Curried with placeholders.
       * curried(1)(_, 3)(2);
       * // => [1, 2, 3]
       */function curry(func,arity,guard){arity=guard?undefined$1:arity;var result=createWrap(func,WRAP_CURRY_FLAG,undefined$1,undefined$1,undefined$1,undefined$1,undefined$1,arity);result.placeholder=curry.placeholder;return result;}/**
       * This method is like `_.curry` except that arguments are applied to `func`
       * in the manner of `_.partialRight` instead of `_.partial`.
       *
       * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
       * builds, may be used as a placeholder for provided arguments.
       *
       * **Note:** This method doesn't set the "length" property of curried functions.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {Function} func The function to curry.
       * @param {number} [arity=func.length] The arity of `func`.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Function} Returns the new curried function.
       * @example
       *
       * var abc = function(a, b, c) {
       *   return [a, b, c];
       * };
       *
       * var curried = _.curryRight(abc);
       *
       * curried(3)(2)(1);
       * // => [1, 2, 3]
       *
       * curried(2, 3)(1);
       * // => [1, 2, 3]
       *
       * curried(1, 2, 3);
       * // => [1, 2, 3]
       *
       * // Curried with placeholders.
       * curried(3)(1, _)(2);
       * // => [1, 2, 3]
       */function curryRight(func,arity,guard){arity=guard?undefined$1:arity;var result=createWrap(func,WRAP_CURRY_RIGHT_FLAG,undefined$1,undefined$1,undefined$1,undefined$1,undefined$1,arity);result.placeholder=curryRight.placeholder;return result;}/**
       * Creates a debounced function that delays invoking `func` until after `wait`
       * milliseconds have elapsed since the last time the debounced function was
       * invoked. The debounced function comes with a `cancel` method to cancel
       * delayed `func` invocations and a `flush` method to immediately invoke them.
       * Provide `options` to indicate whether `func` should be invoked on the
       * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
       * with the last arguments provided to the debounced function. Subsequent
       * calls to the debounced function return the result of the last `func`
       * invocation.
       *
       * **Note:** If `leading` and `trailing` options are `true`, `func` is
       * invoked on the trailing edge of the timeout only if the debounced function
       * is invoked more than once during the `wait` timeout.
       *
       * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
       * until to the next tick, similar to `setTimeout` with a timeout of `0`.
       *
       * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
       * for details over the differences between `_.debounce` and `_.throttle`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to debounce.
       * @param {number} [wait=0] The number of milliseconds to delay.
       * @param {Object} [options={}] The options object.
       * @param {boolean} [options.leading=false]
       *  Specify invoking on the leading edge of the timeout.
       * @param {number} [options.maxWait]
       *  The maximum time `func` is allowed to be delayed before it's invoked.
       * @param {boolean} [options.trailing=true]
       *  Specify invoking on the trailing edge of the timeout.
       * @returns {Function} Returns the new debounced function.
       * @example
       *
       * // Avoid costly calculations while the window size is in flux.
       * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
       *
       * // Invoke `sendMail` when clicked, debouncing subsequent calls.
       * jQuery(element).on('click', _.debounce(sendMail, 300, {
       *   'leading': true,
       *   'trailing': false
       * }));
       *
       * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
       * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
       * var source = new EventSource('/stream');
       * jQuery(source).on('message', debounced);
       *
       * // Cancel the trailing debounced invocation.
       * jQuery(window).on('popstate', debounced.cancel);
       */function debounce(func,wait,options){var lastArgs,lastThis,maxWait,result,timerId,lastCallTime,lastInvokeTime=0,leading=false,maxing=false,trailing=true;if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}wait=toNumber(wait)||0;if(isObject(options)){leading=!!options.leading;maxing='maxWait'in options;maxWait=maxing?nativeMax(toNumber(options.maxWait)||0,wait):maxWait;trailing='trailing'in options?!!options.trailing:trailing;}function invokeFunc(time){var args=lastArgs,thisArg=lastThis;lastArgs=lastThis=undefined$1;lastInvokeTime=time;result=func.apply(thisArg,args);return result;}function leadingEdge(time){// Reset any `maxWait` timer.
  lastInvokeTime=time;// Start the timer for the trailing edge.
  timerId=setTimeout(timerExpired,wait);// Invoke the leading edge.
  return leading?invokeFunc(time):result;}function remainingWait(time){var timeSinceLastCall=time-lastCallTime,timeSinceLastInvoke=time-lastInvokeTime,timeWaiting=wait-timeSinceLastCall;return maxing?nativeMin(timeWaiting,maxWait-timeSinceLastInvoke):timeWaiting;}function shouldInvoke(time){var timeSinceLastCall=time-lastCallTime,timeSinceLastInvoke=time-lastInvokeTime;// Either this is the first call, activity has stopped and we're at the
  // trailing edge, the system time has gone backwards and we're treating
  // it as the trailing edge, or we've hit the `maxWait` limit.
  return lastCallTime===undefined$1||timeSinceLastCall>=wait||timeSinceLastCall<0||maxing&&timeSinceLastInvoke>=maxWait;}function timerExpired(){var time=now();if(shouldInvoke(time)){return trailingEdge(time);}// Restart the timer.
  timerId=setTimeout(timerExpired,remainingWait(time));}function trailingEdge(time){timerId=undefined$1;// Only invoke if we have `lastArgs` which means `func` has been
  // debounced at least once.
  if(trailing&&lastArgs){return invokeFunc(time);}lastArgs=lastThis=undefined$1;return result;}function cancel(){if(timerId!==undefined$1){clearTimeout(timerId);}lastInvokeTime=0;lastArgs=lastCallTime=lastThis=timerId=undefined$1;}function flush(){return timerId===undefined$1?result:trailingEdge(now());}function debounced(){var time=now(),isInvoking=shouldInvoke(time);lastArgs=arguments;lastThis=this;lastCallTime=time;if(isInvoking){if(timerId===undefined$1){return leadingEdge(lastCallTime);}if(maxing){// Handle invocations in a tight loop.
  clearTimeout(timerId);timerId=setTimeout(timerExpired,wait);return invokeFunc(lastCallTime);}}if(timerId===undefined$1){timerId=setTimeout(timerExpired,wait);}return result;}debounced.cancel=cancel;debounced.flush=flush;return debounced;}/**
       * Defers invoking the `func` until the current call stack has cleared. Any
       * additional arguments are provided to `func` when it's invoked.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to defer.
       * @param {...*} [args] The arguments to invoke `func` with.
       * @returns {number} Returns the timer id.
       * @example
       *
       * _.defer(function(text) {
       *   console.log(text);
       * }, 'deferred');
       * // => Logs 'deferred' after one millisecond.
       */var defer=baseRest(function(func,args){return baseDelay(func,1,args);});/**
       * Invokes `func` after `wait` milliseconds. Any additional arguments are
       * provided to `func` when it's invoked.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to delay.
       * @param {number} wait The number of milliseconds to delay invocation.
       * @param {...*} [args] The arguments to invoke `func` with.
       * @returns {number} Returns the timer id.
       * @example
       *
       * _.delay(function(text) {
       *   console.log(text);
       * }, 1000, 'later');
       * // => Logs 'later' after one second.
       */var delay=baseRest(function(func,wait,args){return baseDelay(func,toNumber(wait)||0,args);});/**
       * Creates a function that invokes `func` with arguments reversed.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Function
       * @param {Function} func The function to flip arguments for.
       * @returns {Function} Returns the new flipped function.
       * @example
       *
       * var flipped = _.flip(function() {
       *   return _.toArray(arguments);
       * });
       *
       * flipped('a', 'b', 'c', 'd');
       * // => ['d', 'c', 'b', 'a']
       */function flip(func){return createWrap(func,WRAP_FLIP_FLAG);}/**
       * Creates a function that memoizes the result of `func`. If `resolver` is
       * provided, it determines the cache key for storing the result based on the
       * arguments provided to the memoized function. By default, the first argument
       * provided to the memoized function is used as the map cache key. The `func`
       * is invoked with the `this` binding of the memoized function.
       *
       * **Note:** The cache is exposed as the `cache` property on the memoized
       * function. Its creation may be customized by replacing the `_.memoize.Cache`
       * constructor with one whose instances implement the
       * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
       * method interface of `clear`, `delete`, `get`, `has`, and `set`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to have its output memoized.
       * @param {Function} [resolver] The function to resolve the cache key.
       * @returns {Function} Returns the new memoized function.
       * @example
       *
       * var object = { 'a': 1, 'b': 2 };
       * var other = { 'c': 3, 'd': 4 };
       *
       * var values = _.memoize(_.values);
       * values(object);
       * // => [1, 2]
       *
       * values(other);
       * // => [3, 4]
       *
       * object.a = 2;
       * values(object);
       * // => [1, 2]
       *
       * // Modify the result cache.
       * values.cache.set(object, ['a', 'b']);
       * values(object);
       * // => ['a', 'b']
       *
       * // Replace `_.memoize.Cache`.
       * _.memoize.Cache = WeakMap;
       */function memoize(func,resolver){if(typeof func!='function'||resolver!=null&&typeof resolver!='function'){throw new TypeError(FUNC_ERROR_TEXT);}var memoized=function memoized(){var args=arguments,key=resolver?resolver.apply(this,args):args[0],cache=memoized.cache;if(cache.has(key)){return cache.get(key);}var result=func.apply(this,args);memoized.cache=cache.set(key,result)||cache;return result;};memoized.cache=new(memoize.Cache||MapCache)();return memoized;}// Expose `MapCache`.
  memoize.Cache=MapCache;/**
       * Creates a function that negates the result of the predicate `func`. The
       * `func` predicate is invoked with the `this` binding and arguments of the
       * created function.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {Function} predicate The predicate to negate.
       * @returns {Function} Returns the new negated function.
       * @example
       *
       * function isEven(n) {
       *   return n % 2 == 0;
       * }
       *
       * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
       * // => [1, 3, 5]
       */function negate(predicate){if(typeof predicate!='function'){throw new TypeError(FUNC_ERROR_TEXT);}return function(){var args=arguments;switch(args.length){case 0:return !predicate.call(this);case 1:return !predicate.call(this,args[0]);case 2:return !predicate.call(this,args[0],args[1]);case 3:return !predicate.call(this,args[0],args[1],args[2]);}return !predicate.apply(this,args);};}/**
       * Creates a function that is restricted to invoking `func` once. Repeat calls
       * to the function return the value of the first invocation. The `func` is
       * invoked with the `this` binding and arguments of the created function.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new restricted function.
       * @example
       *
       * var initialize = _.once(createApplication);
       * initialize();
       * initialize();
       * // => `createApplication` is invoked once
       */function once(func){return before(2,func);}/**
       * Creates a function that invokes `func` with its arguments transformed.
       *
       * @static
       * @since 4.0.0
       * @memberOf _
       * @category Function
       * @param {Function} func The function to wrap.
       * @param {...(Function|Function[])} [transforms=[_.identity]]
       *  The argument transforms.
       * @returns {Function} Returns the new function.
       * @example
       *
       * function doubled(n) {
       *   return n * 2;
       * }
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var func = _.overArgs(function(x, y) {
       *   return [x, y];
       * }, [square, doubled]);
       *
       * func(9, 3);
       * // => [81, 6]
       *
       * func(10, 5);
       * // => [100, 10]
       */var overArgs=castRest(function(func,transforms){transforms=transforms.length==1&&isArray(transforms[0])?arrayMap(transforms[0],baseUnary(getIteratee())):arrayMap(baseFlatten(transforms,1),baseUnary(getIteratee()));var funcsLength=transforms.length;return baseRest(function(args){var index=-1,length=nativeMin(args.length,funcsLength);while(++index<length){args[index]=transforms[index].call(this,args[index]);}return apply(func,this,args);});});/**
       * Creates a function that invokes `func` with `partials` prepended to the
       * arguments it receives. This method is like `_.bind` except it does **not**
       * alter the `this` binding.
       *
       * The `_.partial.placeholder` value, which defaults to `_` in monolithic
       * builds, may be used as a placeholder for partially applied arguments.
       *
       * **Note:** This method doesn't set the "length" property of partially
       * applied functions.
       *
       * @static
       * @memberOf _
       * @since 0.2.0
       * @category Function
       * @param {Function} func The function to partially apply arguments to.
       * @param {...*} [partials] The arguments to be partially applied.
       * @returns {Function} Returns the new partially applied function.
       * @example
       *
       * function greet(greeting, name) {
       *   return greeting + ' ' + name;
       * }
       *
       * var sayHelloTo = _.partial(greet, 'hello');
       * sayHelloTo('fred');
       * // => 'hello fred'
       *
       * // Partially applied with placeholders.
       * var greetFred = _.partial(greet, _, 'fred');
       * greetFred('hi');
       * // => 'hi fred'
       */var partial=baseRest(function(func,partials){var holders=replaceHolders(partials,getHolder(partial));return createWrap(func,WRAP_PARTIAL_FLAG,undefined$1,partials,holders);});/**
       * This method is like `_.partial` except that partially applied arguments
       * are appended to the arguments it receives.
       *
       * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
       * builds, may be used as a placeholder for partially applied arguments.
       *
       * **Note:** This method doesn't set the "length" property of partially
       * applied functions.
       *
       * @static
       * @memberOf _
       * @since 1.0.0
       * @category Function
       * @param {Function} func The function to partially apply arguments to.
       * @param {...*} [partials] The arguments to be partially applied.
       * @returns {Function} Returns the new partially applied function.
       * @example
       *
       * function greet(greeting, name) {
       *   return greeting + ' ' + name;
       * }
       *
       * var greetFred = _.partialRight(greet, 'fred');
       * greetFred('hi');
       * // => 'hi fred'
       *
       * // Partially applied with placeholders.
       * var sayHelloTo = _.partialRight(greet, 'hello', _);
       * sayHelloTo('fred');
       * // => 'hello fred'
       */var partialRight=baseRest(function(func,partials){var holders=replaceHolders(partials,getHolder(partialRight));return createWrap(func,WRAP_PARTIAL_RIGHT_FLAG,undefined$1,partials,holders);});/**
       * Creates a function that invokes `func` with arguments arranged according
       * to the specified `indexes` where the argument value at the first index is
       * provided as the first argument, the argument value at the second index is
       * provided as the second argument, and so on.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {Function} func The function to rearrange arguments for.
       * @param {...(number|number[])} indexes The arranged argument indexes.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var rearged = _.rearg(function(a, b, c) {
       *   return [a, b, c];
       * }, [2, 0, 1]);
       *
       * rearged('b', 'c', 'a')
       * // => ['a', 'b', 'c']
       */var rearg=flatRest(function(func,indexes){return createWrap(func,WRAP_REARG_FLAG,undefined$1,undefined$1,undefined$1,indexes);});/**
       * Creates a function that invokes `func` with the `this` binding of the
       * created function and arguments from `start` and beyond provided as
       * an array.
       *
       * **Note:** This method is based on the
       * [rest parameter](https://mdn.io/rest_parameters).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Function
       * @param {Function} func The function to apply a rest parameter to.
       * @param {number} [start=func.length-1] The start position of the rest parameter.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var say = _.rest(function(what, names) {
       *   return what + ' ' + _.initial(names).join(', ') +
       *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
       * });
       *
       * say('hello', 'fred', 'barney', 'pebbles');
       * // => 'hello fred, barney, & pebbles'
       */function rest(func,start){if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}start=start===undefined$1?start:toInteger(start);return baseRest(func,start);}/**
       * Creates a function that invokes `func` with the `this` binding of the
       * create function and an array of arguments much like
       * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
       *
       * **Note:** This method is based on the
       * [spread operator](https://mdn.io/spread_operator).
       *
       * @static
       * @memberOf _
       * @since 3.2.0
       * @category Function
       * @param {Function} func The function to spread arguments over.
       * @param {number} [start=0] The start position of the spread.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var say = _.spread(function(who, what) {
       *   return who + ' says ' + what;
       * });
       *
       * say(['fred', 'hello']);
       * // => 'fred says hello'
       *
       * var numbers = Promise.all([
       *   Promise.resolve(40),
       *   Promise.resolve(36)
       * ]);
       *
       * numbers.then(_.spread(function(x, y) {
       *   return x + y;
       * }));
       * // => a Promise of 76
       */function spread(func,start){if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}start=start==null?0:nativeMax(toInteger(start),0);return baseRest(function(args){var array=args[start],otherArgs=castSlice(args,0,start);if(array){arrayPush(otherArgs,array);}return apply(func,this,otherArgs);});}/**
       * Creates a throttled function that only invokes `func` at most once per
       * every `wait` milliseconds. The throttled function comes with a `cancel`
       * method to cancel delayed `func` invocations and a `flush` method to
       * immediately invoke them. Provide `options` to indicate whether `func`
       * should be invoked on the leading and/or trailing edge of the `wait`
       * timeout. The `func` is invoked with the last arguments provided to the
       * throttled function. Subsequent calls to the throttled function return the
       * result of the last `func` invocation.
       *
       * **Note:** If `leading` and `trailing` options are `true`, `func` is
       * invoked on the trailing edge of the timeout only if the throttled function
       * is invoked more than once during the `wait` timeout.
       *
       * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
       * until to the next tick, similar to `setTimeout` with a timeout of `0`.
       *
       * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
       * for details over the differences between `_.throttle` and `_.debounce`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to throttle.
       * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
       * @param {Object} [options={}] The options object.
       * @param {boolean} [options.leading=true]
       *  Specify invoking on the leading edge of the timeout.
       * @param {boolean} [options.trailing=true]
       *  Specify invoking on the trailing edge of the timeout.
       * @returns {Function} Returns the new throttled function.
       * @example
       *
       * // Avoid excessively updating the position while scrolling.
       * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
       *
       * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
       * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
       * jQuery(element).on('click', throttled);
       *
       * // Cancel the trailing throttled invocation.
       * jQuery(window).on('popstate', throttled.cancel);
       */function throttle(func,wait,options){var leading=true,trailing=true;if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}if(isObject(options)){leading='leading'in options?!!options.leading:leading;trailing='trailing'in options?!!options.trailing:trailing;}return debounce(func,wait,{'leading':leading,'maxWait':wait,'trailing':trailing});}/**
       * Creates a function that accepts up to one argument, ignoring any
       * additional arguments.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Function
       * @param {Function} func The function to cap arguments for.
       * @returns {Function} Returns the new capped function.
       * @example
       *
       * _.map(['6', '8', '10'], _.unary(parseInt));
       * // => [6, 8, 10]
       */function unary(func){return ary(func,1);}/**
       * Creates a function that provides `value` to `wrapper` as its first
       * argument. Any additional arguments provided to the function are appended
       * to those provided to the `wrapper`. The wrapper is invoked with the `this`
       * binding of the created function.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {*} value The value to wrap.
       * @param {Function} [wrapper=identity] The wrapper function.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var p = _.wrap(_.escape, function(func, text) {
       *   return '<p>' + func(text) + '</p>';
       * });
       *
       * p('fred, barney, & pebbles');
       * // => '<p>fred, barney, &amp; pebbles</p>'
       */function wrap(value,wrapper){return partial(castFunction(wrapper),value);}/*------------------------------------------------------------------------*/ /**
       * Casts `value` as an array if it's not one.
       *
       * @static
       * @memberOf _
       * @since 4.4.0
       * @category Lang
       * @param {*} value The value to inspect.
       * @returns {Array} Returns the cast array.
       * @example
       *
       * _.castArray(1);
       * // => [1]
       *
       * _.castArray({ 'a': 1 });
       * // => [{ 'a': 1 }]
       *
       * _.castArray('abc');
       * // => ['abc']
       *
       * _.castArray(null);
       * // => [null]
       *
       * _.castArray(undefined);
       * // => [undefined]
       *
       * _.castArray();
       * // => []
       *
       * var array = [1, 2, 3];
       * console.log(_.castArray(array) === array);
       * // => true
       */function castArray(){if(!arguments.length){return [];}var value=arguments[0];return isArray(value)?value:[value];}/**
       * Creates a shallow clone of `value`.
       *
       * **Note:** This method is loosely based on the
       * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
       * and supports cloning arrays, array buffers, booleans, date objects, maps,
       * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
       * arrays. The own enumerable properties of `arguments` objects are cloned
       * as plain objects. An empty object is returned for uncloneable values such
       * as error objects, functions, DOM nodes, and WeakMaps.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to clone.
       * @returns {*} Returns the cloned value.
       * @see _.cloneDeep
       * @example
       *
       * var objects = [{ 'a': 1 }, { 'b': 2 }];
       *
       * var shallow = _.clone(objects);
       * console.log(shallow[0] === objects[0]);
       * // => true
       */function clone(value){return baseClone(value,CLONE_SYMBOLS_FLAG);}/**
       * This method is like `_.clone` except that it accepts `customizer` which
       * is invoked to produce the cloned value. If `customizer` returns `undefined`,
       * cloning is handled by the method instead. The `customizer` is invoked with
       * up to four arguments; (value [, index|key, object, stack]).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to clone.
       * @param {Function} [customizer] The function to customize cloning.
       * @returns {*} Returns the cloned value.
       * @see _.cloneDeepWith
       * @example
       *
       * function customizer(value) {
       *   if (_.isElement(value)) {
       *     return value.cloneNode(false);
       *   }
       * }
       *
       * var el = _.cloneWith(document.body, customizer);
       *
       * console.log(el === document.body);
       * // => false
       * console.log(el.nodeName);
       * // => 'BODY'
       * console.log(el.childNodes.length);
       * // => 0
       */function cloneWith(value,customizer){customizer=typeof customizer=='function'?customizer:undefined$1;return baseClone(value,CLONE_SYMBOLS_FLAG,customizer);}/**
       * This method is like `_.clone` except that it recursively clones `value`.
       *
       * @static
       * @memberOf _
       * @since 1.0.0
       * @category Lang
       * @param {*} value The value to recursively clone.
       * @returns {*} Returns the deep cloned value.
       * @see _.clone
       * @example
       *
       * var objects = [{ 'a': 1 }, { 'b': 2 }];
       *
       * var deep = _.cloneDeep(objects);
       * console.log(deep[0] === objects[0]);
       * // => false
       */function cloneDeep(value){return baseClone(value,CLONE_DEEP_FLAG|CLONE_SYMBOLS_FLAG);}/**
       * This method is like `_.cloneWith` except that it recursively clones `value`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to recursively clone.
       * @param {Function} [customizer] The function to customize cloning.
       * @returns {*} Returns the deep cloned value.
       * @see _.cloneWith
       * @example
       *
       * function customizer(value) {
       *   if (_.isElement(value)) {
       *     return value.cloneNode(true);
       *   }
       * }
       *
       * var el = _.cloneDeepWith(document.body, customizer);
       *
       * console.log(el === document.body);
       * // => false
       * console.log(el.nodeName);
       * // => 'BODY'
       * console.log(el.childNodes.length);
       * // => 20
       */function cloneDeepWith(value,customizer){customizer=typeof customizer=='function'?customizer:undefined$1;return baseClone(value,CLONE_DEEP_FLAG|CLONE_SYMBOLS_FLAG,customizer);}/**
       * Checks if `object` conforms to `source` by invoking the predicate
       * properties of `source` with the corresponding property values of `object`.
       *
       * **Note:** This method is equivalent to `_.conforms` when `source` is
       * partially applied.
       *
       * @static
       * @memberOf _
       * @since 4.14.0
       * @category Lang
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property predicates to conform to.
       * @returns {boolean} Returns `true` if `object` conforms, else `false`.
       * @example
       *
       * var object = { 'a': 1, 'b': 2 };
       *
       * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
       * // => true
       *
       * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
       * // => false
       */function conformsTo(object,source){return source==null||baseConformsTo(object,source,keys(source));}/**
       * Performs a
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * comparison between two values to determine if they are equivalent.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       * @example
       *
       * var object = { 'a': 1 };
       * var other = { 'a': 1 };
       *
       * _.eq(object, object);
       * // => true
       *
       * _.eq(object, other);
       * // => false
       *
       * _.eq('a', 'a');
       * // => true
       *
       * _.eq('a', Object('a'));
       * // => false
       *
       * _.eq(NaN, NaN);
       * // => true
       */function eq(value,other){return value===other||value!==value&&other!==other;}/**
       * Checks if `value` is greater than `other`.
       *
       * @static
       * @memberOf _
       * @since 3.9.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is greater than `other`,
       *  else `false`.
       * @see _.lt
       * @example
       *
       * _.gt(3, 1);
       * // => true
       *
       * _.gt(3, 3);
       * // => false
       *
       * _.gt(1, 3);
       * // => false
       */var gt=createRelationalOperation(baseGt);/**
       * Checks if `value` is greater than or equal to `other`.
       *
       * @static
       * @memberOf _
       * @since 3.9.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is greater than or equal to
       *  `other`, else `false`.
       * @see _.lte
       * @example
       *
       * _.gte(3, 1);
       * // => true
       *
       * _.gte(3, 3);
       * // => true
       *
       * _.gte(1, 3);
       * // => false
       */var gte=createRelationalOperation(function(value,other){return value>=other;});/**
       * Checks if `value` is likely an `arguments` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an `arguments` object,
       *  else `false`.
       * @example
       *
       * _.isArguments(function() { return arguments; }());
       * // => true
       *
       * _.isArguments([1, 2, 3]);
       * // => false
       */var isArguments=baseIsArguments(function(){return arguments;}())?baseIsArguments:function(value){return isObjectLike(value)&&hasOwnProperty.call(value,'callee')&&!propertyIsEnumerable.call(value,'callee');};/**
       * Checks if `value` is classified as an `Array` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array, else `false`.
       * @example
       *
       * _.isArray([1, 2, 3]);
       * // => true
       *
       * _.isArray(document.body.children);
       * // => false
       *
       * _.isArray('abc');
       * // => false
       *
       * _.isArray(_.noop);
       * // => false
       */var isArray=Array.isArray;/**
       * Checks if `value` is classified as an `ArrayBuffer` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
       * @example
       *
       * _.isArrayBuffer(new ArrayBuffer(2));
       * // => true
       *
       * _.isArrayBuffer(new Array(2));
       * // => false
       */var isArrayBuffer=nodeIsArrayBuffer?baseUnary(nodeIsArrayBuffer):baseIsArrayBuffer;/**
       * Checks if `value` is array-like. A value is considered array-like if it's
       * not a function and has a `value.length` that's an integer greater than or
       * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
       * @example
       *
       * _.isArrayLike([1, 2, 3]);
       * // => true
       *
       * _.isArrayLike(document.body.children);
       * // => true
       *
       * _.isArrayLike('abc');
       * // => true
       *
       * _.isArrayLike(_.noop);
       * // => false
       */function isArrayLike(value){return value!=null&&isLength(value.length)&&!isFunction(value);}/**
       * This method is like `_.isArrayLike` except that it also checks if `value`
       * is an object.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array-like object,
       *  else `false`.
       * @example
       *
       * _.isArrayLikeObject([1, 2, 3]);
       * // => true
       *
       * _.isArrayLikeObject(document.body.children);
       * // => true
       *
       * _.isArrayLikeObject('abc');
       * // => false
       *
       * _.isArrayLikeObject(_.noop);
       * // => false
       */function isArrayLikeObject(value){return isObjectLike(value)&&isArrayLike(value);}/**
       * Checks if `value` is classified as a boolean primitive or object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
       * @example
       *
       * _.isBoolean(false);
       * // => true
       *
       * _.isBoolean(null);
       * // => false
       */function isBoolean(value){return value===true||value===false||isObjectLike(value)&&baseGetTag(value)==boolTag;}/**
       * Checks if `value` is a buffer.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
       * @example
       *
       * _.isBuffer(new Buffer(2));
       * // => true
       *
       * _.isBuffer(new Uint8Array(2));
       * // => false
       */var isBuffer=nativeIsBuffer||stubFalse;/**
       * Checks if `value` is classified as a `Date` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
       * @example
       *
       * _.isDate(new Date);
       * // => true
       *
       * _.isDate('Mon April 23 2012');
       * // => false
       */var isDate=nodeIsDate?baseUnary(nodeIsDate):baseIsDate;/**
       * Checks if `value` is likely a DOM element.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
       * @example
       *
       * _.isElement(document.body);
       * // => true
       *
       * _.isElement('<body>');
       * // => false
       */function isElement(value){return isObjectLike(value)&&value.nodeType===1&&!isPlainObject(value);}/**
       * Checks if `value` is an empty object, collection, map, or set.
       *
       * Objects are considered empty if they have no own enumerable string keyed
       * properties.
       *
       * Array-like values such as `arguments` objects, arrays, buffers, strings, or
       * jQuery-like collections are considered empty if they have a `length` of `0`.
       * Similarly, maps and sets are considered empty if they have a `size` of `0`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is empty, else `false`.
       * @example
       *
       * _.isEmpty(null);
       * // => true
       *
       * _.isEmpty(true);
       * // => true
       *
       * _.isEmpty(1);
       * // => true
       *
       * _.isEmpty([1, 2, 3]);
       * // => false
       *
       * _.isEmpty({ 'a': 1 });
       * // => false
       */function isEmpty(value){if(value==null){return true;}if(isArrayLike(value)&&(isArray(value)||typeof value=='string'||typeof value.splice=='function'||isBuffer(value)||isTypedArray(value)||isArguments(value))){return !value.length;}var tag=getTag(value);if(tag==mapTag||tag==setTag){return !value.size;}if(isPrototype(value)){return !baseKeys(value).length;}for(var key in value){if(hasOwnProperty.call(value,key)){return false;}}return true;}/**
       * Performs a deep comparison between two values to determine if they are
       * equivalent.
       *
       * **Note:** This method supports comparing arrays, array buffers, booleans,
       * date objects, error objects, maps, numbers, `Object` objects, regexes,
       * sets, strings, symbols, and typed arrays. `Object` objects are compared
       * by their own, not inherited, enumerable properties. Functions and DOM
       * nodes are compared by strict equality, i.e. `===`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       * @example
       *
       * var object = { 'a': 1 };
       * var other = { 'a': 1 };
       *
       * _.isEqual(object, other);
       * // => true
       *
       * object === other;
       * // => false
       */function isEqual(value,other){return baseIsEqual(value,other);}/**
       * This method is like `_.isEqual` except that it accepts `customizer` which
       * is invoked to compare values. If `customizer` returns `undefined`, comparisons
       * are handled by the method instead. The `customizer` is invoked with up to
       * six arguments: (objValue, othValue [, index|key, object, other, stack]).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @param {Function} [customizer] The function to customize comparisons.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       * @example
       *
       * function isGreeting(value) {
       *   return /^h(?:i|ello)$/.test(value);
       * }
       *
       * function customizer(objValue, othValue) {
       *   if (isGreeting(objValue) && isGreeting(othValue)) {
       *     return true;
       *   }
       * }
       *
       * var array = ['hello', 'goodbye'];
       * var other = ['hi', 'goodbye'];
       *
       * _.isEqualWith(array, other, customizer);
       * // => true
       */function isEqualWith(value,other,customizer){customizer=typeof customizer=='function'?customizer:undefined$1;var result=customizer?customizer(value,other):undefined$1;return result===undefined$1?baseIsEqual(value,other,undefined$1,customizer):!!result;}/**
       * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
       * `SyntaxError`, `TypeError`, or `URIError` object.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
       * @example
       *
       * _.isError(new Error);
       * // => true
       *
       * _.isError(Error);
       * // => false
       */function isError(value){if(!isObjectLike(value)){return false;}var tag=baseGetTag(value);return tag==errorTag||tag==domExcTag||typeof value.message=='string'&&typeof value.name=='string'&&!isPlainObject(value);}/**
       * Checks if `value` is a finite primitive number.
       *
       * **Note:** This method is based on
       * [`Number.isFinite`](https://mdn.io/Number/isFinite).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
       * @example
       *
       * _.isFinite(3);
       * // => true
       *
       * _.isFinite(Number.MIN_VALUE);
       * // => true
       *
       * _.isFinite(Infinity);
       * // => false
       *
       * _.isFinite('3');
       * // => false
       */function isFinite(value){return typeof value=='number'&&nativeIsFinite(value);}/**
       * Checks if `value` is classified as a `Function` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a function, else `false`.
       * @example
       *
       * _.isFunction(_);
       * // => true
       *
       * _.isFunction(/abc/);
       * // => false
       */function isFunction(value){if(!isObject(value)){return false;}// The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag=baseGetTag(value);return tag==funcTag||tag==genTag||tag==asyncTag||tag==proxyTag;}/**
       * Checks if `value` is an integer.
       *
       * **Note:** This method is based on
       * [`Number.isInteger`](https://mdn.io/Number/isInteger).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
       * @example
       *
       * _.isInteger(3);
       * // => true
       *
       * _.isInteger(Number.MIN_VALUE);
       * // => false
       *
       * _.isInteger(Infinity);
       * // => false
       *
       * _.isInteger('3');
       * // => false
       */function isInteger(value){return typeof value=='number'&&value==toInteger(value);}/**
       * Checks if `value` is a valid array-like length.
       *
       * **Note:** This method is loosely based on
       * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
       * @example
       *
       * _.isLength(3);
       * // => true
       *
       * _.isLength(Number.MIN_VALUE);
       * // => false
       *
       * _.isLength(Infinity);
       * // => false
       *
       * _.isLength('3');
       * // => false
       */function isLength(value){return typeof value=='number'&&value>-1&&value%1==0&&value<=MAX_SAFE_INTEGER;}/**
       * Checks if `value` is the
       * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
       * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an object, else `false`.
       * @example
       *
       * _.isObject({});
       * // => true
       *
       * _.isObject([1, 2, 3]);
       * // => true
       *
       * _.isObject(_.noop);
       * // => true
       *
       * _.isObject(null);
       * // => false
       */function isObject(value){var type=_typeof(value);return value!=null&&(type=='object'||type=='function');}/**
       * Checks if `value` is object-like. A value is object-like if it's not `null`
       * and has a `typeof` result of "object".
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
       * @example
       *
       * _.isObjectLike({});
       * // => true
       *
       * _.isObjectLike([1, 2, 3]);
       * // => true
       *
       * _.isObjectLike(_.noop);
       * // => false
       *
       * _.isObjectLike(null);
       * // => false
       */function isObjectLike(value){return value!=null&&_typeof(value)=='object';}/**
       * Checks if `value` is classified as a `Map` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a map, else `false`.
       * @example
       *
       * _.isMap(new Map);
       * // => true
       *
       * _.isMap(new WeakMap);
       * // => false
       */var isMap=nodeIsMap?baseUnary(nodeIsMap):baseIsMap;/**
       * Performs a partial deep comparison between `object` and `source` to
       * determine if `object` contains equivalent property values.
       *
       * **Note:** This method is equivalent to `_.matches` when `source` is
       * partially applied.
       *
       * Partial comparisons will match empty array and empty object `source`
       * values against any array or object value, respectively. See `_.isEqual`
       * for a list of supported value comparisons.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property values to match.
       * @returns {boolean} Returns `true` if `object` is a match, else `false`.
       * @example
       *
       * var object = { 'a': 1, 'b': 2 };
       *
       * _.isMatch(object, { 'b': 2 });
       * // => true
       *
       * _.isMatch(object, { 'b': 1 });
       * // => false
       */function isMatch(object,source){return object===source||baseIsMatch(object,source,getMatchData(source));}/**
       * This method is like `_.isMatch` except that it accepts `customizer` which
       * is invoked to compare values. If `customizer` returns `undefined`, comparisons
       * are handled by the method instead. The `customizer` is invoked with five
       * arguments: (objValue, srcValue, index|key, object, source).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property values to match.
       * @param {Function} [customizer] The function to customize comparisons.
       * @returns {boolean} Returns `true` if `object` is a match, else `false`.
       * @example
       *
       * function isGreeting(value) {
       *   return /^h(?:i|ello)$/.test(value);
       * }
       *
       * function customizer(objValue, srcValue) {
       *   if (isGreeting(objValue) && isGreeting(srcValue)) {
       *     return true;
       *   }
       * }
       *
       * var object = { 'greeting': 'hello' };
       * var source = { 'greeting': 'hi' };
       *
       * _.isMatchWith(object, source, customizer);
       * // => true
       */function isMatchWith(object,source,customizer){customizer=typeof customizer=='function'?customizer:undefined$1;return baseIsMatch(object,source,getMatchData(source),customizer);}/**
       * Checks if `value` is `NaN`.
       *
       * **Note:** This method is based on
       * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
       * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
       * `undefined` and other non-number values.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
       * @example
       *
       * _.isNaN(NaN);
       * // => true
       *
       * _.isNaN(new Number(NaN));
       * // => true
       *
       * isNaN(undefined);
       * // => true
       *
       * _.isNaN(undefined);
       * // => false
       */function isNaN(value){// An `NaN` primitive is the only value that is not equal to itself.
  // Perform the `toStringTag` check first to avoid errors with some
  // ActiveX objects in IE.
  return isNumber(value)&&value!=+value;}/**
       * Checks if `value` is a pristine native function.
       *
       * **Note:** This method can't reliably detect native functions in the presence
       * of the core-js package because core-js circumvents this kind of detection.
       * Despite multiple requests, the core-js maintainer has made it clear: any
       * attempt to fix the detection will be obstructed. As a result, we're left
       * with little choice but to throw an error. Unfortunately, this also affects
       * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
       * which rely on core-js.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a native function,
       *  else `false`.
       * @example
       *
       * _.isNative(Array.prototype.push);
       * // => true
       *
       * _.isNative(_);
       * // => false
       */function isNative(value){if(isMaskable(value)){throw new Error(CORE_ERROR_TEXT);}return baseIsNative(value);}/**
       * Checks if `value` is `null`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
       * @example
       *
       * _.isNull(null);
       * // => true
       *
       * _.isNull(void 0);
       * // => false
       */function isNull(value){return value===null;}/**
       * Checks if `value` is `null` or `undefined`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
       * @example
       *
       * _.isNil(null);
       * // => true
       *
       * _.isNil(void 0);
       * // => true
       *
       * _.isNil(NaN);
       * // => false
       */function isNil(value){return value==null;}/**
       * Checks if `value` is classified as a `Number` primitive or object.
       *
       * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
       * classified as numbers, use the `_.isFinite` method.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a number, else `false`.
       * @example
       *
       * _.isNumber(3);
       * // => true
       *
       * _.isNumber(Number.MIN_VALUE);
       * // => true
       *
       * _.isNumber(Infinity);
       * // => true
       *
       * _.isNumber('3');
       * // => false
       */function isNumber(value){return typeof value=='number'||isObjectLike(value)&&baseGetTag(value)==numberTag;}/**
       * Checks if `value` is a plain object, that is, an object created by the
       * `Object` constructor or one with a `[[Prototype]]` of `null`.
       *
       * @static
       * @memberOf _
       * @since 0.8.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       * }
       *
       * _.isPlainObject(new Foo);
       * // => false
       *
       * _.isPlainObject([1, 2, 3]);
       * // => false
       *
       * _.isPlainObject({ 'x': 0, 'y': 0 });
       * // => true
       *
       * _.isPlainObject(Object.create(null));
       * // => true
       */function isPlainObject(value){if(!isObjectLike(value)||baseGetTag(value)!=objectTag){return false;}var proto=getPrototype(value);if(proto===null){return true;}var Ctor=hasOwnProperty.call(proto,'constructor')&&proto.constructor;return typeof Ctor=='function'&&Ctor instanceof Ctor&&funcToString.call(Ctor)==objectCtorString;}/**
       * Checks if `value` is classified as a `RegExp` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
       * @example
       *
       * _.isRegExp(/abc/);
       * // => true
       *
       * _.isRegExp('/abc/');
       * // => false
       */var isRegExp=nodeIsRegExp?baseUnary(nodeIsRegExp):baseIsRegExp;/**
       * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
       * double precision number which isn't the result of a rounded unsafe integer.
       *
       * **Note:** This method is based on
       * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
       * @example
       *
       * _.isSafeInteger(3);
       * // => true
       *
       * _.isSafeInteger(Number.MIN_VALUE);
       * // => false
       *
       * _.isSafeInteger(Infinity);
       * // => false
       *
       * _.isSafeInteger('3');
       * // => false
       */function isSafeInteger(value){return isInteger(value)&&value>=-MAX_SAFE_INTEGER&&value<=MAX_SAFE_INTEGER;}/**
       * Checks if `value` is classified as a `Set` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a set, else `false`.
       * @example
       *
       * _.isSet(new Set);
       * // => true
       *
       * _.isSet(new WeakSet);
       * // => false
       */var isSet=nodeIsSet?baseUnary(nodeIsSet):baseIsSet;/**
       * Checks if `value` is classified as a `String` primitive or object.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a string, else `false`.
       * @example
       *
       * _.isString('abc');
       * // => true
       *
       * _.isString(1);
       * // => false
       */function isString(value){return typeof value=='string'||!isArray(value)&&isObjectLike(value)&&baseGetTag(value)==stringTag;}/**
       * Checks if `value` is classified as a `Symbol` primitive or object.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
       * @example
       *
       * _.isSymbol(Symbol.iterator);
       * // => true
       *
       * _.isSymbol('abc');
       * // => false
       */function isSymbol(value){return _typeof(value)=='symbol'||isObjectLike(value)&&baseGetTag(value)==symbolTag;}/**
       * Checks if `value` is classified as a typed array.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
       * @example
       *
       * _.isTypedArray(new Uint8Array);
       * // => true
       *
       * _.isTypedArray([]);
       * // => false
       */var isTypedArray=nodeIsTypedArray?baseUnary(nodeIsTypedArray):baseIsTypedArray;/**
       * Checks if `value` is `undefined`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
       * @example
       *
       * _.isUndefined(void 0);
       * // => true
       *
       * _.isUndefined(null);
       * // => false
       */function isUndefined(value){return value===undefined$1;}/**
       * Checks if `value` is classified as a `WeakMap` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
       * @example
       *
       * _.isWeakMap(new WeakMap);
       * // => true
       *
       * _.isWeakMap(new Map);
       * // => false
       */function isWeakMap(value){return isObjectLike(value)&&getTag(value)==weakMapTag;}/**
       * Checks if `value` is classified as a `WeakSet` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
       * @example
       *
       * _.isWeakSet(new WeakSet);
       * // => true
       *
       * _.isWeakSet(new Set);
       * // => false
       */function isWeakSet(value){return isObjectLike(value)&&baseGetTag(value)==weakSetTag;}/**
       * Checks if `value` is less than `other`.
       *
       * @static
       * @memberOf _
       * @since 3.9.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is less than `other`,
       *  else `false`.
       * @see _.gt
       * @example
       *
       * _.lt(1, 3);
       * // => true
       *
       * _.lt(3, 3);
       * // => false
       *
       * _.lt(3, 1);
       * // => false
       */var lt=createRelationalOperation(baseLt);/**
       * Checks if `value` is less than or equal to `other`.
       *
       * @static
       * @memberOf _
       * @since 3.9.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is less than or equal to
       *  `other`, else `false`.
       * @see _.gte
       * @example
       *
       * _.lte(1, 3);
       * // => true
       *
       * _.lte(3, 3);
       * // => true
       *
       * _.lte(3, 1);
       * // => false
       */var lte=createRelationalOperation(function(value,other){return value<=other;});/**
       * Converts `value` to an array.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {Array} Returns the converted array.
       * @example
       *
       * _.toArray({ 'a': 1, 'b': 2 });
       * // => [1, 2]
       *
       * _.toArray('abc');
       * // => ['a', 'b', 'c']
       *
       * _.toArray(1);
       * // => []
       *
       * _.toArray(null);
       * // => []
       */function toArray(value){if(!value){return [];}if(isArrayLike(value)){return isString(value)?stringToArray(value):copyArray(value);}if(symIterator&&value[symIterator]){return iteratorToArray(value[symIterator]());}var tag=getTag(value),func=tag==mapTag?mapToArray:tag==setTag?setToArray:values;return func(value);}/**
       * Converts `value` to a finite number.
       *
       * @static
       * @memberOf _
       * @since 4.12.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {number} Returns the converted number.
       * @example
       *
       * _.toFinite(3.2);
       * // => 3.2
       *
       * _.toFinite(Number.MIN_VALUE);
       * // => 5e-324
       *
       * _.toFinite(Infinity);
       * // => 1.7976931348623157e+308
       *
       * _.toFinite('3.2');
       * // => 3.2
       */function toFinite(value){if(!value){return value===0?value:0;}value=toNumber(value);if(value===INFINITY||value===-INFINITY){var sign=value<0?-1:1;return sign*MAX_INTEGER;}return value===value?value:0;}/**
       * Converts `value` to an integer.
       *
       * **Note:** This method is loosely based on
       * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {number} Returns the converted integer.
       * @example
       *
       * _.toInteger(3.2);
       * // => 3
       *
       * _.toInteger(Number.MIN_VALUE);
       * // => 0
       *
       * _.toInteger(Infinity);
       * // => 1.7976931348623157e+308
       *
       * _.toInteger('3.2');
       * // => 3
       */function toInteger(value){var result=toFinite(value),remainder=result%1;return result===result?remainder?result-remainder:result:0;}/**
       * Converts `value` to an integer suitable for use as the length of an
       * array-like object.
       *
       * **Note:** This method is based on
       * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {number} Returns the converted integer.
       * @example
       *
       * _.toLength(3.2);
       * // => 3
       *
       * _.toLength(Number.MIN_VALUE);
       * // => 0
       *
       * _.toLength(Infinity);
       * // => 4294967295
       *
       * _.toLength('3.2');
       * // => 3
       */function toLength(value){return value?baseClamp(toInteger(value),0,MAX_ARRAY_LENGTH):0;}/**
       * Converts `value` to a number.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to process.
       * @returns {number} Returns the number.
       * @example
       *
       * _.toNumber(3.2);
       * // => 3.2
       *
       * _.toNumber(Number.MIN_VALUE);
       * // => 5e-324
       *
       * _.toNumber(Infinity);
       * // => Infinity
       *
       * _.toNumber('3.2');
       * // => 3.2
       */function toNumber(value){if(typeof value=='number'){return value;}if(isSymbol(value)){return NAN;}if(isObject(value)){var other=typeof value.valueOf=='function'?value.valueOf():value;value=isObject(other)?other+'':other;}if(typeof value!='string'){return value===0?value:+value;}value=baseTrim(value);var isBinary=reIsBinary.test(value);return isBinary||reIsOctal.test(value)?freeParseInt(value.slice(2),isBinary?2:8):reIsBadHex.test(value)?NAN:+value;}/**
       * Converts `value` to a plain object flattening inherited enumerable string
       * keyed properties of `value` to own properties of the plain object.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {Object} Returns the converted plain object.
       * @example
       *
       * function Foo() {
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.assign({ 'a': 1 }, new Foo);
       * // => { 'a': 1, 'b': 2 }
       *
       * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
       * // => { 'a': 1, 'b': 2, 'c': 3 }
       */function toPlainObject(value){return copyObject(value,keysIn(value));}/**
       * Converts `value` to a safe integer. A safe integer can be compared and
       * represented correctly.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {number} Returns the converted integer.
       * @example
       *
       * _.toSafeInteger(3.2);
       * // => 3
       *
       * _.toSafeInteger(Number.MIN_VALUE);
       * // => 0
       *
       * _.toSafeInteger(Infinity);
       * // => 9007199254740991
       *
       * _.toSafeInteger('3.2');
       * // => 3
       */function toSafeInteger(value){return value?baseClamp(toInteger(value),-MAX_SAFE_INTEGER,MAX_SAFE_INTEGER):value===0?value:0;}/**
       * Converts `value` to a string. An empty string is returned for `null`
       * and `undefined` values. The sign of `-0` is preserved.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {string} Returns the converted string.
       * @example
       *
       * _.toString(null);
       * // => ''
       *
       * _.toString(-0);
       * // => '-0'
       *
       * _.toString([1, 2, 3]);
       * // => '1,2,3'
       */function toString(value){return value==null?'':baseToString(value);}/*------------------------------------------------------------------------*/ /**
       * Assigns own enumerable string keyed properties of source objects to the
       * destination object. Source objects are applied from left to right.
       * Subsequent sources overwrite property assignments of previous sources.
       *
       * **Note:** This method mutates `object` and is loosely based on
       * [`Object.assign`](https://mdn.io/Object/assign).
       *
       * @static
       * @memberOf _
       * @since 0.10.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @see _.assignIn
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       * }
       *
       * function Bar() {
       *   this.c = 3;
       * }
       *
       * Foo.prototype.b = 2;
       * Bar.prototype.d = 4;
       *
       * _.assign({ 'a': 0 }, new Foo, new Bar);
       * // => { 'a': 1, 'c': 3 }
       */var assign=createAssigner(function(object,source){if(isPrototype(source)||isArrayLike(source)){copyObject(source,keys(source),object);return;}for(var key in source){if(hasOwnProperty.call(source,key)){assignValue(object,key,source[key]);}}});/**
       * This method is like `_.assign` except that it iterates over own and
       * inherited source properties.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @alias extend
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @see _.assign
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       * }
       *
       * function Bar() {
       *   this.c = 3;
       * }
       *
       * Foo.prototype.b = 2;
       * Bar.prototype.d = 4;
       *
       * _.assignIn({ 'a': 0 }, new Foo, new Bar);
       * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
       */var assignIn=createAssigner(function(object,source){copyObject(source,keysIn(source),object);});/**
       * This method is like `_.assignIn` except that it accepts `customizer`
       * which is invoked to produce the assigned values. If `customizer` returns
       * `undefined`, assignment is handled by the method instead. The `customizer`
       * is invoked with five arguments: (objValue, srcValue, key, object, source).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @alias extendWith
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} sources The source objects.
       * @param {Function} [customizer] The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @see _.assignWith
       * @example
       *
       * function customizer(objValue, srcValue) {
       *   return _.isUndefined(objValue) ? srcValue : objValue;
       * }
       *
       * var defaults = _.partialRight(_.assignInWith, customizer);
       *
       * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
       * // => { 'a': 1, 'b': 2 }
       */var assignInWith=createAssigner(function(object,source,srcIndex,customizer){copyObject(source,keysIn(source),object,customizer);});/**
       * This method is like `_.assign` except that it accepts `customizer`
       * which is invoked to produce the assigned values. If `customizer` returns
       * `undefined`, assignment is handled by the method instead. The `customizer`
       * is invoked with five arguments: (objValue, srcValue, key, object, source).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} sources The source objects.
       * @param {Function} [customizer] The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @see _.assignInWith
       * @example
       *
       * function customizer(objValue, srcValue) {
       *   return _.isUndefined(objValue) ? srcValue : objValue;
       * }
       *
       * var defaults = _.partialRight(_.assignWith, customizer);
       *
       * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
       * // => { 'a': 1, 'b': 2 }
       */var assignWith=createAssigner(function(object,source,srcIndex,customizer){copyObject(source,keys(source),object,customizer);});/**
       * Creates an array of values corresponding to `paths` of `object`.
       *
       * @static
       * @memberOf _
       * @since 1.0.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {...(string|string[])} [paths] The property paths to pick.
       * @returns {Array} Returns the picked values.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
       *
       * _.at(object, ['a[0].b.c', 'a[1]']);
       * // => [3, 4]
       */var at=flatRest(baseAt);/**
       * Creates an object that inherits from the `prototype` object. If a
       * `properties` object is given, its own enumerable string keyed properties
       * are assigned to the created object.
       *
       * @static
       * @memberOf _
       * @since 2.3.0
       * @category Object
       * @param {Object} prototype The object to inherit from.
       * @param {Object} [properties] The properties to assign to the object.
       * @returns {Object} Returns the new object.
       * @example
       *
       * function Shape() {
       *   this.x = 0;
       *   this.y = 0;
       * }
       *
       * function Circle() {
       *   Shape.call(this);
       * }
       *
       * Circle.prototype = _.create(Shape.prototype, {
       *   'constructor': Circle
       * });
       *
       * var circle = new Circle;
       * circle instanceof Circle;
       * // => true
       *
       * circle instanceof Shape;
       * // => true
       */function create(prototype,properties){var result=baseCreate(prototype);return properties==null?result:baseAssign(result,properties);}/**
       * Assigns own and inherited enumerable string keyed properties of source
       * objects to the destination object for all destination properties that
       * resolve to `undefined`. Source objects are applied from left to right.
       * Once a property is set, additional values of the same property are ignored.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @see _.defaultsDeep
       * @example
       *
       * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
       * // => { 'a': 1, 'b': 2 }
       */var defaults=baseRest(function(object,sources){object=Object(object);var index=-1;var length=sources.length;var guard=length>2?sources[2]:undefined$1;if(guard&&isIterateeCall(sources[0],sources[1],guard)){length=1;}while(++index<length){var source=sources[index];var props=keysIn(source);var propsIndex=-1;var propsLength=props.length;while(++propsIndex<propsLength){var key=props[propsIndex];var value=object[key];if(value===undefined$1||eq(value,objectProto[key])&&!hasOwnProperty.call(object,key)){object[key]=source[key];}}}return object;});/**
       * This method is like `_.defaults` except that it recursively assigns
       * default properties.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 3.10.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @see _.defaults
       * @example
       *
       * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
       * // => { 'a': { 'b': 2, 'c': 3 } }
       */var defaultsDeep=baseRest(function(args){args.push(undefined$1,customDefaultsMerge);return apply(mergeWith,undefined$1,args);});/**
       * This method is like `_.find` except that it returns the key of the first
       * element `predicate` returns truthy for instead of the element itself.
       *
       * @static
       * @memberOf _
       * @since 1.1.0
       * @category Object
       * @param {Object} object The object to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {string|undefined} Returns the key of the matched element,
       *  else `undefined`.
       * @example
       *
       * var users = {
       *   'barney':  { 'age': 36, 'active': true },
       *   'fred':    { 'age': 40, 'active': false },
       *   'pebbles': { 'age': 1,  'active': true }
       * };
       *
       * _.findKey(users, function(o) { return o.age < 40; });
       * // => 'barney' (iteration order is not guaranteed)
       *
       * // The `_.matches` iteratee shorthand.
       * _.findKey(users, { 'age': 1, 'active': true });
       * // => 'pebbles'
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.findKey(users, ['active', false]);
       * // => 'fred'
       *
       * // The `_.property` iteratee shorthand.
       * _.findKey(users, 'active');
       * // => 'barney'
       */function findKey(object,predicate){return baseFindKey(object,getIteratee(predicate,3),baseForOwn);}/**
       * This method is like `_.findKey` except that it iterates over elements of
       * a collection in the opposite order.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Object
       * @param {Object} object The object to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {string|undefined} Returns the key of the matched element,
       *  else `undefined`.
       * @example
       *
       * var users = {
       *   'barney':  { 'age': 36, 'active': true },
       *   'fred':    { 'age': 40, 'active': false },
       *   'pebbles': { 'age': 1,  'active': true }
       * };
       *
       * _.findLastKey(users, function(o) { return o.age < 40; });
       * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
       *
       * // The `_.matches` iteratee shorthand.
       * _.findLastKey(users, { 'age': 36, 'active': true });
       * // => 'barney'
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.findLastKey(users, ['active', false]);
       * // => 'fred'
       *
       * // The `_.property` iteratee shorthand.
       * _.findLastKey(users, 'active');
       * // => 'pebbles'
       */function findLastKey(object,predicate){return baseFindKey(object,getIteratee(predicate,3),baseForOwnRight);}/**
       * Iterates over own and inherited enumerable string keyed properties of an
       * object and invokes `iteratee` for each property. The iteratee is invoked
       * with three arguments: (value, key, object). Iteratee functions may exit
       * iteration early by explicitly returning `false`.
       *
       * @static
       * @memberOf _
       * @since 0.3.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns `object`.
       * @see _.forInRight
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forIn(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
       */function forIn(object,iteratee){return object==null?object:baseFor(object,getIteratee(iteratee,3),keysIn);}/**
       * This method is like `_.forIn` except that it iterates over properties of
       * `object` in the opposite order.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns `object`.
       * @see _.forIn
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forInRight(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
       */function forInRight(object,iteratee){return object==null?object:baseForRight(object,getIteratee(iteratee,3),keysIn);}/**
       * Iterates over own enumerable string keyed properties of an object and
       * invokes `iteratee` for each property. The iteratee is invoked with three
       * arguments: (value, key, object). Iteratee functions may exit iteration
       * early by explicitly returning `false`.
       *
       * @static
       * @memberOf _
       * @since 0.3.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns `object`.
       * @see _.forOwnRight
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forOwn(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'a' then 'b' (iteration order is not guaranteed).
       */function forOwn(object,iteratee){return object&&baseForOwn(object,getIteratee(iteratee,3));}/**
       * This method is like `_.forOwn` except that it iterates over properties of
       * `object` in the opposite order.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns `object`.
       * @see _.forOwn
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forOwnRight(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
       */function forOwnRight(object,iteratee){return object&&baseForOwnRight(object,getIteratee(iteratee,3));}/**
       * Creates an array of function property names from own enumerable properties
       * of `object`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to inspect.
       * @returns {Array} Returns the function names.
       * @see _.functionsIn
       * @example
       *
       * function Foo() {
       *   this.a = _.constant('a');
       *   this.b = _.constant('b');
       * }
       *
       * Foo.prototype.c = _.constant('c');
       *
       * _.functions(new Foo);
       * // => ['a', 'b']
       */function functions(object){return object==null?[]:baseFunctions(object,keys(object));}/**
       * Creates an array of function property names from own and inherited
       * enumerable properties of `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to inspect.
       * @returns {Array} Returns the function names.
       * @see _.functions
       * @example
       *
       * function Foo() {
       *   this.a = _.constant('a');
       *   this.b = _.constant('b');
       * }
       *
       * Foo.prototype.c = _.constant('c');
       *
       * _.functionsIn(new Foo);
       * // => ['a', 'b', 'c']
       */function functionsIn(object){return object==null?[]:baseFunctions(object,keysIn(object));}/**
       * Gets the value at `path` of `object`. If the resolved value is
       * `undefined`, the `defaultValue` is returned in its place.
       *
       * @static
       * @memberOf _
       * @since 3.7.0
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the property to get.
       * @param {*} [defaultValue] The value returned for `undefined` resolved values.
       * @returns {*} Returns the resolved value.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }] };
       *
       * _.get(object, 'a[0].b.c');
       * // => 3
       *
       * _.get(object, ['a', '0', 'b', 'c']);
       * // => 3
       *
       * _.get(object, 'a.b.c', 'default');
       * // => 'default'
       */function get(object,path,defaultValue){var result=object==null?undefined$1:baseGet(object,path);return result===undefined$1?defaultValue:result;}/**
       * Checks if `path` is a direct property of `object`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path to check.
       * @returns {boolean} Returns `true` if `path` exists, else `false`.
       * @example
       *
       * var object = { 'a': { 'b': 2 } };
       * var other = _.create({ 'a': _.create({ 'b': 2 }) });
       *
       * _.has(object, 'a');
       * // => true
       *
       * _.has(object, 'a.b');
       * // => true
       *
       * _.has(object, ['a', 'b']);
       * // => true
       *
       * _.has(other, 'a');
       * // => false
       */function has(object,path){return object!=null&&hasPath(object,path,baseHas);}/**
       * Checks if `path` is a direct or inherited property of `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path to check.
       * @returns {boolean} Returns `true` if `path` exists, else `false`.
       * @example
       *
       * var object = _.create({ 'a': _.create({ 'b': 2 }) });
       *
       * _.hasIn(object, 'a');
       * // => true
       *
       * _.hasIn(object, 'a.b');
       * // => true
       *
       * _.hasIn(object, ['a', 'b']);
       * // => true
       *
       * _.hasIn(object, 'b');
       * // => false
       */function hasIn(object,path){return object!=null&&hasPath(object,path,baseHasIn);}/**
       * Creates an object composed of the inverted keys and values of `object`.
       * If `object` contains duplicate values, subsequent values overwrite
       * property assignments of previous values.
       *
       * @static
       * @memberOf _
       * @since 0.7.0
       * @category Object
       * @param {Object} object The object to invert.
       * @returns {Object} Returns the new inverted object.
       * @example
       *
       * var object = { 'a': 1, 'b': 2, 'c': 1 };
       *
       * _.invert(object);
       * // => { '1': 'c', '2': 'b' }
       */var invert=createInverter(function(result,value,key){if(value!=null&&typeof value.toString!='function'){value=nativeObjectToString.call(value);}result[value]=key;},constant(identity));/**
       * This method is like `_.invert` except that the inverted object is generated
       * from the results of running each element of `object` thru `iteratee`. The
       * corresponding inverted value of each inverted key is an array of keys
       * responsible for generating the inverted value. The iteratee is invoked
       * with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.1.0
       * @category Object
       * @param {Object} object The object to invert.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Object} Returns the new inverted object.
       * @example
       *
       * var object = { 'a': 1, 'b': 2, 'c': 1 };
       *
       * _.invertBy(object);
       * // => { '1': ['a', 'c'], '2': ['b'] }
       *
       * _.invertBy(object, function(value) {
       *   return 'group' + value;
       * });
       * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
       */var invertBy=createInverter(function(result,value,key){if(value!=null&&typeof value.toString!='function'){value=nativeObjectToString.call(value);}if(hasOwnProperty.call(result,value)){result[value].push(key);}else {result[value]=[key];}},getIteratee);/**
       * Invokes the method at `path` of `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the method to invoke.
       * @param {...*} [args] The arguments to invoke the method with.
       * @returns {*} Returns the result of the invoked method.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
       *
       * _.invoke(object, 'a[0].b.c.slice', 1, 3);
       * // => [2, 3]
       */var invoke=baseRest(baseInvoke);/**
       * Creates an array of the own enumerable property names of `object`.
       *
       * **Note:** Non-object values are coerced to objects. See the
       * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
       * for more details.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.keys(new Foo);
       * // => ['a', 'b'] (iteration order is not guaranteed)
       *
       * _.keys('hi');
       * // => ['0', '1']
       */function keys(object){return isArrayLike(object)?arrayLikeKeys(object):baseKeys(object);}/**
       * Creates an array of the own and inherited enumerable property names of `object`.
       *
       * **Note:** Non-object values are coerced to objects.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.keysIn(new Foo);
       * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
       */function keysIn(object){return isArrayLike(object)?arrayLikeKeys(object,true):baseKeysIn(object);}/**
       * The opposite of `_.mapValues`; this method creates an object with the
       * same values as `object` and keys generated by running each own enumerable
       * string keyed property of `object` thru `iteratee`. The iteratee is invoked
       * with three arguments: (value, key, object).
       *
       * @static
       * @memberOf _
       * @since 3.8.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns the new mapped object.
       * @see _.mapValues
       * @example
       *
       * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
       *   return key + value;
       * });
       * // => { 'a1': 1, 'b2': 2 }
       */function mapKeys(object,iteratee){var result={};iteratee=getIteratee(iteratee,3);baseForOwn(object,function(value,key,object){baseAssignValue(result,iteratee(value,key,object),value);});return result;}/**
       * Creates an object with the same keys as `object` and values generated
       * by running each own enumerable string keyed property of `object` thru
       * `iteratee`. The iteratee is invoked with three arguments:
       * (value, key, object).
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns the new mapped object.
       * @see _.mapKeys
       * @example
       *
       * var users = {
       *   'fred':    { 'user': 'fred',    'age': 40 },
       *   'pebbles': { 'user': 'pebbles', 'age': 1 }
       * };
       *
       * _.mapValues(users, function(o) { return o.age; });
       * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
       *
       * // The `_.property` iteratee shorthand.
       * _.mapValues(users, 'age');
       * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
       */function mapValues(object,iteratee){var result={};iteratee=getIteratee(iteratee,3);baseForOwn(object,function(value,key,object){baseAssignValue(result,key,iteratee(value,key,object));});return result;}/**
       * This method is like `_.assign` except that it recursively merges own and
       * inherited enumerable string keyed properties of source objects into the
       * destination object. Source properties that resolve to `undefined` are
       * skipped if a destination value exists. Array and plain object properties
       * are merged recursively. Other objects and value types are overridden by
       * assignment. Source objects are applied from left to right. Subsequent
       * sources overwrite property assignments of previous sources.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 0.5.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = {
       *   'a': [{ 'b': 2 }, { 'd': 4 }]
       * };
       *
       * var other = {
       *   'a': [{ 'c': 3 }, { 'e': 5 }]
       * };
       *
       * _.merge(object, other);
       * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
       */var merge=createAssigner(function(object,source,srcIndex){baseMerge(object,source,srcIndex);});/**
       * This method is like `_.merge` except that it accepts `customizer` which
       * is invoked to produce the merged values of the destination and source
       * properties. If `customizer` returns `undefined`, merging is handled by the
       * method instead. The `customizer` is invoked with six arguments:
       * (objValue, srcValue, key, object, source, stack).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} sources The source objects.
       * @param {Function} customizer The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @example
       *
       * function customizer(objValue, srcValue) {
       *   if (_.isArray(objValue)) {
       *     return objValue.concat(srcValue);
       *   }
       * }
       *
       * var object = { 'a': [1], 'b': [2] };
       * var other = { 'a': [3], 'b': [4] };
       *
       * _.mergeWith(object, other, customizer);
       * // => { 'a': [1, 3], 'b': [2, 4] }
       */var mergeWith=createAssigner(function(object,source,srcIndex,customizer){baseMerge(object,source,srcIndex,customizer);});/**
       * The opposite of `_.pick`; this method creates an object composed of the
       * own and inherited enumerable property paths of `object` that are not omitted.
       *
       * **Note:** This method is considerably slower than `_.pick`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The source object.
       * @param {...(string|string[])} [paths] The property paths to omit.
       * @returns {Object} Returns the new object.
       * @example
       *
       * var object = { 'a': 1, 'b': '2', 'c': 3 };
       *
       * _.omit(object, ['a', 'c']);
       * // => { 'b': '2' }
       */var omit=flatRest(function(object,paths){var result={};if(object==null){return result;}var isDeep=false;paths=arrayMap(paths,function(path){path=castPath(path,object);isDeep||(isDeep=path.length>1);return path;});copyObject(object,getAllKeysIn(object),result);if(isDeep){result=baseClone(result,CLONE_DEEP_FLAG|CLONE_FLAT_FLAG|CLONE_SYMBOLS_FLAG,customOmitClone);}var length=paths.length;while(length--){baseUnset(result,paths[length]);}return result;});/**
       * The opposite of `_.pickBy`; this method creates an object composed of
       * the own and inherited enumerable string keyed properties of `object` that
       * `predicate` doesn't return truthy for. The predicate is invoked with two
       * arguments: (value, key).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The source object.
       * @param {Function} [predicate=_.identity] The function invoked per property.
       * @returns {Object} Returns the new object.
       * @example
       *
       * var object = { 'a': 1, 'b': '2', 'c': 3 };
       *
       * _.omitBy(object, _.isNumber);
       * // => { 'b': '2' }
       */function omitBy(object,predicate){return pickBy(object,negate(getIteratee(predicate)));}/**
       * Creates an object composed of the picked `object` properties.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The source object.
       * @param {...(string|string[])} [paths] The property paths to pick.
       * @returns {Object} Returns the new object.
       * @example
       *
       * var object = { 'a': 1, 'b': '2', 'c': 3 };
       *
       * _.pick(object, ['a', 'c']);
       * // => { 'a': 1, 'c': 3 }
       */var pick=flatRest(function(object,paths){return object==null?{}:basePick(object,paths);});/**
       * Creates an object composed of the `object` properties `predicate` returns
       * truthy for. The predicate is invoked with two arguments: (value, key).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The source object.
       * @param {Function} [predicate=_.identity] The function invoked per property.
       * @returns {Object} Returns the new object.
       * @example
       *
       * var object = { 'a': 1, 'b': '2', 'c': 3 };
       *
       * _.pickBy(object, _.isNumber);
       * // => { 'a': 1, 'c': 3 }
       */function pickBy(object,predicate){if(object==null){return {};}var props=arrayMap(getAllKeysIn(object),function(prop){return [prop];});predicate=getIteratee(predicate);return basePickBy(object,props,function(value,path){return predicate(value,path[0]);});}/**
       * This method is like `_.get` except that if the resolved value is a
       * function it's invoked with the `this` binding of its parent object and
       * its result is returned.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the property to resolve.
       * @param {*} [defaultValue] The value returned for `undefined` resolved values.
       * @returns {*} Returns the resolved value.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
       *
       * _.result(object, 'a[0].b.c1');
       * // => 3
       *
       * _.result(object, 'a[0].b.c2');
       * // => 4
       *
       * _.result(object, 'a[0].b.c3', 'default');
       * // => 'default'
       *
       * _.result(object, 'a[0].b.c3', _.constant('default'));
       * // => 'default'
       */function result(object,path,defaultValue){path=castPath(path,object);var index=-1,length=path.length;// Ensure the loop is entered when path is empty.
  if(!length){length=1;object=undefined$1;}while(++index<length){var value=object==null?undefined$1:object[toKey(path[index])];if(value===undefined$1){index=length;value=defaultValue;}object=isFunction(value)?value.call(object):value;}return object;}/**
       * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
       * it's created. Arrays are created for missing index properties while objects
       * are created for all other missing properties. Use `_.setWith` to customize
       * `path` creation.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 3.7.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }] };
       *
       * _.set(object, 'a[0].b.c', 4);
       * console.log(object.a[0].b.c);
       * // => 4
       *
       * _.set(object, ['x', '0', 'y', 'z'], 5);
       * console.log(object.x[0].y.z);
       * // => 5
       */function set(object,path,value){return object==null?object:baseSet(object,path,value);}/**
       * This method is like `_.set` except that it accepts `customizer` which is
       * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
       * path creation is handled by the method instead. The `customizer` is invoked
       * with three arguments: (nsValue, key, nsObject).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {*} value The value to set.
       * @param {Function} [customizer] The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = {};
       *
       * _.setWith(object, '[0][1]', 'a', Object);
       * // => { '0': { '1': 'a' } }
       */function setWith(object,path,value,customizer){customizer=typeof customizer=='function'?customizer:undefined$1;return object==null?object:baseSet(object,path,value,customizer);}/**
       * Creates an array of own enumerable string keyed-value pairs for `object`
       * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
       * entries are returned.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @alias entries
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the key-value pairs.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.toPairs(new Foo);
       * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
       */var toPairs=createToPairs(keys);/**
       * Creates an array of own and inherited enumerable string keyed-value pairs
       * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
       * or set, its entries are returned.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @alias entriesIn
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the key-value pairs.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.toPairsIn(new Foo);
       * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
       */var toPairsIn=createToPairs(keysIn);/**
       * An alternative to `_.reduce`; this method transforms `object` to a new
       * `accumulator` object which is the result of running each of its own
       * enumerable string keyed properties thru `iteratee`, with each invocation
       * potentially mutating the `accumulator` object. If `accumulator` is not
       * provided, a new object with the same `[[Prototype]]` will be used. The
       * iteratee is invoked with four arguments: (accumulator, value, key, object).
       * Iteratee functions may exit iteration early by explicitly returning `false`.
       *
       * @static
       * @memberOf _
       * @since 1.3.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {*} [accumulator] The custom accumulator value.
       * @returns {*} Returns the accumulated value.
       * @example
       *
       * _.transform([2, 3, 4], function(result, n) {
       *   result.push(n *= n);
       *   return n % 2 == 0;
       * }, []);
       * // => [4, 9]
       *
       * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
       *   (result[value] || (result[value] = [])).push(key);
       * }, {});
       * // => { '1': ['a', 'c'], '2': ['b'] }
       */function transform(object,iteratee,accumulator){var isArr=isArray(object),isArrLike=isArr||isBuffer(object)||isTypedArray(object);iteratee=getIteratee(iteratee,4);if(accumulator==null){var Ctor=object&&object.constructor;if(isArrLike){accumulator=isArr?new Ctor():[];}else if(isObject(object)){accumulator=isFunction(Ctor)?baseCreate(getPrototype(object)):{};}else {accumulator={};}}(isArrLike?arrayEach:baseForOwn)(object,function(value,index,object){return iteratee(accumulator,value,index,object);});return accumulator;}/**
       * Removes the property at `path` of `object`.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to unset.
       * @returns {boolean} Returns `true` if the property is deleted, else `false`.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 7 } }] };
       * _.unset(object, 'a[0].b.c');
       * // => true
       *
       * console.log(object);
       * // => { 'a': [{ 'b': {} }] };
       *
       * _.unset(object, ['a', '0', 'b', 'c']);
       * // => true
       *
       * console.log(object);
       * // => { 'a': [{ 'b': {} }] };
       */function unset(object,path){return object==null?true:baseUnset(object,path);}/**
       * This method is like `_.set` except that accepts `updater` to produce the
       * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
       * is invoked with one argument: (value).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.6.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {Function} updater The function to produce the updated value.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }] };
       *
       * _.update(object, 'a[0].b.c', function(n) { return n * n; });
       * console.log(object.a[0].b.c);
       * // => 9
       *
       * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
       * console.log(object.x[0].y.z);
       * // => 0
       */function update(object,path,updater){return object==null?object:baseUpdate(object,path,castFunction(updater));}/**
       * This method is like `_.update` except that it accepts `customizer` which is
       * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
       * path creation is handled by the method instead. The `customizer` is invoked
       * with three arguments: (nsValue, key, nsObject).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.6.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {Function} updater The function to produce the updated value.
       * @param {Function} [customizer] The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = {};
       *
       * _.updateWith(object, '[0][1]', _.constant('a'), Object);
       * // => { '0': { '1': 'a' } }
       */function updateWith(object,path,updater,customizer){customizer=typeof customizer=='function'?customizer:undefined$1;return object==null?object:baseUpdate(object,path,castFunction(updater),customizer);}/**
       * Creates an array of the own enumerable string keyed property values of `object`.
       *
       * **Note:** Non-object values are coerced to objects.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property values.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.values(new Foo);
       * // => [1, 2] (iteration order is not guaranteed)
       *
       * _.values('hi');
       * // => ['h', 'i']
       */function values(object){return object==null?[]:baseValues(object,keys(object));}/**
       * Creates an array of the own and inherited enumerable string keyed property
       * values of `object`.
       *
       * **Note:** Non-object values are coerced to objects.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property values.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.valuesIn(new Foo);
       * // => [1, 2, 3] (iteration order is not guaranteed)
       */function valuesIn(object){return object==null?[]:baseValues(object,keysIn(object));}/*------------------------------------------------------------------------*/ /**
       * Clamps `number` within the inclusive `lower` and `upper` bounds.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Number
       * @param {number} number The number to clamp.
       * @param {number} [lower] The lower bound.
       * @param {number} upper The upper bound.
       * @returns {number} Returns the clamped number.
       * @example
       *
       * _.clamp(-10, -5, 5);
       * // => -5
       *
       * _.clamp(10, -5, 5);
       * // => 5
       */function clamp(number,lower,upper){if(upper===undefined$1){upper=lower;lower=undefined$1;}if(upper!==undefined$1){upper=toNumber(upper);upper=upper===upper?upper:0;}if(lower!==undefined$1){lower=toNumber(lower);lower=lower===lower?lower:0;}return baseClamp(toNumber(number),lower,upper);}/**
       * Checks if `n` is between `start` and up to, but not including, `end`. If
       * `end` is not specified, it's set to `start` with `start` then set to `0`.
       * If `start` is greater than `end` the params are swapped to support
       * negative ranges.
       *
       * @static
       * @memberOf _
       * @since 3.3.0
       * @category Number
       * @param {number} number The number to check.
       * @param {number} [start=0] The start of the range.
       * @param {number} end The end of the range.
       * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
       * @see _.range, _.rangeRight
       * @example
       *
       * _.inRange(3, 2, 4);
       * // => true
       *
       * _.inRange(4, 8);
       * // => true
       *
       * _.inRange(4, 2);
       * // => false
       *
       * _.inRange(2, 2);
       * // => false
       *
       * _.inRange(1.2, 2);
       * // => true
       *
       * _.inRange(5.2, 4);
       * // => false
       *
       * _.inRange(-3, -2, -6);
       * // => true
       */function inRange(number,start,end){start=toFinite(start);if(end===undefined$1){end=start;start=0;}else {end=toFinite(end);}number=toNumber(number);return baseInRange(number,start,end);}/**
       * Produces a random number between the inclusive `lower` and `upper` bounds.
       * If only one argument is provided a number between `0` and the given number
       * is returned. If `floating` is `true`, or either `lower` or `upper` are
       * floats, a floating-point number is returned instead of an integer.
       *
       * **Note:** JavaScript follows the IEEE-754 standard for resolving
       * floating-point values which can produce unexpected results.
       *
       * @static
       * @memberOf _
       * @since 0.7.0
       * @category Number
       * @param {number} [lower=0] The lower bound.
       * @param {number} [upper=1] The upper bound.
       * @param {boolean} [floating] Specify returning a floating-point number.
       * @returns {number} Returns the random number.
       * @example
       *
       * _.random(0, 5);
       * // => an integer between 0 and 5
       *
       * _.random(5);
       * // => also an integer between 0 and 5
       *
       * _.random(5, true);
       * // => a floating-point number between 0 and 5
       *
       * _.random(1.2, 5.2);
       * // => a floating-point number between 1.2 and 5.2
       */function random(lower,upper,floating){if(floating&&typeof floating!='boolean'&&isIterateeCall(lower,upper,floating)){upper=floating=undefined$1;}if(floating===undefined$1){if(typeof upper=='boolean'){floating=upper;upper=undefined$1;}else if(typeof lower=='boolean'){floating=lower;lower=undefined$1;}}if(lower===undefined$1&&upper===undefined$1){lower=0;upper=1;}else {lower=toFinite(lower);if(upper===undefined$1){upper=lower;lower=0;}else {upper=toFinite(upper);}}if(lower>upper){var temp=lower;lower=upper;upper=temp;}if(floating||lower%1||upper%1){var rand=nativeRandom();return nativeMin(lower+rand*(upper-lower+freeParseFloat('1e-'+((rand+'').length-1))),upper);}return baseRandom(lower,upper);}/*------------------------------------------------------------------------*/ /**
       * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the camel cased string.
       * @example
       *
       * _.camelCase('Foo Bar');
       * // => 'fooBar'
       *
       * _.camelCase('--foo-bar--');
       * // => 'fooBar'
       *
       * _.camelCase('__FOO_BAR__');
       * // => 'fooBar'
       */var camelCase=createCompounder(function(result,word,index){word=word.toLowerCase();return result+(index?capitalize(word):word);});/**
       * Converts the first character of `string` to upper case and the remaining
       * to lower case.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to capitalize.
       * @returns {string} Returns the capitalized string.
       * @example
       *
       * _.capitalize('FRED');
       * // => 'Fred'
       */function capitalize(string){return upperFirst(toString(string).toLowerCase());}/**
       * Deburrs `string` by converting
       * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
       * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
       * letters to basic Latin letters and removing
       * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to deburr.
       * @returns {string} Returns the deburred string.
       * @example
       *
       * _.deburr('déjà vu');
       * // => 'deja vu'
       */function deburr(string){string=toString(string);return string&&string.replace(reLatin,deburrLetter).replace(reComboMark,'');}/**
       * Checks if `string` ends with the given target string.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to inspect.
       * @param {string} [target] The string to search for.
       * @param {number} [position=string.length] The position to search up to.
       * @returns {boolean} Returns `true` if `string` ends with `target`,
       *  else `false`.
       * @example
       *
       * _.endsWith('abc', 'c');
       * // => true
       *
       * _.endsWith('abc', 'b');
       * // => false
       *
       * _.endsWith('abc', 'b', 2);
       * // => true
       */function endsWith(string,target,position){string=toString(string);target=baseToString(target);var length=string.length;position=position===undefined$1?length:baseClamp(toInteger(position),0,length);var end=position;position-=target.length;return position>=0&&string.slice(position,end)==target;}/**
       * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
       * corresponding HTML entities.
       *
       * **Note:** No other characters are escaped. To escape additional
       * characters use a third-party library like [_he_](https://mths.be/he).
       *
       * Though the ">" character is escaped for symmetry, characters like
       * ">" and "/" don't need escaping in HTML and have no special meaning
       * unless they're part of a tag or unquoted attribute value. See
       * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
       * (under "semi-related fun fact") for more details.
       *
       * When working with HTML you should always
       * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
       * XSS vectors.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category String
       * @param {string} [string=''] The string to escape.
       * @returns {string} Returns the escaped string.
       * @example
       *
       * _.escape('fred, barney, & pebbles');
       * // => 'fred, barney, &amp; pebbles'
       */function escape(string){string=toString(string);return string&&reHasUnescapedHtml.test(string)?string.replace(reUnescapedHtml,escapeHtmlChar):string;}/**
       * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
       * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to escape.
       * @returns {string} Returns the escaped string.
       * @example
       *
       * _.escapeRegExp('[lodash](https://lodash.com/)');
       * // => '\[lodash\]\(https://lodash\.com/\)'
       */function escapeRegExp(string){string=toString(string);return string&&reHasRegExpChar.test(string)?string.replace(reRegExpChar,'\\$&'):string;}/**
       * Converts `string` to
       * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the kebab cased string.
       * @example
       *
       * _.kebabCase('Foo Bar');
       * // => 'foo-bar'
       *
       * _.kebabCase('fooBar');
       * // => 'foo-bar'
       *
       * _.kebabCase('__FOO_BAR__');
       * // => 'foo-bar'
       */var kebabCase=createCompounder(function(result,word,index){return result+(index?'-':'')+word.toLowerCase();});/**
       * Converts `string`, as space separated words, to lower case.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the lower cased string.
       * @example
       *
       * _.lowerCase('--Foo-Bar--');
       * // => 'foo bar'
       *
       * _.lowerCase('fooBar');
       * // => 'foo bar'
       *
       * _.lowerCase('__FOO_BAR__');
       * // => 'foo bar'
       */var lowerCase=createCompounder(function(result,word,index){return result+(index?' ':'')+word.toLowerCase();});/**
       * Converts the first character of `string` to lower case.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the converted string.
       * @example
       *
       * _.lowerFirst('Fred');
       * // => 'fred'
       *
       * _.lowerFirst('FRED');
       * // => 'fRED'
       */var lowerFirst=createCaseFirst('toLowerCase');/**
       * Pads `string` on the left and right sides if it's shorter than `length`.
       * Padding characters are truncated if they can't be evenly divided by `length`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to pad.
       * @param {number} [length=0] The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padded string.
       * @example
       *
       * _.pad('abc', 8);
       * // => '  abc   '
       *
       * _.pad('abc', 8, '_-');
       * // => '_-abc_-_'
       *
       * _.pad('abc', 3);
       * // => 'abc'
       */function pad(string,length,chars){string=toString(string);length=toInteger(length);var strLength=length?stringSize(string):0;if(!length||strLength>=length){return string;}var mid=(length-strLength)/2;return createPadding(nativeFloor(mid),chars)+string+createPadding(nativeCeil(mid),chars);}/**
       * Pads `string` on the right side if it's shorter than `length`. Padding
       * characters are truncated if they exceed `length`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to pad.
       * @param {number} [length=0] The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padded string.
       * @example
       *
       * _.padEnd('abc', 6);
       * // => 'abc   '
       *
       * _.padEnd('abc', 6, '_-');
       * // => 'abc_-_'
       *
       * _.padEnd('abc', 3);
       * // => 'abc'
       */function padEnd(string,length,chars){string=toString(string);length=toInteger(length);var strLength=length?stringSize(string):0;return length&&strLength<length?string+createPadding(length-strLength,chars):string;}/**
       * Pads `string` on the left side if it's shorter than `length`. Padding
       * characters are truncated if they exceed `length`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to pad.
       * @param {number} [length=0] The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padded string.
       * @example
       *
       * _.padStart('abc', 6);
       * // => '   abc'
       *
       * _.padStart('abc', 6, '_-');
       * // => '_-_abc'
       *
       * _.padStart('abc', 3);
       * // => 'abc'
       */function padStart(string,length,chars){string=toString(string);length=toInteger(length);var strLength=length?stringSize(string):0;return length&&strLength<length?createPadding(length-strLength,chars)+string:string;}/**
       * Converts `string` to an integer of the specified radix. If `radix` is
       * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
       * hexadecimal, in which case a `radix` of `16` is used.
       *
       * **Note:** This method aligns with the
       * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
       *
       * @static
       * @memberOf _
       * @since 1.1.0
       * @category String
       * @param {string} string The string to convert.
       * @param {number} [radix=10] The radix to interpret `value` by.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {number} Returns the converted integer.
       * @example
       *
       * _.parseInt('08');
       * // => 8
       *
       * _.map(['6', '08', '10'], _.parseInt);
       * // => [6, 8, 10]
       */function parseInt(string,radix,guard){if(guard||radix==null){radix=0;}else if(radix){radix=+radix;}return nativeParseInt(toString(string).replace(reTrimStart,''),radix||0);}/**
       * Repeats the given string `n` times.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to repeat.
       * @param {number} [n=1] The number of times to repeat the string.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {string} Returns the repeated string.
       * @example
       *
       * _.repeat('*', 3);
       * // => '***'
       *
       * _.repeat('abc', 2);
       * // => 'abcabc'
       *
       * _.repeat('abc', 0);
       * // => ''
       */function repeat(string,n,guard){if(guard?isIterateeCall(string,n,guard):n===undefined$1){n=1;}else {n=toInteger(n);}return baseRepeat(toString(string),n);}/**
       * Replaces matches for `pattern` in `string` with `replacement`.
       *
       * **Note:** This method is based on
       * [`String#replace`](https://mdn.io/String/replace).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to modify.
       * @param {RegExp|string} pattern The pattern to replace.
       * @param {Function|string} replacement The match replacement.
       * @returns {string} Returns the modified string.
       * @example
       *
       * _.replace('Hi Fred', 'Fred', 'Barney');
       * // => 'Hi Barney'
       */function replace(){var args=arguments,string=toString(args[0]);return args.length<3?string:string.replace(args[1],args[2]);}/**
       * Converts `string` to
       * [snake case](https://en.wikipedia.org/wiki/Snake_case).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the snake cased string.
       * @example
       *
       * _.snakeCase('Foo Bar');
       * // => 'foo_bar'
       *
       * _.snakeCase('fooBar');
       * // => 'foo_bar'
       *
       * _.snakeCase('--FOO-BAR--');
       * // => 'foo_bar'
       */var snakeCase=createCompounder(function(result,word,index){return result+(index?'_':'')+word.toLowerCase();});/**
       * Splits `string` by `separator`.
       *
       * **Note:** This method is based on
       * [`String#split`](https://mdn.io/String/split).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to split.
       * @param {RegExp|string} separator The separator pattern to split by.
       * @param {number} [limit] The length to truncate results to.
       * @returns {Array} Returns the string segments.
       * @example
       *
       * _.split('a-b-c', '-', 2);
       * // => ['a', 'b']
       */function split(string,separator,limit){if(limit&&typeof limit!='number'&&isIterateeCall(string,separator,limit)){separator=limit=undefined$1;}limit=limit===undefined$1?MAX_ARRAY_LENGTH:limit>>>0;if(!limit){return [];}string=toString(string);if(string&&(typeof separator=='string'||separator!=null&&!isRegExp(separator))){separator=baseToString(separator);if(!separator&&hasUnicode(string)){return castSlice(stringToArray(string),0,limit);}}return string.split(separator,limit);}/**
       * Converts `string` to
       * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
       *
       * @static
       * @memberOf _
       * @since 3.1.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the start cased string.
       * @example
       *
       * _.startCase('--foo-bar--');
       * // => 'Foo Bar'
       *
       * _.startCase('fooBar');
       * // => 'Foo Bar'
       *
       * _.startCase('__FOO_BAR__');
       * // => 'FOO BAR'
       */var startCase=createCompounder(function(result,word,index){return result+(index?' ':'')+upperFirst(word);});/**
       * Checks if `string` starts with the given target string.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to inspect.
       * @param {string} [target] The string to search for.
       * @param {number} [position=0] The position to search from.
       * @returns {boolean} Returns `true` if `string` starts with `target`,
       *  else `false`.
       * @example
       *
       * _.startsWith('abc', 'a');
       * // => true
       *
       * _.startsWith('abc', 'b');
       * // => false
       *
       * _.startsWith('abc', 'b', 1);
       * // => true
       */function startsWith(string,target,position){string=toString(string);position=position==null?0:baseClamp(toInteger(position),0,string.length);target=baseToString(target);return string.slice(position,position+target.length)==target;}/**
       * Creates a compiled template function that can interpolate data properties
       * in "interpolate" delimiters, HTML-escape interpolated data properties in
       * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
       * properties may be accessed as free variables in the template. If a setting
       * object is given, it takes precedence over `_.templateSettings` values.
       *
       * **Note:** In the development build `_.template` utilizes
       * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
       * for easier debugging.
       *
       * For more information on precompiling templates see
       * [lodash's custom builds documentation](https://lodash.com/custom-builds).
       *
       * For more information on Chrome extension sandboxes see
       * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category String
       * @param {string} [string=''] The template string.
       * @param {Object} [options={}] The options object.
       * @param {RegExp} [options.escape=_.templateSettings.escape]
       *  The HTML "escape" delimiter.
       * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
       *  The "evaluate" delimiter.
       * @param {Object} [options.imports=_.templateSettings.imports]
       *  An object to import into the template as free variables.
       * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
       *  The "interpolate" delimiter.
       * @param {string} [options.sourceURL='lodash.templateSources[n]']
       *  The sourceURL of the compiled template.
       * @param {string} [options.variable='obj']
       *  The data object variable name.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Function} Returns the compiled template function.
       * @example
       *
       * // Use the "interpolate" delimiter to create a compiled template.
       * var compiled = _.template('hello <%= user %>!');
       * compiled({ 'user': 'fred' });
       * // => 'hello fred!'
       *
       * // Use the HTML "escape" delimiter to escape data property values.
       * var compiled = _.template('<b><%- value %></b>');
       * compiled({ 'value': '<script>' });
       * // => '<b>&lt;script&gt;</b>'
       *
       * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
       * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
       * compiled({ 'users': ['fred', 'barney'] });
       * // => '<li>fred</li><li>barney</li>'
       *
       * // Use the internal `print` function in "evaluate" delimiters.
       * var compiled = _.template('<% print("hello " + user); %>!');
       * compiled({ 'user': 'barney' });
       * // => 'hello barney!'
       *
       * // Use the ES template literal delimiter as an "interpolate" delimiter.
       * // Disable support by replacing the "interpolate" delimiter.
       * var compiled = _.template('hello ${ user }!');
       * compiled({ 'user': 'pebbles' });
       * // => 'hello pebbles!'
       *
       * // Use backslashes to treat delimiters as plain text.
       * var compiled = _.template('<%= "\\<%- value %\\>" %>');
       * compiled({ 'value': 'ignored' });
       * // => '<%- value %>'
       *
       * // Use the `imports` option to import `jQuery` as `jq`.
       * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
       * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
       * compiled({ 'users': ['fred', 'barney'] });
       * // => '<li>fred</li><li>barney</li>'
       *
       * // Use the `sourceURL` option to specify a custom sourceURL for the template.
       * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
       * compiled(data);
       * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
       *
       * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
       * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
       * compiled.source;
       * // => function(data) {
       * //   var __t, __p = '';
       * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
       * //   return __p;
       * // }
       *
       * // Use custom template delimiters.
       * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
       * var compiled = _.template('hello {{ user }}!');
       * compiled({ 'user': 'mustache' });
       * // => 'hello mustache!'
       *
       * // Use the `source` property to inline compiled templates for meaningful
       * // line numbers in error messages and stack traces.
       * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
       *   var JST = {\
       *     "main": ' + _.template(mainText).source + '\
       *   };\
       * ');
       */function template(string,options,guard){// Based on John Resig's `tmpl` implementation
  // (http://ejohn.org/blog/javascript-micro-templating/)
  // and Laura Doktorova's doT.js (https://github.com/olado/doT).
  var settings=lodash.templateSettings;if(guard&&isIterateeCall(string,options,guard)){options=undefined$1;}string=toString(string);options=assignInWith({},options,settings,customDefaultsAssignIn);var imports=assignInWith({},options.imports,settings.imports,customDefaultsAssignIn),importsKeys=keys(imports),importsValues=baseValues(imports,importsKeys);var isEscaping,isEvaluating,index=0,interpolate=options.interpolate||reNoMatch,source="__p += '";// Compile the regexp to match each delimiter.
  var reDelimiters=RegExp((options.escape||reNoMatch).source+'|'+interpolate.source+'|'+(interpolate===reInterpolate?reEsTemplate:reNoMatch).source+'|'+(options.evaluate||reNoMatch).source+'|$','g');// Use a sourceURL for easier debugging.
  // The sourceURL gets injected into the source that's eval-ed, so be careful
  // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
  // and escape the comment, thus injecting code that gets evaled.
  var sourceURL='//# sourceURL='+(hasOwnProperty.call(options,'sourceURL')?(options.sourceURL+'').replace(/\s/g,' '):'lodash.templateSources['+ ++templateCounter+']')+'\n';string.replace(reDelimiters,function(match,escapeValue,interpolateValue,esTemplateValue,evaluateValue,offset){interpolateValue||(interpolateValue=esTemplateValue);// Escape characters that can't be included in string literals.
  source+=string.slice(index,offset).replace(reUnescapedString,escapeStringChar);// Replace delimiters with snippets.
  if(escapeValue){isEscaping=true;source+="' +\n__e("+escapeValue+") +\n'";}if(evaluateValue){isEvaluating=true;source+="';\n"+evaluateValue+";\n__p += '";}if(interpolateValue){source+="' +\n((__t = ("+interpolateValue+")) == null ? '' : __t) +\n'";}index=offset+match.length;// The JS engine embedded in Adobe products needs `match` returned in
  // order to produce the correct `offset` value.
  return match;});source+="';\n";// If `variable` is not specified wrap a with-statement around the generated
  // code to add the data object to the top of the scope chain.
  var variable=hasOwnProperty.call(options,'variable')&&options.variable;if(!variable){source='with (obj) {\n'+source+'\n}\n';}// Throw an error if a forbidden character was found in `variable`, to prevent
  // potential command injection attacks.
  else if(reForbiddenIdentifierChars.test(variable)){throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);}// Cleanup code by stripping empty strings.
  source=(isEvaluating?source.replace(reEmptyStringLeading,''):source).replace(reEmptyStringMiddle,'$1').replace(reEmptyStringTrailing,'$1;');// Frame code as the function body.
  source='function('+(variable||'obj')+') {\n'+(variable?'':'obj || (obj = {});\n')+"var __t, __p = ''"+(isEscaping?', __e = _.escape':'')+(isEvaluating?', __j = Array.prototype.join;\n'+"function print() { __p += __j.call(arguments, '') }\n":';\n')+source+'return __p\n}';var result=attempt(function(){return Function(importsKeys,sourceURL+'return '+source).apply(undefined$1,importsValues);});// Provide the compiled function's source by its `toString` method or
  // the `source` property as a convenience for inlining compiled templates.
  result.source=source;if(isError(result)){throw result;}return result;}/**
       * Converts `string`, as a whole, to lower case just like
       * [String#toLowerCase](https://mdn.io/toLowerCase).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the lower cased string.
       * @example
       *
       * _.toLower('--Foo-Bar--');
       * // => '--foo-bar--'
       *
       * _.toLower('fooBar');
       * // => 'foobar'
       *
       * _.toLower('__FOO_BAR__');
       * // => '__foo_bar__'
       */function toLower(value){return toString(value).toLowerCase();}/**
       * Converts `string`, as a whole, to upper case just like
       * [String#toUpperCase](https://mdn.io/toUpperCase).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the upper cased string.
       * @example
       *
       * _.toUpper('--foo-bar--');
       * // => '--FOO-BAR--'
       *
       * _.toUpper('fooBar');
       * // => 'FOOBAR'
       *
       * _.toUpper('__foo_bar__');
       * // => '__FOO_BAR__'
       */function toUpper(value){return toString(value).toUpperCase();}/**
       * Removes leading and trailing whitespace or specified characters from `string`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to trim.
       * @param {string} [chars=whitespace] The characters to trim.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {string} Returns the trimmed string.
       * @example
       *
       * _.trim('  abc  ');
       * // => 'abc'
       *
       * _.trim('-_-abc-_-', '_-');
       * // => 'abc'
       *
       * _.map(['  foo  ', '  bar  '], _.trim);
       * // => ['foo', 'bar']
       */function trim(string,chars,guard){string=toString(string);if(string&&(guard||chars===undefined$1)){return baseTrim(string);}if(!string||!(chars=baseToString(chars))){return string;}var strSymbols=stringToArray(string),chrSymbols=stringToArray(chars),start=charsStartIndex(strSymbols,chrSymbols),end=charsEndIndex(strSymbols,chrSymbols)+1;return castSlice(strSymbols,start,end).join('');}/**
       * Removes trailing whitespace or specified characters from `string`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to trim.
       * @param {string} [chars=whitespace] The characters to trim.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {string} Returns the trimmed string.
       * @example
       *
       * _.trimEnd('  abc  ');
       * // => '  abc'
       *
       * _.trimEnd('-_-abc-_-', '_-');
       * // => '-_-abc'
       */function trimEnd(string,chars,guard){string=toString(string);if(string&&(guard||chars===undefined$1)){return string.slice(0,trimmedEndIndex(string)+1);}if(!string||!(chars=baseToString(chars))){return string;}var strSymbols=stringToArray(string),end=charsEndIndex(strSymbols,stringToArray(chars))+1;return castSlice(strSymbols,0,end).join('');}/**
       * Removes leading whitespace or specified characters from `string`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to trim.
       * @param {string} [chars=whitespace] The characters to trim.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {string} Returns the trimmed string.
       * @example
       *
       * _.trimStart('  abc  ');
       * // => 'abc  '
       *
       * _.trimStart('-_-abc-_-', '_-');
       * // => 'abc-_-'
       */function trimStart(string,chars,guard){string=toString(string);if(string&&(guard||chars===undefined$1)){return string.replace(reTrimStart,'');}if(!string||!(chars=baseToString(chars))){return string;}var strSymbols=stringToArray(string),start=charsStartIndex(strSymbols,stringToArray(chars));return castSlice(strSymbols,start).join('');}/**
       * Truncates `string` if it's longer than the given maximum string length.
       * The last characters of the truncated string are replaced with the omission
       * string which defaults to "...".
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to truncate.
       * @param {Object} [options={}] The options object.
       * @param {number} [options.length=30] The maximum string length.
       * @param {string} [options.omission='...'] The string to indicate text is omitted.
       * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
       * @returns {string} Returns the truncated string.
       * @example
       *
       * _.truncate('hi-diddly-ho there, neighborino');
       * // => 'hi-diddly-ho there, neighbo...'
       *
       * _.truncate('hi-diddly-ho there, neighborino', {
       *   'length': 24,
       *   'separator': ' '
       * });
       * // => 'hi-diddly-ho there,...'
       *
       * _.truncate('hi-diddly-ho there, neighborino', {
       *   'length': 24,
       *   'separator': /,? +/
       * });
       * // => 'hi-diddly-ho there...'
       *
       * _.truncate('hi-diddly-ho there, neighborino', {
       *   'omission': ' [...]'
       * });
       * // => 'hi-diddly-ho there, neig [...]'
       */function truncate(string,options){var length=DEFAULT_TRUNC_LENGTH,omission=DEFAULT_TRUNC_OMISSION;if(isObject(options)){var separator='separator'in options?options.separator:separator;length='length'in options?toInteger(options.length):length;omission='omission'in options?baseToString(options.omission):omission;}string=toString(string);var strLength=string.length;if(hasUnicode(string)){var strSymbols=stringToArray(string);strLength=strSymbols.length;}if(length>=strLength){return string;}var end=length-stringSize(omission);if(end<1){return omission;}var result=strSymbols?castSlice(strSymbols,0,end).join(''):string.slice(0,end);if(separator===undefined$1){return result+omission;}if(strSymbols){end+=result.length-end;}if(isRegExp(separator)){if(string.slice(end).search(separator)){var match,substring=result;if(!separator.global){separator=RegExp(separator.source,toString(reFlags.exec(separator))+'g');}separator.lastIndex=0;while(match=separator.exec(substring)){var newEnd=match.index;}result=result.slice(0,newEnd===undefined$1?end:newEnd);}}else if(string.indexOf(baseToString(separator),end)!=end){var index=result.lastIndexOf(separator);if(index>-1){result=result.slice(0,index);}}return result+omission;}/**
       * The inverse of `_.escape`; this method converts the HTML entities
       * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
       * their corresponding characters.
       *
       * **Note:** No other HTML entities are unescaped. To unescape additional
       * HTML entities use a third-party library like [_he_](https://mths.be/he).
       *
       * @static
       * @memberOf _
       * @since 0.6.0
       * @category String
       * @param {string} [string=''] The string to unescape.
       * @returns {string} Returns the unescaped string.
       * @example
       *
       * _.unescape('fred, barney, &amp; pebbles');
       * // => 'fred, barney, & pebbles'
       */function unescape(string){string=toString(string);return string&&reHasEscapedHtml.test(string)?string.replace(reEscapedHtml,unescapeHtmlChar):string;}/**
       * Converts `string`, as space separated words, to upper case.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the upper cased string.
       * @example
       *
       * _.upperCase('--foo-bar');
       * // => 'FOO BAR'
       *
       * _.upperCase('fooBar');
       * // => 'FOO BAR'
       *
       * _.upperCase('__foo_bar__');
       * // => 'FOO BAR'
       */var upperCase=createCompounder(function(result,word,index){return result+(index?' ':'')+word.toUpperCase();});/**
       * Converts the first character of `string` to upper case.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the converted string.
       * @example
       *
       * _.upperFirst('fred');
       * // => 'Fred'
       *
       * _.upperFirst('FRED');
       * // => 'FRED'
       */var upperFirst=createCaseFirst('toUpperCase');/**
       * Splits `string` into an array of its words.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to inspect.
       * @param {RegExp|string} [pattern] The pattern to match words.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the words of `string`.
       * @example
       *
       * _.words('fred, barney, & pebbles');
       * // => ['fred', 'barney', 'pebbles']
       *
       * _.words('fred, barney, & pebbles', /[^, ]+/g);
       * // => ['fred', 'barney', '&', 'pebbles']
       */function words(string,pattern,guard){string=toString(string);pattern=guard?undefined$1:pattern;if(pattern===undefined$1){return hasUnicodeWord(string)?unicodeWords(string):asciiWords(string);}return string.match(pattern)||[];}/*------------------------------------------------------------------------*/ /**
       * Attempts to invoke `func`, returning either the result or the caught error
       * object. Any additional arguments are provided to `func` when it's invoked.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Util
       * @param {Function} func The function to attempt.
       * @param {...*} [args] The arguments to invoke `func` with.
       * @returns {*} Returns the `func` result or error object.
       * @example
       *
       * // Avoid throwing errors for invalid selectors.
       * var elements = _.attempt(function(selector) {
       *   return document.querySelectorAll(selector);
       * }, '>_>');
       *
       * if (_.isError(elements)) {
       *   elements = [];
       * }
       */var attempt=baseRest(function(func,args){try{return apply(func,undefined$1,args);}catch(e){return isError(e)?e:new Error(e);}});/**
       * Binds methods of an object to the object itself, overwriting the existing
       * method.
       *
       * **Note:** This method doesn't set the "length" property of bound functions.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {Object} object The object to bind and assign the bound methods to.
       * @param {...(string|string[])} methodNames The object method names to bind.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var view = {
       *   'label': 'docs',
       *   'click': function() {
       *     console.log('clicked ' + this.label);
       *   }
       * };
       *
       * _.bindAll(view, ['click']);
       * jQuery(element).on('click', view.click);
       * // => Logs 'clicked docs' when clicked.
       */var bindAll=flatRest(function(object,methodNames){arrayEach(methodNames,function(key){key=toKey(key);baseAssignValue(object,key,bind(object[key],object));});return object;});/**
       * Creates a function that iterates over `pairs` and invokes the corresponding
       * function of the first predicate to return truthy. The predicate-function
       * pairs are invoked with the `this` binding and arguments of the created
       * function.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {Array} pairs The predicate-function pairs.
       * @returns {Function} Returns the new composite function.
       * @example
       *
       * var func = _.cond([
       *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
       *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
       *   [_.stubTrue,                      _.constant('no match')]
       * ]);
       *
       * func({ 'a': 1, 'b': 2 });
       * // => 'matches A'
       *
       * func({ 'a': 0, 'b': 1 });
       * // => 'matches B'
       *
       * func({ 'a': '1', 'b': '2' });
       * // => 'no match'
       */function cond(pairs){var length=pairs==null?0:pairs.length,toIteratee=getIteratee();pairs=!length?[]:arrayMap(pairs,function(pair){if(typeof pair[1]!='function'){throw new TypeError(FUNC_ERROR_TEXT);}return [toIteratee(pair[0]),pair[1]];});return baseRest(function(args){var index=-1;while(++index<length){var pair=pairs[index];if(apply(pair[0],this,args)){return apply(pair[1],this,args);}}});}/**
       * Creates a function that invokes the predicate properties of `source` with
       * the corresponding property values of a given object, returning `true` if
       * all predicates return truthy, else `false`.
       *
       * **Note:** The created function is equivalent to `_.conformsTo` with
       * `source` partially applied.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {Object} source The object of property predicates to conform to.
       * @returns {Function} Returns the new spec function.
       * @example
       *
       * var objects = [
       *   { 'a': 2, 'b': 1 },
       *   { 'a': 1, 'b': 2 }
       * ];
       *
       * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
       * // => [{ 'a': 1, 'b': 2 }]
       */function conforms(source){return baseConforms(baseClone(source,CLONE_DEEP_FLAG));}/**
       * Creates a function that returns `value`.
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Util
       * @param {*} value The value to return from the new function.
       * @returns {Function} Returns the new constant function.
       * @example
       *
       * var objects = _.times(2, _.constant({ 'a': 1 }));
       *
       * console.log(objects);
       * // => [{ 'a': 1 }, { 'a': 1 }]
       *
       * console.log(objects[0] === objects[1]);
       * // => true
       */function constant(value){return function(){return value;};}/**
       * Checks `value` to determine whether a default value should be returned in
       * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
       * or `undefined`.
       *
       * @static
       * @memberOf _
       * @since 4.14.0
       * @category Util
       * @param {*} value The value to check.
       * @param {*} defaultValue The default value.
       * @returns {*} Returns the resolved value.
       * @example
       *
       * _.defaultTo(1, 10);
       * // => 1
       *
       * _.defaultTo(undefined, 10);
       * // => 10
       */function defaultTo(value,defaultValue){return value==null||value!==value?defaultValue:value;}/**
       * Creates a function that returns the result of invoking the given functions
       * with the `this` binding of the created function, where each successive
       * invocation is supplied the return value of the previous.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Util
       * @param {...(Function|Function[])} [funcs] The functions to invoke.
       * @returns {Function} Returns the new composite function.
       * @see _.flowRight
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var addSquare = _.flow([_.add, square]);
       * addSquare(1, 2);
       * // => 9
       */var flow=createFlow();/**
       * This method is like `_.flow` except that it creates a function that
       * invokes the given functions from right to left.
       *
       * @static
       * @since 3.0.0
       * @memberOf _
       * @category Util
       * @param {...(Function|Function[])} [funcs] The functions to invoke.
       * @returns {Function} Returns the new composite function.
       * @see _.flow
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var addSquare = _.flowRight([square, _.add]);
       * addSquare(1, 2);
       * // => 9
       */var flowRight=createFlow(true);/**
       * This method returns the first argument it receives.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {*} value Any value.
       * @returns {*} Returns `value`.
       * @example
       *
       * var object = { 'a': 1 };
       *
       * console.log(_.identity(object) === object);
       * // => true
       */function identity(value){return value;}/**
       * Creates a function that invokes `func` with the arguments of the created
       * function. If `func` is a property name, the created function returns the
       * property value for a given element. If `func` is an array or object, the
       * created function returns `true` for elements that contain the equivalent
       * source properties, otherwise it returns `false`.
       *
       * @static
       * @since 4.0.0
       * @memberOf _
       * @category Util
       * @param {*} [func=_.identity] The value to convert to a callback.
       * @returns {Function} Returns the callback.
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': true },
       *   { 'user': 'fred',   'age': 40, 'active': false }
       * ];
       *
       * // The `_.matches` iteratee shorthand.
       * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
       * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.filter(users, _.iteratee(['user', 'fred']));
       * // => [{ 'user': 'fred', 'age': 40 }]
       *
       * // The `_.property` iteratee shorthand.
       * _.map(users, _.iteratee('user'));
       * // => ['barney', 'fred']
       *
       * // Create custom iteratee shorthands.
       * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
       *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
       *     return func.test(string);
       *   };
       * });
       *
       * _.filter(['abc', 'def'], /ef/);
       * // => ['def']
       */function iteratee(func){return baseIteratee(typeof func=='function'?func:baseClone(func,CLONE_DEEP_FLAG));}/**
       * Creates a function that performs a partial deep comparison between a given
       * object and `source`, returning `true` if the given object has equivalent
       * property values, else `false`.
       *
       * **Note:** The created function is equivalent to `_.isMatch` with `source`
       * partially applied.
       *
       * Partial comparisons will match empty array and empty object `source`
       * values against any array or object value, respectively. See `_.isEqual`
       * for a list of supported value comparisons.
       *
       * **Note:** Multiple values can be checked by combining several matchers
       * using `_.overSome`
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Util
       * @param {Object} source The object of property values to match.
       * @returns {Function} Returns the new spec function.
       * @example
       *
       * var objects = [
       *   { 'a': 1, 'b': 2, 'c': 3 },
       *   { 'a': 4, 'b': 5, 'c': 6 }
       * ];
       *
       * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
       * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
       *
       * // Checking for several possible values
       * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
       * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
       */function matches(source){return baseMatches(baseClone(source,CLONE_DEEP_FLAG));}/**
       * Creates a function that performs a partial deep comparison between the
       * value at `path` of a given object to `srcValue`, returning `true` if the
       * object value is equivalent, else `false`.
       *
       * **Note:** Partial comparisons will match empty array and empty object
       * `srcValue` values against any array or object value, respectively. See
       * `_.isEqual` for a list of supported value comparisons.
       *
       * **Note:** Multiple values can be checked by combining several matchers
       * using `_.overSome`
       *
       * @static
       * @memberOf _
       * @since 3.2.0
       * @category Util
       * @param {Array|string} path The path of the property to get.
       * @param {*} srcValue The value to match.
       * @returns {Function} Returns the new spec function.
       * @example
       *
       * var objects = [
       *   { 'a': 1, 'b': 2, 'c': 3 },
       *   { 'a': 4, 'b': 5, 'c': 6 }
       * ];
       *
       * _.find(objects, _.matchesProperty('a', 4));
       * // => { 'a': 4, 'b': 5, 'c': 6 }
       *
       * // Checking for several possible values
       * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
       * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
       */function matchesProperty(path,srcValue){return baseMatchesProperty(path,baseClone(srcValue,CLONE_DEEP_FLAG));}/**
       * Creates a function that invokes the method at `path` of a given object.
       * Any additional arguments are provided to the invoked method.
       *
       * @static
       * @memberOf _
       * @since 3.7.0
       * @category Util
       * @param {Array|string} path The path of the method to invoke.
       * @param {...*} [args] The arguments to invoke the method with.
       * @returns {Function} Returns the new invoker function.
       * @example
       *
       * var objects = [
       *   { 'a': { 'b': _.constant(2) } },
       *   { 'a': { 'b': _.constant(1) } }
       * ];
       *
       * _.map(objects, _.method('a.b'));
       * // => [2, 1]
       *
       * _.map(objects, _.method(['a', 'b']));
       * // => [2, 1]
       */var method=baseRest(function(path,args){return function(object){return baseInvoke(object,path,args);};});/**
       * The opposite of `_.method`; this method creates a function that invokes
       * the method at a given path of `object`. Any additional arguments are
       * provided to the invoked method.
       *
       * @static
       * @memberOf _
       * @since 3.7.0
       * @category Util
       * @param {Object} object The object to query.
       * @param {...*} [args] The arguments to invoke the method with.
       * @returns {Function} Returns the new invoker function.
       * @example
       *
       * var array = _.times(3, _.constant),
       *     object = { 'a': array, 'b': array, 'c': array };
       *
       * _.map(['a[2]', 'c[0]'], _.methodOf(object));
       * // => [2, 0]
       *
       * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
       * // => [2, 0]
       */var methodOf=baseRest(function(object,args){return function(path){return baseInvoke(object,path,args);};});/**
       * Adds all own enumerable string keyed function properties of a source
       * object to the destination object. If `object` is a function, then methods
       * are added to its prototype as well.
       *
       * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
       * avoid conflicts caused by modifying the original.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {Function|Object} [object=lodash] The destination object.
       * @param {Object} source The object of functions to add.
       * @param {Object} [options={}] The options object.
       * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
       * @returns {Function|Object} Returns `object`.
       * @example
       *
       * function vowels(string) {
       *   return _.filter(string, function(v) {
       *     return /[aeiou]/i.test(v);
       *   });
       * }
       *
       * _.mixin({ 'vowels': vowels });
       * _.vowels('fred');
       * // => ['e']
       *
       * _('fred').vowels().value();
       * // => ['e']
       *
       * _.mixin({ 'vowels': vowels }, { 'chain': false });
       * _('fred').vowels();
       * // => ['e']
       */function mixin(object,source,options){var props=keys(source),methodNames=baseFunctions(source,props);if(options==null&&!(isObject(source)&&(methodNames.length||!props.length))){options=source;source=object;object=this;methodNames=baseFunctions(source,keys(source));}var chain=!(isObject(options)&&'chain'in options)||!!options.chain,isFunc=isFunction(object);arrayEach(methodNames,function(methodName){var func=source[methodName];object[methodName]=func;if(isFunc){object.prototype[methodName]=function(){var chainAll=this.__chain__;if(chain||chainAll){var result=object(this.__wrapped__),actions=result.__actions__=copyArray(this.__actions__);actions.push({'func':func,'args':arguments,'thisArg':object});result.__chain__=chainAll;return result;}return func.apply(object,arrayPush([this.value()],arguments));};}});return object;}/**
       * Reverts the `_` variable to its previous value and returns a reference to
       * the `lodash` function.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @returns {Function} Returns the `lodash` function.
       * @example
       *
       * var lodash = _.noConflict();
       */function noConflict(){if(root._===this){root._=oldDash;}return this;}/**
       * This method returns `undefined`.
       *
       * @static
       * @memberOf _
       * @since 2.3.0
       * @category Util
       * @example
       *
       * _.times(2, _.noop);
       * // => [undefined, undefined]
       */function noop(){// No operation performed.
  }/**
       * Creates a function that gets the argument at index `n`. If `n` is negative,
       * the nth argument from the end is returned.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {number} [n=0] The index of the argument to return.
       * @returns {Function} Returns the new pass-thru function.
       * @example
       *
       * var func = _.nthArg(1);
       * func('a', 'b', 'c', 'd');
       * // => 'b'
       *
       * var func = _.nthArg(-2);
       * func('a', 'b', 'c', 'd');
       * // => 'c'
       */function nthArg(n){n=toInteger(n);return baseRest(function(args){return baseNth(args,n);});}/**
       * Creates a function that invokes `iteratees` with the arguments it receives
       * and returns their results.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {...(Function|Function[])} [iteratees=[_.identity]]
       *  The iteratees to invoke.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var func = _.over([Math.max, Math.min]);
       *
       * func(1, 2, 3, 4);
       * // => [4, 1]
       */var over=createOver(arrayMap);/**
       * Creates a function that checks if **all** of the `predicates` return
       * truthy when invoked with the arguments it receives.
       *
       * Following shorthands are possible for providing predicates.
       * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
       * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {...(Function|Function[])} [predicates=[_.identity]]
       *  The predicates to check.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var func = _.overEvery([Boolean, isFinite]);
       *
       * func('1');
       * // => true
       *
       * func(null);
       * // => false
       *
       * func(NaN);
       * // => false
       */var overEvery=createOver(arrayEvery);/**
       * Creates a function that checks if **any** of the `predicates` return
       * truthy when invoked with the arguments it receives.
       *
       * Following shorthands are possible for providing predicates.
       * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
       * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {...(Function|Function[])} [predicates=[_.identity]]
       *  The predicates to check.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var func = _.overSome([Boolean, isFinite]);
       *
       * func('1');
       * // => true
       *
       * func(null);
       * // => true
       *
       * func(NaN);
       * // => false
       *
       * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
       * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
       */var overSome=createOver(arraySome);/**
       * Creates a function that returns the value at `path` of a given object.
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Util
       * @param {Array|string} path The path of the property to get.
       * @returns {Function} Returns the new accessor function.
       * @example
       *
       * var objects = [
       *   { 'a': { 'b': 2 } },
       *   { 'a': { 'b': 1 } }
       * ];
       *
       * _.map(objects, _.property('a.b'));
       * // => [2, 1]
       *
       * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
       * // => [1, 2]
       */function property(path){return isKey(path)?baseProperty(toKey(path)):basePropertyDeep(path);}/**
       * The opposite of `_.property`; this method creates a function that returns
       * the value at a given path of `object`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Util
       * @param {Object} object The object to query.
       * @returns {Function} Returns the new accessor function.
       * @example
       *
       * var array = [0, 1, 2],
       *     object = { 'a': array, 'b': array, 'c': array };
       *
       * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
       * // => [2, 0]
       *
       * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
       * // => [2, 0]
       */function propertyOf(object){return function(path){return object==null?undefined$1:baseGet(object,path);};}/**
       * Creates an array of numbers (positive and/or negative) progressing from
       * `start` up to, but not including, `end`. A step of `-1` is used if a negative
       * `start` is specified without an `end` or `step`. If `end` is not specified,
       * it's set to `start` with `start` then set to `0`.
       *
       * **Note:** JavaScript follows the IEEE-754 standard for resolving
       * floating-point values which can produce unexpected results.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {number} [start=0] The start of the range.
       * @param {number} end The end of the range.
       * @param {number} [step=1] The value to increment or decrement by.
       * @returns {Array} Returns the range of numbers.
       * @see _.inRange, _.rangeRight
       * @example
       *
       * _.range(4);
       * // => [0, 1, 2, 3]
       *
       * _.range(-4);
       * // => [0, -1, -2, -3]
       *
       * _.range(1, 5);
       * // => [1, 2, 3, 4]
       *
       * _.range(0, 20, 5);
       * // => [0, 5, 10, 15]
       *
       * _.range(0, -4, -1);
       * // => [0, -1, -2, -3]
       *
       * _.range(1, 4, 0);
       * // => [1, 1, 1]
       *
       * _.range(0);
       * // => []
       */var range=createRange();/**
       * This method is like `_.range` except that it populates values in
       * descending order.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {number} [start=0] The start of the range.
       * @param {number} end The end of the range.
       * @param {number} [step=1] The value to increment or decrement by.
       * @returns {Array} Returns the range of numbers.
       * @see _.inRange, _.range
       * @example
       *
       * _.rangeRight(4);
       * // => [3, 2, 1, 0]
       *
       * _.rangeRight(-4);
       * // => [-3, -2, -1, 0]
       *
       * _.rangeRight(1, 5);
       * // => [4, 3, 2, 1]
       *
       * _.rangeRight(0, 20, 5);
       * // => [15, 10, 5, 0]
       *
       * _.rangeRight(0, -4, -1);
       * // => [-3, -2, -1, 0]
       *
       * _.rangeRight(1, 4, 0);
       * // => [1, 1, 1]
       *
       * _.rangeRight(0);
       * // => []
       */var rangeRight=createRange(true);/**
       * This method returns a new empty array.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {Array} Returns the new empty array.
       * @example
       *
       * var arrays = _.times(2, _.stubArray);
       *
       * console.log(arrays);
       * // => [[], []]
       *
       * console.log(arrays[0] === arrays[1]);
       * // => false
       */function stubArray(){return [];}/**
       * This method returns `false`.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {boolean} Returns `false`.
       * @example
       *
       * _.times(2, _.stubFalse);
       * // => [false, false]
       */function stubFalse(){return false;}/**
       * This method returns a new empty object.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {Object} Returns the new empty object.
       * @example
       *
       * var objects = _.times(2, _.stubObject);
       *
       * console.log(objects);
       * // => [{}, {}]
       *
       * console.log(objects[0] === objects[1]);
       * // => false
       */function stubObject(){return {};}/**
       * This method returns an empty string.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {string} Returns the empty string.
       * @example
       *
       * _.times(2, _.stubString);
       * // => ['', '']
       */function stubString(){return '';}/**
       * This method returns `true`.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {boolean} Returns `true`.
       * @example
       *
       * _.times(2, _.stubTrue);
       * // => [true, true]
       */function stubTrue(){return true;}/**
       * Invokes the iteratee `n` times, returning an array of the results of
       * each invocation. The iteratee is invoked with one argument; (index).
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {number} n The number of times to invoke `iteratee`.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the array of results.
       * @example
       *
       * _.times(3, String);
       * // => ['0', '1', '2']
       *
       *  _.times(4, _.constant(0));
       * // => [0, 0, 0, 0]
       */function times(n,iteratee){n=toInteger(n);if(n<1||n>MAX_SAFE_INTEGER){return [];}var index=MAX_ARRAY_LENGTH,length=nativeMin(n,MAX_ARRAY_LENGTH);iteratee=getIteratee(iteratee);n-=MAX_ARRAY_LENGTH;var result=baseTimes(length,iteratee);while(++index<n){iteratee(index);}return result;}/**
       * Converts `value` to a property path array.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {*} value The value to convert.
       * @returns {Array} Returns the new property path array.
       * @example
       *
       * _.toPath('a.b.c');
       * // => ['a', 'b', 'c']
       *
       * _.toPath('a[0].b.c');
       * // => ['a', '0', 'b', 'c']
       */function toPath(value){if(isArray(value)){return arrayMap(value,toKey);}return isSymbol(value)?[value]:copyArray(stringToPath(toString(value)));}/**
       * Generates a unique ID. If `prefix` is given, the ID is appended to it.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {string} [prefix=''] The value to prefix the ID with.
       * @returns {string} Returns the unique ID.
       * @example
       *
       * _.uniqueId('contact_');
       * // => 'contact_104'
       *
       * _.uniqueId();
       * // => '105'
       */function uniqueId(prefix){var id=++idCounter;return toString(prefix)+id;}/*------------------------------------------------------------------------*/ /**
       * Adds two numbers.
       *
       * @static
       * @memberOf _
       * @since 3.4.0
       * @category Math
       * @param {number} augend The first number in an addition.
       * @param {number} addend The second number in an addition.
       * @returns {number} Returns the total.
       * @example
       *
       * _.add(6, 4);
       * // => 10
       */var add=createMathOperation(function(augend,addend){return augend+addend;},0);/**
       * Computes `number` rounded up to `precision`.
       *
       * @static
       * @memberOf _
       * @since 3.10.0
       * @category Math
       * @param {number} number The number to round up.
       * @param {number} [precision=0] The precision to round up to.
       * @returns {number} Returns the rounded up number.
       * @example
       *
       * _.ceil(4.006);
       * // => 5
       *
       * _.ceil(6.004, 2);
       * // => 6.01
       *
       * _.ceil(6040, -2);
       * // => 6100
       */var ceil=createRound('ceil');/**
       * Divide two numbers.
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Math
       * @param {number} dividend The first number in a division.
       * @param {number} divisor The second number in a division.
       * @returns {number} Returns the quotient.
       * @example
       *
       * _.divide(6, 4);
       * // => 1.5
       */var divide=createMathOperation(function(dividend,divisor){return dividend/divisor;},1);/**
       * Computes `number` rounded down to `precision`.
       *
       * @static
       * @memberOf _
       * @since 3.10.0
       * @category Math
       * @param {number} number The number to round down.
       * @param {number} [precision=0] The precision to round down to.
       * @returns {number} Returns the rounded down number.
       * @example
       *
       * _.floor(4.006);
       * // => 4
       *
       * _.floor(0.046, 2);
       * // => 0.04
       *
       * _.floor(4060, -2);
       * // => 4000
       */var floor=createRound('floor');/**
       * Computes the maximum value of `array`. If `array` is empty or falsey,
       * `undefined` is returned.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Math
       * @param {Array} array The array to iterate over.
       * @returns {*} Returns the maximum value.
       * @example
       *
       * _.max([4, 2, 8, 6]);
       * // => 8
       *
       * _.max([]);
       * // => undefined
       */function max(array){return array&&array.length?baseExtremum(array,identity,baseGt):undefined$1;}/**
       * This method is like `_.max` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the criterion by which
       * the value is ranked. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {*} Returns the maximum value.
       * @example
       *
       * var objects = [{ 'n': 1 }, { 'n': 2 }];
       *
       * _.maxBy(objects, function(o) { return o.n; });
       * // => { 'n': 2 }
       *
       * // The `_.property` iteratee shorthand.
       * _.maxBy(objects, 'n');
       * // => { 'n': 2 }
       */function maxBy(array,iteratee){return array&&array.length?baseExtremum(array,getIteratee(iteratee,2),baseGt):undefined$1;}/**
       * Computes the mean of the values in `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @returns {number} Returns the mean.
       * @example
       *
       * _.mean([4, 2, 8, 6]);
       * // => 5
       */function mean(array){return baseMean(array,identity);}/**
       * This method is like `_.mean` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the value to be averaged.
       * The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {number} Returns the mean.
       * @example
       *
       * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
       *
       * _.meanBy(objects, function(o) { return o.n; });
       * // => 5
       *
       * // The `_.property` iteratee shorthand.
       * _.meanBy(objects, 'n');
       * // => 5
       */function meanBy(array,iteratee){return baseMean(array,getIteratee(iteratee,2));}/**
       * Computes the minimum value of `array`. If `array` is empty or falsey,
       * `undefined` is returned.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Math
       * @param {Array} array The array to iterate over.
       * @returns {*} Returns the minimum value.
       * @example
       *
       * _.min([4, 2, 8, 6]);
       * // => 2
       *
       * _.min([]);
       * // => undefined
       */function min(array){return array&&array.length?baseExtremum(array,identity,baseLt):undefined$1;}/**
       * This method is like `_.min` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the criterion by which
       * the value is ranked. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {*} Returns the minimum value.
       * @example
       *
       * var objects = [{ 'n': 1 }, { 'n': 2 }];
       *
       * _.minBy(objects, function(o) { return o.n; });
       * // => { 'n': 1 }
       *
       * // The `_.property` iteratee shorthand.
       * _.minBy(objects, 'n');
       * // => { 'n': 1 }
       */function minBy(array,iteratee){return array&&array.length?baseExtremum(array,getIteratee(iteratee,2),baseLt):undefined$1;}/**
       * Multiply two numbers.
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Math
       * @param {number} multiplier The first number in a multiplication.
       * @param {number} multiplicand The second number in a multiplication.
       * @returns {number} Returns the product.
       * @example
       *
       * _.multiply(6, 4);
       * // => 24
       */var multiply=createMathOperation(function(multiplier,multiplicand){return multiplier*multiplicand;},1);/**
       * Computes `number` rounded to `precision`.
       *
       * @static
       * @memberOf _
       * @since 3.10.0
       * @category Math
       * @param {number} number The number to round.
       * @param {number} [precision=0] The precision to round to.
       * @returns {number} Returns the rounded number.
       * @example
       *
       * _.round(4.006);
       * // => 4
       *
       * _.round(4.006, 2);
       * // => 4.01
       *
       * _.round(4060, -2);
       * // => 4100
       */var round=createRound('round');/**
       * Subtract two numbers.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {number} minuend The first number in a subtraction.
       * @param {number} subtrahend The second number in a subtraction.
       * @returns {number} Returns the difference.
       * @example
       *
       * _.subtract(6, 4);
       * // => 2
       */var subtract=createMathOperation(function(minuend,subtrahend){return minuend-subtrahend;},0);/**
       * Computes the sum of the values in `array`.
       *
       * @static
       * @memberOf _
       * @since 3.4.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @returns {number} Returns the sum.
       * @example
       *
       * _.sum([4, 2, 8, 6]);
       * // => 20
       */function sum(array){return array&&array.length?baseSum(array,identity):0;}/**
       * This method is like `_.sum` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the value to be summed.
       * The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {number} Returns the sum.
       * @example
       *
       * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
       *
       * _.sumBy(objects, function(o) { return o.n; });
       * // => 20
       *
       * // The `_.property` iteratee shorthand.
       * _.sumBy(objects, 'n');
       * // => 20
       */function sumBy(array,iteratee){return array&&array.length?baseSum(array,getIteratee(iteratee,2)):0;}/*------------------------------------------------------------------------*/ // Add methods that return wrapped values in chain sequences.
  lodash.after=after;lodash.ary=ary;lodash.assign=assign;lodash.assignIn=assignIn;lodash.assignInWith=assignInWith;lodash.assignWith=assignWith;lodash.at=at;lodash.before=before;lodash.bind=bind;lodash.bindAll=bindAll;lodash.bindKey=bindKey;lodash.castArray=castArray;lodash.chain=chain;lodash.chunk=chunk;lodash.compact=compact;lodash.concat=concat;lodash.cond=cond;lodash.conforms=conforms;lodash.constant=constant;lodash.countBy=countBy;lodash.create=create;lodash.curry=curry;lodash.curryRight=curryRight;lodash.debounce=debounce;lodash.defaults=defaults;lodash.defaultsDeep=defaultsDeep;lodash.defer=defer;lodash.delay=delay;lodash.difference=difference;lodash.differenceBy=differenceBy;lodash.differenceWith=differenceWith;lodash.drop=drop;lodash.dropRight=dropRight;lodash.dropRightWhile=dropRightWhile;lodash.dropWhile=dropWhile;lodash.fill=fill;lodash.filter=filter;lodash.flatMap=flatMap;lodash.flatMapDeep=flatMapDeep;lodash.flatMapDepth=flatMapDepth;lodash.flatten=flatten;lodash.flattenDeep=flattenDeep;lodash.flattenDepth=flattenDepth;lodash.flip=flip;lodash.flow=flow;lodash.flowRight=flowRight;lodash.fromPairs=fromPairs;lodash.functions=functions;lodash.functionsIn=functionsIn;lodash.groupBy=groupBy;lodash.initial=initial;lodash.intersection=intersection;lodash.intersectionBy=intersectionBy;lodash.intersectionWith=intersectionWith;lodash.invert=invert;lodash.invertBy=invertBy;lodash.invokeMap=invokeMap;lodash.iteratee=iteratee;lodash.keyBy=keyBy;lodash.keys=keys;lodash.keysIn=keysIn;lodash.map=map;lodash.mapKeys=mapKeys;lodash.mapValues=mapValues;lodash.matches=matches;lodash.matchesProperty=matchesProperty;lodash.memoize=memoize;lodash.merge=merge;lodash.mergeWith=mergeWith;lodash.method=method;lodash.methodOf=methodOf;lodash.mixin=mixin;lodash.negate=negate;lodash.nthArg=nthArg;lodash.omit=omit;lodash.omitBy=omitBy;lodash.once=once;lodash.orderBy=orderBy;lodash.over=over;lodash.overArgs=overArgs;lodash.overEvery=overEvery;lodash.overSome=overSome;lodash.partial=partial;lodash.partialRight=partialRight;lodash.partition=partition;lodash.pick=pick;lodash.pickBy=pickBy;lodash.property=property;lodash.propertyOf=propertyOf;lodash.pull=pull;lodash.pullAll=pullAll;lodash.pullAllBy=pullAllBy;lodash.pullAllWith=pullAllWith;lodash.pullAt=pullAt;lodash.range=range;lodash.rangeRight=rangeRight;lodash.rearg=rearg;lodash.reject=reject;lodash.remove=remove;lodash.rest=rest;lodash.reverse=reverse;lodash.sampleSize=sampleSize;lodash.set=set;lodash.setWith=setWith;lodash.shuffle=shuffle;lodash.slice=slice;lodash.sortBy=sortBy;lodash.sortedUniq=sortedUniq;lodash.sortedUniqBy=sortedUniqBy;lodash.split=split;lodash.spread=spread;lodash.tail=tail;lodash.take=take;lodash.takeRight=takeRight;lodash.takeRightWhile=takeRightWhile;lodash.takeWhile=takeWhile;lodash.tap=tap;lodash.throttle=throttle;lodash.thru=thru;lodash.toArray=toArray;lodash.toPairs=toPairs;lodash.toPairsIn=toPairsIn;lodash.toPath=toPath;lodash.toPlainObject=toPlainObject;lodash.transform=transform;lodash.unary=unary;lodash.union=union;lodash.unionBy=unionBy;lodash.unionWith=unionWith;lodash.uniq=uniq;lodash.uniqBy=uniqBy;lodash.uniqWith=uniqWith;lodash.unset=unset;lodash.unzip=unzip;lodash.unzipWith=unzipWith;lodash.update=update;lodash.updateWith=updateWith;lodash.values=values;lodash.valuesIn=valuesIn;lodash.without=without;lodash.words=words;lodash.wrap=wrap;lodash.xor=xor;lodash.xorBy=xorBy;lodash.xorWith=xorWith;lodash.zip=zip;lodash.zipObject=zipObject;lodash.zipObjectDeep=zipObjectDeep;lodash.zipWith=zipWith;// Add aliases.
  lodash.entries=toPairs;lodash.entriesIn=toPairsIn;lodash.extend=assignIn;lodash.extendWith=assignInWith;// Add methods to `lodash.prototype`.
  mixin(lodash,lodash);/*------------------------------------------------------------------------*/ // Add methods that return unwrapped values in chain sequences.
  lodash.add=add;lodash.attempt=attempt;lodash.camelCase=camelCase;lodash.capitalize=capitalize;lodash.ceil=ceil;lodash.clamp=clamp;lodash.clone=clone;lodash.cloneDeep=cloneDeep;lodash.cloneDeepWith=cloneDeepWith;lodash.cloneWith=cloneWith;lodash.conformsTo=conformsTo;lodash.deburr=deburr;lodash.defaultTo=defaultTo;lodash.divide=divide;lodash.endsWith=endsWith;lodash.eq=eq;lodash.escape=escape;lodash.escapeRegExp=escapeRegExp;lodash.every=every;lodash.find=find;lodash.findIndex=findIndex;lodash.findKey=findKey;lodash.findLast=findLast;lodash.findLastIndex=findLastIndex;lodash.findLastKey=findLastKey;lodash.floor=floor;lodash.forEach=forEach;lodash.forEachRight=forEachRight;lodash.forIn=forIn;lodash.forInRight=forInRight;lodash.forOwn=forOwn;lodash.forOwnRight=forOwnRight;lodash.get=get;lodash.gt=gt;lodash.gte=gte;lodash.has=has;lodash.hasIn=hasIn;lodash.head=head;lodash.identity=identity;lodash.includes=includes;lodash.indexOf=indexOf;lodash.inRange=inRange;lodash.invoke=invoke;lodash.isArguments=isArguments;lodash.isArray=isArray;lodash.isArrayBuffer=isArrayBuffer;lodash.isArrayLike=isArrayLike;lodash.isArrayLikeObject=isArrayLikeObject;lodash.isBoolean=isBoolean;lodash.isBuffer=isBuffer;lodash.isDate=isDate;lodash.isElement=isElement;lodash.isEmpty=isEmpty;lodash.isEqual=isEqual;lodash.isEqualWith=isEqualWith;lodash.isError=isError;lodash.isFinite=isFinite;lodash.isFunction=isFunction;lodash.isInteger=isInteger;lodash.isLength=isLength;lodash.isMap=isMap;lodash.isMatch=isMatch;lodash.isMatchWith=isMatchWith;lodash.isNaN=isNaN;lodash.isNative=isNative;lodash.isNil=isNil;lodash.isNull=isNull;lodash.isNumber=isNumber;lodash.isObject=isObject;lodash.isObjectLike=isObjectLike;lodash.isPlainObject=isPlainObject;lodash.isRegExp=isRegExp;lodash.isSafeInteger=isSafeInteger;lodash.isSet=isSet;lodash.isString=isString;lodash.isSymbol=isSymbol;lodash.isTypedArray=isTypedArray;lodash.isUndefined=isUndefined;lodash.isWeakMap=isWeakMap;lodash.isWeakSet=isWeakSet;lodash.join=join;lodash.kebabCase=kebabCase;lodash.last=last;lodash.lastIndexOf=lastIndexOf;lodash.lowerCase=lowerCase;lodash.lowerFirst=lowerFirst;lodash.lt=lt;lodash.lte=lte;lodash.max=max;lodash.maxBy=maxBy;lodash.mean=mean;lodash.meanBy=meanBy;lodash.min=min;lodash.minBy=minBy;lodash.stubArray=stubArray;lodash.stubFalse=stubFalse;lodash.stubObject=stubObject;lodash.stubString=stubString;lodash.stubTrue=stubTrue;lodash.multiply=multiply;lodash.nth=nth;lodash.noConflict=noConflict;lodash.noop=noop;lodash.now=now;lodash.pad=pad;lodash.padEnd=padEnd;lodash.padStart=padStart;lodash.parseInt=parseInt;lodash.random=random;lodash.reduce=reduce;lodash.reduceRight=reduceRight;lodash.repeat=repeat;lodash.replace=replace;lodash.result=result;lodash.round=round;lodash.runInContext=runInContext;lodash.sample=sample;lodash.size=size;lodash.snakeCase=snakeCase;lodash.some=some;lodash.sortedIndex=sortedIndex;lodash.sortedIndexBy=sortedIndexBy;lodash.sortedIndexOf=sortedIndexOf;lodash.sortedLastIndex=sortedLastIndex;lodash.sortedLastIndexBy=sortedLastIndexBy;lodash.sortedLastIndexOf=sortedLastIndexOf;lodash.startCase=startCase;lodash.startsWith=startsWith;lodash.subtract=subtract;lodash.sum=sum;lodash.sumBy=sumBy;lodash.template=template;lodash.times=times;lodash.toFinite=toFinite;lodash.toInteger=toInteger;lodash.toLength=toLength;lodash.toLower=toLower;lodash.toNumber=toNumber;lodash.toSafeInteger=toSafeInteger;lodash.toString=toString;lodash.toUpper=toUpper;lodash.trim=trim;lodash.trimEnd=trimEnd;lodash.trimStart=trimStart;lodash.truncate=truncate;lodash.unescape=unescape;lodash.uniqueId=uniqueId;lodash.upperCase=upperCase;lodash.upperFirst=upperFirst;// Add aliases.
  lodash.each=forEach;lodash.eachRight=forEachRight;lodash.first=head;mixin(lodash,function(){var source={};baseForOwn(lodash,function(func,methodName){if(!hasOwnProperty.call(lodash.prototype,methodName)){source[methodName]=func;}});return source;}(),{'chain':false});/*------------------------------------------------------------------------*/ /**
       * The semantic version number.
       *
       * @static
       * @memberOf _
       * @type {string}
       */lodash.VERSION=VERSION;// Assign default placeholders.
  arrayEach(['bind','bindKey','curry','curryRight','partial','partialRight'],function(methodName){lodash[methodName].placeholder=lodash;});// Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
  arrayEach(['drop','take'],function(methodName,index){LazyWrapper.prototype[methodName]=function(n){n=n===undefined$1?1:nativeMax(toInteger(n),0);var result=this.__filtered__&&!index?new LazyWrapper(this):this.clone();if(result.__filtered__){result.__takeCount__=nativeMin(n,result.__takeCount__);}else {result.__views__.push({'size':nativeMin(n,MAX_ARRAY_LENGTH),'type':methodName+(result.__dir__<0?'Right':'')});}return result;};LazyWrapper.prototype[methodName+'Right']=function(n){return this.reverse()[methodName](n).reverse();};});// Add `LazyWrapper` methods that accept an `iteratee` value.
  arrayEach(['filter','map','takeWhile'],function(methodName,index){var type=index+1,isFilter=type==LAZY_FILTER_FLAG||type==LAZY_WHILE_FLAG;LazyWrapper.prototype[methodName]=function(iteratee){var result=this.clone();result.__iteratees__.push({'iteratee':getIteratee(iteratee,3),'type':type});result.__filtered__=result.__filtered__||isFilter;return result;};});// Add `LazyWrapper` methods for `_.head` and `_.last`.
  arrayEach(['head','last'],function(methodName,index){var takeName='take'+(index?'Right':'');LazyWrapper.prototype[methodName]=function(){return this[takeName](1).value()[0];};});// Add `LazyWrapper` methods for `_.initial` and `_.tail`.
  arrayEach(['initial','tail'],function(methodName,index){var dropName='drop'+(index?'':'Right');LazyWrapper.prototype[methodName]=function(){return this.__filtered__?new LazyWrapper(this):this[dropName](1);};});LazyWrapper.prototype.compact=function(){return this.filter(identity);};LazyWrapper.prototype.find=function(predicate){return this.filter(predicate).head();};LazyWrapper.prototype.findLast=function(predicate){return this.reverse().find(predicate);};LazyWrapper.prototype.invokeMap=baseRest(function(path,args){if(typeof path=='function'){return new LazyWrapper(this);}return this.map(function(value){return baseInvoke(value,path,args);});});LazyWrapper.prototype.reject=function(predicate){return this.filter(negate(getIteratee(predicate)));};LazyWrapper.prototype.slice=function(start,end){start=toInteger(start);var result=this;if(result.__filtered__&&(start>0||end<0)){return new LazyWrapper(result);}if(start<0){result=result.takeRight(-start);}else if(start){result=result.drop(start);}if(end!==undefined$1){end=toInteger(end);result=end<0?result.dropRight(-end):result.take(end-start);}return result;};LazyWrapper.prototype.takeRightWhile=function(predicate){return this.reverse().takeWhile(predicate).reverse();};LazyWrapper.prototype.toArray=function(){return this.take(MAX_ARRAY_LENGTH);};// Add `LazyWrapper` methods to `lodash.prototype`.
  baseForOwn(LazyWrapper.prototype,function(func,methodName){var checkIteratee=/^(?:filter|find|map|reject)|While$/.test(methodName),isTaker=/^(?:head|last)$/.test(methodName),lodashFunc=lodash[isTaker?'take'+(methodName=='last'?'Right':''):methodName],retUnwrapped=isTaker||/^find/.test(methodName);if(!lodashFunc){return;}lodash.prototype[methodName]=function(){var value=this.__wrapped__,args=isTaker?[1]:arguments,isLazy=value instanceof LazyWrapper,iteratee=args[0],useLazy=isLazy||isArray(value);var interceptor=function interceptor(value){var result=lodashFunc.apply(lodash,arrayPush([value],args));return isTaker&&chainAll?result[0]:result;};if(useLazy&&checkIteratee&&typeof iteratee=='function'&&iteratee.length!=1){// Avoid lazy use if the iteratee has a "length" value other than `1`.
  isLazy=useLazy=false;}var chainAll=this.__chain__,isHybrid=!!this.__actions__.length,isUnwrapped=retUnwrapped&&!chainAll,onlyLazy=isLazy&&!isHybrid;if(!retUnwrapped&&useLazy){value=onlyLazy?value:new LazyWrapper(this);var result=func.apply(value,args);result.__actions__.push({'func':thru,'args':[interceptor],'thisArg':undefined$1});return new LodashWrapper(result,chainAll);}if(isUnwrapped&&onlyLazy){return func.apply(this,args);}result=this.thru(interceptor);return isUnwrapped?isTaker?result.value()[0]:result.value():result;};});// Add `Array` methods to `lodash.prototype`.
  arrayEach(['pop','push','shift','sort','splice','unshift'],function(methodName){var func=arrayProto[methodName],chainName=/^(?:push|sort|unshift)$/.test(methodName)?'tap':'thru',retUnwrapped=/^(?:pop|shift)$/.test(methodName);lodash.prototype[methodName]=function(){var args=arguments;if(retUnwrapped&&!this.__chain__){var value=this.value();return func.apply(isArray(value)?value:[],args);}return this[chainName](function(value){return func.apply(isArray(value)?value:[],args);});};});// Map minified method names to their real names.
  baseForOwn(LazyWrapper.prototype,function(func,methodName){var lodashFunc=lodash[methodName];if(lodashFunc){var key=lodashFunc.name+'';if(!hasOwnProperty.call(realNames,key)){realNames[key]=[];}realNames[key].push({'name':methodName,'func':lodashFunc});}});realNames[createHybrid(undefined$1,WRAP_BIND_KEY_FLAG).name]=[{'name':'wrapper','func':undefined$1}];// Add methods to `LazyWrapper`.
  LazyWrapper.prototype.clone=lazyClone;LazyWrapper.prototype.reverse=lazyReverse;LazyWrapper.prototype.value=lazyValue;// Add chain sequence methods to the `lodash` wrapper.
  lodash.prototype.at=wrapperAt;lodash.prototype.chain=wrapperChain;lodash.prototype.commit=wrapperCommit;lodash.prototype.next=wrapperNext;lodash.prototype.plant=wrapperPlant;lodash.prototype.reverse=wrapperReverse;lodash.prototype.toJSON=lodash.prototype.valueOf=lodash.prototype.value=wrapperValue;// Add lazy aliases.
  lodash.prototype.first=lodash.prototype.head;if(symIterator){lodash.prototype[symIterator]=wrapperToIterator;}return lodash;};/*--------------------------------------------------------------------------*/ // Export lodash.
  var _=runInContext();// Some AMD build optimizers, like r.js, check for condition patterns like:
  if(freeModule){// Export for Node.js.
  (freeModule.exports=_)._=_;// Export for CommonJS support.
  freeExports._=_;}else {// Export to the global object.
  root._=_;}}).call(commonjsGlobal);})(lodash,lodash.exports);

  function ownKeys$12(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$12(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$12(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$12(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function useLocaleReceiver(componentName, defaultLocale) {
    var _React$useContext = React__default["default"].useContext(ConfigContext$1),
        tdLocale = _React$useContext.locale;

    function transformLocale(pattern, placement) {
      var REGX = /\{\s*([\w-]+)\s*\}/g;

      if (typeof pattern === "string") {
        if (!placement || !REGX.test(pattern)) return pattern;
        var translated = pattern.replace(REGX, function (_, key) {
          if (placement) return String(placement[key]);
          return "";
        });
        return translated;
      }

      if (Array.isArray(pattern)) {
        return pattern.map(function (p, index) {
          var translated = p.replace(REGX, function (_, key) {
            if (placement) return String(placement[index][key]);
            return "";
          });
          return translated;
        });
      }

      if (typeof pattern === "function") {
        return pattern(placement);
      }

      return "";
    }

    var componentLocale = React__default["default"].useMemo(function () {
      var locale = defaultLocale || {};
      var connectLocaleByName = tdLocale[componentName];
      var localeFromContext = componentName && tdLocale ? connectLocaleByName : {};
      return _objectSpread$12(_objectSpread$12({}, typeof locale === "function" ? locale() : locale), localeFromContext || {});
    }, [componentName, defaultLocale, tdLocale]);
    return [componentLocale, transformLocale];
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray$4(arr);
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$4(arr) || _nonIterableSpread();
  }

  function ownKeys$11(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$11(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$11(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$11(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var OptionGroup = function OptionGroup(props) {
    var children = props.children,
        label = props.label,
        selectedValue = props.selectedValue,
        onSelect = props.onSelect,
        divider = props.divider;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var childrenWithProps = React.Children.map(children, function (child) {
      if ( /*#__PURE__*/React.isValidElement(child)) {
        var addedProps = {
          selectedValue: selectedValue,
          onSelect: onSelect
        };
        return /*#__PURE__*/React.cloneElement(child, _objectSpread$11({}, addedProps));
      }

      return child;
    });
    return /* @__PURE__ */React__default["default"].createElement("li", {
      className: classNames$1("".concat(classPrefix, "-select-option-group"), _defineProperty$2({}, "".concat(classPrefix, "-select-option-group__divider"), divider))
    }, /* @__PURE__ */React__default["default"].createElement("ul", {
      className: "".concat(classPrefix, "-select-option-group__header")
    }, label), /* @__PURE__ */React__default["default"].createElement("ul", null, childrenWithProps));
  };

  var componentType = "select";

  var Option$1 = function Option(props) {
    var _classNames2;

    var propDisabled = props.disabled,
        propLabel = props.label,
        selectedValue = props.selectedValue,
        multiple = props.multiple,
        size = props.size,
        max = props.max,
        keys = props.keys,
        value = props.value,
        onSelect = props.onSelect,
        children = props.children,
        restData = props.restData;
    var selected;
    var label = propLabel || value;
    var disabled = propDisabled || multiple && Array.isArray(selectedValue) && max && selectedValue.length >= max;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var optionRef = React.useRef();
    useRipple(optionRef);

    if (!multiple) {
      selected = isNumber_1(selectedValue) || isString_1(selectedValue) ? value === selectedValue : value === get_1(selectedValue, (keys === null || keys === void 0 ? void 0 : keys.value) || "value");
    }

    if (multiple && Array.isArray(selectedValue)) {
      selected = selectedValue.some(function (item) {
        if (isNumber_1(item) || isString_1(item)) {
          return item === value;
        }

        return get_1(item, (keys === null || keys === void 0 ? void 0 : keys.value) || "value") === value;
      });
    }

    var handleSelect = function handleSelect(event) {
      if (!disabled || multiple && selected) {
        onSelect(value, {
          label: String(label),
          selected: selected,
          event: event,
          restData: restData
        });
      }
    };

    var renderItem = function renderItem(children2) {
      if (multiple) {
        var _classNames;

        return /* @__PURE__ */React__default["default"].createElement("label", {
          className: classNames$1("".concat(classPrefix, "-checkbox"), (_classNames = {}, _defineProperty$2(_classNames, "".concat(classPrefix, "-is-disabled"), disabled && !selected), _defineProperty$2(_classNames, "".concat(classPrefix, "-is-checked"), selected), _classNames))
        }, /* @__PURE__ */React__default["default"].createElement("input", {
          type: "checkbox",
          className: classNames$1("".concat(classPrefix, "-checkbox__former")),
          value: "",
          disabled: disabled && !selected,
          onClick: function onClick(e) {
            return e.stopPropagation();
          }
        }), /* @__PURE__ */React__default["default"].createElement("span", {
          className: classNames$1("".concat(classPrefix, "-checkbox__input"))
        }), /* @__PURE__ */React__default["default"].createElement("span", {
          className: classNames$1("".concat(classPrefix, "-checkbox__label"))
        }, children2 || label));
      }

      return /* @__PURE__ */React__default["default"].createElement("span", null, children2 || label);
    };

    return /* @__PURE__ */React__default["default"].createElement("li", {
      className: classNames$1(props.className, "".concat(classPrefix, "-").concat(componentType, "-option"), (_classNames2 = {}, _defineProperty$2(_classNames2, "".concat(classPrefix, "-is-disabled"), disabled), _defineProperty$2(_classNames2, "".concat(classPrefix, "-is-selected"), selected), _defineProperty$2(_classNames2, "".concat(classPrefix, "-size-s"), size === "small"), _defineProperty$2(_classNames2, "".concat(classPrefix, "-size-l"), size === "large"), _classNames2)),
      key: value,
      onClick: handleSelect,
      ref: optionRef
    }, renderItem(children));
  };

  function setValueToOptionFormOptionDom(dom, valueToOption, keys) {
    var _valueToOption$value;

    var _dom$props = dom.props,
        value = _dom$props.value,
        label = _dom$props.label,
        children = _dom$props.children;
    valueToOption[value] = (_valueToOption$value = {}, _defineProperty$2(_valueToOption$value, (keys === null || keys === void 0 ? void 0 : keys.value) || "value", value), _defineProperty$2(_valueToOption$value, (keys === null || keys === void 0 ? void 0 : keys.label) || "label", label || children || value), _valueToOption$value);
  }

  var getValueToOption = function getValueToOption(children, options, keys) {
    var valueToOption = {};

    if (Array.isArray(options)) {
      options.forEach(function (option) {
        valueToOption[lodash.exports.get(option, (keys === null || keys === void 0 ? void 0 : keys.value) || "value")] = option;
      });
      return valueToOption;
    }

    if (lodash.exports.isPlainObject(children)) {
      var name = children.type.name;

      if (name === Option$1.name) {
        setValueToOptionFormOptionDom(children, valueToOption, keys);
        return valueToOption;
      }

      if (name === OptionGroup.name) {
        var groupChildren = children.props.children;

        if (Array.isArray(groupChildren)) {
          groupChildren.forEach(function (item) {
            setValueToOptionFormOptionDom(item, valueToOption, keys);
          });
          return valueToOption;
        }
      }
    }

    if (Array.isArray(children)) {
      children.forEach(function (item) {
        var name = item.type.name;

        if (name === Option$1.name) {
          setValueToOptionFormOptionDom(item, valueToOption, keys);
        }

        if (name === OptionGroup.name) {
          var _groupChildren = item.props.children;

          if (Array.isArray(_groupChildren)) {
            _groupChildren.forEach(function (groupItem) {
              setValueToOptionFormOptionDom(groupItem, valueToOption, keys);
            });
          }
        }
      });
    }

    return valueToOption;
  };
  var getMultipleTags = function getMultipleTags(values, keys) {
    var tags = values.map(function (item) {
      return {
        label: lodash.exports.get(item, (keys === null || keys === void 0 ? void 0 : keys.label) || "label") || item.toString(),
        value: lodash.exports.get(item, (keys === null || keys === void 0 ? void 0 : keys.value) || "value") || item
      };
    });
    return tags;
  };
  var getSelectValueArr = function getSelectValueArr(values, activeValue, selected, valueType, keys, objVal) {
    values = Array.isArray(values) ? values : [];

    if (Array.isArray(values)) {
      var currentValues = _toConsumableArray(values);

      var isValueObj = valueType === "object";

      if (selected) {
        currentValues = currentValues.filter(function (item) {
          if (isValueObj) {
            if (lodash.exports.isPlainObject(activeValue)) {
              return lodash.exports.get(item, (keys === null || keys === void 0 ? void 0 : keys.value) || "value") !== lodash.exports.get(activeValue, "value");
            }

            return lodash.exports.get(item, (keys === null || keys === void 0 ? void 0 : keys.value) || "value") !== activeValue;
          }

          return item !== activeValue;
        });
      } else {
        var item = isValueObj ? objVal : activeValue;
        currentValues.push(item);
      }

      return currentValues;
    }
  };

  function FakeArrow(props) {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    return /* @__PURE__ */React__default["default"].createElement("svg", {
      style: props.style,
      className: classNames$1("".concat(classPrefix, "-fake-arrow"), _defineProperty$2({}, "".concat(classPrefix, "-fake-arrow--active"), (props === null || props === void 0 ? void 0 : props.isActive) && !(props !== null && props !== void 0 && props.disabled)), props === null || props === void 0 ? void 0 : props.overlayClassName),
      width: "16",
      height: "16",
      viewBox: "0 0 16 16",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, /* @__PURE__ */React__default["default"].createElement("path", {
      d: "M3.75 5.7998L7.99274 10.0425L12.2361 5.79921",
      stroke: "black",
      strokeOpacity: "0.9",
      strokeWidth: "1.3"
    }));
  }

  var _excluded$f = ["checked", "content", "defaultChecked", "onChange", "onClick", "disabled", "children", "className"];

  function ownKeys$10(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$10(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$10(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$10(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var CheckTag = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _classNames;

    var checked = props.checked,
        content = props.content,
        defaultChecked = props.defaultChecked,
        onChange = props.onChange,
        _props$onClick = props.onClick,
        _onClick = _props$onClick === void 0 ? noop : _props$onClick,
        disabled = props.disabled,
        children = props.children,
        className = props.className,
        tagOtherProps = _objectWithoutProperties$1(props, _excluded$f);

    var _useDefault = useDefault(checked, defaultChecked, onChange),
        _useDefault2 = _slicedToArray(_useDefault, 2),
        value = _useDefault2[0],
        onValueChange = _useDefault2[1];

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var tagClassPrefix = "".concat(classPrefix, "-tag");
    var checkTagClassNames = classNames$1(tagClassPrefix, className, "".concat(tagClassPrefix, "--default"), "".concat(tagClassPrefix, "--check"), (_classNames = {}, _defineProperty$2(_classNames, "".concat(tagClassPrefix, "--disabled"), disabled), _defineProperty$2(_classNames, "".concat(tagClassPrefix, "--checked"), value), _classNames));
    return /* @__PURE__ */React__default["default"].createElement("span", _objectSpread$10(_objectSpread$10({
      ref: ref,
      className: checkTagClassNames
    }, tagOtherProps), {}, {
      onClick: function onClick(e) {
        !disabled && onValueChange(!value);

        _onClick({
          e: e
        });
      }
    }), children || content);
  });
  CheckTag.displayName = "CheckTag";

  var _excluded$e = ["theme", "size", "shape", "variant", "closable", "maxWidth", "icon", "content", "onClick", "onClose", "className", "style", "disabled", "children"];

  function ownKeys$$(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$$(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$$(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$$(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var Tag$1 = forwardRefWithStatics(function (props, ref) {
    var _classNames;

    var _props$theme = props.theme,
        theme = _props$theme === void 0 ? "default" : _props$theme,
        _props$size = props.size,
        size = _props$size === void 0 ? "medium" : _props$size,
        _props$shape = props.shape,
        shape = _props$shape === void 0 ? "square" : _props$shape,
        _props$variant = props.variant,
        variant = _props$variant === void 0 ? "dark" : _props$variant,
        closable = props.closable,
        maxWidth = props.maxWidth,
        icon = props.icon,
        content = props.content,
        _props$onClick = props.onClick,
        _onClick = _props$onClick === void 0 ? noop : _props$onClick,
        _props$onClose = props.onClose,
        onClose = _props$onClose === void 0 ? noop : _props$onClose,
        className = props.className,
        style = props.style,
        disabled = props.disabled,
        children = props.children,
        otherTagProps = _objectWithoutProperties$1(props, _excluded$e);

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var tagClassPrefix = "".concat(classPrefix, "-tag");
    var sizeMap = {
      large: "".concat(classPrefix, "-size-l"),
      small: "".concat(classPrefix, "-size-s")
    };
    var tagClassNames = classNames$1(tagClassPrefix, "".concat(tagClassPrefix, "--").concat(theme), "".concat(tagClassPrefix, "--").concat(variant), "".concat(tagClassPrefix, "--").concat(size), "".concat(tagClassPrefix, "--").concat(shape), (_classNames = {}, _defineProperty$2(_classNames, "".concat(tagClassPrefix, "--ellipsis"), !!maxWidth), _defineProperty$2(_classNames, "".concat(tagClassPrefix, "--disabled"), disabled), _classNames), sizeMap[size], className);
    var deleteIcon = /* @__PURE__ */React__default["default"].createElement(CloseIcon, {
      onClick: function onClick(e) {
        return onClose({
          e: e
        });
      },
      className: "".concat(tagClassPrefix, "__icon-close")
    });
    var tag = /* @__PURE__ */React__default["default"].createElement("span", _objectSpread$$({
      ref: ref,
      className: tagClassNames,
      onClick: function onClick(e) {
        return _onClick({
          e: e
        });
      }
    }, otherTagProps), icon, maxWidth ? /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(tagClassPrefix, "--text"),
      style: _objectSpread$$(_objectSpread$$({}, style || {}), {
        maxWidth: maxWidth
      })
    }, content || children) : content || children, closable && deleteIcon);
    return tag;
  }, {
    CheckTag: CheckTag
  });
  Tag$1.displayName = "Tag";

  var Tag = Tag$1;

  var _excluded$d = ["value", "label", "disabled"];

  function ownKeys$_(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$_(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$_(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$_(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var PopupContent = function PopupContent(props) {
    var onChange = props.onChange,
        value = props.value,
        size = props.size,
        max = props.max,
        multiple = props.multiple,
        showPopup = props.showPopup,
        setShowPopup = props.setShowPopup,
        options = props.options,
        empty = props.empty,
        loadingText = props.loadingText,
        loading = props.loading,
        valueType = props.valueType,
        children = props.children,
        keys = props.keys;

    var _useLocaleReceiver = useLocaleReceiver("select"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
        local = _useLocaleReceiver2[0],
        t = _useLocaleReceiver2[1];

    var emptyText = t(local.empty);

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    if (!children && !props.options) return null;

    var onSelect = function onSelect(selectedValue, _ref) {
      var label = _ref.label,
          selected = _ref.selected,
          restData = _ref.restData;
      var isValObj = valueType === "object";
      var objVal = {};

      if (isValObj) {
        objVal = _objectSpread$_({}, restData);

        if (!(keys !== null && keys !== void 0 && keys.label)) {
          Object.assign(objVal, {
            label: label
          });
        }

        if (!(keys !== null && keys !== void 0 && keys.value)) {
          Object.assign(objVal, {
            value: selectedValue
          });
        }
      }

      if (!Object.keys(objVal).length) {
        var _Object$assign;

        Object.assign(objVal, (_Object$assign = {}, _defineProperty$2(_Object$assign, (keys === null || keys === void 0 ? void 0 : keys.label) || "label", label), _defineProperty$2(_Object$assign, (keys === null || keys === void 0 ? void 0 : keys.value) || "value", selectedValue), _Object$assign));
      }

      if (multiple) {
        var values = getSelectValueArr(value, selectedValue, selected, valueType, keys, objVal);
        onChange(values, {
          label: label
        });
      } else {
        var selectVal = valueType === "object" ? objVal : selectedValue;
        onChange(selectVal, {
          label: label
        });
        setShowPopup(!showPopup);
      }
    };

    var childrenWithProps = React.Children.map(children, function (child) {
      if ( /*#__PURE__*/React.isValidElement(child)) {
        var addedProps = {
          size: size,
          max: max,
          multiple: multiple,
          selectedValue: value,
          onSelect: onSelect
        };
        return /*#__PURE__*/React.cloneElement(child, _objectSpread$_({}, addedProps));
      }

      return child;
    });

    var renderOptions = function renderOptions() {
      if (options) {
        return /* @__PURE__ */React__default["default"].createElement("ul", null, options.map(function (_ref2, index) {
          var optionValue = _ref2.value,
              label = _ref2.label,
              disabled = _ref2.disabled,
              restData = _objectWithoutProperties$1(_ref2, _excluded$d);

          return /* @__PURE__ */React__default["default"].createElement(Option$1, {
            key: index,
            max: max,
            label: label,
            value: optionValue,
            onSelect: onSelect,
            selectedValue: value,
            multiple: multiple,
            size: size,
            disabled: disabled,
            restData: restData,
            keys: keys
          });
        }));
      }

      return /* @__PURE__ */React__default["default"].createElement("ul", null, childrenWithProps);
    };

    var isEmpty = Array.isArray(childrenWithProps) && !childrenWithProps.length || options && options.length === 0;

    if (isEmpty) {
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-select__empty")
      }, empty ? empty : /* @__PURE__ */React__default["default"].createElement("p", null, emptyText));
    }

    if (loading) {
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-select__loading-tips")
      }, loadingText);
    }

    return /* @__PURE__ */React__default["default"].createElement("div", null, renderOptions());
  };

  function ownKeys$Z(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$Z(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$Z(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$Z(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var MAX_OVERLAY_WIDTH = 500;
  var Select$1 = forwardRefWithStatics(function (props, ref) {
    var _classNames3;

    var _useLocaleReceiver = useLocaleReceiver("select"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
        local = _useLocaleReceiver2[0],
        t = _useLocaleReceiver2[1];

    var emptyText = t(local.loadingText);

    var _useDefaultValue = useDefaultValue$1(props),
        _useDefaultValue$bord = _useDefaultValue.bordered,
        bordered = _useDefaultValue$bord === void 0 ? true : _useDefaultValue$bord,
        creatable = _useDefaultValue.creatable,
        filter = _useDefaultValue.filter,
        _useDefaultValue$load = _useDefaultValue.loadingText,
        loadingText = _useDefaultValue$load === void 0 ? emptyText : _useDefaultValue$load,
        _useDefaultValue$max = _useDefaultValue.max,
        max = _useDefaultValue$max === void 0 ? 0 : _useDefaultValue$max,
        popupProps = _useDefaultValue.popupProps,
        reserveKeyword = _useDefaultValue.reserveKeyword,
        value = _useDefaultValue.value,
        className = _useDefaultValue.className,
        style = _useDefaultValue.style,
        disabled = _useDefaultValue.disabled,
        size = _useDefaultValue.size,
        multiple = _useDefaultValue.multiple,
        placeholder = _useDefaultValue.placeholder,
        clearable = _useDefaultValue.clearable,
        prefixIcon = _useDefaultValue.prefixIcon,
        options = _useDefaultValue.options,
        filterable = _useDefaultValue.filterable,
        loading = _useDefaultValue.loading,
        _onFocus = _useDefaultValue.onFocus,
        _onBlur = _useDefaultValue.onBlur,
        _useDefaultValue$onCl = _useDefaultValue.onClear,
        onClear = _useDefaultValue$onCl === void 0 ? noop : _useDefaultValue$onCl,
        onCreate = _useDefaultValue.onCreate,
        onRemove = _useDefaultValue.onRemove,
        onSearch = _useDefaultValue.onSearch,
        onChange = _useDefaultValue.onChange,
        empty = _useDefaultValue.empty,
        _useDefaultValue$valu = _useDefaultValue.valueType,
        valueType = _useDefaultValue$valu === void 0 ? "value" : _useDefaultValue$valu,
        keys = _useDefaultValue.keys,
        children = _useDefaultValue.children,
        collapsedItems = _useDefaultValue.collapsedItems,
        minCollapsedNum = _useDefaultValue.minCollapsedNum,
        valueDisplay = _useDefaultValue.valueDisplay,
        _onEnter = _useDefaultValue.onEnter,
        onVisibleChange = _useDefaultValue.onVisibleChange;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var name = "".concat(classPrefix, "-select");

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        showPopup = _useState2[0],
        setShowPopup = _useState2[1];

    var _useState3 = React.useState(false),
        _useState4 = _slicedToArray(_useState3, 2),
        isHover = _useState4[0],
        toggleHover = _useState4[1];

    var _useState5 = React.useState(void 0),
        _useState6 = _slicedToArray(_useState5, 2),
        inputVal = _useState6[0],
        setInputVal = _useState6[1];

    var _useState7 = React.useState([]),
        _useState8 = _slicedToArray(_useState7, 2),
        currentOptions = _useState8[0],
        setCurrentOptions = _useState8[1];

    var _useState9 = React.useState([]),
        _useState10 = _slicedToArray(_useState9, 2),
        tmpPropOptions = _useState10[0],
        setTmpPropOptions = _useState10[1];

    var _useState11 = React.useState({}),
        _useState12 = _slicedToArray(_useState11, 2),
        valueToOption = _useState12[0],
        setValueToOption = _useState12[1];

    var _useState13 = React.useState([]),
        _useState14 = _slicedToArray(_useState13, 2),
        selectedOptions = _useState14[0],
        setSelectedOptions = _useState14[1];

    var _useState15 = React.useState(0),
        _useState16 = _slicedToArray(_useState15, 2),
        width = _useState16[0],
        setWidth = _useState16[1];

    var selectRef = React.useRef(null);
    var overlayRef = React.useRef(null);
    var selectedLabel = React.useMemo(function () {
      return get_1(selectedOptions[0] || {}, (keys === null || keys === void 0 ? void 0 : keys.label) || "label") || "";
    }, [selectedOptions, keys]);
    React.useEffect(function () {
      if (showPopup && selectRef !== null && selectRef !== void 0 && selectRef.current) {
        var _overlayRef$current, _overlayRef$current$g;

        var domRect = selectRef.current.getBoundingClientRect();
        var overlayRect = overlayRef === null || overlayRef === void 0 ? void 0 : (_overlayRef$current = overlayRef.current) === null || _overlayRef$current === void 0 ? void 0 : (_overlayRef$current$g = _overlayRef$current.getBoundingClientRect) === null || _overlayRef$current$g === void 0 ? void 0 : _overlayRef$current$g.call(_overlayRef$current);
        var width2 = domRect.width > MAX_OVERLAY_WIDTH ? domRect.width : Math.min(MAX_OVERLAY_WIDTH, Math.max(domRect.width, overlayRect === null || overlayRect === void 0 ? void 0 : overlayRect.width));
        setWidth(width2);
      }
    }, [showPopup]);

    var handleShowPopup = function handleShowPopup(visible) {
      if (disabled) return;
      setShowPopup(visible);
      onVisibleChange === null || onVisibleChange === void 0 ? void 0 : onVisibleChange(visible);

      if (!visible && !multiple && filterable) {
        setInputVal(selectedLabel);
      }
    };

    React.useEffect(function () {
      if (keys) {
        var transformedOptions = options.map(function (option) {
          return _objectSpread$Z(_objectSpread$Z({}, option), {}, {
            value: get_1(option, (keys === null || keys === void 0 ? void 0 : keys.value) || "value"),
            label: get_1(option, (keys === null || keys === void 0 ? void 0 : keys.label) || "label")
          });
        });
        setCurrentOptions(transformedOptions);
        setTmpPropOptions(transformedOptions);
      } else {
        setCurrentOptions(options);
        setTmpPropOptions(options);
      }

      setValueToOption(getValueToOption(children, options, keys) || {});
    }, [options, keys, children]);
    React.useEffect(function () {
      setSelectedOptions(function (oldSelectedOptions) {
        var valueKey = (keys === null || keys === void 0 ? void 0 : keys.value) || "value";
        var labelKey = (keys === null || keys === void 0 ? void 0 : keys.label) || "label";

        if (Array.isArray(value)) {
          return value.map(function (item) {
            if (valueType === "value") {
              var _ref;

              return valueToOption[item] || oldSelectedOptions.find(function (option) {
                return get_1(option, valueKey) === item;
              }) || (_ref = {}, _defineProperty$2(_ref, valueKey, item), _defineProperty$2(_ref, labelKey, item), _ref);
            }

            return item;
          }).filter(Boolean);
        }

        if (value !== void 0 && value !== null) {
          if (valueType === "value") {
            var _ref2;

            return [valueToOption[value] || oldSelectedOptions.find(function (option) {
              return get_1(option, valueKey) === value;
            }) || (_ref2 = {}, _defineProperty$2(_ref2, valueKey, value), _defineProperty$2(_ref2, labelKey, value), _ref2)].filter(Boolean);
          }

          return [value];
        }

        return [];
      });
    }, [value, keys, valueType, valueToOption]);

    var removeTag = function removeTag(event, selectValue, tagData) {
      event.stopPropagation();
      var values = getSelectValueArr(value, selectValue, true, valueType, keys);
      onChange(values);

      if (isFunction_1(onRemove)) {
        onRemove({
          value: tagData.value,
          data: tagData,
          e: event
        });
      }
    };

    var handleChange = function handleChange(value2, _ref3) {
      var label = _ref3.label;

      if (filterable) {
        setInputVal(!multiple || reserveKeyword && multiple ? label : "");
      }

      if (creatable && isFunction_1(onCreate)) {
        if (options.filter(function (option) {
          return option.value === value2;
        }).length === 0) {
          onCreate(value2);
        }
      }

      onChange(value2);
    };

    var handleFilter = function handleFilter(value2) {
      var filteredOptions;

      if (!value2) {
        setCurrentOptions(tmpPropOptions);
        return;
      }

      if (filter && isFunction_1(filter)) {
        filteredOptions = Array.isArray(tmpPropOptions) && tmpPropOptions.filter(function (option) {
          return filter(value2, option);
        });
      } else {
        var filterRegExp = new RegExp(value2, "i");
        filteredOptions = Array.isArray(tmpPropOptions) && tmpPropOptions.filter(function (option) {
          return filterRegExp.test(option === null || option === void 0 ? void 0 : option.label);
        });
      }

      if (creatable) {
        filteredOptions = filteredOptions.concat([{
          label: value2,
          value: value2
        }]);
      }

      setCurrentOptions(filteredOptions);
    };

    var handleInputChange = function handleInputChange(value2) {
      setInputVal(value2);

      if (isFunction_1(onSearch)) {
        onSearch(value2);
        return;
      }

      handleFilter(value2);
    };

    var defaultLabel = /* @__PURE__ */React__default["default"].createElement("span", {
      className: classNames$1(className, _defineProperty$2({}, "".concat(name, "__placeholder"), !value && !lodash.exports.isNumber(value) || Array.isArray(value) && value.length < 1), _defineProperty$2({}, "".concat(name, "__single"), selectedLabel))
    }, selectedLabel || placeholder || "-\u8BF7\u9009\u62E9-");

    var renderMultipleTags = function renderMultipleTags() {
      if (multiple && Array.isArray(value) && value.length > 0) {
        var tags;

        if (valueType === "value") {
          tags = getMultipleTags(selectedOptions, keys);
        } else {
          tags = getMultipleTags(value, keys);
        }

        if (tags.length > 0) return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, tags.slice(0, minCollapsedNum).map(function (item) {
          return /* @__PURE__ */React__default["default"].createElement(Tag, {
            closable: !disabled,
            key: item.value,
            onClose: function onClose(_ref4) {
              var e = _ref4.e;
              return removeTag(e, item.value, item);
            },
            disabled: disabled,
            size: size
          }, item.label);
        }), collapsedItems, minCollapsedNum && tags.length - minCollapsedNum > 0 && !collapsedItems ? /* @__PURE__ */React__default["default"].createElement(Tag, {
          size: size
        }, " ", "+".concat(tags.length - minCollapsedNum)) : null);
        return !filterable ? defaultLabel : null;
      }

      return !filterable ? defaultLabel : null;
    };

    var renderInput = function renderInput() {
      return /* @__PURE__ */React__default["default"].createElement(Input, {
        value: isString_1(inputVal) ? inputVal : selectedLabel,
        placeholder: multiple && get_1(value, "length") > 0 ? null : selectedLabel || placeholder || "-\u8BF7\u9009\u62E9-",
        className: "".concat(name, "__input"),
        onChange: handleInputChange,
        size: size,
        onFocus: function onFocus(_, context) {
          return _onFocus === null || _onFocus === void 0 ? void 0 : _onFocus({
            value: value,
            e: context === null || context === void 0 ? void 0 : context.e
          });
        },
        onBlur: function onBlur(_, context) {
          return _onBlur === null || _onBlur === void 0 ? void 0 : _onBlur({
            value: value,
            e: context === null || context === void 0 ? void 0 : context.e
          });
        },
        onEnter: function onEnter(_, context) {
          return _onEnter === null || _onEnter === void 0 ? void 0 : _onEnter({
            inputValue: inputVal,
            value: value,
            e: context === null || context === void 0 ? void 0 : context.e
          });
        }
      });
    };

    var onInputClick = function onInputClick(e) {
      e.preventDefault();

      if (!disabled) {
        setShowPopup(!showPopup);
        setInputVal("");
      }
    };

    var onClearValue = function onClearValue(event) {
      event.stopPropagation();

      if (Array.isArray(value)) {
        onChange([]);
      } else {
        onChange("");
      }

      setInputVal(void 0);
      onClear({
        e: event
      });
    };

    var renderSuffixIcon = function renderSuffixIcon() {
      if (loading) {
        return /* @__PURE__ */React__default["default"].createElement(Loading, {
          className: classNames$1(className, "".concat(name, "__right-icon"), "".concat(name, "__active-icon")),
          loading: true,
          size: "small"
        });
      }

      if (clearable && value && isHover) {
        return /* @__PURE__ */React__default["default"].createElement(CloseCircleFilledIcon, {
          onClick: clearable ? onClearValue : void 0,
          className: classNames$1(className, "".concat(name, "__right-icon"), "".concat(name, "__right-icon-clear"))
        });
      }

      return /* @__PURE__ */React__default["default"].createElement(FakeArrow, {
        overlayClassName: "".concat(name, "__right-icon"),
        isActive: showPopup,
        disabled: disabled
      });
    };

    var popupContentProps = {
      onChange: handleChange,
      value: value,
      className: className,
      size: size,
      multiple: multiple,
      showPopup: showPopup,
      setShowPopup: setShowPopup,
      options: currentOptions,
      empty: empty,
      max: max,
      loadingText: loadingText,
      loading: loading,
      valueType: valueType,
      keys: keys
    };

    var renderContent = function renderContent() {
      return /* @__PURE__ */React__default["default"].createElement(PopupContent, _objectSpread$Z({}, popupContentProps), children);
    };

    var renderMultipleInput = function renderMultipleInput() {
      if (valueDisplay) {
        return valueDisplay({
          value: value,
          onClose: removeTag
        }) || defaultLabel;
      }

      return renderMultipleTags();
    };

    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(name, "__wrap"),
      style: _objectSpread$Z({}, style),
      onMouseEnter: function onMouseEnter() {
        return toggleHover(true);
      },
      onMouseLeave: function onMouseLeave() {
        return toggleHover(false);
      }
    }, /* @__PURE__ */React__default["default"].createElement(Popup, _objectSpread$Z({
      trigger: "click",
      ref: overlayRef,
      content: renderContent(),
      placement: "bottom-left",
      visible: showPopup,
      overlayStyle: {
        width: width ? "".concat(width, "px") : "none"
      },
      onVisibleChange: handleShowPopup,
      overlayClassName: classNames$1(className, "".concat(name, "__dropdown"), "".concat(classPrefix, "-popup"), "narrow-scrollbar"),
      className: "".concat(name, "__popup-reference"),
      expandAnimation: true,
      destroyOnClose: true
    }, popupProps), /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(className, name, (_classNames3 = {}, _defineProperty$2(_classNames3, "".concat(classPrefix, "-is-disabled"), disabled), _defineProperty$2(_classNames3, "".concat(classPrefix, "-is-active"), showPopup), _defineProperty$2(_classNames3, "".concat(classPrefix, "-size-s"), size === "small"), _defineProperty$2(_classNames3, "".concat(classPrefix, "-size-l"), size === "large"), _defineProperty$2(_classNames3, "".concat(classPrefix, "-no-border"), !bordered), _defineProperty$2(_classNames3, "".concat(classPrefix, "-has-prefix"), !!prefixIcon), _classNames3)),
      ref: composeRefs(selectRef, ref),
      style: {
        userSelect: "none"
      },
      onClick: onInputClick
    }, /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(name, "__left-icon")
    }, prefixIcon), multiple ? renderMultipleInput() : null, filterable && renderInput(), !multiple && !filterable && defaultLabel, renderSuffixIcon())));
  }, {
    displayName: "Select",
    Option: Option$1,
    OptionGroup: OptionGroup
  });

  var Select = Select$1;

  var pageSizeValidator = function pageSizeValidator(pageSize) {
    var pageSizeNumber;

    if (typeof pageSize !== "number") {
      pageSizeNumber = pageSize - 0;
    } else {
      pageSizeNumber = pageSize;
    }

    return !Number.isFinite(pageSizeNumber) && pageSizeNumber > 0;
  };

  var Option = Select.Option;

  var Pagination$1 = function Pagination(props) {
    var _classNames, _classNames5;

    var _props$defaultCurrent = props.defaultCurrent,
        defaultCurrent = _props$defaultCurrent === void 0 ? 1 : _props$defaultCurrent,
        currentFromProps = props.current,
        _props$theme = props.theme,
        theme = _props$theme === void 0 ? "default" : _props$theme,
        _props$size = props.size,
        size = _props$size === void 0 ? "medium" : _props$size,
        _props$total = props.total,
        total = _props$total === void 0 ? 0 : _props$total,
        _props$defaultPageSiz = props.defaultPageSize,
        defaultPageSize = _props$defaultPageSiz === void 0 ? 10 : _props$defaultPageSiz,
        pageSizeFromProps = props.pageSize,
        _props$showJumper = props.showJumper,
        showJumper = _props$showJumper === void 0 ? false : _props$showJumper,
        _props$disabled = props.disabled,
        disabled = _props$disabled === void 0 ? false : _props$disabled,
        _props$foldedMaxPageB = props.foldedMaxPageBtn,
        foldedMaxPageBtn = _props$foldedMaxPageB === void 0 ? 5 : _props$foldedMaxPageB,
        _props$maxPageBtn = props.maxPageBtn,
        maxPageBtn = _props$maxPageBtn === void 0 ? 10 : _props$maxPageBtn,
        _props$totalContent = props.totalContent,
        totalContent = _props$totalContent === void 0 ? true : _props$totalContent,
        _props$pageSizeOption = props.pageSizeOptions,
        pageSizeOptions = _props$pageSizeOption === void 0 ? [5, 10, 20, 50] : _props$pageSizeOption,
        _props$onChange = props.onChange,
        onChange = _props$onChange === void 0 ? noop : _props$onChange,
        onCurrentChange = props.onCurrentChange,
        onPageSizeChange = props.onPageSizeChange;

    var _useLocaleReceiver = useLocaleReceiver("pagination"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
        locale = _useLocaleReceiver2[0],
        t = _useLocaleReceiver2[1];

    var _useDefault = useDefault(pageSizeFromProps, defaultPageSize, onPageSizeChange),
        _useDefault2 = _slicedToArray(_useDefault, 2),
        pageSize = _useDefault2[0],
        setPageSize = _useDefault2[1];

    var _useDefault3 = useDefault(currentFromProps, defaultCurrent, onCurrentChange),
        _useDefault4 = _slicedToArray(_useDefault3, 2),
        current = _useDefault4[0],
        setCurrent = _useDefault4[1];

    var _useState = React.useState(1),
        _useState2 = _slicedToArray(_useState, 2),
        pageCount = _useState2[0],
        setPageCount = _useState2[1];

    var _useState3 = React.useState(false),
        _useState4 = _slicedToArray(_useState3, 2),
        hoverPreMore = _useState4[0],
        toggleHoverPreMore = _useState4[1];

    var _useState5 = React.useState(false),
        _useState6 = _slicedToArray(_useState5, 2),
        hoverNextMore = _useState6[0],
        toggleHoverNextMore = _useState6[1];

    var simpleInputRef = React.useRef(null);
    var min = 1;
    var pivot = Math.ceil((foldedMaxPageBtn - 1) / 2);

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var name = "".concat(classPrefix, "-pagination");
    React.useEffect(function () {
      var calCount = Math.ceil(total / pageSize);
      setPageCount(calCount > 0 ? calCount : 1);
    }, [pageSize, total]);
    var pageList = React.useMemo(function () {
      var isPrevMoreShow = 2 + pivot < current;
      var isNextMoreShow = pageCount - 1 - pivot > current;
      var array = [];
      var start;
      var end;

      if (pageCount > maxPageBtn) {
        if (isPrevMoreShow && isNextMoreShow) {
          start = current - pivot;
          end = current + pivot;
        } else {
          start = isPrevMoreShow ? pageCount - foldedMaxPageBtn + 1 : 2;
          end = isPrevMoreShow ? pageCount - 1 : foldedMaxPageBtn;
        }
      } else {
        start = 1;
        end = pageCount;
      }

      for (var i = start; i <= end; i++) {
        array.push(i);
      }

      return array;
    }, [current, pageCount, foldedMaxPageBtn, maxPageBtn, pivot]);

    var changeCurrent = function changeCurrent(nextCurrent, nextPageSize) {
      if (!nextPageSize && !pageSizeValidator(nextPageSize)) {
        var _pageSizeOptions$;

        nextPageSize = pageSize !== null && pageSize !== void 0 ? pageSize : typeof pageSizeOptions[0] === "number" ? pageSizeOptions[0] : (_pageSizeOptions$ = pageSizeOptions[0]) === null || _pageSizeOptions$ === void 0 ? void 0 : _pageSizeOptions$.value;
      }

      if (disabled) return;

      if (pageCount < nextCurrent) {
        setCurrent(pageCount, {
          current: pageCount,
          previous: current,
          pageSize: nextPageSize
        });
        return;
      }

      if (nextCurrent < min) {
        setCurrent(min, {
          current: min,
          previous: current,
          pageSize: nextPageSize
        });
        return;
      }

      setCurrent(nextCurrent, {
        current: nextCurrent,
        previous: current,
        pageSize: nextPageSize
      });

      if (simpleInputRef.current) {
        simpleInputRef.current.value = String(nextCurrent);
      }

      onChange({
        current: nextCurrent,
        previous: current,
        pageSize: nextPageSize
      });
    };

    var changePageSize = function changePageSize(nextPageSize) {
      var nextCurrent = Math.min(current, Math.ceil(total / nextPageSize));
      var pageInfo = {
        current: nextCurrent,
        previous: current,
        pageSize: nextPageSize
      };
      setPageSize(nextPageSize, pageInfo);

      if (current !== nextCurrent) {
        changeCurrent(nextCurrent, nextPageSize);
      } else {
        onChange(pageInfo);
      }
    };

    var onSimpleCurrentChange = function onSimpleCurrentChange(nextCurrent) {
      if (disabled || pageCount < nextCurrent || nextCurrent < min) return;
      setCurrent(nextCurrent, {
        current: nextCurrent,
        previous: current,
        pageSize: pageSize
      });
      onChange({
        current: nextCurrent,
        previous: current,
        pageSize: pageSize
      });
    };

    var onPageInputChange = function onPageInputChange(value) {
      setCurrent(value, {
        current: value,
        previous: current,
        pageSize: pageSize
      });
    };

    var onPageInputKeyUp = function onPageInputKeyUp(value, context) {
      var e = context.e;
      if (e.keyCode !== 13
      /* ENTER */
      ) return;
      changeCurrent(value);
    };

    var renderTotalContent = function renderTotalContent() {
      if (typeof totalContent === "boolean") {
        return totalContent ? t(locale.total, {
          total: total
        }) : null;
      }

      if (typeof totalContent === "string") return totalContent;

      if (typeof totalContent === "function") {
        var start = (current - min) * pageSize;
        var end = Math.min(total, start + pageSize);
        return totalContent(total, [start + min, end]);
      }
    };

    var isFolded = pageCount > maxPageBtn;
    var renderPaginationBtns = /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, isFolded && /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, /* @__PURE__ */React__default["default"].createElement("li", {
      key: 1,
      className: classNames$1("".concat(name, "__number"), (_classNames = {}, _defineProperty$2(_classNames, "".concat(classPrefix, "-is-disabled"), disabled), _defineProperty$2(_classNames, "".concat(classPrefix, "-is-current"), current === 1), _classNames)),
      onClick: function onClick() {
        return changeCurrent(1);
      }
    }, "1"), 2 + pivot < current && /* @__PURE__ */React__default["default"].createElement("li", {
      className: classNames$1("".concat(name, "__number"), "".concat(name, "__number--more"), _defineProperty$2({}, "".concat(classPrefix, "-is-disabled"), disabled)),
      onMouseEnter: function onMouseEnter() {
        return toggleHoverPreMore(true);
      },
      onMouseLeave: function onMouseLeave() {
        return toggleHoverPreMore(false);
      },
      onClick: function onClick() {
        return changeCurrent(current - foldedMaxPageBtn);
      }
    }, !hoverPreMore ? /* @__PURE__ */React__default["default"].createElement(EllipsisIcon, null) : /* @__PURE__ */React__default["default"].createElement(ChevronLeftDoubleIcon, null))), pageList.map(function (item) {
      var _classNames3;

      return /* @__PURE__ */React__default["default"].createElement("li", {
        key: item,
        className: classNames$1("".concat(name, "__number"), (_classNames3 = {}, _defineProperty$2(_classNames3, "".concat(classPrefix, "-is-disabled"), disabled), _defineProperty$2(_classNames3, "".concat(classPrefix, "-is-current"), current === item), _classNames3)),
        onClick: function onClick() {
          return changeCurrent(item);
        }
      }, item);
    }), isFolded && /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, pageCount - 1 - pivot > current && /* @__PURE__ */React__default["default"].createElement("li", {
      className: classNames$1("".concat(name, "__number"), "".concat(name, "__number--more"), _defineProperty$2({}, "".concat(classPrefix, "-is-disabled"), disabled)),
      onMouseEnter: function onMouseEnter() {
        return toggleHoverNextMore(true);
      },
      onMouseLeave: function onMouseLeave() {
        return toggleHoverNextMore(false);
      },
      onClick: function onClick() {
        return changeCurrent(current + foldedMaxPageBtn);
      }
    }, !hoverNextMore ? /* @__PURE__ */React__default["default"].createElement(EllipsisIcon, null) : /* @__PURE__ */React__default["default"].createElement(ChevronRightDoubleIcon, null)), /* @__PURE__ */React__default["default"].createElement("li", {
      key: pageCount,
      className: classNames$1("".concat(name, "__number"), (_classNames5 = {}, _defineProperty$2(_classNames5, "".concat(classPrefix, "-is-disabled"), disabled), _defineProperty$2(_classNames5, "".concat(classPrefix, "-is-current"), current === pageCount), _classNames5)),
      onClick: function onClick() {
        return changeCurrent(pageCount);
      }
    }, pageCount)));
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(name, _defineProperty$2({}, "".concat(classPrefix, "-size-s"), size === "small"))
    }, totalContent && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(name, "__total")
    }, renderTotalContent()), pageSizeOptions instanceof Array && pageSizeOptions.length ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(name, "__select")
    }, /* @__PURE__ */React__default["default"].createElement(Select, {
      size: size,
      value: pageSize,
      disabled: disabled,
      onChange: changePageSize
    }, pageSizeOptions.map(function (item) {
      return typeof item === "number" ? /* @__PURE__ */React__default["default"].createElement(Option, {
        key: item,
        label: t(locale.itemsPerPage, {
          size: item
        }),
        value: item
      }) : /* @__PURE__ */React__default["default"].createElement(Option, {
        key: item.value,
        label: item.label,
        value: item.value
      });
    }))) : null, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(name, "__btn"), "".concat(name, "__btn-prev"), _defineProperty$2({}, "".concat(classPrefix, "-is-disabled"), disabled || current === min)),
      onClick: function onClick() {
        return changeCurrent(current - 1);
      }
    }, /* @__PURE__ */React__default["default"].createElement(ChevronLeftIcon, null)), theme === "default" && /* @__PURE__ */React__default["default"].createElement("ul", {
      className: "".concat(name, "__pager")
    }, renderPaginationBtns), theme === "simple" && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(name, "__select")
    }, /* @__PURE__ */React__default["default"].createElement(Select, {
      size: size,
      value: current,
      disabled: disabled,
      onChange: onSimpleCurrentChange
    }, Array(pageCount).fill(0).map(function (_, i) {
      return i + 1;
    }).map(function (item) {
      return /* @__PURE__ */React__default["default"].createElement(Option, {
        key: item,
        label: "".concat(item, "/").concat(pageCount),
        value: item
      }, item, "/", pageCount);
    }))), /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(name, "__btn"), "".concat(name, "__btn-next"), _defineProperty$2({}, "".concat(classPrefix, "-is-disabled"), disabled || current === pageCount)),
      onClick: function onClick() {
        return changeCurrent(current + 1);
      }
    }, /* @__PURE__ */React__default["default"].createElement(ChevronRightIcon, null)), showJumper && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(name, "__jump")
    }, t(locale.jumpTo), /* @__PURE__ */React__default["default"].createElement(InputNumber, {
      className: "".concat(classPrefix, "-pagination__input"),
      min: min,
      theme: "normal",
      max: pageCount,
      disabled: disabled,
      onChange: onPageInputChange,
      onKeyup: onPageInputKeyUp
    }), t(locale.page)));
  };

  var Pagination = Pagination$1;

  function ownKeys$Y(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$Y(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$Y(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$Y(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function flattenColumns(columns) {
    var result = [];
    columns.forEach(function (column) {
      var children = column.children;

      if (children !== null && children !== void 0 && children.length) {
        result.push.apply(result, _toConsumableArray(flattenColumns(children)));
      } else {
        result.push(_objectSpread$Y({}, column));
      }
    });
    return result;
  }

  function useColumns(props) {
    var _props$columns = props.columns,
        columns = _props$columns === void 0 ? [] : _props$columns;
    var flattenedColumns = React.useMemo(function () {
      return flattenColumns(columns);
    }, [columns]);
    return [columns, flattenedColumns];
  }

  var ScrollDirection = /* @__PURE__ */function (ScrollDirection2) {
    ScrollDirection2["X"] = "x";
    ScrollDirection2["Y"] = "y";
    ScrollDirection2["UNKNOWN"] = "unknown";
    return ScrollDirection2;
  }(ScrollDirection || {});
  var preScrollLeft;
  var preScrollTop;
  var getScrollDirection = function getScrollDirection(scrollLeft, scrollTop) {
    var direction = "unknown"
    /* UNKNOWN */
    ;

    if (preScrollTop !== scrollTop) {
      direction = "y"
      /* Y */
      ;
    } else if (preScrollLeft !== scrollLeft) {
      direction = "x"
      /* X */
      ;
    }

    preScrollTop = scrollTop;
    preScrollLeft = scrollLeft;
    return direction;
  };

  function TableEmptyBody$1(props) {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _props$empty = props.empty,
        empty = _props$empty === void 0 ? "\u6682\u65E0\u6570\u636E" : _props$empty;
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-table__empty"),
      style: {
        borderBottom: 0
      }
    }, typeof empty === "function" ? empty() : empty);
  }

  var TableContext = /*#__PURE__*/React.createContext({
    fixedHeader: false,
    flattenColumns: []
  });
  var useTableContext = function useTableContext() {
    return React.useContext(TableContext);
  };
  var TableContextProvider = TableContext.Provider;

  function ownKeys$X(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$X(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$X(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$X(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var TableCell = function TableCell(props) {
    var _classnames;

    var _props$style = props.style,
        style = _props$style === void 0 ? {} : _props$style,
        width = props.width,
        type = props.type,
        record = props.record,
        colKey = props.colKey,
        customRender = props.customRender,
        colIndex = props.colIndex,
        fixed = props.fixed,
        align = props.align,
        ellipsis = props.ellipsis,
        columns = props.columns,
        rowIndex = props.rowIndex,
        className = props.className,
        rowSpan = props.rowSpan,
        colSpan = props.colSpan,
        isFirstChildTdSetBorderWidth = props.isFirstChildTdSetBorderWidth;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useTableContext = useTableContext(),
        flattenColumns = _useTableContext.flattenColumns;

    var _useState = React.useState(0),
        _useState2 = _slicedToArray(_useState, 2),
        offset = _useState2[0],
        setOffset = _useState2[1];

    var _useState3 = React.useState(false),
        _useState4 = _slicedToArray(_useState3, 2),
        isBoundary = _useState4[0],
        setIsBoundary = _useState4[1];

    var ref = React.useRef();
    React.useLayoutEffect(function () {
      if (ref.current) {
        var offset2 = 0;
        var clientWidth = ref.current.clientWidth;
        var fixedColumns = flattenColumns.filter(function (column) {
          return column.fixed === fixed;
        });
        var indexInFixedColumns = fixedColumns.findIndex(function (_ref) {
          var key = _ref.colKey;
          return key === colKey;
        });
        fixedColumns.forEach(function (_, cur) {
          if (fixed === "right" && cur > indexInFixedColumns || fixed === "left" && cur < indexInFixedColumns) {
            offset2 += clientWidth;
          }
        });
        setOffset(offset2);
        var isBoundary2 = fixed === "left" ? indexInFixedColumns === fixedColumns.length - 1 : indexInFixedColumns === 0;
        setIsBoundary(isBoundary2);
      }
    }, [ref, flattenColumns, colKey, fixed]);
    var cellNode = customRender({
      type: type,
      row: record,
      rowIndex: rowIndex,
      col: columns === null || columns === void 0 ? void 0 : columns[colIndex],
      colIndex: colIndex
    });

    var cellStyle = _objectSpread$X({}, style);

    if (fixed) {
      cellStyle.position = "sticky";
      cellStyle[fixed] = offset;
    }

    if (width && !fixed) {
      cellStyle.overflow = "hidden";
    }

    if (isFirstChildTdSetBorderWidth) {
      cellStyle.borderWidth = 1;
    }

    return /* @__PURE__ */React__default["default"].createElement("td", {
      ref: ref,
      style: cellStyle,
      className: classNames$1((_classnames = {}, _defineProperty$2(_classnames, "".concat(classPrefix, "-table__cell--fixed-").concat(fixed), fixed), _defineProperty$2(_classnames, "".concat(classPrefix, "-table__cell--fixed-").concat(fixed, "-").concat(fixed === "left" ? "last" : "first"), fixed && isBoundary), _defineProperty$2(_classnames, "".concat(classPrefix, "-align-").concat(align), align), _defineProperty$2(_classnames, "".concat(classPrefix, "-text-ellipsis"), ellipsis), _defineProperty$2(_classnames, "".concat(className), !!className), _classnames)),
      rowSpan: rowSpan,
      colSpan: colSpan
    }, cellNode);
  };

  var _excluded$c = ["children"],
      _excluded2 = ["title", "colKey", "rowSpan", "colSpan", "render"];

  function ownKeys$W(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$W(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$W(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$W(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var TableHeader = function TableHeader(props) {
    var columns = props.columns;
    var columnsDepth = getNodeDepth(columns);
    var trsColumns = getTrsColumns(columns, columnsDepth);

    function getTrsColumns(nodes, columnsDepth2) {
      var currentDepth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      var trsColumns2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
      var trsColumnsNew = trsColumns2;
      nodes.forEach(function (item) {
        var children = item.children,
            rest = _objectWithoutProperties$1(item, _excluded$c);

        if (item.children) {
          trsColumnsNew = getTrsColumns(children, columnsDepth2, currentDepth + 1, trsColumnsNew);
        }

        var trIndex = currentDepth - 1;
        var currentTr = trsColumns2[trIndex];

        var _getRowSpanAndColSpan = getRowSpanAndColSpan({
          node: item,
          columnsDepth: columnsDepth2,
          currentDepth: currentDepth
        }),
            rowSpan = _getRowSpanAndColSpan.rowSpan,
            colSpan = _getRowSpanAndColSpan.colSpan;

        var tdIndex = !currentTr ? 0 : currentTr.length;

        var currentTd = _objectSpread$W(_objectSpread$W({
          colKey: "tr-".concat(trIndex, "_td-").concat(tdIndex)
        }, rest), {}, {
          rowSpan: rowSpan,
          colSpan: colSpan
        });

        if (!currentTr) {
          trsColumnsNew[trIndex] = [currentTd];
        } else {
          trsColumnsNew[trIndex] = [].concat(_toConsumableArray(currentTr), [currentTd]);
        }
      });
      return trsColumnsNew;
    }

    function getRowSpanAndColSpan(_ref) {
      var node = _ref.node,
          columnsDepth2 = _ref.columnsDepth,
          currentDepth = _ref.currentDepth;
      var rowSpan = 1;
      var colSpan = 1;

      if (node.children) {
        rowSpan = 1;
        colSpan = getLeafNodeCount(node.children);
      } else {
        rowSpan = columnsDepth2 - currentDepth + 1;
        colSpan = 1;
      }

      return {
        rowSpan: rowSpan,
        colSpan: colSpan
      };
    }

    function getNodeDepth(nodes) {
      var currentDepth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      var depthNew = depth;
      var currentDepthNew = currentDepth;
      nodes === null || nodes === void 0 ? void 0 : nodes.forEach(function (_ref2) {
        var children = _ref2.children;

        if (children) {
          currentDepthNew += 1;

          if (currentDepthNew > depthNew) {
            depthNew = currentDepthNew;
          }

          depthNew = getNodeDepth(children, currentDepthNew, depthNew);
        }
      });
      return depthNew;
    }

    function getLeafNodeCount(nodes) {
      var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var countNew = count;
      nodes.forEach(function (_ref3) {
        var children = _ref3.children;

        if (children) {
          countNew = getLeafNodeCount(children, countNew);
        } else {
          countNew += 1;
        }
      });
      return countNew;
    }

    function getCustomRender(_ref4) {
      var title = _ref4.title,
          render = _ref4.render;

      if (typeof title === "string" || /*#__PURE__*/React.isValidElement(title)) {
        return function () {
          return title;
        };
      }

      if (isFunction_1(title)) {
        return title;
      }

      if (isFunction_1(render)) {
        return render;
      }

      return function () {
        return null;
      };
    }

    function getIsFirstChildTdSetBorderWidth(_ref5) {
      var trsColumns2 = _ref5.trsColumns,
          rowIndex = _ref5.rowIndex,
          colIndex = _ref5.colIndex;

      if (colIndex === 0 && rowIndex > 0) {
        var preRowColumns = trsColumns2[rowIndex - 1];

        if (preRowColumns[0].rowSpan > 1) {
          return true;
        }
      }

      return false;
    }

    return /* @__PURE__ */React__default["default"].createElement("thead", null, trsColumns.map(function (trsColumnsItem, rowIndex) {
      return /* @__PURE__ */React__default["default"].createElement("tr", {
        key: rowIndex
      }, trsColumnsItem.map(function (column, colIndex) {
        var title = column.title,
            colKey = column.colKey,
            rowSpan = column.rowSpan,
            colSpan = column.colSpan,
            render = column.render,
            rest = _objectWithoutProperties$1(column, _excluded2);

        var customRender = getCustomRender({
          title: title,
          render: render
        });
        var isFirstChildTdSetBorderWidth = getIsFirstChildTdSetBorderWidth({
          trsColumns: trsColumns,
          rowIndex: rowIndex,
          colIndex: colIndex
        });
        return /* @__PURE__ */React__default["default"].createElement(TableCell, _objectSpread$W({
          type: "title",
          key: colKey,
          colKey: colKey,
          colIndex: colIndex,
          customRender: customRender,
          rowSpan: rowSpan,
          colSpan: colSpan,
          isFirstChildTdSetBorderWidth: isFirstChildTdSetBorderWidth
        }, rest));
      }));
    }));
  };

  var _excluded$b = ["colKey", "cell", "render"];

  function ownKeys$V(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$V(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$V(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$V(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var TableRow = function TableRow(props) {
    var record = props.record,
        rowClassName = props.rowClassName,
        rowIndex = props.rowIndex,
        rowKey = props.rowKey,
        rowspanAndColspan = props.rowspanAndColspan,
        isRowspanAndColspanFn = props.isRowspanAndColspanFn,
        rowSkipTdSpanColIndexsMap = props.rowSkipTdSpanColIndexsMap,
        dataLength = props.dataLength,
        _props$rowEvents = props.rowEvents,
        rowEvents = _props$rowEvents === void 0 ? {} : _props$rowEvents,
        expandedRow = props.expandedRow,
        expandOnRowClick = props.expandOnRowClick,
        handleExpandChange = props.handleExpandChange;

    var _useTableContext = useTableContext(),
        flattenColumns = _useTableContext.flattenColumns;

    var flattenColumnsLength = flattenColumns === null || flattenColumns === void 0 ? void 0 : flattenColumns.length;
    var baseRow = flattenColumns.map(function (column, colIndex) {
      var colKey = column.colKey,
          cell = column.cell,
          render = column.render,
          restColumnProps = _objectWithoutProperties$1(column, _excluded$b);

      var _getRowSpanAndColSpan = getRowSpanAndColSpanAndIsSkipRenderTd({
        isRowspanAndColspanFn: isRowspanAndColspanFn,
        rowspanAndColspan: rowspanAndColspan,
        rowSkipTdSpanColIndexsMap: rowSkipTdSpanColIndexsMap,
        rowIndex: rowIndex,
        colIndex: colIndex,
        col: column,
        row: record
      }),
          isSkipRenderTd = _getRowSpanAndColSpan.isSkipRenderTd,
          rowSpan = _getRowSpanAndColSpan.rowSpan,
          colSpan = _getRowSpanAndColSpan.colSpan,
          isFirstChildTdSetBorderWidth = _getRowSpanAndColSpan.isFirstChildTdSetBorderWidth;

      if (isSkipRenderTd) {
        return null;
      }

      var customRender = getCustomRender({
        record: record,
        colKey: colKey,
        cell: cell,
        render: render
      });
      return /* @__PURE__ */React__default["default"].createElement(TableCell, _objectSpread$V({
        key: colKey,
        type: "cell",
        rowIndex: rowIndex,
        colIndex: colIndex,
        record: record,
        colKey: colKey,
        columns: flattenColumns,
        customRender: customRender,
        rowSpan: rowSpan,
        colSpan: colSpan,
        isFirstChildTdSetBorderWidth: isFirstChildTdSetBorderWidth
      }, restColumnProps));
    });
    var classes = rowClassName;

    if (typeof rowClassName === "function") {
      classes = rowClassName({
        row: record,
        rowIndex: rowIndex
      });
    }

    function getCustomRender(_ref) {
      var record2 = _ref.record,
          colKey = _ref.colKey,
          cell = _ref.cell,
          render = _ref.render;

      if (typeof cell === "string" || /*#__PURE__*/React.isValidElement(cell)) {
        return function () {
          return cell;
        };
      }

      if (isFunction_1(cell)) {
        return cell;
      }

      if (isFunction_1(render)) {
        return render;
      }

      return function () {
        return get_1(record2, colKey);
      };
    }

    function getRowSpanAndColSpanAndIsSkipRenderTd(_ref2) {
      var isRowspanAndColspanFn2 = _ref2.isRowspanAndColspanFn,
          rowspanAndColspan2 = _ref2.rowspanAndColspan,
          rowSkipTdSpanColIndexsMap2 = _ref2.rowSkipTdSpanColIndexsMap,
          rowIndex2 = _ref2.rowIndex,
          colIndex = _ref2.colIndex,
          col = _ref2.col,
          row = _ref2.row;
      var rowSpan;
      var colSpan;
      var isSkipRenderTd = false;
      var isFirstChildTdSetBorderWidth = false;

      if (isRowspanAndColspanFn2) {
        var _rowSkipTdSpanColInde;

        var rowspanAndColspanValue = rowspanAndColspan2({
          rowIndex: rowIndex2,
          colIndex: colIndex,
          col: col,
          row: row
        });
        var isRowspanAndColspanValueValid = rowspanAndColspanValue && (rowspanAndColspanValue.rowspan || rowspanAndColspanValue.colspan);

        if (isRowspanAndColspanValueValid) {
          rowSpan = rowspanAndColspanValue.rowspan;
          colSpan = rowspanAndColspanValue.colspan;

          if (colSpan && colSpan > 1 && colSpan < flattenColumnsLength) {
            var minIndex = colIndex + 1;
            var maxIndex = colIndex + colSpan;
            var rowSkipTdSpanColIndexs = getRowSkipTdSpanColIndexs({
              minIndex: minIndex,
              maxIndex: maxIndex,
              rowSkipTdSpanColIndexsMap: rowSkipTdSpanColIndexsMap2,
              rowIndex: rowIndex2
            });
            rowSkipTdSpanColIndexsMap2[rowIndex2] = rowSkipTdSpanColIndexs;
          }

          if (rowSpan && rowSpan > 1 && rowSpan < dataLength) {
            var minRowIndex = rowIndex2 + 1;
            var maxRowIndex = rowIndex2 + rowSpan;
            var _minIndex = colIndex;

            var _maxIndex = colIndex + colSpan;

            Array.from(new Array(maxRowIndex - minRowIndex)).forEach(function (item, index) {
              var skipRowIndex = index + minRowIndex;
              var rowSkipTdSpanColIndexs = getRowSkipTdSpanColIndexs({
                minIndex: _minIndex,
                maxIndex: _maxIndex,
                rowSkipTdSpanColIndexsMap: rowSkipTdSpanColIndexsMap2,
                rowIndex: skipRowIndex
              });
              rowSkipTdSpanColIndexsMap2[skipRowIndex] = rowSkipTdSpanColIndexs;
            });
          }
        }

        isSkipRenderTd = (_rowSkipTdSpanColInde = rowSkipTdSpanColIndexsMap2[rowIndex2]) === null || _rowSkipTdSpanColInde === void 0 ? void 0 : _rowSkipTdSpanColInde.includes(colIndex);
        isFirstChildTdSetBorderWidth = getIsFirstChildTdSetBorderWidth({
          rowSkipTdSpanColIndexsMap: rowSkipTdSpanColIndexsMap2,
          rowIndex: rowIndex2
        });
      }

      return {
        rowSpan: rowSpan,
        colSpan: colSpan,
        isSkipRenderTd: isSkipRenderTd,
        isFirstChildTdSetBorderWidth: isFirstChildTdSetBorderWidth
      };
    }

    function getRowSkipTdSpanColIndexs(_ref3) {
      var minIndex = _ref3.minIndex,
          maxIndex = _ref3.maxIndex,
          rowSkipTdSpanColIndexsMap2 = _ref3.rowSkipTdSpanColIndexsMap,
          rowIndex2 = _ref3.rowIndex;
      var rowSkipTdSpanColIndexs = rowSkipTdSpanColIndexsMap2[rowIndex2] || [];
      Array.from(new Array(maxIndex - minIndex)).forEach(function (item, index) {
        var skipColIndex = index + minIndex;

        if (!rowSkipTdSpanColIndexs.includes(skipColIndex)) {
          rowSkipTdSpanColIndexs.push(skipColIndex);
        }
      });
      return rowSkipTdSpanColIndexs;
    }

    function getIsFirstChildTdSetBorderWidth(_ref4) {
      var rowSkipTdSpanColIndexsMap2 = _ref4.rowSkipTdSpanColIndexsMap,
          rowIndex2 = _ref4.rowIndex;

      if (rowIndex2 > 0) {
        var rowSkipTdSpanColIndexs = rowSkipTdSpanColIndexsMap2 === null || rowSkipTdSpanColIndexsMap2 === void 0 ? void 0 : rowSkipTdSpanColIndexsMap2[rowIndex2];

        if (rowSkipTdSpanColIndexs && rowSkipTdSpanColIndexs[0] === 0) {
          return true;
        }
      }

      return false;
    }

    function getExpandOnClickEvent() {
      if (expandOnRowClick && expandedRow) {
        var apiEvent = rowEvents.onClick;
        var rowKeyValue = get_1(record, rowKey) || rowIndex;
        var onClick;

        if (apiEvent) {
          onClick = function onClick(e) {
            apiEvent(e);
            handleExpandChange(record, rowKeyValue);
          };
        } else {
          onClick = function onClick() {
            handleExpandChange(record, rowKeyValue);
          };
        }

        return {
          onClick: onClick
        };
      }

      return {};
    }

    return /* @__PURE__ */React__default["default"].createElement("tr", _objectSpread$V(_objectSpread$V({
      className: classes
    }, rowEvents), getExpandOnClickEvent()), baseRow);
  };

  function ownKeys$U(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$U(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$U(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$U(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var rowEventsMap = {
    onClick: "onRowClick",
    onDoubleClick: "onRowDbClick",
    onMouseOver: "onRowHover",
    onMouseDown: "onRowMousedown",
    onMouseEnter: "onRowMouseenter",
    onMouseLeave: "onRowMouseleave",
    onMouseUp: "onRowMouseup"
  };
  var TableBody = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _props$data = props.data,
        data = _props$data === void 0 ? [] : _props$data,
        rowKey = props.rowKey,
        rowClassName = props.rowClassName,
        expandedRow = props.expandedRow,
        expandOnRowClick = props.expandOnRowClick,
        handleExpandChange = props.handleExpandChange,
        renderExpandRow = props.renderExpandRow,
        rowspanAndColspan = props.rowspanAndColspan;
    var rowSkipTdSpanColIndexsMap = {};
    var isRowspanAndColspanFn = isFunction_1(rowspanAndColspan);
    var rowEvents = getRowEvents();
    var rows = data.map(function (row, index) {
      var rowKeyValue = get_1(row, rowKey) || index;
      return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, {
        key: rowKeyValue
      }, /* @__PURE__ */React__default["default"].createElement(TableRow, _objectSpread$U(_objectSpread$U({
        record: row,
        rowIndex: index,
        rowKey: rowKey,
        rowClassName: rowClassName,
        expandedRow: expandedRow,
        expandOnRowClick: expandOnRowClick,
        handleExpandChange: handleExpandChange
      }, isRowspanAndColspanFn ? {
        isRowspanAndColspanFn: isRowspanAndColspanFn,
        rowspanAndColspan: rowspanAndColspan,
        rowSkipTdSpanColIndexsMap: rowSkipTdSpanColIndexsMap,
        dataLength: data.length
      } : {}), {}, {
        rowEvents: rowEvents
      })), expandedRow ? renderExpandRow(row, index, rowKeyValue) : null);
    });

    function getRowEvents() {
      var rowEventProps = {};
      Object.keys(rowEventsMap).forEach(function (eventName) {
        var apiEventName = rowEventsMap[eventName];
        var apiEvent = props[apiEventName];

        if (apiEvent) {
          rowEventProps[eventName] = apiEvent;
        }
      });
      return rowEventProps;
    }

    return /* @__PURE__ */React__default["default"].createElement("tbody", {
      ref: ref,
      className: "".concat(classPrefix, "-table__body")
    }, rows);
  });

  function TableLoadingBody(props) {
    var loading = props.loading;
    if (!loading) return null;
    var result = null;
    if (loading) result = loading;
    if (isFunction_1(loading)) result = loading();
    return result;
  }

  function TableEmptyBody(props) {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var asyncLoading = props.asyncLoading,
        onAsyncLoadingClick = props.onAsyncLoadingClick;
    if (!asyncLoading) return null;

    if (asyncLoading === "loading") {
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-table__async-loading ").concat(classPrefix, "-is-loading"),
        onClick: function onClick() {
          onAsyncLoadingClick({
            status: "loading"
          });
        }
      }, /* @__PURE__ */React__default["default"].createElement(Loading, {
        loading: true,
        size: "small"
      }), /* @__PURE__ */React__default["default"].createElement("span", null, "\u6B63\u5728\u52A0\u8F7D\u4E2D\uFF0C\u8BF7\u7A0D\u540E"));
    }

    if (asyncLoading === "load-more") {
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-table__async-loading ").concat(classPrefix, "-is-load-more"),
        onClick: function onClick() {
          onAsyncLoadingClick({
            status: "load-more"
          });
        }
      }, "\u70B9\u51FB\u52A0\u8F7D\u66F4\u591A");
    }

    var result = null;
    if (asyncLoading) result = asyncLoading;
    if (isFunction_1(asyncLoading)) result = asyncLoading();
    return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, result);
  }

  var TableColGroup = function TableColGroup(_ref) {
    var columns = _ref.columns;
    return /* @__PURE__ */React__default["default"].createElement("colgroup", null, columns.map(function (_ref2, index) {
      var width = _ref2.width,
          minWidth = _ref2.minWidth,
          colKey = _ref2.colKey;
      return /* @__PURE__ */React__default["default"].createElement("col", {
        key: colKey || index,
        style: {
          width: width,
          minWidth: minWidth
        }
      });
    }));
  };

  function TableFooter(props) {
    var children = props.children;

    var _useTableContext = useTableContext(),
        flattenColumns = _useTableContext.flattenColumns;

    return /* @__PURE__ */React__default["default"].createElement("tfoot", null, /* @__PURE__ */React__default["default"].createElement("tr", null, /* @__PURE__ */React__default["default"].createElement("td", {
      colSpan: flattenColumns.length
    }, children)));
  }

  function ownKeys$T(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$T(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$T(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$T(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function BaseTable(props) {
    var _classNames, _classNames2;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _props$bordered = props.bordered,
        bordered = _props$bordered === void 0 ? false : _props$bordered,
        _props$stripe = props.stripe,
        stripe = _props$stripe === void 0 ? false : _props$stripe,
        _props$hover = props.hover,
        hover = _props$hover === void 0 ? false : _props$hover,
        _props$tableLayout = props.tableLayout,
        tableLayout = _props$tableLayout === void 0 ? "fixed" : _props$tableLayout,
        _props$verticalAlign = props.verticalAlign,
        verticalAlign = _props$verticalAlign === void 0 ? "center" : _props$verticalAlign,
        _props$size = props.size,
        size = _props$size === void 0 ? "medium" : _props$size,
        maxHeight = props.maxHeight,
        height = props.height,
        loading = props.loading,
        empty = props.empty,
        _props$data = props.data,
        data = _props$data === void 0 ? [] : _props$data,
        pagination = props.pagination,
        onPageChange = props.onPageChange,
        onScrollX = props.onScrollX,
        onScrollY = props.onScrollY,
        asyncLoading = props.asyncLoading;

    var _useColumns = useColumns(props),
        _useColumns2 = _slicedToArray(_useColumns, 2),
        columns = _useColumns2[0],
        flattenColumns = _useColumns2[1];

    var hasPagination = false;

    var _useState = React.useState((pagination === null || pagination === void 0 ? void 0 : pagination.current) || (pagination === null || pagination === void 0 ? void 0 : pagination.defaultCurrent) || 1),
        _useState2 = _slicedToArray(_useState, 2),
        innerCurrent = _useState2[0],
        setInnerCurrentPagination = _useState2[1];

    var _useState3 = React.useState((pagination === null || pagination === void 0 ? void 0 : pagination.pageSize) || (pagination === null || pagination === void 0 ? void 0 : pagination.defaultPageSize) || 10),
        _useState4 = _slicedToArray(_useState3, 2),
        innerPageSize = _useState4[0],
        setInnerPageSize = _useState4[1];

    var isControlledPagination = typeof (pagination === null || pagination === void 0 ? void 0 : pagination.current) !== "undefined" && typeof (pagination === null || pagination === void 0 ? void 0 : pagination.pageSize) !== "undefined";
    useUpdateEffect(function () {
      if (isControlledPagination) {
        setInnerCurrentPagination(pagination === null || pagination === void 0 ? void 0 : pagination.current);
        setInnerPageSize(pagination === null || pagination === void 0 ? void 0 : pagination.pageSize);
      }
    }, [pagination]);

    var onPageSizeChange = function onPageSizeChange(pageSize, pageInfo) {
      var _pagination$onPageSiz;

      pagination === null || pagination === void 0 ? void 0 : (_pagination$onPageSiz = pagination.onPageSizeChange) === null || _pagination$onPageSiz === void 0 ? void 0 : _pagination$onPageSiz.call(pagination, pageSize, pageInfo);
    };

    if (pagination) {
      var total = pagination.total,
          showJumper = pagination.showJumper;
      hasPagination = total > innerPageSize || showJumper && total <= innerPageSize;
    }

    var onInnerPaginationChange = function onInnerPaginationChange(pageInfo) {
      var _pagination$onChange;

      var current = pageInfo.current,
          pageSize = pageInfo.pageSize;
      var newDataSource = data.slice((current - 1) * pageSize, current * pageSize);
      onPageChange === null || onPageChange === void 0 ? void 0 : onPageChange(pageInfo, newDataSource);
      pagination === null || pagination === void 0 ? void 0 : (_pagination$onChange = pagination.onChange) === null || _pagination$onChange === void 0 ? void 0 : _pagination$onChange.call(pagination, pageInfo);

      if (!isControlledPagination) {
        setInnerCurrentPagination(current);
        setInnerPageSize(pageSize);
      }
    };

    var pageData = React.useMemo(function () {
      if (!hasPagination) return data;

      if (data.length > innerPageSize) {
        var pageStart = (innerCurrent - 1) * innerPageSize;
        var pageEnd = innerCurrent * innerPageSize;
        return data.slice(pageStart, pageEnd);
      }

      return data;
    }, [data, innerPageSize, hasPagination, innerCurrent]);

    var _useState5 = React.useState(0),
        _useState6 = _slicedToArray(_useState5, 2),
        scrollBarWidth = _useState6[0],
        setScrollBarWidth = _useState6[1];

    var fixedHeader = height > 0 || maxHeight > 0;
    var table = React.useMemo(function () {
      return {
        fixedHeader: fixedHeader,
        flattenColumns: flattenColumns
      };
    }, [fixedHeader, flattenColumns]);
    var hasFixedColumns = columns.some(function (_ref) {
      var fixed = _ref.fixed;
      return ["left", "right"].includes(fixed);
    });
    var scrollHeaderRef = React.useRef();
    var scrollBodyRef = React.useRef();
    var tableRef = React.useRef();
    var tableContentRef = React.useRef();

    var _useState7 = React.useState(false),
        _useState8 = _slicedToArray(_useState7, 2),
        scrollableToLeft = _useState8[0],
        setScrollableToLeft = _useState8[1];

    var _useState9 = React.useState(false),
        _useState10 = _slicedToArray(_useState9, 2),
        scrollableToRight = _useState10[0],
        setScrollableToRight = _useState10[1];

    var _useState11 = React.useState(false),
        _useState12 = _slicedToArray(_useState11, 2),
        isHasScrollbar = _useState12[0],
        setIsHasScrollbar = _useState12[1];

    React.useLayoutEffect(function () {
      if (fixedHeader) {
        setStateScrollBarWidth();
      }
    }, [fixedHeader]);
    React.useLayoutEffect(function () {
      if (fixedHeader) {
        var limitHeight = height || maxHeight;
        var tableNode = tableRef.current;
        var isHasScrollbarNew = tableNode.offsetHeight > limitHeight;
        setIsHasScrollbar(isHasScrollbarNew);
      }
    }, [pageData]);
    React.useLayoutEffect(function () {
      var checkScrollableToLeftOrRightDebounce;

      if (hasFixedColumns) {
        checkScrollableToLeftOrRight();
        checkScrollableToLeftOrRightDebounce = debounce_1(checkScrollableToLeftOrRight);
        window.addEventListener("resize", checkScrollableToLeftOrRightDebounce);
      }

      return function () {
        if (hasFixedColumns) {
          window.removeEventListener("resize", checkScrollableToLeftOrRightDebounce);
        }
      };
    }, [hasFixedColumns]);
    var isEmpty = !data.length;

    function renderTableBodyAndTableFooter() {
      if (!!loading) {
        return isEmpty ? /* @__PURE__ */React__default["default"].createElement(TableFooter, null, /* @__PURE__ */React__default["default"].createElement(TableEmptyBody$1, {
          empty: null
        })) : /* @__PURE__ */React__default["default"].createElement(TableBody, _objectSpread$T(_objectSpread$T({}, props), {}, {
          data: pageData
        }));
      }

      if (!!asyncLoading) {
        return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, /* @__PURE__ */React__default["default"].createElement(TableBody, _objectSpread$T(_objectSpread$T({}, props), {}, {
          data: pageData
        })), /* @__PURE__ */React__default["default"].createElement(TableFooter, {
          colspan: columns.length
        }, /* @__PURE__ */React__default["default"].createElement(TableEmptyBody, _objectSpread$T({}, props))));
      }

      if (isEmpty) {
        return /* @__PURE__ */React__default["default"].createElement(TableFooter, null, /* @__PURE__ */React__default["default"].createElement(TableEmptyBody$1, {
          empty: empty
        }));
      }

      return /* @__PURE__ */React__default["default"].createElement(TableBody, _objectSpread$T(_objectSpread$T({}, props), {}, {
        data: pageData
      }));
    }

    var paginationNode;

    if (hasPagination) {
      paginationNode = /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-table__pagination")
      }, /* @__PURE__ */React__default["default"].createElement(Pagination, _objectSpread$T(_objectSpread$T({}, pagination), {}, {
        current: innerCurrent,
        pageSize: innerPageSize,
        onChange: onInnerPaginationChange,
        onPageSizeChange: onPageSizeChange
      })));
    }

    function getTable(params) {
      var _ref2 = params || {},
          _ref2$enableHeader = _ref2.enableHeader,
          enableHeader = _ref2$enableHeader === void 0 ? true : _ref2$enableHeader,
          _ref2$enableBody = _ref2.enableBody,
          enableBody = _ref2$enableBody === void 0 ? true : _ref2$enableBody;

      return /* @__PURE__ */React__default["default"].createElement("table", {
        ref: tableRef,
        style: {
          tableLayout: tableLayout,
          height: "100%"
        }
      }, /* @__PURE__ */React__default["default"].createElement(TableColGroup, {
        columns: columns
      }), enableHeader ? /* @__PURE__ */React__default["default"].createElement(TableHeader, {
        columns: columns
      }) : null, enableBody ? renderTableBodyAndTableFooter() : null);
    }

    function getTableWithFixedHeader() {
      var style = {};

      if (isHasScrollbar) {
        style = _objectSpread$T(_objectSpread$T({}, style), {}, {
          paddingRight: scrollBarWidth
        });
      }

      var fixedHeaderRN = /* @__PURE__ */React__default["default"].createElement("div", {
        ref: scrollHeaderRef,
        className: "".concat(classPrefix, "-table__header"),
        style: style
      }, getTable({
        enableBody: false
      }));

      var onScroll = function onScroll(e) {
        var scrollLeft = e.target.scrollLeft;
        scrollHeaderRef.current.scrollLeft = scrollLeft;
        handleScroll(e, 10);
      };

      var fixedBodyRN = /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$T({
        ref: scrollBodyRef,
        className: "".concat(classPrefix, "-table__body"),
        style: {
          height: isNaN(Number(height)) ? height : "".concat(Number(height), "px"),
          maxHeight: isNaN(Number(maxHeight)) ? maxHeight : "".concat(Number(maxHeight), "px"),
          width: hasFixedColumns ? "100%" : void 0
        }
      }, hasFixedColumns ? {
        onScroll: onScroll
      } : {}), getTable({
        enableHeader: false
      }));
      return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, fixedHeaderRN, fixedBodyRN);
    }

    function setStateScrollBarWidth() {
      var scrollDiv = document.createElement("div");
      scrollDiv.style.cssText = "\n      width: 99px;\n      height: 99px;\n      overflow: scroll;\n      position: absolute;\n      top: -9999px;";
      scrollDiv.classList.add("scrollbar");
      document.body.appendChild(scrollDiv);
      var scrollBarWidth2 = scrollDiv.offsetWidth - scrollDiv.clientWidth;
      setScrollBarWidth(scrollBarWidth2);
      document.body.removeChild(scrollDiv);
    }

    function checkScrollableToLeftOrRight() {
      var scrollContainer = fixedHeader ? scrollBodyRef.current : tableContentRef.current;
      var scrollLeft = scrollContainer.scrollLeft,
          scrollWidth = scrollContainer.scrollWidth,
          clientWidth = scrollContainer.clientWidth;
      var scrollableToLeft2 = scrollLeft > 0;
      setScrollableToLeft(scrollableToLeft2);
      var scrollableToRight2 = scrollLeft + clientWidth < scrollWidth;
      setScrollableToRight(scrollableToRight2);
    }

    function handleScroll(e) {
      var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
      var _e$target = e.target,
          scrollLeft = _e$target.scrollLeft,
          scrollTop = _e$target.scrollTop;
      var scrollFn = throttle_1(function () {
        checkScrollableToLeftOrRight();
        var direction = getScrollDirection(scrollLeft, scrollTop);

        if (direction !== ScrollDirection.UNKNOWN) {
          var scrollListenerFn = direction === ScrollDirection.X ? onScrollX : onScrollY;
          var scrollParams = {
            e: e
          };
          scrollListenerFn === null || scrollListenerFn === void 0 ? void 0 : scrollListenerFn(scrollParams);
        }
      }, duration);
      scrollFn();
    }

    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-table"), (_classNames = {}, _defineProperty$2(_classNames, "".concat(classPrefix, "-table--striped"), stripe), _defineProperty$2(_classNames, "".concat(classPrefix, "-table--bordered"), bordered), _defineProperty$2(_classNames, "".concat(classPrefix, "-size-l"), size === "large"), _defineProperty$2(_classNames, "".concat(classPrefix, "-size-s"), size === "small"), _defineProperty$2(_classNames, "".concat(classPrefix, "-table--hoverable"), hover), _defineProperty$2(_classNames, "".concat(classPrefix, "-table--align-").concat(verticalAlign), verticalAlign), _defineProperty$2(_classNames, "".concat(classPrefix, "-table__header--fixed"), fixedHeader), _defineProperty$2(_classNames, "".concat(classPrefix, "-table__cell--fixed ").concat(classPrefix, "-table--has-fixed"), hasFixedColumns), _classNames))
    }, /* @__PURE__ */React__default["default"].createElement(TableContextProvider, {
      value: table
    }, /* @__PURE__ */React__default["default"].createElement(Loading, {
      loading: !!loading,
      showOverlay: true,
      indicator: loading === true,
      text: typeof loading !== "boolean" ? /* @__PURE__ */React__default["default"].createElement(TableLoadingBody, _objectSpread$T({}, props)) : null
    }, /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$T({
      ref: tableContentRef,
      className: classNames$1("".concat(classPrefix, "-table__content"), (_classNames2 = {}, _defineProperty$2(_classNames2, "".concat(classPrefix, "-table__content--scrollable-to-right"), scrollableToRight), _defineProperty$2(_classNames2, "".concat(classPrefix, "-table__content--scrollable-to-left"), scrollableToLeft), _classNames2)),
      style: {
        overflow: "auto"
      }
    }, hasFixedColumns ? {
      onScroll: handleScroll
    } : {}), !fixedHeader ? getTable() : getTableWithFixedHeader())), hasPagination && paginationNode));
  }

  var _excluded$a = ["theme", "showArrow", "destroyOnClose", "overlayClassName", "children"];

  function ownKeys$S(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$S(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$S(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$S(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var Tooltip$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var theme = props.theme,
        _props$showArrow = props.showArrow,
        showArrow = _props$showArrow === void 0 ? true : _props$showArrow,
        _props$destroyOnClose = props.destroyOnClose,
        destroyOnClose = _props$destroyOnClose === void 0 ? true : _props$destroyOnClose,
        overlayClassName = props.overlayClassName,
        children = props.children,
        restProps = _objectWithoutProperties$1(props, _excluded$a);

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var toolTipClass = classNames$1("".concat(classPrefix, "-tooltip"), _defineProperty$2({}, "".concat(classPrefix, "-tooltip--").concat(theme), theme), overlayClassName);
    return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, /* @__PURE__ */React__default["default"].createElement(Popup, _objectSpread$S({
      ref: ref,
      destroyOnClose: destroyOnClose,
      showArrow: showArrow,
      overlayClassName: toolTipClass
    }, restProps), children));
  });
  Tooltip$1.displayName = "Tooltip";
  Tooltip$1.propTypes = {
    theme: PropTypes.oneOf(["default", "primary", "success", "danger", "warning", "light"]),
    showArrow: PropTypes.bool
  };
  Tooltip$1.defaultProps = {
    theme: "default",
    showArrow: true
  };

  var Tooltip = Tooltip$1;

  function ownKeys$R(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$R(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$R(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$R(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var SortTypeEnum = {
    desc: "desc",
    asc: "asc",
    all: "all"
  };
  var sortTypeOrder = [SortTypeEnum.desc, SortTypeEnum.asc, SortTypeEnum.all];
  var tooltips = {
    desc: "\u70B9\u51FB\u964D\u5E8F",
    asc: "\u70B9\u51FB\u5347\u5E8F",
    all: "\u70B9\u51FB\u53D6\u6D88\u6392\u5E8F"
  };

  var SorterButton = function SorterButton(props) {
    var currentColumn = props.column,
        currentSort = props.singleSort,
        onChange = props.onChange;
    var _currentColumn$sortTy = currentColumn.sortType,
        sortType = _currentColumn$sortTy === void 0 ? SortTypeEnum.all : _currentColumn$sortTy;

    var _useContext = React.useContext(ConfigContext$1),
        classPrefix = _useContext.classPrefix;

    var _useState = React.useState(SortTypeEnum.all),
        _useState2 = _slicedToArray(_useState, 2),
        currentSortType = _useState2[0],
        setCurrentSortType = _useState2[1];

    var isAllSortType = sortType === SortTypeEnum.all;
    var nextSortType = getNextSortType(currentSortType);

    function getNextSortType(currentSortType2) {
      if (isAllSortType) {
        var currentIndex = sortTypeOrder.indexOf(currentSortType2);
        var nextIndex = currentIndex === sortTypeOrder.length - 1 ? 0 : currentIndex + 1;
        return sortTypeOrder[nextIndex];
      }

      return currentSortType2 === SortTypeEnum.all ? sortType : SortTypeEnum.all;
    }

    function renderIcon(direction, className) {
      var style = {};

      if (direction === SortTypeEnum.asc) {
        style = _objectSpread$R({
          transform: "rotate(-180deg)",
          top: "-1px"
        }, style);
      } else {
        style.bottom = "-1px";
      }

      var sortClassName = classNames$1(["".concat(classPrefix, "-table__sort-icon"), className, "".concat(classPrefix, "-table__sort-").concat(direction)]);
      return /* @__PURE__ */React__default["default"].createElement("div", {
        key: direction,
        style: style,
        className: sortClassName
      }, /* @__PURE__ */React__default["default"].createElement(ChevronDownIcon, {
        size: "16px"
      }));
    }

    function renderSortIcons() {
      var allowSortTypes = [];

      if (isAllSortType) {
        allowSortTypes.push(SortTypeEnum.asc, SortTypeEnum.desc);
      } else {
        allowSortTypes.push(sortType);
      }

      var sortIcons = allowSortTypes.map(function (direction) {
        var className = direction === currentSortType ? "".concat(classPrefix, "-table__sort-icon--active") : "".concat(classPrefix, "-icon-sort-default");
        return renderIcon(direction, className);
      });
      return sortIcons.length > 1 ? /* @__PURE__ */React__default["default"].createElement("div", {
        style: {
          lineHeight: 0
        }
      }, sortIcons) : sortIcons;
    }

    function handleSort() {
      var currentSortTypeNew = nextSortType;
      setCurrentSortType(currentSortTypeNew);
      onChange(currentSort, currentSortTypeNew, currentColumn);
    }

    React.useEffect(function () {
      var currentSortType2 = SortTypeEnum.all;

      if (currentSort) {
        currentSortType2 = currentSort.descending ? SortTypeEnum.desc : SortTypeEnum.asc;
      }

      setCurrentSortType(currentSortType2);
    }, [currentSort]);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(["".concat(classPrefix, "-table__cell--sort-trigger"), _defineProperty$2({}, "".concat(classPrefix, "-table__double-icons"), true)]),
      onClick: handleSort
    }, /* @__PURE__ */React__default["default"].createElement(Tooltip, {
      content: tooltips[nextSortType],
      showArrow: false
    }, renderSortIcons()));
  };

  function _createForOfIteratorHelper$1(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray$1(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$1(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen); }

  function _arrayLikeToArray$1(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function ownKeys$Q(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$Q(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$Q(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$Q(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function useSorter(props) {
    var _useContext = React.useContext(ConfigContext$1),
        classPrefix = _useContext.classPrefix;

    var columns = props.columns,
        sort = props.sort,
        defaultSort = props.defaultSort,
        multipleSort = props.multipleSort,
        onSortChange = props.onSortChange,
        data = props.data;
    var isControlled = typeof sort !== "undefined";

    var _useState = React.useState(defaultSort || []),
        _useState2 = _slicedToArray(_useState, 2),
        innerSort = _useState2[0],
        setInnerSort = _useState2[1];

    var sorts = getSorts(innerSort, columns);
    var transformedSorterColumns = columns.map(function (column) {
      var _sorts$find;

      var title = column.title,
          sorter = column.sorter,
          sortType = column.sortType,
          colKey = column.colKey;

      if (!sorter || !SortTypeEnum[sortType]) {
        return column;
      }

      var singleSort = (_sorts$find = sorts.find) === null || _sorts$find === void 0 ? void 0 : _sorts$find.call(sorts, function (sortItem) {
        return (sortItem === null || sortItem === void 0 ? void 0 : sortItem.sortBy) === colKey;
      });

      var titleNew = function titleNew() {
        return /* @__PURE__ */React__default["default"].createElement("div", {
          className: "".concat(classPrefix, "-table__cell--sortable")
        }, /* @__PURE__ */React__default["default"].createElement("div", {
          className: "".concat(classPrefix, "-table__cell--title")
        }, /* @__PURE__ */React__default["default"].createElement("div", null, title), /* @__PURE__ */React__default["default"].createElement(SorterButton, {
          column: column,
          singleSort: singleSort,
          onChange: onChangeSortButton
        })));
      };

      return _objectSpread$Q(_objectSpread$Q({}, column), {}, {
        title: titleNew
      });
    });
    var transformedSorterData = React.useMemo(function () {
      if (isControlled) {
        return data;
      }

      return _toConsumableArray(data).sort(comparer(sorts));
    }, [data, sorts, isControlled]);

    function getSorts(innerSort2, columns2) {
      var _validSorts;

      var validSorts = [];
      var sortColumns = columns2.filter(function (_ref) {
        var sorter = _ref.sorter;
        return !!sorter;
      });
      var colKeySorterMap = {};
      sortColumns.forEach(function (_ref2) {
        var colKey = _ref2.colKey,
            sorter = _ref2.sorter;
        colKeySorterMap[colKey] = sorter;
      });
      var sortColKeys = sortColumns.map(function (_ref3) {
        var colKey = _ref3.colKey;
        return colKey;
      });

      if (Array.isArray(innerSort2)) {
        validSorts = innerSort2.filter(function (sortItem) {
          return sortColKeys.includes(sortItem === null || sortItem === void 0 ? void 0 : sortItem.sortBy);
        });
      } else if (sortColKeys.includes(innerSort2 === null || innerSort2 === void 0 ? void 0 : innerSort2.sortBy)) {
        validSorts = [innerSort2];
      }

      var validSortsWithSorter = (_validSorts = validSorts) === null || _validSorts === void 0 ? void 0 : _validSorts.map(function (sortItem) {
        return _objectSpread$Q(_objectSpread$Q({}, sortItem), {}, {
          sorter: colKeySorterMap[sortItem.sortBy]
        });
      });
      return validSortsWithSorter;
    }

    function onChangeSortButton(activeSort, activeSortType, activeColumn) {
      var sortOptions = {
        currentDataSource: transformedSorterData,
        col: activeColumn
      };
      var activeColKey = activeColumn.colKey;

      if (multipleSort) {
        var sortsNew = [];

        if (activeSort) {
          if (activeSortType === SortTypeEnum.all) {
            sortsNew = sorts.filter(function (sortItem) {
              return sortItem !== activeSort;
            }).map(function (_ref4) {
              var sortBy = _ref4.sortBy,
                  descending = _ref4.descending;
              return {
                sortBy: sortBy,
                descending: descending
              };
            });
          } else {
            sortsNew = sorts.map(function (sortItem) {
              return {
                sortBy: sortItem.sortBy,
                descending: sortItem === activeSort ? activeSortType === SortTypeEnum.desc : sortItem.descending
              };
            });
          }
        } else {
          var sortInfo = {
            sortBy: activeColKey,
            descending: activeSortType === SortTypeEnum.desc
          };

          if (sorts.length) {
            sortsNew = [].concat(_toConsumableArray(sorts.map(function (_ref5) {
              var sortBy = _ref5.sortBy,
                  descending = _ref5.descending;
              return {
                sortBy: sortBy,
                descending: descending
              };
            })), [sortInfo]);
          } else {
            sortsNew = [sortInfo];
          }
        }

        setInnerSort(sortsNew);
        onSortChange(sortsNew, sortOptions);
      } else {
        var sortNew;

        if (activeSort) {
          if (activeSortType !== SortTypeEnum.all) {
            sortNew = {
              sortBy: activeSort.sortBy,
              descending: activeSortType === SortTypeEnum.desc
            };
          }
        } else {
          sortNew = {
            sortBy: activeColKey,
            descending: activeSortType === SortTypeEnum.desc
          };
        }

        setInnerSort(sortNew);
        onSortChange(sortNew, sortOptions);
      }
    }

    React.useEffect(function () {
      if (isControlled) {
        setInnerSort(sort);
      }
    }, [sort, isControlled]);
    return [transformedSorterColumns, transformedSorterData];
  }

  function comparer(sorts) {
    return function (a, b) {
      var _iterator = _createForOfIteratorHelper$1(sorts),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _step$value = _step.value,
              sortBy = _step$value.sortBy,
              descending = _step$value.descending,
              sorter = _step$value.sorter;
          var firstValue = get_1(a, sortBy);
          var secondValue = get_1(b, sortBy);
          var isAsc = typeof sorter === "function" ? sorter(a, b) < 0 : firstValue < secondValue;
          var isDesc = typeof sorter === "function" ? sorter(a, b) > 0 : firstValue > secondValue;

          if (isAsc || isDesc) {
            if (!descending) return isAsc ? -1 : 1;
            if (descending) return isDesc ? -1 : 1;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return 0;
    };
  }

  function ownKeys$P(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$P(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$P(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$P(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var renderIcon = function renderIcon(classPrefix, icon) {
    var result = null;
    if (icon) result = icon;
    if (typeof icon === "function") result = icon();

    if (result) {
      result = /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(classPrefix, "-table__filter-icon")
      }, result);
    } else {
      result = /* @__PURE__ */React__default["default"].createElement(FilterIcon, {
        className: "".concat(classPrefix, "-table__filter-icon")
      });
    }

    return result;
  };

  function getTitle(column, colIndex) {
    var result = null;

    if (isFunction_1(column.title)) {
      result = column.title({
        col: column,
        colIndex: colIndex
      });
    } else if (isString_1(column.title)) {
      result = column.title;
    }

    return result;
  }

  function FilterButton(props) {
    var onChange = props.onChange,
        filterIcon = props.filterIcon,
        innerfiltVal = props.innerfiltVal,
        columns = props.columns;

    var _useContext = React.useContext(ConfigContext$1),
        classPrefix = _useContext.classPrefix;

    var _useState = React.useState(),
        _useState2 = _slicedToArray(_useState, 2),
        filterVal = _useState2[0],
        setfilterVal = _useState2[1];

    var getFilterContent = function getFilterContent(filter, colKey, column) {
      var types = ["single", "multiple", "input"];

      if (filter.type && !types.includes(filter.type)) {
        console.error("column.type must be the following: ".concat(JSON.stringify(types)));
        return;
      }

      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-table__filter-pop-content-inner")
      }, /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, filter.type === "multiple" ? /* @__PURE__ */React__default["default"].createElement(Checkbox.Group, {
        value: (filterVal === null || filterVal === void 0 ? void 0 : filterVal[colKey]) || [],
        defaultValue: [],
        onChange: function onChange(value) {
          onChangeFilter(value, colKey, column);
        }
      }, filter === null || filter === void 0 ? void 0 : filter.list.map(function (_ref) {
        var label = _ref.label,
            value = _ref.value;
        return /* @__PURE__ */React__default["default"].createElement(Checkbox, {
          key: value,
          value: value
        }, label);
      })) : null, filter.type === "single" ? /* @__PURE__ */React__default["default"].createElement(Radio.Group, {
        size: "large",
        value: (filterVal === null || filterVal === void 0 ? void 0 : filterVal[colKey]) || "",
        onChange: function onChange(value) {
          onChangeFilter(value, colKey, column);
        }
      }, filter === null || filter === void 0 ? void 0 : filter.list.map(function (_ref2) {
        var label = _ref2.label,
            value = _ref2.value;
        return /* @__PURE__ */React__default["default"].createElement(Radio, {
          key: value,
          value: value
        }, label);
      })) : null, filter.type === "input" ? /* @__PURE__ */React__default["default"].createElement(Input, {
        placeholder: "\u8BF7\u8F93\u5165\u5185\u5BB9\uFF08\u65E0\u9ED8\u8BA4\u503C\uFF09",
        clearable: true,
        value: (filterVal === null || filterVal === void 0 ? void 0 : filterVal[colKey]) || "",
        onChange: function onChange(value) {
          onChangeFilter(value, colKey, column);
        }
      }) : null));
    };

    function onChangeFilter(value, colKey, column) {
      setfilterVal(_objectSpread$P(_objectSpread$P({}, filterVal), {}, _defineProperty$2({}, colKey, value)));
      onChange(_objectSpread$P(_objectSpread$P({}, filterVal), {}, _defineProperty$2({}, colKey, value)), column);
    }

    React.useEffect(function () {
      setfilterVal(innerfiltVal);
    }, [innerfiltVal]);
    return columns.map(function (column, index) {
      var filter = column.filter,
          colKey = column.colKey;

      if (!filter) {
        return column;
      }

      var lastTitle = getTitle(column, index);

      var titleNew = function titleNew() {
        return /* @__PURE__ */React__default["default"].createElement("div", {
          className: "".concat(classPrefix, "-table__cell--title")
        }, /* @__PURE__ */React__default["default"].createElement("div", null, lastTitle), /* @__PURE__ */React__default["default"].createElement("div", {
          className: classNames$1(["".concat(classPrefix, "-table__cell--filter")])
        }, /* @__PURE__ */React__default["default"].createElement(Popup, {
          trigger: "click",
          placement: "bottom",
          showArrow: true,
          overlayClassName: "".concat(classPrefix, "-table__filter-pop"),
          content: /* @__PURE__ */React__default["default"].createElement("div", {
            className: "".concat(classPrefix, "-table__filter-pop-content")
          }, getFilterContent(filter, colKey, column))
        }, renderIcon(classPrefix, filterIcon))));
      };

      return _objectSpread$P(_objectSpread$P({}, column), {}, {
        title: titleNew
      });
    });
  }

  function ownKeys$O(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$O(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$O(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$O(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function useFilter(props) {
    var columns = props.columns,
        filterIcon = props.filterIcon,
        filterValue = props.filterValue,
        defaultFilterValue = props.defaultFilterValue,
        onFilterChange = props.onFilterChange,
        data = props.data;
    var isControlled = typeof filterValue !== "undefined";

    var _useState = React.useState(defaultFilterValue),
        _useState2 = _slicedToArray(_useState, 2),
        filterVal = _useState2[0],
        setFilterVal = _useState2[1];

    React.useEffect(function () {
      setFilterVal(isControlled ? filterValue : defaultFilterValue);
    }, [filterValue, defaultFilterValue, isControlled]);
    var transformedFilterData = React.useMemo(function () {
      if (isControlled) {
        return data;
      }

      if (filterVal) {
        var tmpData = data;
        Object.keys(filterVal).forEach(function (k) {
          if (typeof (filterVal === null || filterVal === void 0 ? void 0 : filterVal[k]) === "string" || typeof (filterVal === null || filterVal === void 0 ? void 0 : filterVal[k]) === "number") {
            tmpData = tmpData.filter(function (item) {
              var _item$k;

              return item === null || item === void 0 ? void 0 : (_item$k = item[k]) === null || _item$k === void 0 ? void 0 : _item$k.toString().includes(filterVal === null || filterVal === void 0 ? void 0 : filterVal[k].toString());
            });
          }

          if (Array.isArray(filterVal === null || filterVal === void 0 ? void 0 : filterVal[k]) && (filterVal === null || filterVal === void 0 ? void 0 : filterVal[k]).length > 0) {
            tmpData = tmpData.filter(function (item) {
              return (filterVal === null || filterVal === void 0 ? void 0 : filterVal[k]).includes(item === null || item === void 0 ? void 0 : item[k]);
            });
          }
        });
        return tmpData;
      }

      return data;
    }, [data, filterVal, isControlled]);
    var transformedFilterColumns = FilterButton({
      columns: columns,
      onChange: onChangeFilterButton,
      innerfiltVal: isControlled ? filterValue : defaultFilterValue,
      filterIcon: filterIcon
    });

    function onChangeFilterButton(toast, col) {
      var newFilterVal = _objectSpread$O(_objectSpread$O({}, filterVal), toast);

      setFilterVal(newFilterVal);

      if (onFilterChange) {
        onFilterChange(newFilterVal, {
          col: col
        });
      }
    }

    return [transformedFilterColumns, transformedFilterData];
  }

  function ownKeys$N(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$N(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$N(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$N(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TypeEnum = {
    single: "single",
    multiple: "multiple"
  };
  var defaultWidth = 50;

  function useSelect(props) {
    var _useContext = React.useContext(ConfigContext$1),
        classPrefix = _useContext.classPrefix;

    var columns = props.columns,
        data = props.data,
        rowKey = props.rowKey,
        defaultSelectedRowKeys = props.defaultSelectedRowKeys,
        selectedRowKeys = props.selectedRowKeys,
        onSelectChange = props.onSelectChange;
    var isControlled = !!selectedRowKeys;

    var _useState = React.useState(defaultSelectedRowKeys || []),
        _useState2 = _slicedToArray(_useState, 2),
        innerSelectedRowKeys = _useState2[0],
        setInnerSelectedRowKeys = _useState2[1];

    var selectColumn = columns.find(function (column) {
      return !!TypeEnum[column.type];
    });
    React.useEffect(function () {
      if (isControlled) {
        setInnerSelectedRowKeys(selectedRowKeys);
      }
    }, [selectedRowKeys, isControlled]);

    if (!selectColumn) {
      return [columns];
    }

    var disabledFn = getDisableFn({
      selectColumn: selectColumn
    });
    var titleCheckboxProps = getTitleCheckboxProps({
      data: data,
      disabledFn: disabledFn,
      innerSelectedRowKeys: innerSelectedRowKeys,
      selectColumn: selectColumn,
      TypeEnum: TypeEnum
    });
    var transformedColumns = columns.map(function (column) {
      var type = column.type,
          className = column.className,
          width = column.width;

      if (!TypeEnum[type]) {
        return column;
      }

      var title;
      var cell;
      var isMultiple = type === TypeEnum.multiple;

      if (isMultiple) {
        title = function title() {
          var indeterminate = titleCheckboxProps.indeterminate,
              checked = titleCheckboxProps.checked,
              disabled = titleCheckboxProps.disabled;
          return /* @__PURE__ */React__default["default"].createElement(Checkbox, {
            indeterminate: indeterminate,
            checked: checked,
            disabled: disabled,
            onChange: function onChange(checked2) {
              return onTitleCheckboxChange(checked2);
            }
          });
        };

        cell = function cell(options) {
          var row = options.row;
          var currentRowKeyValue = row[rowKey];
          var checked = innerSelectedRowKeys.includes(currentRowKeyValue);
          var disabled = disabledFn(options);
          return /* @__PURE__ */React__default["default"].createElement(Checkbox, {
            checked: checked,
            disabled: disabled,
            onChange: function onChange(checked2) {
              return onRowCheckboxChange(currentRowKeyValue, row, checked2);
            }
          });
        };
      } else {
        cell = function cell(options) {
          var row = options.row;
          var currentRowKeyValue = row[rowKey];
          var checked = innerSelectedRowKeys.includes(currentRowKeyValue);
          var disabled = disabledFn(options);
          return /* @__PURE__ */React__default["default"].createElement(Radio, {
            checked: checked,
            disabled: disabled,
            onChange: function onChange() {
              return onRadioChange(currentRowKeyValue, row);
            }
          });
        };
      }

      return _objectSpread$N({
        width: width || defaultWidth,
        title: title,
        cell: cell,
        style: {
          padding: "10px 0 10px 24px"
        },
        className: classNames$1(["".concat(classPrefix, "-table__cell--selectable"), _defineProperty$2({}, "".concat(className), !!className)])
      }, column);
    });

    function getTitleCheckboxProps(_ref2) {
      var data2 = _ref2.data,
          disabledFn2 = _ref2.disabledFn,
          innerSelectedRowKeys2 = _ref2.innerSelectedRowKeys,
          selectColumn2 = _ref2.selectColumn,
          TypeEnum2 = _ref2.TypeEnum;

      if (selectColumn2.type !== TypeEnum2.multiple) {
        return {
          checked: false,
          indeterminate: false,
          disabled: false
        };
      }

      var _getRowKeysExcludeDis = getRowKeysExcludeDisabledAndIsDisabledAll({
        data: data2,
        disabledFn: disabledFn2,
        innerSelectedRowKeys: innerSelectedRowKeys2
      }),
          rowKeysExcludeDisabled = _getRowKeysExcludeDis.rowKeysExcludeDisabled,
          isDisabledAll = _getRowKeysExcludeDis.isDisabledAll;

      var innerSelectedRowKeysExcludeDisabled = innerSelectedRowKeys2.filter(function (rowKey2) {
        return rowKeysExcludeDisabled.includes(rowKey2);
      });
      var checked = innerSelectedRowKeysExcludeDisabled.length && innerSelectedRowKeysExcludeDisabled.length === rowKeysExcludeDisabled.length;
      var indeterminate = innerSelectedRowKeysExcludeDisabled.length && innerSelectedRowKeysExcludeDisabled.length < rowKeysExcludeDisabled.length;
      return {
        checked: checked,
        indeterminate: indeterminate,
        disabled: isDisabledAll
      };
    }

    function getDisableFn(_ref3) {
      var selectColumn2 = _ref3.selectColumn;
      var disabled = selectColumn2.disabled,
          checkProps = selectColumn2.checkProps;

      var disabledFn2 = function disabledFn2() {
        return false;
      };

      if (disabled && isFunction_1(disabled)) {
        disabledFn2 = disabled;
      } else if (checkProps) {
        if (isFunction_1(checkProps)) {
          disabledFn2 = function disabledFn2(options) {
            var _checkProps;

            return (_checkProps = checkProps(options)) === null || _checkProps === void 0 ? void 0 : _checkProps.disabled;
          };
        } else if (checkProps.disabled) {
          disabledFn2 = function disabledFn2() {
            return checkProps.disabled;
          };
        }
      }

      return disabledFn2;
    }

    function getRowKeysExcludeDisabledAndIsDisabledAll(_ref4) {
      var data2 = _ref4.data,
          disabledFn2 = _ref4.disabledFn,
          innerSelectedRowKeys2 = _ref4.innerSelectedRowKeys;
      var dataDisabled = [];
      var rowKeysExcludeDisabled = [];
      data2.forEach(function (dataItem, index) {
        var isDisabled = disabledFn2({
          rowIndex: index,
          row: dataItem
        });
        innerSelectedRowKeys2.includes(dataItem[rowKey]);

        if (!isDisabled) {
          rowKeysExcludeDisabled.push(dataItem[rowKey]);
        } else {
          dataDisabled.push(dataItem);
        }
      });
      var isDisabledAll = dataDisabled.length === data2.length;
      return {
        rowKeysExcludeDisabled: rowKeysExcludeDisabled,
        isDisabledAll: isDisabledAll
      };
    }

    function onTitleCheckboxChange(checked) {
      var selectedRowData = [];

      if (checked) {
        data.forEach(function (dataItem, index) {
          var isDisabled = disabledFn({
            rowIndex: index,
            row: dataItem
          });
          var isChecked = innerSelectedRowKeys.includes(dataItem[rowKey]);

          if (!isDisabled || isChecked) {
            selectedRowData.push(dataItem);
          }
        });
      } else {
        data.forEach(function (dataItem, index) {
          var isDisabled = disabledFn({
            rowIndex: index,
            row: dataItem
          });
          var isChecked = innerSelectedRowKeys.includes(dataItem[rowKey]);

          if (isDisabled && isChecked) {
            selectedRowData.push(dataItem);
          }
        });
      }

      var selectedRowKeysNew = selectedRowData.map(function (record) {
        return record[rowKey];
      });

      if (!isControlled) {
        setInnerSelectedRowKeys(selectedRowKeysNew);
      }

      isFunction_1(onSelectChange) && onSelectChange(selectedRowKeysNew, {
        selectedRowData: selectedRowData
      });
    }

    function onRowCheckboxChange(currentRowKeyValue, row, checked) {
      var selectedRowKeysNew = [];

      if (checked) {
        selectedRowKeysNew = [].concat(_toConsumableArray(innerSelectedRowKeys), [currentRowKeyValue]);
      } else {
        selectedRowKeysNew = innerSelectedRowKeys.filter(function (selectRowKey) {
          return selectRowKey !== currentRowKeyValue;
        });
      }

      var selectedRowData = data.filter(function (dataItem) {
        return selectedRowKeysNew.includes(dataItem[rowKey]);
      });

      if (!isControlled) {
        setInnerSelectedRowKeys(selectedRowKeysNew);
      }

      isFunction_1(onSelectChange) && onSelectChange(selectedRowKeysNew, {
        selectedRowData: selectedRowData
      });
    }

    function onRadioChange(currentRowKeyValue, row) {
      var selectedRowKeysNew = [currentRowKeyValue];
      var selectedRowData = [row];

      if (!isControlled) {
        setInnerSelectedRowKeys(selectedRowKeysNew);
      }

      isFunction_1(onSelectChange) && onSelectChange(selectedRowKeysNew, {
        selectedRowData: selectedRowData
      });
    }

    return [transformedColumns];
  }

  function ownKeys$M(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$M(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$M(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$M(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var ExpandButton = function ExpandButton(props) {
    var expanded = props.expanded,
        handleExpandChange = props.handleExpandChange,
        rowKeyValue = props.rowKeyValue,
        row = props.row,
        expandIcon = props.expandIcon,
        expandOnRowClick = props.expandOnRowClick;

    var _useContext = React.useContext(ConfigContext$1),
        classPrefix = _useContext.classPrefix;

    var renderIcon = function renderIcon(icon) {
      var result = null;
      if (icon && typeof icon !== "boolean") result = icon;
      if (typeof icon === "function") result = icon();

      if (result) {
        result = /* @__PURE__ */React__default["default"].createElement("span", {
          className: "".concat(classPrefix, "-table-expand-icon")
        }, result);
      } else if (typeof icon === "boolean" && icon === false) {
        result = /* @__PURE__ */React__default["default"].createElement("span", {
          className: "".concat(classPrefix, "-table-expand-icon")
        });
      } else {
        result = /* @__PURE__ */React__default["default"].createElement(ChevronDownCircleIcon, {
          className: "".concat(classPrefix, "-table-expand-icon"),
          size: "16px"
        });
      }

      return result;
    };

    function getExpandIcon(expanded2) {
      var style = {
        transition: "all .2s",
        display: "flex",
        alignItems: "center"
      };

      if (!expanded2) {
        style.transform = "rotate(-180deg)";
      }

      return /* @__PURE__ */React__default["default"].createElement("span", {
        style: style
      }, renderIcon(expandIcon));
    }

    return /* @__PURE__ */React__default["default"].createElement("span", _objectSpread$M({
      className: "".concat(classPrefix, "-table__expand-box")
    }, !expandOnRowClick ? {
      onClick: function onClick() {
        return handleExpandChange(row, rowKeyValue);
      }
    } : {}), getExpandIcon(expanded));
  };

  var expandedColKey = "expanded-icon-cell";

  function useExpand(props) {
    var columns = props.columns,
        rowKey = props.rowKey,
        defaultExpandedRowKeys = props.defaultExpandedRowKeys,
        expandedRowKeys = props.expandedRowKeys,
        expandedRow = props.expandedRow,
        onExpandChange = props.onExpandChange,
        _props$expandIcon = props.expandIcon,
        expandIcon = _props$expandIcon === void 0 ? true : _props$expandIcon,
        _props$expandOnRowCli = props.expandOnRowClick,
        expandOnRowClick = _props$expandOnRowCli === void 0 ? false : _props$expandOnRowCli;

    var _useContext = React.useContext(ConfigContext$1),
        classPrefix = _useContext.classPrefix;

    var isControlled = typeof expandedRowKeys !== "undefined";

    var _useState = React.useState(expandedRowKeys || defaultExpandedRowKeys || []),
        _useState2 = _slicedToArray(_useState, 2),
        innerExpandRowKeys = _useState2[0],
        setThisExpandRowKeys = _useState2[1];

    React.useEffect(function () {
      if (Array.isArray(expandedRowKeys)) {
        setThisExpandRowKeys(_toConsumableArray(expandedRowKeys));
      }
    }, [expandedRowKeys]);

    var transformedExpandColumnsFun = function transformedExpandColumnsFun() {
      return expandedRow ? [{
        colKey: expandedColKey,
        width: 25,
        className: ["".concat(classPrefix, "-table__expandable-icon-cell")],
        cell: function cell(_ref) {
          var row = _ref.row;
          return renderExpandIconCell({
            row: row
          });
        }
      }].concat(_toConsumableArray(columns)) : columns;
    };

    var transformedExpandColumns = transformedExpandColumnsFun();

    function renderExpandIconCell(_ref2) {
      var _ref2$row = _ref2.row,
          row = _ref2$row === void 0 ? {} : _ref2$row;
      var rowKeyValue = get_1(row, rowKey);

      if (!Array.isArray(innerExpandRowKeys)) {
        console.error("ExpandedRowKeys type error");
        return;
      }

      return /* @__PURE__ */React__default["default"].createElement(ExpandButton, {
        expanded: innerExpandRowKeys === null || innerExpandRowKeys === void 0 ? void 0 : innerExpandRowKeys.includes(rowKeyValue),
        row: row,
        rowKeyValue: rowKeyValue,
        expandIcon: expandIcon,
        expandOnRowClick: expandOnRowClick,
        handleExpandChange: handleExpandChange
      });
    }

    function handleExpandChange(row, rowKeyValue) {
      var innerExpandRowKeysNew;
      var isExpanded = innerExpandRowKeys === null || innerExpandRowKeys === void 0 ? void 0 : innerExpandRowKeys.includes(rowKeyValue);

      if (isExpanded) {
        innerExpandRowKeysNew = innerExpandRowKeys.filter(function (item) {
          return item !== rowKeyValue;
        });
      } else {
        innerExpandRowKeysNew = [].concat(_toConsumableArray(innerExpandRowKeys), [rowKeyValue]);
      }

      if (!isControlled) {
        setThisExpandRowKeys(_toConsumableArray(innerExpandRowKeysNew));
      }

      typeof onExpandChange === "function" && onExpandChange(innerExpandRowKeysNew, {
        expandedRowData: row
      });
    }

    function renderExpandRow(row, index, rowKeyValue) {
      var _innerExpandRowKeys$i;

      return /* @__PURE__ */React__default["default"].createElement("tr", {
        className: "".concat(classPrefix, "-table__expanded-cell"),
        style: innerExpandRowKeys !== null && innerExpandRowKeys !== void 0 && (_innerExpandRowKeys$i = innerExpandRowKeys.includes) !== null && _innerExpandRowKeys$i !== void 0 && _innerExpandRowKeys$i.call(innerExpandRowKeys, rowKeyValue) ? {} : {
          display: "none"
        }
      }, /* @__PURE__ */React__default["default"].createElement("td", {
        colSpan: transformedExpandColumns === null || transformedExpandColumns === void 0 ? void 0 : transformedExpandColumns.length
      }, expandedRow && expandedRow({
        row: row,
        index: index
      })));
    }

    return [transformedExpandColumns, handleExpandChange, renderExpandRow];
  }

  function ownKeys$L(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$L(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$L(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$L(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function PrimaryTable(props) {
    var _useSorter = useSorter(props),
        _useSorter2 = _slicedToArray(_useSorter, 2),
        sorterColumns = _useSorter2[0],
        sortData = _useSorter2[1];

    var _useFilter = useFilter(_objectSpread$L(_objectSpread$L({}, props), {}, {
      columns: sorterColumns,
      data: sortData
    })),
        _useFilter2 = _slicedToArray(_useFilter, 2),
        filterColumns = _useFilter2[0],
        filterData = _useFilter2[1];

    var _useSelect = useSelect(_objectSpread$L(_objectSpread$L({}, props), {}, {
      columns: filterColumns,
      data: filterData
    })),
        _useSelect2 = _slicedToArray(_useSelect, 1),
        selectColumns = _useSelect2[0];

    var _useExpand = useExpand(_objectSpread$L(_objectSpread$L({}, props), {}, {
      columns: selectColumns,
      data: filterData
    })),
        _useExpand2 = _slicedToArray(_useExpand, 3),
        expandColumns = _useExpand2[0],
        handleExpandChange = _useExpand2[1],
        renderExpandRow = _useExpand2[2];

    var mergeColumns = expandColumns;
    var mergedData = filterData;
    return /* @__PURE__ */React__default["default"].createElement(BaseTable, _objectSpread$L(_objectSpread$L({}, props), {}, {
      columns: mergeColumns,
      data: mergedData,
      handleExpandChange: handleExpandChange,
      renderExpandRow: renderExpandRow
    }));
  }

  var SimpleTable = BaseTable;
  var Table = PrimaryTable;

  var ListItem = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var children = props.children,
        className = props.className,
        action = props.action;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var actionElement = action && /* @__PURE__ */React__default["default"].createElement("ul", {
      className: "".concat(classPrefix, "-list-item__action")
    }, action);
    return /* @__PURE__ */React__default["default"].createElement("li", {
      ref: ref,
      className: classNames$1(className, "".concat(classPrefix, "-list-item"))
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-list-item-main")
    }, children, actionElement));
  });
  ListItem.displayName = "ListItem";

  var ListItemMeta = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var title = props.title,
        image = props.image,
        description = props.description;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var renderAvatar = function renderAvatar() {
      if (image && typeof image === "string") {
        return /* @__PURE__ */React__default["default"].createElement("div", {
          className: "".concat(classPrefix, "-list-item__meta-avatar")
        }, /* @__PURE__ */React__default["default"].createElement("img", {
          src: image,
          alt: ""
        }));
      }

      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-list-item__meta-avatar")
      }, image);
    };

    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: ref,
      className: "".concat(classPrefix, "-list-item__meta")
    }, image && renderAvatar(), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-list-item__meta-content")
    }, /* @__PURE__ */React__default["default"].createElement("h3", {
      className: "".concat(classPrefix, "-list-item__meta-title")
    }, title), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-list-item__meta-description")
    }, /* @__PURE__ */React__default["default"].createElement("p", null, description))));
  });
  ListItemMeta.displayName = "ListItemMeta";

  var List$1 = forwardRefWithStatics(function (props, ref) {
    var _classNames, _classNames2;

    var header = props.header,
        footer = props.footer,
        asyncLoading = props.asyncLoading,
        _props$size = props.size,
        size = _props$size === void 0 ? "medium" : _props$size,
        _props$split = props.split,
        split = _props$split === void 0 ? true : _props$split,
        _props$stripe = props.stripe,
        stripe = _props$stripe === void 0 ? false : _props$stripe,
        _props$layout = props.layout,
        layout = _props$layout === void 0 ? "horizontal" : _props$layout,
        children = props.children,
        className = props.className,
        _props$onLoadMore = props.onLoadMore,
        onLoadMore = _props$onLoadMore === void 0 ? noop : _props$onLoadMore,
        _props$onScroll = props.onScroll,
        onScroll = _props$onScroll === void 0 ? noop : _props$onScroll,
        _props$style = props.style,
        style = _props$style === void 0 ? {} : _props$style;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var handleClickLoad = function handleClickLoad(e) {
      if (asyncLoading === "load-more") {
        onLoadMore({
          e: e
        });
      }
    };

    var handleScroll = function handleScroll(event) {
      var currentTarget = event.currentTarget;
      var scrollTop = currentTarget.scrollTop,
          offsetHeight = currentTarget.offsetHeight,
          scrollHeight = currentTarget.scrollHeight;
      var scrollBottom = scrollHeight - scrollTop - offsetHeight;
      onScroll({
        e: event,
        scrollTop: scrollTop,
        scrollBottom: scrollBottom
      });
    };

    var loadElement = asyncLoading === void 0 ? "" : /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-list__load"), (_classNames = {}, _defineProperty$2(_classNames, "".concat(classPrefix, "-list__load--loading"), asyncLoading === "loading"), _defineProperty$2(_classNames, "".concat(classPrefix, "-list__load--load-more"), asyncLoading === "load-more"), _classNames)),
      onClick: handleClickLoad
    }, asyncLoading === "loading" ? /* @__PURE__ */React__default["default"].createElement("div", null, /* @__PURE__ */React__default["default"].createElement(Loading, {
      loading: true
    }), /* @__PURE__ */React__default["default"].createElement("span", null, "\u6B63\u5728\u52A0\u8F7D\u4E2D\uFF0C\u8BF7\u7A0D\u7B49")) : /* @__PURE__ */React__default["default"].createElement("span", null, "\u70B9\u51FB\u52A0\u8F7D\u66F4\u591A"));
    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: ref,
      style: style,
      onScroll: handleScroll,
      className: classNames$1(className, "t-list", (_classNames2 = {}, _defineProperty$2(_classNames2, "".concat(classPrefix, "-list--split"), split), _defineProperty$2(_classNames2, "".concat(classPrefix, "-list--stripe"), stripe), _defineProperty$2(_classNames2, "".concat(classPrefix, "-list--vertical-action"), layout === "vertical"), _defineProperty$2(_classNames2, "".concat(classPrefix, "-size-s"), size === "small"), _defineProperty$2(_classNames2, "".concat(classPrefix, "-size-l"), size === "large"), _classNames2))
    }, header, /* @__PURE__ */React__default["default"].createElement("ul", {
      className: "".concat(classPrefix, "-list__inner")
    }, children), loadElement, footer);
  }, {
    ListItem: ListItem,
    ListItemMeta: ListItemMeta
  });
  List$1.displayName = "List";

  var List = List$1;

  var useTabClass = function useTabClass() {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var tdTabsClassPrefix = "".concat(classPrefix, "-tabs");
    var tdTabPanelClassPrefix = "".concat(classPrefix, "-tab-panel");

    var tdClassGenerator = function tdClassGenerator(append) {
      return "".concat(classPrefix, "-").concat(append);
    };

    var tdTabsClassGenerator = function tdTabsClassGenerator(append) {
      return "".concat(tdTabsClassPrefix, "__").concat(append);
    };

    var tdTabPanelClassGenerator = function tdTabPanelClassGenerator(append) {
      return "".concat(tdTabPanelClassPrefix, "__").concat(append);
    };

    var tdSizeClassGenerator = function tdSizeClassGenerator(size) {
      return "".concat(classPrefix, "-size-").concat(size === "large" ? "l" : "m");
    };

    return {
      tdTabsClassPrefix: tdTabsClassPrefix,
      tdTabPanelClassPrefix: tdTabPanelClassPrefix,
      tdClassGenerator: tdClassGenerator,
      tdTabsClassGenerator: tdTabsClassGenerator,
      tdTabPanelClassGenerator: tdTabPanelClassGenerator,
      tdSizeClassGenerator: tdSizeClassGenerator
    };
  };

  var TabNavItem = function TabNavItem(props) {
    var label = props.label,
        removable = props.removable,
        isActive = props.isActive,
        _props$onClick = props.onClick,
        onClick = _props$onClick === void 0 ? noop : _props$onClick,
        theme = props.theme,
        placement = props.placement,
        _props$onRemove = props.onRemove,
        onRemove = _props$onRemove === void 0 ? noop : _props$onRemove,
        value = props.value,
        _props$size = props.size,
        size = _props$size === void 0 ? "medium" : _props$size,
        _props$disabled = props.disabled,
        disabled = _props$disabled === void 0 ? false : _props$disabled,
        index = props.index,
        _props$onTabRemove = props.onTabRemove,
        onTabRemove = _props$onTabRemove === void 0 ? noop : _props$onTabRemove;
    var isCard = theme === "card";

    var _useTabClass = useTabClass(),
        tdTabsClassGenerator = _useTabClass.tdTabsClassGenerator,
        tdClassGenerator = _useTabClass.tdClassGenerator,
        tdSizeClassGenerator = _useTabClass.tdSizeClassGenerator;

    var rippleRef = React.useRef();
    useRipple(rippleRef);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      onClick: disabled ? noop : onClick,
      className: classNames$1(tdTabsClassGenerator("nav-item"), isCard ? tdTabsClassGenerator("nav--card") : "", tdSizeClassGenerator(size), isActive ? tdClassGenerator("is-active") : "", tdClassGenerator("is-".concat(placement)), disabled ? tdClassGenerator("is-disabled") : "")
    }, isCard ? /* @__PURE__ */React__default["default"].createElement("span", {
      className: classNames$1(tdTabsClassGenerator("nav-item-text-wrapper"))
    }, label) : /* @__PURE__ */React__default["default"].createElement("div", {
      ref: rippleRef,
      className: classNames$1(tdTabsClassGenerator("nav-item-wrapper"))
    }, /* @__PURE__ */React__default["default"].createElement("span", {
      className: classNames$1(tdTabsClassGenerator("nav-item-text-wrapper"))
    }, label)), removable ? /* @__PURE__ */React__default["default"].createElement(CloseIcon, {
      className: classNames$1("remove-btn"),
      onClick: function onClick(e) {
        if (disabled) {
          return;
        }

        e.stopPropagation();
        onRemove({
          value: value,
          e: e
        });
        onTabRemove({
          value: value,
          e: e,
          index: index
        });
      }
    }) : null);
  };

  var TabBar = function TabBar(props) {
    var _classNames;

    var tabPosition = props.tabPosition,
        activeId = props.activeId,
        containerRef = props.containerRef;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useState = React.useState({}),
        _useState2 = _slicedToArray(_useState, 2),
        barStyle = _useState2[0],
        setBarStyle = _useState2[1];

    var tabsClassPrefix = "".concat(classPrefix, "-tabs");

    var computeStyle = function computeStyle(_ref) {
      var tabPosition2 = _ref.tabPosition,
          activeId2 = _ref.activeId;
      var isHorizontal = ["bottom", "top"].includes(tabPosition2);
      var transformPosition = isHorizontal ? "translateX" : "translateY";
      var itemProp = isHorizontal ? "width" : "height";
      var barBorderProp = isHorizontal ? "width" : "height";
      var offset = 0;

      if (containerRef.current) {
        var itemsRef = containerRef.current.querySelectorAll(".t-tabs__nav-item");

        if (itemsRef.length - 1 >= activeId2) {
          itemsRef.forEach(function (item, itemIndex) {
            if (itemIndex < activeId2) {
              offset += Number(getComputedStyle(item)[itemProp].replace("px", ""));
            }
          });
          var computedItem = itemsRef[activeId2];

          if (!computedItem) {
            setBarStyle(_defineProperty$2({
              transform: "".concat(transformPosition, "(", 0, "px)")
            }, barBorderProp, 0));
            return;
          }

          var itemPropValue = getComputedStyle(computedItem)[itemProp];
          setBarStyle(_defineProperty$2({
            transform: "".concat(transformPosition, "(").concat(offset, "px)")
          }, barBorderProp, itemPropValue));
        }
      }
    };

    React.useEffect(function () {
      computeStyle({
        tabPosition: tabPosition,
        activeId: activeId
      });
    }, [tabPosition, activeId]);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1((_classNames = {}, _defineProperty$2(_classNames, "".concat(tabsClassPrefix, "__bar"), true), _defineProperty$2(_classNames, "t-is-".concat(tabPosition), true), _classNames)),
      style: barStyle
    });
  };

  TabBar.displayName = "TabBar";

  function ownKeys$K(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$K(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$K(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$K(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var TabNav = function TabNav(props) {
    var _props$placement = props.placement,
        placement = _props$placement === void 0 ? "top" : _props$placement,
        itemList = props.itemList,
        _props$tabClick = props.tabClick,
        tabClick = _props$tabClick === void 0 ? noop : _props$tabClick,
        theme = props.theme,
        addable = props.addable,
        onAdd = props.onAdd,
        _props$size = props.size,
        size = _props$size === void 0 ? "medium" : _props$size,
        _props$disabled = props.disabled,
        disabled = _props$disabled === void 0 ? false : _props$disabled,
        _props$onRemove = props.onRemove,
        onRemove = _props$onRemove === void 0 ? noop : _props$onRemove,
        _props$onChange = props.onChange,
        onChange = _props$onChange === void 0 ? noop : _props$onChange,
        activeValue = props.activeValue;
    var isCard = theme === "card";

    var _useTabClass = useTabClass(),
        tdTabsClassGenerator = _useTabClass.tdTabsClassGenerator,
        tdClassGenerator = _useTabClass.tdClassGenerator,
        tdSizeClassGenerator = _useTabClass.tdSizeClassGenerator;

    var navContainerRef = React.useRef(null);
    var getIndex = React.useCallback(function (value) {
      var index = 0;
      itemList.forEach(function (v, i) {
        if (v.value === value) {
          index = i;
        }
      });
      return index;
    }, [itemList]);

    var _useState = React.useState(getIndex(activeValue)),
        _useState2 = _slicedToArray(_useState, 2),
        activeIndex = _useState2[0],
        setActiveIndex = _useState2[1];

    React.useEffect(function () {
      setActiveIndex(getIndex(activeValue));
    }, [activeValue, getIndex]);

    var _useState3 = React.useState(false),
        _useState4 = _slicedToArray(_useState3, 2),
        isScrollVisible = _useState4[0],
        setIsScrollVisible = _useState4[1];

    var _useState5 = React.useState(false),
        _useState6 = _slicedToArray(_useState5, 2),
        leftScrollBtnVisible = _useState6[0],
        setLeftScrollBtnVisible = _useState6[1];

    var _useState7 = React.useState(false),
        _useState8 = _slicedToArray(_useState7, 2),
        rightScrollBtnVisible = _useState8[0],
        setRightScrollBtnVisible = _useState8[1];

    var scrollBarRef = React.useRef(null);

    var getScrollBtnVisible = function getScrollBtnVisible() {
      var scrollLeft = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : void 0;

      if (!scrollBarRef.current || !navContainerRef.current) {
        console.error("[tdesign-tabs]\u6EDA\u52A8\u6761\u548C\u5185\u5BB9\u533A dom \u7ED3\u6784\u5F02\u5E38");
        return [false, false, false];
      }

      var innerScrollLeft = scrollBarRef.current.scrollLeft;

      if (scrollLeft !== void 0) {
        innerScrollLeft = scrollLeft;
      }

      var isScrollVisible2 = scrollBarRef.current.clientWidth < navContainerRef.current.clientWidth;
      var leftVisible = innerScrollLeft > 0;
      var rightVisible = isScrollVisible2 && innerScrollLeft < navContainerRef.current.clientWidth - scrollBarRef.current.clientWidth;
      return [isScrollVisible2, leftVisible, rightVisible];
    };

    var setScrollBtnVisibleHandler = function setScrollBtnVisibleHandler() {
      var scrollLeft = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : void 0;

      var _getScrollBtnVisible = getScrollBtnVisible(scrollLeft),
          _getScrollBtnVisible2 = _slicedToArray(_getScrollBtnVisible, 3),
          isScrollVisible2 = _getScrollBtnVisible2[0],
          leftVisible = _getScrollBtnVisible2[1],
          rightVisible = _getScrollBtnVisible2[2];

      setIsScrollVisible(isScrollVisible2);
      setLeftScrollBtnVisible(leftVisible);
      setRightScrollBtnVisible(rightVisible);
    };

    var scrollClickHandler = function scrollClickHandler(position) {
      var ref = scrollBarRef.current;

      if (ref) {
        var scrollLeft = position === "left" ? ref.scrollLeft - 200 : ref.scrollLeft + 200;
        ref.scrollTo({
          left: scrollLeft,
          behavior: "smooth"
        });
        setScrollBtnVisibleHandler(scrollLeft);
      }
    };

    var scrollToRightEnd = function scrollToRightEnd() {
      if (navContainerRef.current && scrollBarRef.current) {
        var scrollLeft = navContainerRef.current.clientWidth - scrollBarRef.current.clientWidth;
        scrollBarRef.current.scrollTo({
          left: scrollLeft,
          behavior: "smooth"
        });
        setScrollBtnVisibleHandler(scrollLeft);
      }
    };

    var TabBarCom = isCard ? null : /* @__PURE__ */React__default["default"].createElement(TabBar, {
      tabPosition: placement,
      activeId: activeIndex,
      containerRef: navContainerRef
    });
    React.useEffect(function () {
      setScrollBtnVisibleHandler();
    }, []);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(tdTabsClassGenerator("header"), tdClassGenerator("is-".concat(placement)))
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(tdTabsClassGenerator("nav"))
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(tdTabsClassGenerator("operations"), tdTabsClassGenerator("operations--left"))
    }, leftScrollBtnVisible ? /* @__PURE__ */React__default["default"].createElement("div", {
      onClick: function onClick() {
        scrollClickHandler("left");
      },
      className: classNames$1(tdTabsClassGenerator("btn"), tdTabsClassGenerator("btn--left"), tdSizeClassGenerator(size))
    }, /* @__PURE__ */React__default["default"].createElement(ChevronLeftIcon, null)) : null), /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(tdTabsClassGenerator("operations"), tdTabsClassGenerator("operations--right"))
    }, rightScrollBtnVisible ? /* @__PURE__ */React__default["default"].createElement("div", {
      onClick: function onClick() {
        scrollClickHandler("right");
      },
      className: classNames$1(tdTabsClassGenerator("btn"), tdTabsClassGenerator("btn--right"), tdSizeClassGenerator(size))
    }, /* @__PURE__ */React__default["default"].createElement(ChevronRightIcon, null)) : null, addable ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(tdTabsClassGenerator("add-btn"), tdTabsClassGenerator("btn"), tdSizeClassGenerator(size)),
      onClick: function onClick(e) {
        onAdd({
          e: e
        });
        setTimeout(function () {
          scrollToRightEnd();
        }, 0);
      }
    }, /* @__PURE__ */React__default["default"].createElement(AddIcon, null)) : null), /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(tdTabsClassGenerator("nav-container"), isCard ? tdTabsClassGenerator("nav--card") : "", tdClassGenerator("is-".concat(placement)), addable ? tdClassGenerator("is-addable") : "")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(tdTabsClassGenerator("nav-scroll"), isScrollVisible ? tdClassGenerator("is-scrollable") : ""),
      ref: scrollBarRef
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(tdTabsClassGenerator("nav-wrap"), ["left", "right"].includes(placement) ? tdClassGenerator("is-vertical") : ""),
      ref: navContainerRef
    }, placement !== "bottom" ? TabBarCom : null, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(tdTabsClassGenerator("bar"), tdClassGenerator("is-".concat(placement)))
    }), itemList.map(function (v, index) {
      return /* @__PURE__ */React__default["default"].createElement(TabNavItem, _objectSpread$K(_objectSpread$K(_objectSpread$K({}, props), v), {}, {
        onRemove: v.onRemove,
        key: v.value,
        label: v.label,
        isActive: activeValue === v.value,
        theme: theme,
        placement: placement,
        index: index,
        disabled: disabled || v.disabled,
        onClick: function onClick() {
          tabClick(v.value);
          onChange(v.value);
          setActiveIndex(getIndex(v.value));
        },
        onTabRemove: onRemove
      }));
    }), placement === "bottom" ? TabBarCom : null)))));
  };

  TabNav.displayName = "TabNav";

  var TabPanel$1 = function TabPanel(props) {
    var _useTabClass = useTabClass(),
        tdTabPanelClassPrefix = _useTabClass.tdTabPanelClassPrefix;

    var style = props.style;
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(tdTabPanelClassPrefix),
      style: style
    }, props.children);
  };

  TabPanel$1.displayName = "TabPanel";

  function ownKeys$J(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$J(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$J(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$J(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var Tabs$1 = forwardRefWithStatics(function (props, ref) {
    var children = props.children,
        placement = props.placement,
        onRemove = props.onRemove,
        tabValue = props.value;
    var defaultValue = props.defaultValue;

    var _useTabClass = useTabClass(),
        tdTabsClassPrefix = _useTabClass.tdTabsClassPrefix,
        tdTabsClassGenerator = _useTabClass.tdTabsClassGenerator,
        tdClassGenerator = _useTabClass.tdClassGenerator;

    var itemList = React__default["default"].Children.map(children, function (child) {
      if (child && child.type === TabPanel$1) {
        return child.props;
      }

      return null;
    });

    if (defaultValue === void 0 && Array.isArray(itemList) && itemList.length !== 0) {
      defaultValue = itemList[0].value;
    }

    var _useState = React.useState(defaultValue),
        _useState2 = _slicedToArray(_useState, 2),
        value = _useState2[0],
        setValue = _useState2[1];

    React.useEffect(function () {
      tabValue !== void 0 && setValue(tabValue);
    }, [tabValue]);

    var renderTabNav = function renderTabNav() {
      return /* @__PURE__ */React__default["default"].createElement(TabNav, _objectSpread$J(_objectSpread$J({}, props), {}, {
        activeValue: value,
        onRemove: onRemove,
        itemList: itemList,
        tabClick: setValue
      }));
    };

    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: ref,
      className: classNames$1(tdTabsClassPrefix)
    }, placement !== "bottom" ? renderTabNav() : null, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(tdTabsClassGenerator("content"), tdClassGenerator("is-".concat(placement)))
    }, React__default["default"].Children.map(children, function (child) {
      if (child && child.type === TabPanel$1) {
        if (child.props.value === value) {
          return child;
        }

        if (child.props.renderOnHide) {
          return /* @__PURE__ */React__default["default"].createElement(TabPanel$1, {
            style: {
              display: "none"
            }
          }, child.props.children);
        }
      }

      return null;
    })), placement === "bottom" ? renderTabNav() : null);
  }, {
    TabPanel: TabPanel$1
  });
  Tabs$1.displayName = "Tabs";

  var Tabs = Tabs$1;

  var blockName$1 = "notification";
  var NotificationComponent = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _props$title = props.title,
        title = _props$title === void 0 ? null : _props$title,
        _props$content = props.content,
        content = _props$content === void 0 ? null : _props$content,
        _props$theme = props.theme,
        theme = _props$theme === void 0 ? null : _props$theme,
        _props$icon = props.icon,
        icon = _props$icon === void 0 ? null : _props$icon,
        closeBtn = props.closeBtn,
        _props$footer = props.footer,
        footer = _props$footer === void 0 ? null : _props$footer,
        _props$duration = props.duration,
        duration = _props$duration === void 0 ? 3e3 : _props$duration,
        _props$onCloseBtnClic = props.onCloseBtnClick,
        onCloseBtnClick = _props$onCloseBtnClic === void 0 ? noop : _props$onCloseBtnClic,
        _props$onDurationEnd = props.onDurationEnd,
        onDurationEnd = _props$onDurationEnd === void 0 ? noop : _props$onDurationEnd,
        style = props.style;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var prefixCls = React__default["default"].useCallback(function () {
      var className = "";

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      args.forEach(function (item, index) {
        if (item && index > 0) className = className.concat(" ");

        if (item instanceof Array) {
          var _item = _slicedToArray(item, 3),
              block = _item[0],
              element = _item[1],
              modifier = _item[2];

          className = className.concat(classPrefix, "-", block);
          if (element) className = className.concat("__", element);
          if (modifier) className = className.concat("--", modifier);
        } else if (typeof item === "string") {
          className = className.concat(classPrefix, "-", item);
        }
      });
      return className;
    }, [classPrefix]);
    React__default["default"].useImperativeHandle(ref, function () {
      return {
        close: close
      };
    }, []);
    React__default["default"].useEffect(function () {
      var timer;

      if (duration > 0) {
        timer = setTimeout(function () {
          clearTimeout(timer);
          onDurationEnd();
        }, duration);
      }

      return function () {
        if (timer) clearTimeout(timer);
      };
    }, []);

    var renderIcon = function renderIcon() {
      var IconWrapper = function IconWrapper(_ref) {
        var children = _ref.children;
        return /* @__PURE__ */React__default["default"].createElement("div", {
          className: "".concat(classPrefix, "-notification__icon")
        }, children);
      };

      if ( /*#__PURE__*/React__default["default"].isValidElement(icon)) {
        return /* @__PURE__ */React__default["default"].createElement(IconWrapper, null, icon);
      }

      if (theme && theme === "success") {
        return /* @__PURE__ */React__default["default"].createElement(IconWrapper, null, /* @__PURE__ */React__default["default"].createElement(CheckCircleFilledIcon, {
          className: prefixCls("is-success")
        }));
      }

      if (theme && ["info", "warning", "error"].indexOf(theme) >= 0) {
        return /* @__PURE__ */React__default["default"].createElement(IconWrapper, null, /* @__PURE__ */React__default["default"].createElement(InfoCircleFilledIcon, {
          className: prefixCls("is-".concat(theme))
        }));
      }

      return null;
    };

    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: ref,
      className: prefixCls(blockName$1),
      style: style
    }, renderIcon(), /* @__PURE__ */React__default["default"].createElement("div", {
      className: prefixCls([blockName$1, "main"])
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: prefixCls([blockName$1, "title__wrap"])
    }, /* @__PURE__ */React__default["default"].createElement("span", {
      className: prefixCls([blockName$1, "title"])
    }, title), function () {
      if (typeof closeBtn === "boolean" && closeBtn) {
        return /* @__PURE__ */React__default["default"].createElement(CloseIcon, {
          className: prefixCls("icon-close"),
          onClick: function onClick(e) {
            onCloseBtnClick({
              e: e
            });
          }
        });
      }

      if ( /*#__PURE__*/React__default["default"].isValidElement(closeBtn)) {
        return /* @__PURE__ */React__default["default"].createElement("div", {
          onClick: function onClick(e) {
            onCloseBtnClick({
              e: e
            });
          }
        }, closeBtn);
      }

      return null;
    }()), function () {
      if (typeof content === "string") {
        return /* @__PURE__ */React__default["default"].createElement("div", {
          className: prefixCls([blockName$1, "content"])
        }, content);
      }

      if ( /*#__PURE__*/React__default["default"].isValidElement(content)) return content;
      return null;
    }(), /*#__PURE__*/React__default["default"].isValidElement(footer) && /* @__PURE__ */React__default["default"].createElement("div", {
      className: prefixCls([blockName$1, "detail"])
    }, footer), typeof footer === "function" && /* @__PURE__ */React__default["default"].createElement("div", {
      className: prefixCls([blockName$1, "detail"])
    }, footer())));
  });

  function ownKeys$I(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$I(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$I(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$I(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var seed = 0;
  var listMap = /* @__PURE__ */new Map();
  var NotificationList = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var attach = props.attach,
        placement = props.placement,
        zIndex = props.zIndex;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _React$useReducer = React__default["default"].useReducer(function (state, action) {
      switch (action.type) {
        case "push":
          return [].concat(_toConsumableArray(state), [action.value]);

        case "remove":
          return state.filter(function (item) {
            return item.key !== action.key;
          }).map(function (item) {
            return item;
          });

        case "removeAll":
          return [];

        default:
          return state;
      }
    }, []),
        _React$useReducer2 = _slicedToArray(_React$useReducer, 2),
        list = _React$useReducer2[0],
        dispatchList = _React$useReducer2[1];

    var notificationMap = React__default["default"].useMemo(function () {
      return /* @__PURE__ */new Map();
    }, []);
    var remove = React__default["default"].useCallback(function (key) {
      dispatchList({
        type: "remove",
        key: key
      });
      notificationMap["delete"](key);
    }, [notificationMap]);

    var calOffset = function calOffset(offset) {
      if (!offset) return "16px";
      return isNaN(Number(offset)) ? offset : "".concat(offset, "px");
    };

    var push = React__default["default"].useCallback(function (theme, options) {
      return new Promise(function (resolve) {
        var key = String(seed += 1);

        var style = function () {
          if (Array.isArray(options.offset)) {
            var _ref = _toConsumableArray(options.offset),
                horizontal = _ref[0],
                vertical = _ref[1];

            var horizontalOffset = calOffset(horizontal);
            var verticalOffset = calOffset(vertical);
            return {
              marginTop: verticalOffset,
              marginBottom: verticalOffset,
              marginLeft: horizontalOffset,
              marginRight: horizontalOffset
            };
          }

          return {
            margin: "16px"
          };
        }();

        notificationMap.set(key, /*#__PURE__*/React__default["default"].createRef());
        dispatchList({
          type: "push",
          value: _objectSpread$I(_objectSpread$I({}, options), {}, {
            key: key,
            theme: theme,
            style: style
          })
        });

        notificationMap.get(key).current.close = function () {
          remove(key);
        };

        resolve(notificationMap.get(key).current);
      });
    }, [notificationMap, remove]);
    var removeAll = React__default["default"].useCallback(function () {
      dispatchList({
        type: "removeAll"
      });
      notificationMap.clear();
    }, [notificationMap]);
    React__default["default"].useImperativeHandle(ref, function () {
      return {
        push: push,
        remove: remove,
        removeAll: removeAll
      };
    });
    React__default["default"].useEffect(function () {
      if (list.length === 0 && notificationMap.size === 0) {
        listMap["delete"](placement);
        ReactDOM__default["default"].unmountComponentAtNode(attach);
        attach.remove();
      }
    }, [list, attach, placement, notificationMap]);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-notification__show--").concat(placement),
      style: {
        zIndex: zIndex
      }
    }, list.map(function (props2) {
      var _props2$onDurationEnd = props2.onDurationEnd,
          _onDurationEnd = _props2$onDurationEnd === void 0 ? noop : _props2$onDurationEnd,
          _props2$onCloseBtnCli = props2.onCloseBtnClick,
          _onCloseBtnClick = _props2$onCloseBtnCli === void 0 ? noop : _props2$onCloseBtnCli;

      return /* @__PURE__ */React__default["default"].createElement(NotificationComponent, _objectSpread$I(_objectSpread$I({
        theme: "warning",
        ref: notificationMap.get(props2.key),
        key: props2.key
      }, props2), {}, {
        onDurationEnd: function onDurationEnd() {
          remove(props2.key);

          _onDurationEnd();
        },
        onCloseBtnClick: function onCloseBtnClick(e) {
          remove(props2.key);

          _onCloseBtnClick(e);
        }
      }));
    }));
  });
  var fetchListInstance = function fetchListInstance(placement, attach, zIndex) {
    return new Promise(function (resolve) {
      if (listMap.has(placement)) {
        resolve(listMap.get(placement));
      } else {
        var hasExec = false;
        ReactDOM__default["default"].render( /* @__PURE__ */React__default["default"].createElement(NotificationList, {
          attach: attach,
          placement: placement,
          zIndex: Number(zIndex),
          ref: function ref(instance) {
            if (!hasExec) {
              hasExec = true;
              listMap.set(placement, instance);
              resolve(instance);
            }
          }
        }), attach);
      }
    });
  };

  var renderNotification = function renderNotification(theme, options) {
    if (_typeof(options) !== "object") return;

    var placement = function () {
      if (["top-left", "top-right", "bottom-left", "bottom-right"].indexOf(options.placement) >= 0) {
        return options.placement;
      }

      return "top-right";
    }();

    var attach = function () {
      if (options.attach && typeof options.attach === "string") {
        var element2 = document.querySelector(options.attach);
        if (element2 instanceof HTMLElement) return element2;
      }

      if (options.attach instanceof HTMLElement) return options.attach;
      var containerId = "tdesign-notification-".concat(placement);
      var container = document.querySelector("#".concat(containerId));

      if (container && container instanceof HTMLElement) {
        return container;
      }

      var element = document.createElement("div");
      element.setAttribute("id", containerId);
      document.body.appendChild(element);
      return element;
    }();

    var zIndex = options.zIndex || 6e3;
    return fetchListInstance(placement, attach, zIndex).then(function (listInstance) {
      return listInstance.push(theme, options);
    });
  };

  var NotificationPlugin = function NotificationPlugin(theme, props) {
    return renderNotification(theme, props);
  };

  NotificationPlugin.info = function (options) {
    return renderNotification("info", options);
  };

  NotificationPlugin.success = function (options) {
    return renderNotification("success", options);
  };

  NotificationPlugin.warning = function (options) {
    return renderNotification("warning", options);
  };

  NotificationPlugin.error = function (options) {
    return renderNotification("error", options);
  };

  NotificationPlugin.close = function (promise) {
    return promise.then(function (instance) {
      return instance.close();
    });
  };

  NotificationPlugin.closeAll = function () {
    return listMap.forEach(function (list) {
      return list.removeAll();
    });
  };

  var notification = NotificationPlugin;

  var Notification = NotificationComponent;

  var MenuContext = /*#__PURE__*/React.createContext({
    setState: noop,
    onExpand: noop
  });

  var DEFAULT_MENU_WIDTH = [232, 64];

  var MenuBlockType = /* @__PURE__ */function (MenuBlockType2) {
    MenuBlockType2["MenuItem"] = "MenuItem";
    MenuBlockType2["SubMenu"] = "SubMenu";
    MenuBlockType2["MenuItemGroup"] = "MenuItemGroup";
    return MenuBlockType2;
  }(MenuBlockType || {});

  function checkSubMenuChildExpanded(children, expanded, value) {
    var resultExpanded = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
    var childValues = React__default["default"].Children.map(children, function (child2) {
      return child2.props.value;
    });
    var index = childValues.indexOf(value);
    var child = children[index];

    if (index > -1 && child.type.displayName === MenuBlockType.SubMenu) {
      return [].concat(_toConsumableArray(resultExpanded), [value]);
    }

    var expandedIndex = childValues.indexOf(expanded[0]);
    var expandedChild = children[expandedIndex];

    if (expandedIndex > -1 && expandedChild.type.displayName === MenuBlockType.SubMenu) {
      return checkSubMenuChildExpanded(expandedChild.props.children, expanded.slice(1), value, [].concat(_toConsumableArray(resultExpanded), [expanded[0]]));
    }

    return [value];
  }

  function ownKeys$H(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$H(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$H(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$H(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function useMenuContext(_ref) {
    var defaultValue = _ref.defaultValue,
        defaultExpanded = _ref.defaultExpanded,
        expandMutex = _ref.expandMutex,
        children = _ref.children,
        _ref$onExpand = _ref.onExpand,
        onExpand = _ref$onExpand === void 0 ? lodash.exports.noop : _ref$onExpand,
        _ref$onChange = _ref.onChange,
        onChange = _ref$onChange === void 0 ? lodash.exports.noop : _ref$onChange,
        value = _ref.value,
        expanded = _ref.expanded,
        collapsed = _ref.collapsed,
        expandType = _ref.expandType,
        theme = _ref.theme,
        mode = _ref.mode;

    var _useState = React.useState({
      active: defaultValue,
      expanded: defaultExpanded
    }),
        _useState2 = _slicedToArray(_useState, 2),
        state = _useState2[0],
        setState = _useState2[1];

    var setStateValue = function setStateValue(menuState) {
      return setState(_objectSpread$H(_objectSpread$H({}, state), menuState));
    };

    var handleExpandChange = function handleExpandChange(value2, expanded2) {
      var nextExpand = [];
      var index = expanded2.indexOf(value2);

      if (index > -1) {
        if (expandMutex) {
          nextExpand = expanded2.slice(0, index);
        } else {
          nextExpand = expanded2.filter(function (item) {
            return item !== value2;
          });
        }
      } else if (expandMutex) {
        nextExpand = checkSubMenuChildExpanded(children, expanded2, value2);
      } else {
        nextExpand = [].concat(_toConsumableArray(expanded2), [value2]);
      }

      onExpand(nextExpand);
      setState({
        expanded: nextExpand
      });
    };

    return {
      value: {
        onExpand: handleExpandChange,
        onChange: onChange,
        active: value || state.active,
        expanded: expanded || state.expanded,
        collapsed: collapsed || state.collapsed,
        setState: setStateValue,
        expandMutex: expandMutex,
        expandType: collapsed ? "popup" : expandType,
        mode: mode,
        theme: theme
      }
    };
  }

  var checkIsSubMenu = function checkIsSubMenu(child) {
    var displayName = child.type.displayName;
    return displayName === MenuBlockType.SubMenu;
  };
  var checkIsMenuItem = function checkIsMenuItem(child) {
    var displayName = child.type.displayName;
    return displayName === MenuBlockType.MenuItem;
  };

  var checkSubMenuChildrenActive = function checkSubMenuChildrenActive(children, active) {
    var activeFlag = false;
    React__default["default"].Children.forEach(children, function (child) {
      if (activeFlag) return;

      if (checkIsSubMenu(child)) {
        activeFlag = checkSubMenuChildrenActive(child.props.children, active);
      } else if (checkIsMenuItem(child)) {
        activeFlag = active === child.props.value ? true : activeFlag;
      }
    });
    return activeFlag;
  };

  var checkSubMenuActive = function checkSubMenuActive(children, active) {
    return React__default["default"].Children.toArray(children).find(function (child) {
      return checkIsSubMenu(child) && (child.props.value === active || checkSubMenuChildrenActive(child.props.children, active));
    });
  };

  function ownKeys$G(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$G(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$G(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$G(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TabPanel = Tabs.TabPanel;

  var HeadMenu = function HeadMenu(props) {
    var children = props.children,
        className = props.className,
        _props$theme = props.theme,
        theme = _props$theme === void 0 ? "light" : _props$theme,
        style = props.style,
        logo = props.logo,
        operations = props.operations;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useMenuContext = useMenuContext(_objectSpread$G(_objectSpread$G({}, props), {}, {
      children: children,
      mode: "title"
    })),
        value = _useMenuContext.value;

    var childs = React.useMemo(function () {
      if (value.expandType === "popup") return null;
      var activeMenu = checkSubMenuActive(children, value.active);
      if (!activeMenu) return null;
      var child = activeMenu.props.children;
      if (Array.isArray(child)) return child;
      if (isObject_1(child)) return [child];
      return activeMenu.props.children;
    }, [children, value.expandType, value.active]);
    var currentChildsValues = (childs === null || childs === void 0 ? void 0 : childs.length) > 0 ? childs.map(function (item) {
      return item.props.value;
    }) : [];
    return /* @__PURE__ */React__default["default"].createElement(MenuContext.Provider, {
      value: value
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(className, "".concat(classPrefix, "-head-menu"), "".concat(classPrefix, "-menu--").concat(theme)),
      style: _objectSpread$G({}, style)
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-head-menu__inner")
    }, logo && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-menu__logo")
    }, logo), /* @__PURE__ */React__default["default"].createElement("ul", {
      className: "".concat(classPrefix, "-menu")
    }, children), operations && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-menu__operations")
    }, operations)), (childs === null || childs === void 0 ? void 0 : childs.length) > 0 && /* @__PURE__ */React__default["default"].createElement("ul", {
      className: "".concat(classPrefix, "-head-menu__submenu ").concat(classPrefix, "-submenu")
    }, /* @__PURE__ */React__default["default"].createElement(Tabs, {
      value: currentChildsValues.includes(value.active) ? value.active : currentChildsValues[0],
      onChange: value.onChange
    }, childs.map(function (_ref) {
      var props2 = _ref.props;
      return /* @__PURE__ */React__default["default"].createElement(TabPanel, {
        value: props2.value,
        key: props2.value,
        label: props2.children
      });
    })))));
  };

  var getSubMenuChildCount = function getSubMenuChildCount(children) {
    var count = 0;
    React__default["default"].Children.forEach(children, function (child) {
      if (child.type.displayName === MenuBlockType.SubMenu) {
        count += getSubMenuChildCount(child.props.children) + 1;
      } else {
        count += 1;
      }
    });
    return count;
  };
  var MENU_ITEM_HEIGHT = 50;
  var getSubMenuMaxHeight = function getSubMenuMaxHeight(children) {
    return "".concat(getSubMenuChildCount(children) * MENU_ITEM_HEIGHT, "px");
  };

  var DEFAULT_SUBMENU_PADDING_LEFT = 44;
  var INCREASE_SUBMENU_PADDING_LEFT = 16;
  var cacularPaddingLeft = function cacularPaddingLeft(level) {
    return DEFAULT_SUBMENU_PADDING_LEFT + level * INCREASE_SUBMENU_PADDING_LEFT;
  };

  function ownKeys$F(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$F(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$F(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$F(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var SubAccordion = function SubAccordion(props) {
    var _classNames, _classNames2;

    var content = props.content,
        _props$children = props.children,
        children = _props$children === void 0 ? content : _props$children,
        disabled = props.disabled,
        icon = props.icon,
        title = props.title,
        value = props.value,
        className = props.className,
        style = props.style,
        _props$level = props.level,
        level = _props$level === void 0 ? 1 : _props$level;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        open = _useState2[0],
        setOpen = _useState2[1];

    var _useContext = React.useContext(MenuContext),
        _useContext$expanded = _useContext.expanded,
        expanded = _useContext$expanded === void 0 ? [] : _useContext$expanded,
        onExpand = _useContext.onExpand,
        active = _useContext.active,
        expandType = _useContext.expandType;

    var isPopUp = expandType === "popup";
    var isExpand = expanded.includes(value) && !disabled && !isPopUp;

    var handleClick = function handleClick(e) {
      e.stopPropagation();
      onExpand(value, expanded);
    };

    var handleMouseEvent = function handleMouseEvent(type) {
      if (!isPopUp) return;
      if (type === "enter") setOpen(true);else if (type === "leave") setOpen(false);
    };

    var childrens = React__default["default"].Children.map(children, function (child) {
      return /*#__PURE__*/React__default["default"].cloneElement(child, {
        className: classNames$1("".concat(classPrefix, "-menu__item--plain"), "".concat(classPrefix, "-submenu__item"), "".concat(classPrefix, "-submenu__item--icon"))
      });
    });
    var childStyle = {
      maxHeight: isExpand || open && isPopUp ? getSubMenuMaxHeight(children) : 0
    };
    var isOpen = React.useMemo(function () {
      if (disabled) return false;
      if (isPopUp) return open;
      return isExpand;
    }, [disabled, isPopUp, open, isExpand]);
    var menuPaddingLeft = cacularPaddingLeft(level - 1);
    var fakeArrowStyle = isPopUp && level > 1 ? {
      transform: "rotate(-90deg)"
    } : {};
    return /* @__PURE__ */React__default["default"].createElement("li", {
      className: classNames$1(className, "".concat(classPrefix, "-submenu"), (_classNames = {}, _defineProperty$2(_classNames, "".concat(classPrefix, "-is-disabled"), disabled), _defineProperty$2(_classNames, "".concat(classPrefix, "-is-opened"), isOpen), _classNames)),
      onClick: handleClick,
      style: style,
      onMouseEnter: function onMouseEnter() {
        return handleMouseEvent("enter");
      },
      onMouseLeave: function onMouseLeave() {
        return handleMouseEvent("leave");
      }
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-menu__item"), (_classNames2 = {}, _defineProperty$2(_classNames2, "".concat(classPrefix, "-is-opened"), isOpen), _defineProperty$2(_classNames2, "".concat(classPrefix, "-is-active"), checkSubMenuChildrenActive(children, active)), _classNames2))
    }, icon, " ", /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-menu__content")
    }, title), /* @__PURE__ */React__default["default"].createElement(FakeArrow, {
      style: fakeArrowStyle,
      isActive: isOpen,
      disabled: disabled
    })), isPopUp ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-menu__popup"), "".concat(classPrefix, "-is-vertical"), _defineProperty$2({}, "".concat(classPrefix, "-is-opened"), isOpen))
    }, /* @__PURE__ */React__default["default"].createElement("ul", {
      className: classNames$1("".concat(classPrefix, "-menu__popup-wrapper"), _defineProperty$2({}, "".concat(classPrefix, "-is-opened"), isOpen)),
      key: "popup",
      style: childStyle
    }, childrens)) : /* @__PURE__ */React__default["default"].createElement("ul", {
      key: "normal",
      style: _objectSpread$F(_objectSpread$F({}, childStyle), {}, {
        "--padding-left": "".concat(menuPaddingLeft, "px")
      }),
      className: "".concat(classPrefix, "-menu__sub")
    }, childrens));
  };

  var SubTitleMenu = function SubTitleMenu(props) {
    var _classNames6;

    var className = props.className,
        style = props.style,
        children = props.children,
        title = props.title,
        value = props.value,
        level = props.level;

    var _useContext2 = React.useContext(MenuContext),
        active = _useContext2.active,
        onChange = _useContext2.onChange,
        expandType = _useContext2.expandType;

    var _useConfig2 = useConfig$1(),
        classPrefix = _useConfig2.classPrefix;

    var _useState3 = React.useState(false),
        _useState4 = _slicedToArray(_useState3, 2),
        open = _useState4[0],
        setOpen = _useState4[1];

    var handleClick = function handleClick() {
      return onChange(value);
    };

    var subMenuRef = React.useRef();
    useRipple(subMenuRef);
    var isPopUp = expandType === "popup";
    var isActive = checkSubMenuChildrenActive(children, active) || active === value;

    var handleMouseEvent = function handleMouseEvent(type) {
      if (!isPopUp) return;
      if (type === "enter") setOpen(true);else if (type === "leave") setOpen(false);
    };

    var fakeArrowStyle = level > 1 ? {
      transform: "rotate(-90deg)"
    } : {};
    return /* @__PURE__ */React__default["default"].createElement("li", {
      className: classNames$1("".concat(classPrefix, "-submenu"), _defineProperty$2({}, "".concat(classPrefix, "-is-opened"), open)),
      onMouseEnter: function onMouseEnter() {
        return handleMouseEvent("enter");
      },
      onMouseLeave: function onMouseLeave() {
        return handleMouseEvent("leave");
      }
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      ref: subMenuRef,
      className: classNames$1(className, "".concat(classPrefix, "-menu__item"), (_classNames6 = {}, _defineProperty$2(_classNames6, "".concat(classPrefix, "-is-active"), isActive), _defineProperty$2(_classNames6, "".concat(classPrefix, "-is-opened"), open), _classNames6)),
      onClick: handleClick,
      style: style
    }, /* @__PURE__ */React__default["default"].createElement("span", null, title), isPopUp && /* @__PURE__ */React__default["default"].createElement(FakeArrow, {
      style: fakeArrowStyle,
      isActive: open
    })), isPopUp && /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-menu__popup"), _defineProperty$2({}, "".concat(classPrefix, "-is-opened"), open)),
      style: {
        "--popup-max-height": getSubMenuMaxHeight(children)
      }
    }, /* @__PURE__ */React__default["default"].createElement("ul", {
      className: classNames$1("".concat(classPrefix, "-menu__popup-wrapper"))
    }, children)));
  };

  var SubMenu = function SubMenu(props) {
    var _useContext3 = React.useContext(MenuContext),
        mode = _useContext3.mode;

    var children = props.children,
        _props$level2 = props.level,
        level = _props$level2 === void 0 ? 1 : _props$level2;
    var childElement = React__default["default"].Children.map(children, function (item) {
      return checkIsSubMenu(item) ? /*#__PURE__*/React__default["default"].cloneElement(item, {
        level: level + 1
      }) : item;
    });
    if (mode === "accordion") return /* @__PURE__ */React__default["default"].createElement(SubAccordion, _objectSpread$F({}, props), childElement);
    if (mode === "title") return /* @__PURE__ */React__default["default"].createElement(SubTitleMenu, _objectSpread$F({}, props), childElement);
    return null;
  };

  SubMenu.displayName = "SubMenu";

  function ownKeys$E(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$E(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$E(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$E(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var MenuItem = function MenuItem(props) {
    var _classNames;

    var content = props.content,
        _props$children = props.children,
        children = _props$children === void 0 ? content : _props$children,
        disabled = props.disabled,
        href = props.href,
        _props$target = props.target,
        target = _props$target === void 0 ? "_self" : _props$target,
        value = props.value,
        className = props.className,
        style = props.style,
        icon = props.icon,
        onClick = props.onClick;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var menuItemRef = React.useRef();
    useRipple(menuItemRef);

    var _useContext = React.useContext(MenuContext),
        onChange = _useContext.onChange,
        setState = _useContext.setState,
        active = _useContext.active;

    var handleClick = function handleClick(e) {
      e.stopPropagation();
      if (disabled || active === value) return;
      onClick && onClick({
        e: e
      });
      onChange(value);
      setState({
        active: value
      });
    };

    return /* @__PURE__ */React__default["default"].createElement("li", {
      ref: menuItemRef,
      className: classNames$1(className, "".concat(classPrefix, "-menu__item"), (_classNames = {}, _defineProperty$2(_classNames, "".concat(classPrefix, "-is-disabled"), disabled), _defineProperty$2(_classNames, "".concat(classPrefix, "-is-active"), value === active), _defineProperty$2(_classNames, "".concat(classPrefix, "-menu__item--plain"), !icon), _classNames)),
      style: _objectSpread$E({}, style),
      onClick: handleClick
    }, icon, href ? /* @__PURE__ */React__default["default"].createElement("a", {
      href: href,
      target: target,
      className: classNames$1("".concat(classPrefix, "-menu__item-link"))
    }, /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-menu__content")
    }, children)) : /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-menu__content")
    }, children));
  };

  MenuItem.displayName = "MenuItem";

  var MenuGroup = function MenuGroup(_ref) {
    var title = _ref.title,
        children = _ref.children;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-menu-group"))
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-menu-group__title"))
    }, title), children);
  };

  function ownKeys$D(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$D(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$D(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$D(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var Menu$1 = forwardRefWithStatics(function (props, ref) {
    var _classNames;

    var className = props.className,
        _props$width = props.width,
        width = _props$width === void 0 ? DEFAULT_MENU_WIDTH : _props$width,
        children = props.children,
        theme = props.theme,
        logo = props.logo,
        operations = props.operations,
        style = props.style;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useMenuContext = useMenuContext(_objectSpread$D(_objectSpread$D({}, props), {}, {
      children: children,
      mode: "accordion"
    })),
        value = _useMenuContext.value;

    var menuWidthArr = Array.isArray(width) ? width : [width, DEFAULT_MENU_WIDTH[1]];
    var collapsed = value.collapsed;
    return /* @__PURE__ */React__default["default"].createElement(MenuContext.Provider, {
      value: value
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      ref: ref,
      className: classNames$1(className, "".concat(classPrefix, "-default-menu"), (_classNames = {}, _defineProperty$2(_classNames, "".concat(classPrefix, "-is-collapsed"), collapsed), _defineProperty$2(_classNames, "".concat(classPrefix, "-menu--dark"), theme === "dark"), _classNames)),
      style: _objectSpread$D({
        width: collapsed ? menuWidthArr[1] : menuWidthArr[0]
      }, style)
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-default-menu__inner")
    }, logo && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-menu__logo")
    }, logo), /* @__PURE__ */React__default["default"].createElement("ul", {
      className: classNames$1("".concat(classPrefix, "-menu"), _defineProperty$2({}, "".concat(classPrefix, "-menu--scroll"), !collapsed))
    }, children), operations && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-menu__operations")
    }, operations))));
  }, {
    HeadMenu: HeadMenu,
    SubMenu: SubMenu,
    MenuItem: MenuItem,
    MenuGroup: MenuGroup
  });
  Menu$1.displayName = "Menu";

  var Menu = Menu$1;

  function ownKeys$C(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$C(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$C(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$C(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var transitionTime = 300;
  var mousePosition;

  var getClickPosition = function getClickPosition(e) {
    mousePosition = {
      x: e.clientX,
      y: e.clientY
    };
    setTimeout(function () {
      mousePosition = null;
    }, 100);
  };

  if (typeof window !== "undefined" && window.document && window.document.documentElement) {
    document.documentElement.addEventListener("click", getClickPosition, true);
  }

  var RenderDialog = function RenderDialog(props) {
    var prefixCls = props.prefixCls,
        getContainer = props.getContainer,
        visible = props.visible,
        mode = props.mode,
        zIndex = props.zIndex,
        showOverlay = props.showOverlay,
        _props$onEscKeydown = props.onEscKeydown,
        onEscKeydown = _props$onEscKeydown === void 0 ? noop : _props$onEscKeydown,
        _props$onClosed = props.onClosed,
        onClosed = _props$onClosed === void 0 ? noop : _props$onClosed,
        _props$onClose = props.onClose,
        onClose = _props$onClose === void 0 ? noop : _props$onClose,
        _props$onCloseBtnClic = props.onCloseBtnClick,
        onCloseBtnClick = _props$onCloseBtnClic === void 0 ? noop : _props$onCloseBtnClic,
        _props$onOverlayClick = props.onOverlayClick,
        onOverlayClick = _props$onOverlayClick === void 0 ? noop : _props$onOverlayClick,
        preventScrollThrough = props.preventScrollThrough,
        closeBtn = props.closeBtn;
    var wrap = React.useRef();
    var dialog = React.useRef();
    var maskRef = React.useRef();
    var bodyOverflow = React.useRef(document.body.style.overflow);
    var bodyCssTextRef = React.useRef(document.body.style.cssText);
    var isModal = mode === "modal";
    var canDraggable = props.draggable && mode === "modeless";
    React.useLayoutEffect(function () {
      if (visible) {
        if (isModal && bodyOverflow.current !== "hidden" && preventScrollThrough) {
          var scrollWidth = window.innerWidth - document.body.offsetWidth;

          if (bodyCssTextRef.current === "") {
            var bodyCssText = "overflow: hidden;";

            if (scrollWidth > 0) {
              bodyCssText += "position: relative;width: calc(100% - ".concat(scrollWidth, "px);");
            }

            document.body.style.cssText = bodyCssText;
          } else {
            if (scrollWidth > 0) {
              document.body.style.width = "calc(100% - ".concat(scrollWidth, "px)");
              document.body.style.position = "relative";
            }

            document.body.style.overflow = "hidden";
          }
        }

        if (wrap.current) {
          wrap.current.focus();
        }
      } else if (isModal) {
        document.body.style.cssText = bodyCssTextRef.current;
      }
    }, [preventScrollThrough, getContainer, visible, mode, isModal]);
    React.useEffect(function () {
      if (visible) {
        if (mousePosition && dialog.current) {
          dialog.current.style.transformOrigin = "".concat(mousePosition.x - dialog.current.offsetLeft, "px ").concat(mousePosition.y - dialog.current.offsetTop, "px");
        }
      }
    }, [visible]);

    var onAnimateLeave = function onAnimateLeave() {
      if (wrap.current) {
        wrap.current.style.display = "none";
      }

      if (isModal && preventScrollThrough) {
        isModal && (document.body.style.overflow = bodyOverflow.current);
      }

      if (!isModal) {
        var style = dialog.current.style;
        style.left = "50%";
        style.top = "50%";
      }

      onClosed && onClosed();
    };

    var onMaskClick = function onMaskClick(e) {
      if (e.target === e.currentTarget) {
        onOverlayClick({
          e: e
        });
        onClose({
          e: e,
          trigger: "overlay"
        });
      }
    };

    var handleCloseBtnClick = function handleCloseBtnClick(e) {
      onCloseBtnClick({
        e: e
      });
      onClose({
        e: e,
        trigger: "close-btn"
      });
    };

    var handleKeyDown = function handleKeyDown(e) {
      if (+e.code === 27
      /* ESC */
      || e.keyCode === 27
      /* ESC */
      ) {
        e.stopPropagation();
        onEscKeydown({
          e: e
        });
        onClose({
          e: e,
          trigger: "esc"
        });
      }
    };

    var renderDialog = function renderDialog(classNames) {
      var dest = {};

      if (props.width !== void 0) {
        dest.width = props.width;
      }

      var footer = props.footer ? /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(prefixCls, "__footer")
      }, props.footer) : null;
      var header = /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(prefixCls, "__header")
      }, props.header);
      var body = /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(prefixCls, "__body")
      }, props.body || props.children);
      var closer = closeBtn && /* @__PURE__ */React__default["default"].createElement("span", {
        onClick: handleCloseBtnClick,
        className: "".concat(prefixCls, "__close")
      }, closeBtn);

      var style = _objectSpread$C(_objectSpread$C({}, dest), props.style);

      var dialogOffset = {
        x: 0,
        y: 0
      };

      var onDialogMove = function onDialogMove(e) {
        var _dialog$current = dialog.current,
            style2 = _dialog$current.style,
            offsetWidth = _dialog$current.offsetWidth,
            offsetHeight = _dialog$current.offsetHeight,
            clientHeight = _dialog$current.clientHeight,
            clientWidth = _dialog$current.clientWidth;
        var halfHeight = clientHeight / 2;
        var halfWidth = clientWidth / 2;
        var diffX = e.clientX - dialogOffset.x;
        var diffY = e.clientY - dialogOffset.y;

        if (diffX < halfWidth) {
          diffX = halfWidth;
        }

        if (diffX > window.innerWidth - offsetWidth + halfWidth) {
          diffX = window.innerWidth - offsetWidth + halfWidth;
        }

        if (diffY < halfHeight) {
          diffY = halfHeight;
        }

        if (diffY > window.innerHeight - offsetHeight + halfHeight) {
          diffY = window.innerHeight - offsetHeight + halfHeight;
        }

        style2.left = "".concat(diffX, "px");
        style2.top = "".concat(diffY, "px");
      };

      var onDialogMoveEnd = function onDialogMoveEnd() {
        dialog.current.style.cursor = "default";
        document.removeEventListener("mousemove", onDialogMove);
        document.removeEventListener("mouseup", onDialogMoveEnd);
      };

      var onDialogMoveStart = function onDialogMoveStart(e) {
        if (canDraggable) {
          var _dialog$current2 = dialog.current,
              offsetLeft = _dialog$current2.offsetLeft,
              offsetTop = _dialog$current2.offsetTop;
          dialog.current.style.cursor = "move";
          var diffX = e.clientX - offsetLeft;
          var diffY = e.clientY - offsetTop;
          dialogOffset = {
            x: diffX,
            y: diffY
          };
          document.addEventListener("mousemove", onDialogMove);
          document.addEventListener("mouseup", onDialogMoveEnd);
        }
      };

      var dialogElement = /* @__PURE__ */React__default["default"].createElement("div", {
        ref: dialog,
        style: style,
        className: classNames$1("".concat(prefixCls), "".concat(prefixCls, "--default"), classNames),
        onMouseDown: onDialogMoveStart
      }, closer, header, body, footer);
      return /* @__PURE__ */React__default["default"].createElement(CSSTransition$1, {
        key: "dialog",
        "in": props.visible,
        appear: true,
        mountOnEnter: true,
        unmountOnExit: props.destroyOnClose,
        timeout: transitionTime,
        classNames: "".concat(prefixCls, "-zoom"),
        onEntered: props.onOpened,
        onExited: onAnimateLeave,
        nodeRef: dialog
      }, dialogElement);
    };

    var renderMask = function renderMask() {
      var maskElement;

      if (showOverlay) {
        maskElement = /* @__PURE__ */React__default["default"].createElement(CSSTransition$1, {
          "in": visible,
          appear: true,
          timeout: transitionTime,
          classNames: "".concat(prefixCls, "-dialog-fade"),
          mountOnEnter: true,
          unmountOnExit: true,
          key: "mask",
          nodeRef: maskRef
        }, /* @__PURE__ */React__default["default"].createElement("div", {
          key: "mask",
          onClick: onMaskClick,
          className: "".concat(prefixCls, "__mask")
        }));
      }

      return maskElement;
    };

    var render = function render() {
      var style = {};

      if (visible) {
        style.display = "block";
      }

      var wrapStyle = _objectSpread$C(_objectSpread$C({}, style), {}, {
        zIndex: zIndex
      });

      var dialogBody = renderDialog("".concat(props.placement ? "".concat(prefixCls, "--").concat(props.placement) : ""));
      var wrapClass = classNames$1(props.className, "".concat(prefixCls, "__ctx"), "".concat(prefixCls, "__ctx--fixed"));
      var dialog2 = /* @__PURE__ */React__default["default"].createElement("div", {
        ref: wrap,
        className: wrapClass,
        style: wrapStyle,
        onKeyDown: handleKeyDown
      }, mode === "modal" && renderMask(), dialogBody);
      var dom = null;

      if (visible || wrap.current) {
        if (getContainer === false) {
          dom = dialog2;
        } else {
          dom = /* @__PURE__ */React__default["default"].createElement(Portal$1, {
            getContainer: getContainer
          }, dialog2);
        }
      }

      return dom;
    };

    return render();
  };

  function ownKeys$B(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$B(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$B(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$B(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var isFunction$1 = function isFunction(arg) {
    return typeof arg === "function";
  };

  var useSetState = function useSetState() {
    var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var _useState = React.useState(initialState),
        _useState2 = _slicedToArray(_useState, 2),
        state = _useState2[0],
        setState = _useState2[1];

    var setMergeState = React.useCallback(function (patch) {
      setState(function (prevState) {
        return _objectSpread$B(_objectSpread$B({}, prevState), isFunction$1(patch) ? patch(prevState) : patch);
      });
    }, []);
    return [state, setMergeState];
  };

  var _excluded$9 = ["visible", "attach", "closeBtn", "footer", "onCancel", "onConfirm", "cancelBtn", "confirmBtn", "onClose", "isPlugin"];

  function ownKeys$A(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$A(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$A(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$A(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var Dialog$1 = function Dialog(props, ref) {
    var _React$useContext = React__default["default"].useContext(ConfigContext$1),
        classPrefix = _React$useContext.classPrefix;

    var _useSetState = useSetState(_objectSpread$A({
      width: 520,
      visible: false,
      zIndex: 2500,
      placement: "center",
      mode: "modal",
      showOverlay: true,
      destroyOnClose: false,
      draggable: false,
      preventScrollThrough: true,
      isPlugin: false
    }, props)),
        _useSetState2 = _slicedToArray(_useSetState, 2),
        state = _useSetState2[0],
        setState = _useSetState2[1];

    var _useLocaleReceiver = useLocaleReceiver("dialog"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
        local = _useLocaleReceiver2[0],
        t = _useLocaleReceiver2[1];

    var confirmText = t(local.confirm);
    var cancelText = t(local.cancel);

    var visible = state.visible,
        _state$attach = state.attach,
        getContainer = _state$attach === void 0 ? "body" : _state$attach,
        closeBtn = state.closeBtn,
        footer = state.footer,
        _state$onCancel = state.onCancel,
        onCancel = _state$onCancel === void 0 ? noop : _state$onCancel,
        _state$onConfirm = state.onConfirm,
        onConfirm = _state$onConfirm === void 0 ? noop : _state$onConfirm,
        _state$cancelBtn = state.cancelBtn,
        cancelBtn = _state$cancelBtn === void 0 ? cancelText : _state$cancelBtn,
        _state$confirmBtn = state.confirmBtn,
        confirmBtn = _state$confirmBtn === void 0 ? confirmText : _state$confirmBtn,
        _state$onClose = state.onClose,
        onClose = _state$onClose === void 0 ? noop : _state$onClose,
        _state$isPlugin = state.isPlugin,
        isPlugin = _state$isPlugin === void 0 ? false : _state$isPlugin,
        restState = _objectWithoutProperties$1(state, _excluded$9);

    React.useEffect(function () {
      if (!isPlugin) {
        setState(function (prevState) {
          return _objectSpread$A(_objectSpread$A({}, prevState), props);
        });
      }
    }, [props, setState, isPlugin]);
    var prefixCls = "".concat(classPrefix, "-dialog");

    var renderCloseIcon = function renderCloseIcon() {
      if (closeBtn === false) return null;
      if (closeBtn === true) return /* @__PURE__ */React__default["default"].createElement(CloseIcon, {
        style: {
          verticalAlign: "unset"
        }
      });
      return closeBtn || /* @__PURE__ */React__default["default"].createElement(CloseIcon, {
        style: {
          verticalAlign: "unset"
        }
      });
    };

    React__default["default"].useImperativeHandle(ref, function () {
      return {
        show: function show() {
          setState({
            visible: true
          });
        },
        hide: function hide() {
          setState({
            visible: false
          });
        },
        destroy: noop,
        update: function update(newOptions) {
          setState(function (prevState) {
            return _objectSpread$A(_objectSpread$A({}, prevState), newOptions);
          });
        }
      };
    });
    var renderHeader = React.useMemo(function () {
      if (!state.header) return null;
      var iconMap = {
        info: /* @__PURE__ */React__default["default"].createElement(InfoCircleFilledIcon, {
          className: "".concat(classPrefix, "-is-info")
        }),
        warning: /* @__PURE__ */React__default["default"].createElement(InfoCircleFilledIcon, {
          className: "".concat(classPrefix, "-is-warning")
        }),
        error: /* @__PURE__ */React__default["default"].createElement(InfoCircleFilledIcon, {
          className: "".concat(classPrefix, "-is-error")
        }),
        success: /* @__PURE__ */React__default["default"].createElement(CheckCircleFilledIcon, {
          className: "".concat(classPrefix, "-is-success")
        })
      };
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(prefixCls, "__header")
      }, iconMap[state.theme], state.header);
    }, [state.header, state.theme, prefixCls, classPrefix]);

    var handleCancel = function handleCancel(e) {
      onCancel({
        e: e
      });
      onClose({
        e: e,
        trigger: "cancel"
      });
    };

    var handleConfirm = function handleConfirm(e) {
      onConfirm({
        e: e
      });
    };

    var defaultFooter = function defaultFooter() {
      var renderCancelBtn = cancelBtn && /* @__PURE__ */React__default["default"].createElement(Button, {
        variant: "outline"
      }, isString_1(cancelBtn) ? cancelBtn : cancelText);
      var renderConfirmBtn = confirmBtn && /* @__PURE__ */React__default["default"].createElement(Button, {
        theme: "primary"
      }, isString_1(confirmBtn) ? confirmBtn : confirmText);

      if ( /*#__PURE__*/React__default["default"].isValidElement(cancelBtn)) {
        renderCancelBtn = cancelBtn;
      }

      if ( /*#__PURE__*/React__default["default"].isValidElement(confirmBtn)) {
        renderConfirmBtn = confirmBtn;
      }

      if (typeof cancelBtn === "function") {
        renderCancelBtn = cancelBtn();
      }

      if (typeof confirmBtn === "function") {
        renderConfirmBtn = confirmBtn();
      }

      return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, renderCancelBtn && /*#__PURE__*/React__default["default"].cloneElement(renderCancelBtn, _objectSpread$A({
        onClick: handleCancel
      }, renderCancelBtn.props)), renderConfirmBtn && /*#__PURE__*/React__default["default"].cloneElement(renderConfirmBtn, _objectSpread$A({
        onClick: handleConfirm
      }, renderConfirmBtn.props)));
    };

    return /* @__PURE__ */React__default["default"].createElement(RenderDialog, _objectSpread$A(_objectSpread$A({}, restState), {}, {
      visible: visible,
      prefixCls: prefixCls,
      header: renderHeader,
      getContainer: getContainer,
      closeBtn: renderCloseIcon(),
      classPrefix: classPrefix,
      onClose: onClose,
      footer: footer === void 0 ? defaultFooter() : footer
    }));
  };

  var _Dialog = /*#__PURE__*/React.forwardRef(Dialog$1);

  function ownKeys$z(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$z(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$z(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$z(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var createDialog = function createDialog(props) {
    var dialogRef = /*#__PURE__*/React__default["default"].createRef();

    var options = _objectSpread$z({}, props);

    var div = document.createElement("div");
    ReactDOM__default["default"].render( /* @__PURE__ */React__default["default"].createElement(_Dialog, _objectSpread$z(_objectSpread$z({}, options), {}, {
      visible: true,
      ref: dialogRef,
      isPlugin: true
    })), div);
    var container = getAttach$1(options.attach);

    if (container) {
      container.appendChild(div);
    } else {
      console.error("attach is not exist");
    }

    var dialogNode = {
      show: function show() {
        var _dialogRef$current;

        (_dialogRef$current = dialogRef.current) === null || _dialogRef$current === void 0 ? void 0 : _dialogRef$current.show();
      },
      hide: function hide() {
        var _dialogRef$current2;

        (_dialogRef$current2 = dialogRef.current) === null || _dialogRef$current2 === void 0 ? void 0 : _dialogRef$current2.hide();
      },
      update: function update(updateOptions) {
        var _dialogRef$current3;

        (_dialogRef$current3 = dialogRef.current) === null || _dialogRef$current3 === void 0 ? void 0 : _dialogRef$current3.update(updateOptions);
      },
      destroy: function destroy() {
        container.contains(div) && container.removeChild(div);
      }
    };
    return dialogNode;
  };

  var confirm = function confirm(props) {
    return createDialog(props);
  };

  var alert = function alert(props) {
    var options = _objectSpread$z({}, props);

    options.cancelBtn = null;
    return createDialog(options);
  };

  createDialog.alert = alert;
  createDialog.confirm = confirm;
  var dialog = createDialog;
  var DialogPlugin = createDialog;

  var Dialog = _Dialog;

  function usePersistFn(fn) {
    var fnRef = React.useRef(fn);
    fnRef.current = fn;
    var persistFn = React.useRef();

    if (!persistFn.current) {
      persistFn.current = function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return fnRef.current.apply(this, args);
      };
    }

    return persistFn.current;
  }

  function useTreeConfig() {
    var _useConfig = useConfig$1(),
        prefix = _useConfig.classPrefix;

    return React.useMemo(function () {
      var tree = "".concat(prefix, "-tree");
      var treeClassNames = {
        icon: "".concat(prefix, "-icon"),
        folderIcon: "".concat(prefix, "-folder-icon"),
        actived: "".concat(prefix, "-is-active"),
        disabled: "".concat(prefix, "-is-disabled"),
        treeIconRight: "".concat(prefix, "-icon-arrow-right"),
        treeIconDown: "".concat(prefix, "-icon-arrow-down"),
        tree: tree,
        treeFx: "".concat(tree, "--transition"),
        treeBlockNode: "".concat(tree, "--block-node"),
        treeEmpty: "".concat(tree, "__empty"),
        treeList: "".concat(tree, "__list"),
        treeNode: "".concat(tree, "__item"),
        treeNodeOpen: "".concat(tree, "__item--open"),
        treeHoverable: "".concat(tree, "--hoverable"),
        treeCheckable: "".concat(tree, "--checkable"),
        treeLabel: "".concat(tree, "__label"),
        treeLabelStrictly: "".concat(tree, "__label--strictly"),
        treeIcon: "".concat(tree, "__icon"),
        treeIconDefault: "".concat(tree, "__icon--default"),
        treeSpace: "".concat(tree, "__space"),
        treeOperations: "".concat(tree, "__operations"),
        line: "".concat(tree, "__line"),
        lineIsLeaf: "".concat(tree, "__line--leaf"),
        lineIsFirst: "".concat(tree, "__line--first"),
        treeNodeShow: "".concat(tree, "__item--show"),
        treeClickable: "".concat(tree, "__item--clickable"),
        loading: "".concat(prefix, "-icon-loading ").concat(prefix, "-icon-loading-blue"),
        toggleEnter: "".concat(tree, "__item--enter-active"),
        toggleLeave: "".concat(tree, "__item--leave-active")
      };
      var transitionNames = {
        treeNode: "".concat(prefix, "-tree-toggle")
      };
      var transitionClassNames = {
        enter: treeClassNames.toggleEnter,
        exit: treeClassNames.toggleLeave
      };
      return {
        treeClassNames: treeClassNames,
        transitionNames: transitionNames,
        transitionClassNames: transitionClassNames,
        transitionDuration: 300
      };
    }, [prefix]);
  }

  function useControllable(props) {
    var _useDefault = useDefault(props.value, props.defaultValue, props.onChange),
        _useDefault2 = _slicedToArray(_useDefault, 2),
        value = _useDefault2[0],
        onChange = _useDefault2[1];

    var _useDefault3 = useDefault(props.expanded, props.defaultExpanded, props.onExpand),
        _useDefault4 = _slicedToArray(_useDefault3, 2),
        expanded = _useDefault4[0],
        onExpand = _useDefault4[1];

    var _useDefault5 = useDefault(props.actived, props.defaultActived, props.onActive),
        _useDefault6 = _slicedToArray(_useDefault5, 2),
        actived = _useDefault6[0],
        onActive = _useDefault6[1];

    return {
      value: value,
      onChange: onChange,
      expanded: expanded,
      onExpand: onExpand,
      actived: actived,
      onActive: onActive
    };
  }

  function ownKeys$y(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$y(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$y(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$y(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TreeItem = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _classNames4;

    var node = props.node,
        icon = props.icon,
        label = props.label,
        line = props.line,
        expandOnClickNode = props.expandOnClickNode,
        activable = props.activable,
        checkProps = props.checkProps,
        disableCheck = props.disableCheck,
        operations = props.operations,
        onClick = props.onClick,
        _onChange = props.onChange;
    var level = node.level;

    var _useTreeConfig = useTreeConfig(),
        treeClassNames = _useTreeConfig.treeClassNames;

    var handleClick = function handleClick(evt) {
      onClick === null || onClick === void 0 ? void 0 : onClick(node, {
        event: evt,
        expand: expandOnClickNode,
        active: activable
      });
    };

    var handleItemClick = function handleItemClick(evt) {
      if (node.loading) {
        return;
      }

      onClick === null || onClick === void 0 ? void 0 : onClick(node, {
        event: evt,
        expand: true,
        active: false
      });
    };

    var handleIconClick = function handleIconClick(evt) {
      evt.stopPropagation();
      handleItemClick(evt);
    };

    var stopPropagation = function stopPropagation(e) {
      e.stopPropagation();
    };

    var renderIcon = function renderIcon() {
      var isDefaultIcon = false;

      var renderIconNode = function renderIconNode() {
        if (icon === false) {
          return null;
        }

        if (icon instanceof Function) {
          return icon(node.getModel());
        }

        if ( /*#__PURE__*/React__default["default"].isValidElement(icon)) {
          return icon;
        }

        if (icon && icon !== true) {
          throw new Error("invalid type of icon");
        }

        if (!node.isLeaf()) {
          isDefaultIcon = true;

          if (node.loading && node.expanded) {
            return /* @__PURE__ */React__default["default"].createElement(Loading, {
              loading: true
            });
          }

          return /* @__PURE__ */React__default["default"].createElement(CaretRightSmallIcon, {
            className: treeClassNames.treeIconRight
          });
        }

        return null;
      };

      var iconNode = renderIconNode();
      return /* @__PURE__ */React__default["default"].createElement("span", {
        className: classNames$1(treeClassNames.treeIcon, treeClassNames.folderIcon, _defineProperty$2({}, treeClassNames.treeIconDefault, isDefaultIcon)),
        onClick: handleIconClick
      }, iconNode);
    };

    var renderLine = function renderLine() {
      var iconVisible = icon !== false;

      if (line === false) {
        return null;
      }

      if (line instanceof Function) {
        return line(node.getModel());
      }

      if ( /*#__PURE__*/React__default["default"].isValidElement(line)) {
        return line;
      }

      if (node.parent && node.tree) {
        var _classNames2;

        var shadowStyles = [];
        var parents = node.getParents();
        parents.pop();
        parents.forEach(function (pnode, index) {
          if (!pnode.vmIsLast) {
            shadowStyles.push("calc(-".concat(index + 1, " * var(--space)) 0 var(--color)"));
          }
        });
        var styles2 = {
          "--level": level,
          boxShadow: shadowStyles.join(",")
        };
        return /* @__PURE__ */React__default["default"].createElement("span", {
          className: classNames$1(treeClassNames.line, (_classNames2 = {}, _defineProperty$2(_classNames2, treeClassNames.lineIsLeaf, node.vmIsLeaf || !iconVisible), _defineProperty$2(_classNames2, treeClassNames.lineIsFirst, node.vmIsFirst && iconVisible), _classNames2)),
          style: styles2,
          onClick: stopPropagation
        });
      }

      return null;
    };

    var labelRef = React.useRef();
    useRipple(labelRef);

    var renderLabel = function renderLabel() {
      var emptyView = "\u6682\u65E0\u6570\u636E";
      var labelText = "";

      if (label instanceof Function) {
        labelText = label(node.getModel()) || emptyView;
      } else {
        labelText = node.label || emptyView;
      }

      var labelClasses = classNames$1(treeClassNames.treeLabel, treeClassNames.treeLabelStrictly, _defineProperty$2({}, treeClassNames.actived, node.isActivable() ? node.actived : false));

      if (node.isCheckable()) {
        var checkboxDisabled;

        if (typeof disableCheck === "function") {
          checkboxDisabled = disableCheck(node.getModel());
        } else {
          checkboxDisabled = !!disableCheck;
        }

        if (node.isDisabled()) {
          checkboxDisabled = true;
        }

        return /* @__PURE__ */React__default["default"].createElement(Checkbox, _objectSpread$y({
          ref: labelRef,
          checked: node.checked,
          indeterminate: node.indeterminate,
          disabled: checkboxDisabled,
          name: String(node.value),
          onChange: function onChange() {
            return _onChange(node);
          },
          className: labelClasses
        }, checkProps), /* @__PURE__ */React__default["default"].createElement("span", {
          "date-target": "label"
        }, labelText));
      }

      return /* @__PURE__ */React__default["default"].createElement("span", {
        ref: labelRef,
        "date-target": "label",
        className: labelClasses
      }, /* @__PURE__ */React__default["default"].createElement("span", {
        style: {
          position: "relative"
        }
      }, labelText));
    };

    var renderOperations = function renderOperations() {
      var operationsView = null;

      if (operations) {
        if ( /*#__PURE__*/React__default["default"].isValidElement(operations)) {
          operationsView = operations;
        } else if (operations instanceof Function) {
          var treeNodeModel = node === null || node === void 0 ? void 0 : node.getModel();
          operationsView = operations(treeNodeModel);
        } else {
          throw new Error("invalid type of operations");
        }
      }

      if (operationsView) {
        return /* @__PURE__ */React__default["default"].createElement("span", {
          className: treeClassNames.treeOperations,
          "date-target": "operations"
        }, operationsView);
      }

      return null;
    };

    var styles = {
      "--level": level,
      boxShadow: ""
    };
    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: ref,
      "data-value": node.value,
      "data-level": level,
      className: classNames$1(treeClassNames.treeNode, (_classNames4 = {}, _defineProperty$2(_classNames4, treeClassNames.treeNodeOpen, node.expanded), _defineProperty$2(_classNames4, treeClassNames.actived, node.isActivable() ? node.actived : false), _defineProperty$2(_classNames4, treeClassNames.disabled, node.isDisabled()), _classNames4)),
      style: styles,
      onClick: handleClick
    }, renderLine(), renderIcon(), renderLabel(), renderOperations());
  });
  TreeItem.displayName = "TreeItem";

  var ListCache$2 = _ListCache;
  /**
   * Removes all key-value entries from the stack.
   *
   * @private
   * @name clear
   * @memberOf Stack
   */

  function stackClear$1() {
    this.__data__ = new ListCache$2();
    this.size = 0;
  }

  var _stackClear = stackClear$1;

  /**
   * Removes `key` and its value from the stack.
   *
   * @private
   * @name delete
   * @memberOf Stack
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */

  function stackDelete$1(key) {
    var data = this.__data__,
        result = data['delete'](key);
    this.size = data.size;
    return result;
  }

  var _stackDelete = stackDelete$1;

  /**
   * Gets the stack value for `key`.
   *
   * @private
   * @name get
   * @memberOf Stack
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */

  function stackGet$1(key) {
    return this.__data__.get(key);
  }

  var _stackGet = stackGet$1;

  /**
   * Checks if a stack value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Stack
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */

  function stackHas$1(key) {
    return this.__data__.has(key);
  }

  var _stackHas = stackHas$1;

  var ListCache$1 = _ListCache,
      Map$2 = _Map,
      MapCache$1 = _MapCache;
  /** Used as the size to enable large array optimizations. */

  var LARGE_ARRAY_SIZE$1 = 200;
  /**
   * Sets the stack `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Stack
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the stack cache instance.
   */

  function stackSet$1(key, value) {
    var data = this.__data__;

    if (data instanceof ListCache$1) {
      var pairs = data.__data__;

      if (!Map$2 || pairs.length < LARGE_ARRAY_SIZE$1 - 1) {
        pairs.push([key, value]);
        this.size = ++data.size;
        return this;
      }

      data = this.__data__ = new MapCache$1(pairs);
    }

    data.set(key, value);
    this.size = data.size;
    return this;
  }

  var _stackSet = stackSet$1;

  var ListCache = _ListCache,
      stackClear = _stackClear,
      stackDelete = _stackDelete,
      stackGet = _stackGet,
      stackHas = _stackHas,
      stackSet = _stackSet;
  /**
   * Creates a stack cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */

  function Stack$3(entries) {
    var data = this.__data__ = new ListCache(entries);
    this.size = data.size;
  } // Add methods to `Stack`.


  Stack$3.prototype.clear = stackClear;
  Stack$3.prototype['delete'] = stackDelete;
  Stack$3.prototype.get = stackGet;
  Stack$3.prototype.has = stackHas;
  Stack$3.prototype.set = stackSet;
  var _Stack = Stack$3;

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */

  function arrayEach$1(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }

    return array;
  }

  var _arrayEach = arrayEach$1;

  var getNative$4 = _getNative;

  var defineProperty$2 = function () {
    try {
      var func = getNative$4(Object, 'defineProperty');
      func({}, '', {});
      return func;
    } catch (e) {}
  }();

  var _defineProperty = defineProperty$2;

  var defineProperty$1 = _defineProperty;
  /**
   * The base implementation of `assignValue` and `assignMergeValue` without
   * value checks.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */

  function baseAssignValue$2(object, key, value) {
    if (key == '__proto__' && defineProperty$1) {
      defineProperty$1(object, key, {
        'configurable': true,
        'enumerable': true,
        'value': value,
        'writable': true
      });
    } else {
      object[key] = value;
    }
  }

  var _baseAssignValue = baseAssignValue$2;

  var baseAssignValue$1 = _baseAssignValue,
      eq$2 = eq_1;
  /** Used for built-in method references. */

  var objectProto$b = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$a = objectProto$b.hasOwnProperty;
  /**
   * Assigns `value` to `key` of `object` if the existing value is not equivalent
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */

  function assignValue$3(object, key, value) {
    var objValue = object[key];

    if (!(hasOwnProperty$a.call(object, key) && eq$2(objValue, value)) || value === undefined && !(key in object)) {
      baseAssignValue$1(object, key, value);
    }
  }

  var _assignValue = assignValue$3;

  var assignValue$2 = _assignValue,
      baseAssignValue = _baseAssignValue;
  /**
   * Copies properties of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy properties from.
   * @param {Array} props The property identifiers to copy.
   * @param {Object} [object={}] The object to copy properties to.
   * @param {Function} [customizer] The function to customize copied values.
   * @returns {Object} Returns `object`.
   */

  function copyObject$5(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {});
    var index = -1,
        length = props.length;

    while (++index < length) {
      var key = props[index];
      var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

      if (newValue === undefined) {
        newValue = source[key];
      }

      if (isNew) {
        baseAssignValue(object, key, newValue);
      } else {
        assignValue$2(object, key, newValue);
      }
    }

    return object;
  }

  var _copyObject = copyObject$5;

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */

  function baseTimes$1(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }

    return result;
  }

  var _baseTimes = baseTimes$1;

  var baseGetTag$5 = _baseGetTag,
      isObjectLike$9 = isObjectLike_1;
  /** `Object#toString` result references. */

  var argsTag$3 = '[object Arguments]';
  /**
   * The base implementation of `_.isArguments`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   */

  function baseIsArguments$1(value) {
    return isObjectLike$9(value) && baseGetTag$5(value) == argsTag$3;
  }

  var _baseIsArguments = baseIsArguments$1;

  var baseIsArguments = _baseIsArguments,
      isObjectLike$8 = isObjectLike_1;
  /** Used for built-in method references. */

  var objectProto$a = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$9 = objectProto$a.hasOwnProperty;
  /** Built-in value references. */

  var propertyIsEnumerable$1 = objectProto$a.propertyIsEnumerable;
  /**
   * Checks if `value` is likely an `arguments` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   *  else `false`.
   * @example
   *
   * _.isArguments(function() { return arguments; }());
   * // => true
   *
   * _.isArguments([1, 2, 3]);
   * // => false
   */

  var isArguments$4 = baseIsArguments(function () {
    return arguments;
  }()) ? baseIsArguments : function (value) {
    return isObjectLike$8(value) && hasOwnProperty$9.call(value, 'callee') && !propertyIsEnumerable$1.call(value, 'callee');
  };
  var isArguments_1 = isArguments$4;

  var isBuffer$4 = {exports: {}};

  /**
   * This method returns `false`.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {boolean} Returns `false`.
   * @example
   *
   * _.times(2, _.stubFalse);
   * // => [false, false]
   */

  function stubFalse() {
    return false;
  }

  var stubFalse_1 = stubFalse;

  (function (module, exports) {
    var root = _root,
        stubFalse = stubFalse_1;
    /** Detect free variable `exports`. */

    var freeExports = exports && !exports.nodeType && exports;
    /** Detect free variable `module`. */

    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;
    /** Detect the popular CommonJS extension `module.exports`. */

    var moduleExports = freeModule && freeModule.exports === freeExports;
    /** Built-in value references. */

    var Buffer = moduleExports ? root.Buffer : undefined;
    /* Built-in method references for those with the same name as other `lodash` methods. */

    var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */

    var isBuffer = nativeIsBuffer || stubFalse;
    module.exports = isBuffer;
  })(isBuffer$4, isBuffer$4.exports);

  var MAX_SAFE_INTEGER$2 = 9007199254740991;
  /** Used to detect unsigned integer values. */

  var reIsUint = /^(?:0|[1-9]\d*)$/;
  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */

  function isIndex$4(value, length) {
    var type = _typeof(value);

    length = length == null ? MAX_SAFE_INTEGER$2 : length;
    return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
  }

  var _isIndex = isIndex$4;

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER$1 = 9007199254740991;
  /**
   * Checks if `value` is a valid array-like length.
   *
   * **Note:** This method is loosely based on
   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
   * @example
   *
   * _.isLength(3);
   * // => true
   *
   * _.isLength(Number.MIN_VALUE);
   * // => false
   *
   * _.isLength(Infinity);
   * // => false
   *
   * _.isLength('3');
   * // => false
   */

  function isLength$3(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$1;
  }

  var isLength_1 = isLength$3;

  var baseGetTag$4 = _baseGetTag,
      isLength$2 = isLength_1,
      isObjectLike$7 = isObjectLike_1;
  /** `Object#toString` result references. */

  var argsTag$2 = '[object Arguments]',
      arrayTag$2 = '[object Array]',
      boolTag$4 = '[object Boolean]',
      dateTag$4 = '[object Date]',
      errorTag$2 = '[object Error]',
      funcTag$1 = '[object Function]',
      mapTag$6 = '[object Map]',
      numberTag$3 = '[object Number]',
      objectTag$4 = '[object Object]',
      regexpTag$3 = '[object RegExp]',
      setTag$6 = '[object Set]',
      stringTag$3 = '[object String]',
      weakMapTag$2 = '[object WeakMap]';
  var arrayBufferTag$3 = '[object ArrayBuffer]',
      dataViewTag$4 = '[object DataView]',
      float32Tag$2 = '[object Float32Array]',
      float64Tag$2 = '[object Float64Array]',
      int8Tag$2 = '[object Int8Array]',
      int16Tag$2 = '[object Int16Array]',
      int32Tag$2 = '[object Int32Array]',
      uint8Tag$2 = '[object Uint8Array]',
      uint8ClampedTag$2 = '[object Uint8ClampedArray]',
      uint16Tag$2 = '[object Uint16Array]',
      uint32Tag$2 = '[object Uint32Array]';
  /** Used to identify `toStringTag` values of typed arrays. */

  var typedArrayTags = {};
  typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] = typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] = typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] = typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] = typedArrayTags[uint32Tag$2] = true;
  typedArrayTags[argsTag$2] = typedArrayTags[arrayTag$2] = typedArrayTags[arrayBufferTag$3] = typedArrayTags[boolTag$4] = typedArrayTags[dataViewTag$4] = typedArrayTags[dateTag$4] = typedArrayTags[errorTag$2] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag$6] = typedArrayTags[numberTag$3] = typedArrayTags[objectTag$4] = typedArrayTags[regexpTag$3] = typedArrayTags[setTag$6] = typedArrayTags[stringTag$3] = typedArrayTags[weakMapTag$2] = false;
  /**
   * The base implementation of `_.isTypedArray` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   */

  function baseIsTypedArray$1(value) {
    return isObjectLike$7(value) && isLength$2(value.length) && !!typedArrayTags[baseGetTag$4(value)];
  }

  var _baseIsTypedArray = baseIsTypedArray$1;

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */

  function baseUnary$5(func) {
    return function (value) {
      return func(value);
    };
  }

  var _baseUnary = baseUnary$5;

  var _nodeUtil = {exports: {}};

  (function (module, exports) {
    var freeGlobal = _freeGlobal;
    /** Detect free variable `exports`. */

    var freeExports = exports && !exports.nodeType && exports;
    /** Detect free variable `module`. */

    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;
    /** Detect the popular CommonJS extension `module.exports`. */

    var moduleExports = freeModule && freeModule.exports === freeExports;
    /** Detect free variable `process` from Node.js. */

    var freeProcess = moduleExports && freeGlobal.process;
    /** Used to access faster Node.js helpers. */

    var nodeUtil = function () {
      try {
        // Use `util.types` for Node.js 10+.
        var types = freeModule && freeModule.require && freeModule.require('util').types;

        if (types) {
          return types;
        } // Legacy `process.binding('util')` for Node.js < 10.


        return freeProcess && freeProcess.binding && freeProcess.binding('util');
      } catch (e) {}
    }();

    module.exports = nodeUtil;
  })(_nodeUtil, _nodeUtil.exports);

  var baseIsTypedArray = _baseIsTypedArray,
      baseUnary$4 = _baseUnary,
      nodeUtil$3 = _nodeUtil.exports;
  /* Node.js helper references. */

  var nodeIsTypedArray = nodeUtil$3 && nodeUtil$3.isTypedArray;
  /**
   * Checks if `value` is classified as a typed array.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   * @example
   *
   * _.isTypedArray(new Uint8Array);
   * // => true
   *
   * _.isTypedArray([]);
   * // => false
   */

  var isTypedArray$3 = nodeIsTypedArray ? baseUnary$4(nodeIsTypedArray) : baseIsTypedArray;
  var isTypedArray_1 = isTypedArray$3;

  var baseTimes = _baseTimes,
      isArguments$3 = isArguments_1,
      isArray$7 = isArray_1,
      isBuffer$3 = isBuffer$4.exports,
      isIndex$3 = _isIndex,
      isTypedArray$2 = isTypedArray_1;
  /** Used for built-in method references. */

  var objectProto$9 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$8 = objectProto$9.hasOwnProperty;
  /**
   * Creates an array of the enumerable property names of the array-like `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @param {boolean} inherited Specify returning inherited property names.
   * @returns {Array} Returns the array of property names.
   */

  function arrayLikeKeys$2(value, inherited) {
    var isArr = isArray$7(value),
        isArg = !isArr && isArguments$3(value),
        isBuff = !isArr && !isArg && isBuffer$3(value),
        isType = !isArr && !isArg && !isBuff && isTypedArray$2(value),
        skipIndexes = isArr || isArg || isBuff || isType,
        result = skipIndexes ? baseTimes(value.length, String) : [],
        length = result.length;

    for (var key in value) {
      if ((inherited || hasOwnProperty$8.call(value, key)) && !(skipIndexes && ( // Safari 9 has enumerable `arguments.length` in strict mode.
      key == 'length' || // Node.js 0.10 has enumerable non-index properties on buffers.
      isBuff && (key == 'offset' || key == 'parent') || // PhantomJS 2 has enumerable non-index properties on typed arrays.
      isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.
      isIndex$3(key, length)))) {
        result.push(key);
      }
    }

    return result;
  }

  var _arrayLikeKeys = arrayLikeKeys$2;

  /** Used for built-in method references. */
  var objectProto$8 = Object.prototype;
  /**
   * Checks if `value` is likely a prototype object.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
   */

  function isPrototype$4(value) {
    var Ctor = value && value.constructor,
        proto = typeof Ctor == 'function' && Ctor.prototype || objectProto$8;
    return value === proto;
  }

  var _isPrototype = isPrototype$4;

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */

  function overArg$2(func, transform) {
    return function (arg) {
      return func(transform(arg));
    };
  }

  var _overArg = overArg$2;

  var overArg$1 = _overArg;
  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeKeys$1 = overArg$1(Object.keys, Object);
  var _nativeKeys = nativeKeys$1;

  var isPrototype$3 = _isPrototype,
      nativeKeys = _nativeKeys;
  /** Used for built-in method references. */

  var objectProto$7 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$7 = objectProto$7.hasOwnProperty;
  /**
   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */

  function baseKeys$2(object) {
    if (!isPrototype$3(object)) {
      return nativeKeys(object);
    }

    var result = [];

    for (var key in Object(object)) {
      if (hasOwnProperty$7.call(object, key) && key != 'constructor') {
        result.push(key);
      }
    }

    return result;
  }

  var _baseKeys = baseKeys$2;

  var isFunction = isFunction_1,
      isLength$1 = isLength_1;
  /**
   * Checks if `value` is array-like. A value is considered array-like if it's
   * not a function and has a `value.length` that's an integer greater than or
   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
   * @example
   *
   * _.isArrayLike([1, 2, 3]);
   * // => true
   *
   * _.isArrayLike(document.body.children);
   * // => true
   *
   * _.isArrayLike('abc');
   * // => true
   *
   * _.isArrayLike(_.noop);
   * // => false
   */

  function isArrayLike$5(value) {
    return value != null && isLength$1(value.length) && !isFunction(value);
  }

  var isArrayLike_1 = isArrayLike$5;

  var arrayLikeKeys$1 = _arrayLikeKeys,
      baseKeys$1 = _baseKeys,
      isArrayLike$4 = isArrayLike_1;
  /**
   * Creates an array of the own enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects. See the
   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * for more details.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keys(new Foo);
   * // => ['a', 'b'] (iteration order is not guaranteed)
   *
   * _.keys('hi');
   * // => ['0', '1']
   */

  function keys$4(object) {
    return isArrayLike$4(object) ? arrayLikeKeys$1(object) : baseKeys$1(object);
  }

  var keys_1 = keys$4;

  var copyObject$4 = _copyObject,
      keys$3 = keys_1;
  /**
   * The base implementation of `_.assign` without support for multiple sources
   * or `customizer` functions.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @returns {Object} Returns `object`.
   */

  function baseAssign$1(object, source) {
    return object && copyObject$4(source, keys$3(source), object);
  }

  var _baseAssign = baseAssign$1;

  /**
   * This function is like
   * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * except that it includes inherited enumerable properties.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */

  function nativeKeysIn$1(object) {
    var result = [];

    if (object != null) {
      for (var key in Object(object)) {
        result.push(key);
      }
    }

    return result;
  }

  var _nativeKeysIn = nativeKeysIn$1;

  var isObject$5 = isObject_1,
      isPrototype$2 = _isPrototype,
      nativeKeysIn = _nativeKeysIn;
  /** Used for built-in method references. */

  var objectProto$6 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$6 = objectProto$6.hasOwnProperty;
  /**
   * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */

  function baseKeysIn$1(object) {
    if (!isObject$5(object)) {
      return nativeKeysIn(object);
    }

    var isProto = isPrototype$2(object),
        result = [];

    for (var key in object) {
      if (!(key == 'constructor' && (isProto || !hasOwnProperty$6.call(object, key)))) {
        result.push(key);
      }
    }

    return result;
  }

  var _baseKeysIn = baseKeysIn$1;

  var arrayLikeKeys = _arrayLikeKeys,
      baseKeysIn = _baseKeysIn,
      isArrayLike$3 = isArrayLike_1;
  /**
   * Creates an array of the own and inherited enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keysIn(new Foo);
   * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
   */

  function keysIn$3(object) {
    return isArrayLike$3(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
  }

  var keysIn_1 = keysIn$3;

  var copyObject$3 = _copyObject,
      keysIn$2 = keysIn_1;
  /**
   * The base implementation of `_.assignIn` without support for multiple sources
   * or `customizer` functions.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @returns {Object} Returns `object`.
   */

  function baseAssignIn$1(object, source) {
    return object && copyObject$3(source, keysIn$2(source), object);
  }

  var _baseAssignIn = baseAssignIn$1;

  var _cloneBuffer = {exports: {}};

  (function (module, exports) {
    var root = _root;
    /** Detect free variable `exports`. */

    var freeExports = exports && !exports.nodeType && exports;
    /** Detect free variable `module`. */

    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;
    /** Detect the popular CommonJS extension `module.exports`. */

    var moduleExports = freeModule && freeModule.exports === freeExports;
    /** Built-in value references. */

    var Buffer = moduleExports ? root.Buffer : undefined,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;
    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */

    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }

      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
      buffer.copy(result);
      return result;
    }

    module.exports = cloneBuffer;
  })(_cloneBuffer, _cloneBuffer.exports);

  /**
   * Copies the values of `source` to `array`.
   *
   * @private
   * @param {Array} source The array to copy values from.
   * @param {Array} [array=[]] The array to copy values to.
   * @returns {Array} Returns `array`.
   */

  function copyArray$1(source, array) {
    var index = -1,
        length = source.length;
    array || (array = Array(length));

    while (++index < length) {
      array[index] = source[index];
    }

    return array;
  }

  var _copyArray = copyArray$1;

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */

  function arrayFilter$1(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];

      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }

    return result;
  }

  var _arrayFilter = arrayFilter$1;

  /**
   * This method returns a new empty array.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {Array} Returns the new empty array.
   * @example
   *
   * var arrays = _.times(2, _.stubArray);
   *
   * console.log(arrays);
   * // => [[], []]
   *
   * console.log(arrays[0] === arrays[1]);
   * // => false
   */

  function stubArray$2() {
    return [];
  }

  var stubArray_1 = stubArray$2;

  var arrayFilter = _arrayFilter,
      stubArray$1 = stubArray_1;
  /** Used for built-in method references. */

  var objectProto$5 = Object.prototype;
  /** Built-in value references. */

  var propertyIsEnumerable = objectProto$5.propertyIsEnumerable;
  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeGetSymbols$1 = Object.getOwnPropertySymbols;
  /**
   * Creates an array of the own enumerable symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */

  var getSymbols$3 = !nativeGetSymbols$1 ? stubArray$1 : function (object) {
    if (object == null) {
      return [];
    }

    object = Object(object);
    return arrayFilter(nativeGetSymbols$1(object), function (symbol) {
      return propertyIsEnumerable.call(object, symbol);
    });
  };
  var _getSymbols = getSymbols$3;

  var copyObject$2 = _copyObject,
      getSymbols$2 = _getSymbols;
  /**
   * Copies own symbols of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy symbols from.
   * @param {Object} [object={}] The object to copy symbols to.
   * @returns {Object} Returns `object`.
   */

  function copySymbols$1(source, object) {
    return copyObject$2(source, getSymbols$2(source), object);
  }

  var _copySymbols = copySymbols$1;

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */

  function arrayPush$3(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }

    return array;
  }

  var _arrayPush = arrayPush$3;

  var overArg = _overArg;
  /** Built-in value references. */

  var getPrototype$3 = overArg(Object.getPrototypeOf, Object);
  var _getPrototype = getPrototype$3;

  var arrayPush$2 = _arrayPush,
      getPrototype$2 = _getPrototype,
      getSymbols$1 = _getSymbols,
      stubArray = stubArray_1;
  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeGetSymbols = Object.getOwnPropertySymbols;
  /**
   * Creates an array of the own and inherited enumerable symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */

  var getSymbolsIn$2 = !nativeGetSymbols ? stubArray : function (object) {
    var result = [];

    while (object) {
      arrayPush$2(result, getSymbols$1(object));
      object = getPrototype$2(object);
    }

    return result;
  };
  var _getSymbolsIn = getSymbolsIn$2;

  var copyObject$1 = _copyObject,
      getSymbolsIn$1 = _getSymbolsIn;
  /**
   * Copies own and inherited symbols of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy symbols from.
   * @param {Object} [object={}] The object to copy symbols to.
   * @returns {Object} Returns `object`.
   */

  function copySymbolsIn$1(source, object) {
    return copyObject$1(source, getSymbolsIn$1(source), object);
  }

  var _copySymbolsIn = copySymbolsIn$1;

  var arrayPush$1 = _arrayPush,
      isArray$6 = isArray_1;
  /**
   * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
   * `keysFunc` and `symbolsFunc` to get the enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @param {Function} symbolsFunc The function to get the symbols of `object`.
   * @returns {Array} Returns the array of property names and symbols.
   */

  function baseGetAllKeys$2(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray$6(object) ? result : arrayPush$1(result, symbolsFunc(object));
  }

  var _baseGetAllKeys = baseGetAllKeys$2;

  var baseGetAllKeys$1 = _baseGetAllKeys,
      getSymbols = _getSymbols,
      keys$2 = keys_1;
  /**
   * Creates an array of own enumerable property names and symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */

  function getAllKeys$2(object) {
    return baseGetAllKeys$1(object, keys$2, getSymbols);
  }

  var _getAllKeys = getAllKeys$2;

  var baseGetAllKeys = _baseGetAllKeys,
      getSymbolsIn = _getSymbolsIn,
      keysIn$1 = keysIn_1;
  /**
   * Creates an array of own and inherited enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */

  function getAllKeysIn$2(object) {
    return baseGetAllKeys(object, keysIn$1, getSymbolsIn);
  }

  var _getAllKeysIn = getAllKeysIn$2;

  var getNative$3 = _getNative,
      root$4 = _root;
  /* Built-in method references that are verified to be native. */

  var DataView$1 = getNative$3(root$4, 'DataView');
  var _DataView = DataView$1;

  var getNative$2 = _getNative,
      root$3 = _root;
  /* Built-in method references that are verified to be native. */

  var Promise$2 = getNative$2(root$3, 'Promise');
  var _Promise = Promise$2;

  var getNative$1 = _getNative,
      root$2 = _root;
  /* Built-in method references that are verified to be native. */

  var Set$2 = getNative$1(root$2, 'Set');
  var _Set = Set$2;

  var getNative = _getNative,
      root$1 = _root;
  /* Built-in method references that are verified to be native. */

  var WeakMap$2 = getNative(root$1, 'WeakMap');
  var _WeakMap = WeakMap$2;

  var DataView = _DataView,
      Map$1 = _Map,
      Promise$1 = _Promise,
      Set$1 = _Set,
      WeakMap$1 = _WeakMap,
      baseGetTag$3 = _baseGetTag,
      toSource = _toSource;
  /** `Object#toString` result references. */

  var mapTag$5 = '[object Map]',
      objectTag$3 = '[object Object]',
      promiseTag = '[object Promise]',
      setTag$5 = '[object Set]',
      weakMapTag$1 = '[object WeakMap]';
  var dataViewTag$3 = '[object DataView]';
  /** Used to detect maps, sets, and weakmaps. */

  var dataViewCtorString = toSource(DataView),
      mapCtorString = toSource(Map$1),
      promiseCtorString = toSource(Promise$1),
      setCtorString = toSource(Set$1),
      weakMapCtorString = toSource(WeakMap$1);
  /**
   * Gets the `toStringTag` of `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */

  var getTag$5 = baseGetTag$3; // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.

  if (DataView && getTag$5(new DataView(new ArrayBuffer(1))) != dataViewTag$3 || Map$1 && getTag$5(new Map$1()) != mapTag$5 || Promise$1 && getTag$5(Promise$1.resolve()) != promiseTag || Set$1 && getTag$5(new Set$1()) != setTag$5 || WeakMap$1 && getTag$5(new WeakMap$1()) != weakMapTag$1) {
    getTag$5 = function getTag(value) {
      var result = baseGetTag$3(value),
          Ctor = result == objectTag$3 ? value.constructor : undefined,
          ctorString = Ctor ? toSource(Ctor) : '';

      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString:
            return dataViewTag$3;

          case mapCtorString:
            return mapTag$5;

          case promiseCtorString:
            return promiseTag;

          case setCtorString:
            return setTag$5;

          case weakMapCtorString:
            return weakMapTag$1;
        }
      }

      return result;
    };
  }

  var _getTag = getTag$5;

  /** Used for built-in method references. */
  var objectProto$4 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$5 = objectProto$4.hasOwnProperty;
  /**
   * Initializes an array clone.
   *
   * @private
   * @param {Array} array The array to clone.
   * @returns {Array} Returns the initialized clone.
   */

  function initCloneArray$1(array) {
    var length = array.length,
        result = new array.constructor(length); // Add properties assigned by `RegExp#exec`.

    if (length && typeof array[0] == 'string' && hasOwnProperty$5.call(array, 'index')) {
      result.index = array.index;
      result.input = array.input;
    }

    return result;
  }

  var _initCloneArray = initCloneArray$1;

  var root = _root;
  /** Built-in value references. */

  var Uint8Array$2 = root.Uint8Array;
  var _Uint8Array = Uint8Array$2;

  var Uint8Array$1 = _Uint8Array;
  /**
   * Creates a clone of `arrayBuffer`.
   *
   * @private
   * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
   * @returns {ArrayBuffer} Returns the cloned array buffer.
   */

  function cloneArrayBuffer$3(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array$1(result).set(new Uint8Array$1(arrayBuffer));
    return result;
  }

  var _cloneArrayBuffer = cloneArrayBuffer$3;

  var cloneArrayBuffer$2 = _cloneArrayBuffer;
  /**
   * Creates a clone of `dataView`.
   *
   * @private
   * @param {Object} dataView The data view to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned data view.
   */

  function cloneDataView$1(dataView, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer$2(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
  }

  var _cloneDataView = cloneDataView$1;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;
  /**
   * Creates a clone of `regexp`.
   *
   * @private
   * @param {Object} regexp The regexp to clone.
   * @returns {Object} Returns the cloned regexp.
   */

  function cloneRegExp$1(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
  }

  var _cloneRegExp = cloneRegExp$1;

  var _Symbol$2 = _Symbol$6;
  /** Used to convert symbols to primitives and strings. */

  var symbolProto$1 = _Symbol$2 ? _Symbol$2.prototype : undefined,
      symbolValueOf$1 = symbolProto$1 ? symbolProto$1.valueOf : undefined;
  /**
   * Creates a clone of the `symbol` object.
   *
   * @private
   * @param {Object} symbol The symbol object to clone.
   * @returns {Object} Returns the cloned symbol object.
   */

  function cloneSymbol$1(symbol) {
    return symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {};
  }

  var _cloneSymbol = cloneSymbol$1;

  var cloneArrayBuffer$1 = _cloneArrayBuffer;
  /**
   * Creates a clone of `typedArray`.
   *
   * @private
   * @param {Object} typedArray The typed array to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned typed array.
   */

  function cloneTypedArray$1(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer$1(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }

  var _cloneTypedArray = cloneTypedArray$1;

  var cloneArrayBuffer = _cloneArrayBuffer,
      cloneDataView = _cloneDataView,
      cloneRegExp = _cloneRegExp,
      cloneSymbol = _cloneSymbol,
      cloneTypedArray = _cloneTypedArray;
  /** `Object#toString` result references. */

  var boolTag$3 = '[object Boolean]',
      dateTag$3 = '[object Date]',
      mapTag$4 = '[object Map]',
      numberTag$2 = '[object Number]',
      regexpTag$2 = '[object RegExp]',
      setTag$4 = '[object Set]',
      stringTag$2 = '[object String]',
      symbolTag$2 = '[object Symbol]';
  var arrayBufferTag$2 = '[object ArrayBuffer]',
      dataViewTag$2 = '[object DataView]',
      float32Tag$1 = '[object Float32Array]',
      float64Tag$1 = '[object Float64Array]',
      int8Tag$1 = '[object Int8Array]',
      int16Tag$1 = '[object Int16Array]',
      int32Tag$1 = '[object Int32Array]',
      uint8Tag$1 = '[object Uint8Array]',
      uint8ClampedTag$1 = '[object Uint8ClampedArray]',
      uint16Tag$1 = '[object Uint16Array]',
      uint32Tag$1 = '[object Uint32Array]';
  /**
   * Initializes an object clone based on its `toStringTag`.
   *
   * **Note:** This function only supports cloning values with tags of
   * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
   *
   * @private
   * @param {Object} object The object to clone.
   * @param {string} tag The `toStringTag` of the object to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the initialized clone.
   */

  function initCloneByTag$1(object, tag, isDeep) {
    var Ctor = object.constructor;

    switch (tag) {
      case arrayBufferTag$2:
        return cloneArrayBuffer(object);

      case boolTag$3:
      case dateTag$3:
        return new Ctor(+object);

      case dataViewTag$2:
        return cloneDataView(object, isDeep);

      case float32Tag$1:
      case float64Tag$1:
      case int8Tag$1:
      case int16Tag$1:
      case int32Tag$1:
      case uint8Tag$1:
      case uint8ClampedTag$1:
      case uint16Tag$1:
      case uint32Tag$1:
        return cloneTypedArray(object, isDeep);

      case mapTag$4:
        return new Ctor();

      case numberTag$2:
      case stringTag$2:
        return new Ctor(object);

      case regexpTag$2:
        return cloneRegExp(object);

      case setTag$4:
        return new Ctor();

      case symbolTag$2:
        return cloneSymbol(object);
    }
  }

  var _initCloneByTag = initCloneByTag$1;

  var isObject$4 = isObject_1;
  /** Built-in value references. */

  var objectCreate = Object.create;
  /**
   * The base implementation of `_.create` without support for assigning
   * properties to the created object.
   *
   * @private
   * @param {Object} proto The object to inherit from.
   * @returns {Object} Returns the new object.
   */

  var baseCreate$1 = function () {
    function object() {}

    return function (proto) {
      if (!isObject$4(proto)) {
        return {};
      }

      if (objectCreate) {
        return objectCreate(proto);
      }

      object.prototype = proto;
      var result = new object();
      object.prototype = undefined;
      return result;
    };
  }();

  var _baseCreate = baseCreate$1;

  var baseCreate = _baseCreate,
      getPrototype$1 = _getPrototype,
      isPrototype$1 = _isPrototype;
  /**
   * Initializes an object clone.
   *
   * @private
   * @param {Object} object The object to clone.
   * @returns {Object} Returns the initialized clone.
   */

  function initCloneObject$1(object) {
    return typeof object.constructor == 'function' && !isPrototype$1(object) ? baseCreate(getPrototype$1(object)) : {};
  }

  var _initCloneObject = initCloneObject$1;

  var getTag$4 = _getTag,
      isObjectLike$6 = isObjectLike_1;
  /** `Object#toString` result references. */

  var mapTag$3 = '[object Map]';
  /**
   * The base implementation of `_.isMap` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a map, else `false`.
   */

  function baseIsMap$1(value) {
    return isObjectLike$6(value) && getTag$4(value) == mapTag$3;
  }

  var _baseIsMap = baseIsMap$1;

  var baseIsMap = _baseIsMap,
      baseUnary$3 = _baseUnary,
      nodeUtil$2 = _nodeUtil.exports;
  /* Node.js helper references. */

  var nodeIsMap = nodeUtil$2 && nodeUtil$2.isMap;
  /**
   * Checks if `value` is classified as a `Map` object.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a map, else `false`.
   * @example
   *
   * _.isMap(new Map);
   * // => true
   *
   * _.isMap(new WeakMap);
   * // => false
   */

  var isMap$1 = nodeIsMap ? baseUnary$3(nodeIsMap) : baseIsMap;
  var isMap_1 = isMap$1;

  var getTag$3 = _getTag,
      isObjectLike$5 = isObjectLike_1;
  /** `Object#toString` result references. */

  var setTag$3 = '[object Set]';
  /**
   * The base implementation of `_.isSet` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a set, else `false`.
   */

  function baseIsSet$1(value) {
    return isObjectLike$5(value) && getTag$3(value) == setTag$3;
  }

  var _baseIsSet = baseIsSet$1;

  var baseIsSet = _baseIsSet,
      baseUnary$2 = _baseUnary,
      nodeUtil$1 = _nodeUtil.exports;
  /* Node.js helper references. */

  var nodeIsSet = nodeUtil$1 && nodeUtil$1.isSet;
  /**
   * Checks if `value` is classified as a `Set` object.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a set, else `false`.
   * @example
   *
   * _.isSet(new Set);
   * // => true
   *
   * _.isSet(new WeakSet);
   * // => false
   */

  var isSet$1 = nodeIsSet ? baseUnary$2(nodeIsSet) : baseIsSet;
  var isSet_1 = isSet$1;

  var Stack$2 = _Stack,
      arrayEach = _arrayEach,
      assignValue$1 = _assignValue,
      baseAssign = _baseAssign,
      baseAssignIn = _baseAssignIn,
      cloneBuffer = _cloneBuffer.exports,
      copyArray = _copyArray,
      copySymbols = _copySymbols,
      copySymbolsIn = _copySymbolsIn,
      getAllKeys$1 = _getAllKeys,
      getAllKeysIn$1 = _getAllKeysIn,
      getTag$2 = _getTag,
      initCloneArray = _initCloneArray,
      initCloneByTag = _initCloneByTag,
      initCloneObject = _initCloneObject,
      isArray$5 = isArray_1,
      isBuffer$2 = isBuffer$4.exports,
      isMap = isMap_1,
      isObject$3 = isObject_1,
      isSet = isSet_1,
      keys$1 = keys_1,
      keysIn = keysIn_1;
  /** Used to compose bitmasks for cloning. */

  var CLONE_DEEP_FLAG$2 = 1,
      CLONE_FLAT_FLAG$1 = 2,
      CLONE_SYMBOLS_FLAG$2 = 4;
  /** `Object#toString` result references. */

  var argsTag$1 = '[object Arguments]',
      arrayTag$1 = '[object Array]',
      boolTag$2 = '[object Boolean]',
      dateTag$2 = '[object Date]',
      errorTag$1 = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag$2 = '[object Map]',
      numberTag$1 = '[object Number]',
      objectTag$2 = '[object Object]',
      regexpTag$1 = '[object RegExp]',
      setTag$2 = '[object Set]',
      stringTag$1 = '[object String]',
      symbolTag$1 = '[object Symbol]',
      weakMapTag = '[object WeakMap]';
  var arrayBufferTag$1 = '[object ArrayBuffer]',
      dataViewTag$1 = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';
  /** Used to identify `toStringTag` values supported by `_.clone`. */

  var cloneableTags = {};
  cloneableTags[argsTag$1] = cloneableTags[arrayTag$1] = cloneableTags[arrayBufferTag$1] = cloneableTags[dataViewTag$1] = cloneableTags[boolTag$2] = cloneableTags[dateTag$2] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag$2] = cloneableTags[numberTag$1] = cloneableTags[objectTag$2] = cloneableTags[regexpTag$1] = cloneableTags[setTag$2] = cloneableTags[stringTag$1] = cloneableTags[symbolTag$1] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag$1] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
  /**
   * The base implementation of `_.clone` and `_.cloneDeep` which tracks
   * traversed objects.
   *
   * @private
   * @param {*} value The value to clone.
   * @param {boolean} bitmask The bitmask flags.
   *  1 - Deep clone
   *  2 - Flatten inherited properties
   *  4 - Clone symbols
   * @param {Function} [customizer] The function to customize cloning.
   * @param {string} [key] The key of `value`.
   * @param {Object} [object] The parent object of `value`.
   * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
   * @returns {*} Returns the cloned value.
   */

  function baseClone$2(value, bitmask, customizer, key, object, stack) {
    var result,
        isDeep = bitmask & CLONE_DEEP_FLAG$2,
        isFlat = bitmask & CLONE_FLAT_FLAG$1,
        isFull = bitmask & CLONE_SYMBOLS_FLAG$2;

    if (customizer) {
      result = object ? customizer(value, key, object, stack) : customizer(value);
    }

    if (result !== undefined) {
      return result;
    }

    if (!isObject$3(value)) {
      return value;
    }

    var isArr = isArray$5(value);

    if (isArr) {
      result = initCloneArray(value);

      if (!isDeep) {
        return copyArray(value, result);
      }
    } else {
      var tag = getTag$2(value),
          isFunc = tag == funcTag || tag == genTag;

      if (isBuffer$2(value)) {
        return cloneBuffer(value, isDeep);
      }

      if (tag == objectTag$2 || tag == argsTag$1 || isFunc && !object) {
        result = isFlat || isFunc ? {} : initCloneObject(value);

        if (!isDeep) {
          return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
        }
      } else {
        if (!cloneableTags[tag]) {
          return object ? value : {};
        }

        result = initCloneByTag(value, tag, isDeep);
      }
    } // Check for circular references and return its corresponding clone.


    stack || (stack = new Stack$2());
    var stacked = stack.get(value);

    if (stacked) {
      return stacked;
    }

    stack.set(value, result);

    if (isSet(value)) {
      value.forEach(function (subValue) {
        result.add(baseClone$2(subValue, bitmask, customizer, subValue, value, stack));
      });
    } else if (isMap(value)) {
      value.forEach(function (subValue, key) {
        result.set(key, baseClone$2(subValue, bitmask, customizer, key, value, stack));
      });
    }

    var keysFunc = isFull ? isFlat ? getAllKeysIn$1 : getAllKeys$1 : isFlat ? keysIn : keys$1;
    var props = isArr ? undefined : keysFunc(value);
    arrayEach(props || value, function (subValue, key) {
      if (props) {
        key = subValue;
        subValue = value[key];
      } // Recursively populate clone (susceptible to call stack limits).


      assignValue$1(result, key, baseClone$2(subValue, bitmask, customizer, key, value, stack));
    });
    return result;
  }

  var _baseClone = baseClone$2;

  var baseClone$1 = _baseClone;
  /** Used to compose bitmasks for cloning. */

  var CLONE_DEEP_FLAG$1 = 1,
      CLONE_SYMBOLS_FLAG$1 = 4;
  /**
   * This method is like `_.clone` except that it recursively clones `value`.
   *
   * @static
   * @memberOf _
   * @since 1.0.0
   * @category Lang
   * @param {*} value The value to recursively clone.
   * @returns {*} Returns the deep cloned value.
   * @see _.clone
   * @example
   *
   * var objects = [{ 'a': 1 }, { 'b': 2 }];
   *
   * var deep = _.cloneDeep(objects);
   * console.log(deep[0] === objects[0]);
   * // => false
   */

  function cloneDeep(value) {
    return baseClone$1(value, CLONE_DEEP_FLAG$1 | CLONE_SYMBOLS_FLAG$1);
  }

  var cloneDeep_1 = cloneDeep;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';
  /**
   * Adds `value` to the array cache.
   *
   * @private
   * @name add
   * @memberOf SetCache
   * @alias push
   * @param {*} value The value to cache.
   * @returns {Object} Returns the cache instance.
   */

  function setCacheAdd$1(value) {
    this.__data__.set(value, HASH_UNDEFINED);

    return this;
  }

  var _setCacheAdd = setCacheAdd$1;

  /**
   * Checks if `value` is in the array cache.
   *
   * @private
   * @name has
   * @memberOf SetCache
   * @param {*} value The value to search for.
   * @returns {number} Returns `true` if `value` is found, else `false`.
   */

  function setCacheHas$1(value) {
    return this.__data__.has(value);
  }

  var _setCacheHas = setCacheHas$1;

  var MapCache = _MapCache,
      setCacheAdd = _setCacheAdd,
      setCacheHas = _setCacheHas;
  /**
   *
   * Creates an array cache object to store unique values.
   *
   * @private
   * @constructor
   * @param {Array} [values] The values to cache.
   */

  function SetCache$2(values) {
    var index = -1,
        length = values == null ? 0 : values.length;
    this.__data__ = new MapCache();

    while (++index < length) {
      this.add(values[index]);
    }
  } // Add methods to `SetCache`.


  SetCache$2.prototype.add = SetCache$2.prototype.push = setCacheAdd;
  SetCache$2.prototype.has = setCacheHas;
  var _SetCache = SetCache$2;

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */

  function baseFindIndex$2(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while (fromRight ? index-- : ++index < length) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }

    return -1;
  }

  var _baseFindIndex = baseFindIndex$2;

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */

  function baseIsNaN$1(value) {
    return value !== value;
  }

  var _baseIsNaN = baseIsNaN$1;

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */

  function strictIndexOf$1(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }

    return -1;
  }

  var _strictIndexOf = strictIndexOf$1;

  var baseFindIndex$1 = _baseFindIndex,
      baseIsNaN = _baseIsNaN,
      strictIndexOf = _strictIndexOf;
  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */

  function baseIndexOf$1(array, value, fromIndex) {
    return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex$1(array, baseIsNaN, fromIndex);
  }

  var _baseIndexOf = baseIndexOf$1;

  var baseIndexOf = _baseIndexOf;
  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */

  function arrayIncludes$1(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  var _arrayIncludes = arrayIncludes$1;

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */

  function arrayIncludesWith$1(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }

    return false;
  }

  var _arrayIncludesWith = arrayIncludesWith$1;

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */

  function cacheHas$2(cache, key) {
    return cache.has(key);
  }

  var _cacheHas = cacheHas$2;

  var SetCache$1 = _SetCache,
      arrayIncludes = _arrayIncludes,
      arrayIncludesWith = _arrayIncludesWith,
      arrayMap$1 = _arrayMap,
      baseUnary$1 = _baseUnary,
      cacheHas$1 = _cacheHas;
  /** Used as the size to enable large array optimizations. */

  var LARGE_ARRAY_SIZE = 200;
  /**
   * The base implementation of methods like `_.difference` without support
   * for excluding multiple arrays or iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Array} values The values to exclude.
   * @param {Function} [iteratee] The iteratee invoked per element.
   * @param {Function} [comparator] The comparator invoked per element.
   * @returns {Array} Returns the new array of filtered values.
   */

  function baseDifference$1(array, values, iteratee, comparator) {
    var index = -1,
        includes = arrayIncludes,
        isCommon = true,
        length = array.length,
        result = [],
        valuesLength = values.length;

    if (!length) {
      return result;
    }

    if (iteratee) {
      values = arrayMap$1(values, baseUnary$1(iteratee));
    }

    if (comparator) {
      includes = arrayIncludesWith;
      isCommon = false;
    } else if (values.length >= LARGE_ARRAY_SIZE) {
      includes = cacheHas$1;
      isCommon = false;
      values = new SetCache$1(values);
    }

    outer: while (++index < length) {
      var value = array[index],
          computed = iteratee == null ? value : iteratee(value);
      value = comparator || value !== 0 ? value : 0;

      if (isCommon && computed === computed) {
        var valuesIndex = valuesLength;

        while (valuesIndex--) {
          if (values[valuesIndex] === computed) {
            continue outer;
          }
        }

        result.push(value);
      } else if (!includes(values, computed, comparator)) {
        result.push(value);
      }
    }

    return result;
  }

  var _baseDifference = baseDifference$1;

  var _Symbol$1 = _Symbol$6,
      isArguments$2 = isArguments_1,
      isArray$4 = isArray_1;
  /** Built-in value references. */

  var spreadableSymbol = _Symbol$1 ? _Symbol$1.isConcatSpreadable : undefined;
  /**
   * Checks if `value` is a flattenable `arguments` object or array.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
   */

  function isFlattenable$1(value) {
    return isArray$4(value) || isArguments$2(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
  }

  var _isFlattenable = isFlattenable$1;

  var arrayPush = _arrayPush,
      isFlattenable = _isFlattenable;
  /**
   * The base implementation of `_.flatten` with support for restricting flattening.
   *
   * @private
   * @param {Array} array The array to flatten.
   * @param {number} depth The maximum recursion depth.
   * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
   * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
   * @param {Array} [result=[]] The initial result value.
   * @returns {Array} Returns the new flattened array.
   */

  function baseFlatten$2(array, depth, predicate, isStrict, result) {
    var index = -1,
        length = array.length;
    predicate || (predicate = isFlattenable);
    result || (result = []);

    while (++index < length) {
      var value = array[index];

      if (depth > 0 && predicate(value)) {
        if (depth > 1) {
          // Recursively flatten arrays (susceptible to call stack limits).
          baseFlatten$2(value, depth - 1, predicate, isStrict, result);
        } else {
          arrayPush(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }

    return result;
  }

  var _baseFlatten = baseFlatten$2;

  /**
   * This method returns the first argument it receives.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {*} value Any value.
   * @returns {*} Returns `value`.
   * @example
   *
   * var object = { 'a': 1 };
   *
   * console.log(_.identity(object) === object);
   * // => true
   */

  function identity$3(value) {
    return value;
  }

  var identity_1 = identity$3;

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */

  function apply$1(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);

      case 1:
        return func.call(thisArg, args[0]);

      case 2:
        return func.call(thisArg, args[0], args[1]);

      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }

    return func.apply(thisArg, args);
  }

  var _apply = apply$1;

  var apply = _apply;
  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeMax$3 = Math.max;
  /**
   * A specialized version of `baseRest` which transforms the rest array.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @param {Function} transform The rest array transform.
   * @returns {Function} Returns the new function.
   */

  function overRest$2(func, start, transform) {
    start = nativeMax$3(start === undefined ? func.length - 1 : start, 0);
    return function () {
      var args = arguments,
          index = -1,
          length = nativeMax$3(args.length - start, 0),
          array = Array(length);

      while (++index < length) {
        array[index] = args[start + index];
      }

      index = -1;
      var otherArgs = Array(start + 1);

      while (++index < start) {
        otherArgs[index] = args[index];
      }

      otherArgs[start] = transform(array);
      return apply(func, this, otherArgs);
    };
  }

  var _overRest = overRest$2;

  /**
   * Creates a function that returns `value`.
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Util
   * @param {*} value The value to return from the new function.
   * @returns {Function} Returns the new constant function.
   * @example
   *
   * var objects = _.times(2, _.constant({ 'a': 1 }));
   *
   * console.log(objects);
   * // => [{ 'a': 1 }, { 'a': 1 }]
   *
   * console.log(objects[0] === objects[1]);
   * // => true
   */

  function constant$1(value) {
    return function () {
      return value;
    };
  }

  var constant_1 = constant$1;

  var constant = constant_1,
      defineProperty = _defineProperty,
      identity$2 = identity_1;
  /**
   * The base implementation of `setToString` without support for hot loop shorting.
   *
   * @private
   * @param {Function} func The function to modify.
   * @param {Function} string The `toString` result.
   * @returns {Function} Returns `func`.
   */

  var baseSetToString$1 = !defineProperty ? identity$2 : function (func, string) {
    return defineProperty(func, 'toString', {
      'configurable': true,
      'enumerable': false,
      'value': constant(string),
      'writable': true
    });
  };
  var _baseSetToString = baseSetToString$1;

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;
  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeNow = Date.now;
  /**
   * Creates a function that'll short out and invoke `identity` instead
   * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
   * milliseconds.
   *
   * @private
   * @param {Function} func The function to restrict.
   * @returns {Function} Returns the new shortable function.
   */

  function shortOut$1(func) {
    var count = 0,
        lastCalled = 0;
    return function () {
      var stamp = nativeNow(),
          remaining = HOT_SPAN - (stamp - lastCalled);
      lastCalled = stamp;

      if (remaining > 0) {
        if (++count >= HOT_COUNT) {
          return arguments[0];
        }
      } else {
        count = 0;
      }

      return func.apply(undefined, arguments);
    };
  }

  var _shortOut = shortOut$1;

  var baseSetToString = _baseSetToString,
      shortOut = _shortOut;
  /**
   * Sets the `toString` method of `func` to return `string`.
   *
   * @private
   * @param {Function} func The function to modify.
   * @param {Function} string The `toString` result.
   * @returns {Function} Returns `func`.
   */

  var setToString$2 = shortOut(baseSetToString);
  var _setToString = setToString$2;

  var identity$1 = identity_1,
      overRest$1 = _overRest,
      setToString$1 = _setToString;
  /**
   * The base implementation of `_.rest` which doesn't validate or coerce arguments.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @returns {Function} Returns the new function.
   */

  function baseRest$1(func, start) {
    return setToString$1(overRest$1(func, start, identity$1), func + '');
  }

  var _baseRest = baseRest$1;

  var isArrayLike$2 = isArrayLike_1,
      isObjectLike$4 = isObjectLike_1;
  /**
   * This method is like `_.isArrayLike` except that it also checks if `value`
   * is an object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array-like object,
   *  else `false`.
   * @example
   *
   * _.isArrayLikeObject([1, 2, 3]);
   * // => true
   *
   * _.isArrayLikeObject(document.body.children);
   * // => true
   *
   * _.isArrayLikeObject('abc');
   * // => false
   *
   * _.isArrayLikeObject(_.noop);
   * // => false
   */

  function isArrayLikeObject$1(value) {
    return isObjectLike$4(value) && isArrayLike$2(value);
  }

  var isArrayLikeObject_1 = isArrayLikeObject$1;

  var baseDifference = _baseDifference,
      baseFlatten$1 = _baseFlatten,
      baseRest = _baseRest,
      isArrayLikeObject = isArrayLikeObject_1;
  /**
   * Creates an array of `array` values not included in the other given arrays
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons. The order and references of result values are
   * determined by the first array.
   *
   * **Note:** Unlike `_.pullAll`, this method returns a new array.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {...Array} [values] The values to exclude.
   * @returns {Array} Returns the new array of filtered values.
   * @see _.without, _.xor
   * @example
   *
   * _.difference([2, 1], [2, 3]);
   * // => [1]
   */

  var difference = baseRest(function (array, values) {
    return isArrayLikeObject(array) ? baseDifference(array, baseFlatten$1(values, 1, isArrayLikeObject, true)) : [];
  });
  var difference_1 = difference;

  var baseGetTag$2 = _baseGetTag,
      getPrototype = _getPrototype,
      isObjectLike$3 = isObjectLike_1;
  /** `Object#toString` result references. */

  var objectTag$1 = '[object Object]';
  /** Used for built-in method references. */

  var funcProto = Function.prototype,
      objectProto$3 = Object.prototype;
  /** Used to resolve the decompiled source of functions. */

  var funcToString = funcProto.toString;
  /** Used to check objects for own properties. */

  var hasOwnProperty$4 = objectProto$3.hasOwnProperty;
  /** Used to infer the `Object` constructor. */

  var objectCtorString = funcToString.call(Object);
  /**
   * Checks if `value` is a plain object, that is, an object created by the
   * `Object` constructor or one with a `[[Prototype]]` of `null`.
   *
   * @static
   * @memberOf _
   * @since 0.8.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   * }
   *
   * _.isPlainObject(new Foo);
   * // => false
   *
   * _.isPlainObject([1, 2, 3]);
   * // => false
   *
   * _.isPlainObject({ 'x': 0, 'y': 0 });
   * // => true
   *
   * _.isPlainObject(Object.create(null));
   * // => true
   */

  function isPlainObject$1(value) {
    if (!isObjectLike$3(value) || baseGetTag$2(value) != objectTag$1) {
      return false;
    }

    var proto = getPrototype(value);

    if (proto === null) {
      return true;
    }

    var Ctor = hasOwnProperty$4.call(proto, 'constructor') && proto.constructor;
    return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
  }

  var isPlainObject_1 = isPlainObject$1;

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  var runtime = {exports: {}};

  (function (module) {
    var runtime = function (exports) {

      var Op = Object.prototype;
      var hasOwn = Op.hasOwnProperty;
      var undefined$1; // More compressible than void 0.

      var $Symbol = typeof Symbol === "function" ? Symbol : {};
      var iteratorSymbol = $Symbol.iterator || "@@iterator";
      var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
      var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
        return obj[key];
      }

      try {
        // IE 8 has a broken Object.defineProperty that only works on DOM objects.
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
        var generator = Object.create(protoGenerator.prototype);
        var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
        // .throw, and .return methods.

        generator._invoke = makeInvokeMethod(innerFn, self, context);
        return generator;
      }

      exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
      // record like context.tryEntries[i].completion. This interface could
      // have been (and was previously) designed to take a closure to be
      // invoked without arguments, but in all the cases we care about we
      // already have an existing method we want to call, so there's no need
      // to create a new function object. We can even get away with assuming
      // the method takes exactly one argument, since that happens to be true
      // in every case, so we don't have to touch the arguments object. The
      // only additional allocation required is the completion record, which
      // has a stable shape and so hopefully should be cheap to allocate.

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      var GenStateSuspendedStart = "suspendedStart";
      var GenStateSuspendedYield = "suspendedYield";
      var GenStateExecuting = "executing";
      var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
      // breaking out of the dispatch switch statement.

      var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
      // .constructor.prototype properties for functions that return Generator
      // objects. For full spec compliance, you may wish to configure your
      // minifier not to mangle the names of these two functions.

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
      // don't natively support it.


      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf;
      var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

      if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
        // This environment has a native %IteratorPrototype%; use it instead
        // of the polyfill.
        IteratorPrototype = NativeIteratorPrototype;
      }

      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
      GeneratorFunction.prototype = GeneratorFunctionPrototype;
      define(Gp, "constructor", GeneratorFunctionPrototype);
      define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
      GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the
      // Iterator interface in terms of a single ._invoke method.

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      exports.isGeneratorFunction = function (genFun) {
        var ctor = typeof genFun === "function" && genFun.constructor;
        return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
      };

      exports.mark = function (genFun) {
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
        } else {
          genFun.__proto__ = GeneratorFunctionPrototype;
          define(genFun, toStringTagSymbol, "GeneratorFunction");
        }

        genFun.prototype = Object.create(Gp);
        return genFun;
      }; // Within the body of any async function, `await x` is transformed to
      // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
      // `hasOwn.call(value, "__await")` to determine if the yielded value is
      // meant to be awaited.


      exports.awrap = function (arg) {
        return {
          __await: arg
        };
      };

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if (record.type === "throw") {
            reject(record.arg);
          } else {
            var result = record.arg;
            var value = result.value;

            if (value && _typeof(value) === "object" && hasOwn.call(value, "__await")) {
              return PromiseImpl.resolve(value.__await).then(function (value) {
                invoke("next", value, resolve, reject);
              }, function (err) {
                invoke("throw", err, resolve, reject);
              });
            }

            return PromiseImpl.resolve(value).then(function (unwrapped) {
              // When a yielded Promise is resolved, its final value becomes
              // the .value of the Promise<{value,done}> result for the
              // current iteration.
              result.value = unwrapped;
              resolve(result);
            }, function (error) {
              // If a rejected Promise was yielded, throw the rejection back
              // into the async generator function so it can be handled there.
              return invoke("throw", error, resolve, reject);
            });
          }
        }

        var previousPromise;

        function enqueue(method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = // If enqueue has been called before, then we want to wait until
          // all previous Promises have been resolved before calling invoke,
          // so that results are always delivered in the correct order. If
          // enqueue has not been called before, then it is important to
          // call invoke immediately, without waiting on a callback to fire,
          // so that the async generator function has the opportunity to do
          // any necessary setup in a predictable way. This predictability
          // is why the Promise constructor synchronously invokes its
          // executor callback, and why async functions synchronously
          // execute code before the first await. Since we implement simple
          // async functions in terms of async generators, it is especially
          // important to get this right, even though it requires care.
          previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        } // Define the unified helper method that is used to implement .next,
        // .throw, and .return (see defineIteratorMethods).


        this._invoke = enqueue;
      }

      defineIteratorMethods(AsyncIterator.prototype);
      define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      });
      exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
      // AsyncIterator objects; they just return a Promise for the value of
      // the final result produced by the iterator.

      exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        if (PromiseImpl === void 0) PromiseImpl = Promise;
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
        : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      };

      function makeInvokeMethod(innerFn, self, context) {
        var state = GenStateSuspendedStart;
        return function invoke(method, arg) {
          if (state === GenStateExecuting) {
            throw new Error("Generator is already running");
          }

          if (state === GenStateCompleted) {
            if (method === "throw") {
              throw arg;
            } // Be forgiving, per 25.3.3.3.3 of the spec:
            // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


            return doneResult();
          }

          context.method = method;
          context.arg = arg;

          while (true) {
            var delegate = context.delegate;

            if (delegate) {
              var delegateResult = maybeInvokeDelegate(delegate, context);

              if (delegateResult) {
                if (delegateResult === ContinueSentinel) continue;
                return delegateResult;
              }
            }

            if (context.method === "next") {
              // Setting context._sent for legacy support of Babel's
              // function.sent implementation.
              context.sent = context._sent = context.arg;
            } else if (context.method === "throw") {
              if (state === GenStateSuspendedStart) {
                state = GenStateCompleted;
                throw context.arg;
              }

              context.dispatchException(context.arg);
            } else if (context.method === "return") {
              context.abrupt("return", context.arg);
            }

            state = GenStateExecuting;
            var record = tryCatch(innerFn, self, context);

            if (record.type === "normal") {
              // If an exception is thrown from innerFn, we leave state ===
              // GenStateExecuting and loop back for another invocation.
              state = context.done ? GenStateCompleted : GenStateSuspendedYield;

              if (record.arg === ContinueSentinel) {
                continue;
              }

              return {
                value: record.arg,
                done: context.done
              };
            } else if (record.type === "throw") {
              state = GenStateCompleted; // Dispatch the exception by looping back around to the
              // context.dispatchException(context.arg) call above.

              context.method = "throw";
              context.arg = record.arg;
            }
          }
        };
      } // Call delegate.iterator[context.method](context.arg) and handle the
      // result, either by returning a { value, done } result from the
      // delegate iterator, or by modifying context.method and context.arg,
      // setting context.delegate to null, and returning the ContinueSentinel.


      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (method === undefined$1) {
          // A .throw or .return when the delegate iterator has no .throw
          // method always terminates the yield* loop.
          context.delegate = null;

          if (context.method === "throw") {
            // Note: ["return"] must be used for ES3 parsing compatibility.
            if (delegate.iterator["return"]) {
              // If the delegate iterator has a return method, give it a
              // chance to clean up.
              context.method = "return";
              context.arg = undefined$1;
              maybeInvokeDelegate(delegate, context);

              if (context.method === "throw") {
                // If maybeInvokeDelegate(context) changed context.method from
                // "return" to "throw", let that override the TypeError below.
                return ContinueSentinel;
              }
            }

            context.method = "throw";
            context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);

        if (record.type === "throw") {
          context.method = "throw";
          context.arg = record.arg;
          context.delegate = null;
          return ContinueSentinel;
        }

        var info = record.arg;

        if (!info) {
          context.method = "throw";
          context.arg = new TypeError("iterator result is not an object");
          context.delegate = null;
          return ContinueSentinel;
        }

        if (info.done) {
          // Assign the result of the finished delegate to the temporary
          // variable specified by delegate.resultName (see delegateYield).
          context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

          context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
          // exception, let the outer generator proceed normally. If
          // context.method was "next", forget context.arg since it has been
          // "consumed" by the delegate iterator. If context.method was
          // "return", allow the original .return call to continue in the
          // outer generator.

          if (context.method !== "return") {
            context.method = "next";
            context.arg = undefined$1;
          }
        } else {
          // Re-yield the result returned by the delegate method.
          return info;
        } // The delegate iterator is finished, so forget it and continue with
        // the outer generator.


        context.delegate = null;
        return ContinueSentinel;
      } // Define Generator.prototype.{next,throw,return} in terms of the
      // unified ._invoke helper method.


      defineIteratorMethods(Gp);
      define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the
      // @@iterator function is called on it. Some browsers' implementations of the
      // iterator prototype chain incorrectly implement this, causing the Generator
      // object to not be returned from this call. This ensures that doesn't happen.
      // See https://github.com/facebook/regenerator/issues/274 for more details.

      define(Gp, iteratorSymbol, function () {
        return this;
      });
      define(Gp, "toString", function () {
        return "[object Generator]";
      });

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };

        if (1 in locs) {
          entry.catchLoc = locs[1];
        }

        if (2 in locs) {
          entry.finallyLoc = locs[2];
          entry.afterLoc = locs[3];
        }

        this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal";
        delete record.arg;
        entry.completion = record;
      }

      function Context(tryLocsList) {
        // The root entry object (effectively a try statement without a catch
        // or a finally block) gives us a place to store values thrown from
        // locations where there is no enclosing try statement.
        this.tryEntries = [{
          tryLoc: "root"
        }];
        tryLocsList.forEach(pushTryEntry, this);
        this.reset(true);
      }

      exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        keys.reverse(); // Rather than returning an object with a next method, we keep
        // things simple and return the next function itself.

        return function next() {
          while (keys.length) {
            var key = keys.pop();

            if (key in object) {
              next.value = key;
              next.done = false;
              return next;
            }
          } // To avoid creating an additional object, we just hang the .value
          // and .done properties off the next function object itself. This
          // also ensures that the minifier will not anonymize the function.


          next.done = true;
          return next;
        };
      };

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];

          if (iteratorMethod) {
            return iteratorMethod.call(iterable);
          }

          if (typeof iterable.next === "function") {
            return iterable;
          }

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              while (++i < iterable.length) {
                if (hasOwn.call(iterable, i)) {
                  next.value = iterable[i];
                  next.done = false;
                  return next;
                }
              }

              next.value = undefined$1;
              next.done = true;
              return next;
            };

            return next.next = next;
          }
        } // Return an iterator with no values.


        return {
          next: doneResult
        };
      }

      exports.values = values;

      function doneResult() {
        return {
          value: undefined$1,
          done: true
        };
      }

      Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          this.prev = 0;
          this.next = 0; // Resetting context._sent for legacy support of Babel's
          // function.sent implementation.

          this.sent = this._sent = undefined$1;
          this.done = false;
          this.delegate = null;
          this.method = "next";
          this.arg = undefined$1;
          this.tryEntries.forEach(resetTryEntry);

          if (!skipTempReset) {
            for (var name in this) {
              // Not sure about the optimal order of these conditions:
              if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                this[name] = undefined$1;
              }
            }
          }
        },
        stop: function stop() {
          this.done = true;
          var rootEntry = this.tryEntries[0];
          var rootRecord = rootEntry.completion;

          if (rootRecord.type === "throw") {
            throw rootRecord.arg;
          }

          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) {
            throw exception;
          }

          var context = this;

          function handle(loc, caught) {
            record.type = "throw";
            record.arg = exception;
            context.next = loc;

            if (caught) {
              // If the dispatched exception was caught by a catch block,
              // then let that catch block handle the exception normally.
              context.method = "next";
              context.arg = undefined$1;
            }

            return !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            var record = entry.completion;

            if (entry.tryLoc === "root") {
              // Exception thrown outside of any try block that could handle
              // it, so set the completion value of the entire function to
              // throw the exception.
              return handle("end");
            }

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc");
              var hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                } else if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                }
              } else if (hasFinally) {
                if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else {
                throw new Error("try statement without catch or finally");
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
            // Ignore the finally entry if control is not jumping to a
            // location outside the try/catch block.
            finallyEntry = null;
          }

          var record = finallyEntry ? finallyEntry.completion : {};
          record.type = type;
          record.arg = arg;

          if (finallyEntry) {
            this.method = "next";
            this.next = finallyEntry.finallyLoc;
            return ContinueSentinel;
          }

          return this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if (record.type === "throw") {
            throw record.arg;
          }

          if (record.type === "break" || record.type === "continue") {
            this.next = record.arg;
          } else if (record.type === "return") {
            this.rval = this.arg = record.arg;
            this.method = "return";
            this.next = "end";
          } else if (record.type === "normal" && afterLoc) {
            this.next = afterLoc;
          }

          return ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.finallyLoc === finallyLoc) {
              this.complete(entry.completion, entry.afterLoc);
              resetTryEntry(entry);
              return ContinueSentinel;
            }
          }
        },
        "catch": function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if (record.type === "throw") {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          } // The context.catch method must only be called with a location
          // argument that corresponds to a known catch block.


          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          };

          if (this.method === "next") {
            // Deliberately forget the last sent value so that we don't
            // accidentally pass it on to the delegate.
            this.arg = undefined$1;
          }

          return ContinueSentinel;
        }
      }; // Regardless of whether this script is executing as a CommonJS module
      // or not, return the runtime object so that we can declare the variable
      // regeneratorRuntime in the outer scope, which allows this module to be
      // injected easily by `bin/regenerator --include-runtime script.js`.

      return exports;
    }( // If this script is executing as a CommonJS module, use module.exports
    // as the regeneratorRuntime namespace. Otherwise create a new empty
    // object. Either way, the resulting object will be used to initialize
    // the regeneratorRuntime variable at the top of this file.
    module.exports );

    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      // This module should not be running in strict mode, so the above
      // assignment should always work unless something is misconfigured. Just
      // in case runtime.js accidentally runs in strict mode, in modern engines
      // we can explicitly access globalThis. In older engines we can escape
      // strict mode using a global Function call. This could conceivably fail
      // if a Content Security Policy forbids using Function, but in that case
      // the proper solution is to fix the accidental strict mode problem. If
      // you've misconfigured your bundler to force strict mode and applied a
      // CSP to forbid Function, and you're not willing to fix either of those
      // problems, please detail your unique predicament in a GitHub issue.
      if ((typeof globalThis === "undefined" ? "undefined" : _typeof(globalThis)) === "object") {
        globalThis.regeneratorRuntime = runtime;
      } else {
        Function("r", "regeneratorRuntime = r")(runtime);
      }
    }
  })(runtime);

  var regenerator = runtime.exports;

  var toString$1 = toString_1;
  /** Used to generate unique IDs. */

  var idCounter = 0;
  /**
   * Generates a unique ID. If `prefix` is given, the ID is appended to it.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {string} [prefix=''] The value to prefix the ID with.
   * @returns {string} Returns the unique ID.
   * @example
   *
   * _.uniqueId('contact_');
   * // => 'contact_104'
   *
   * _.uniqueId();
   * // => '105'
   */

  function uniqueId(prefix) {
    var id = ++idCounter;
    return toString$1(prefix) + id;
  }

  var uniqueId_1 = uniqueId;

  var assignValue = _assignValue,
      castPath$4 = _castPath,
      isIndex$2 = _isIndex,
      isObject$2 = isObject_1,
      toKey$4 = _toKey;
  /**
   * The base implementation of `_.set`.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {Array|string} path The path of the property to set.
   * @param {*} value The value to set.
   * @param {Function} [customizer] The function to customize path creation.
   * @returns {Object} Returns `object`.
   */

  function baseSet$1(object, path, value, customizer) {
    if (!isObject$2(object)) {
      return object;
    }

    path = castPath$4(path, object);
    var index = -1,
        length = path.length,
        lastIndex = length - 1,
        nested = object;

    while (nested != null && ++index < length) {
      var key = toKey$4(path[index]),
          newValue = value;

      if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
        return object;
      }

      if (index != lastIndex) {
        var objValue = nested[key];
        newValue = customizer ? customizer(objValue, key, nested) : undefined;

        if (newValue === undefined) {
          newValue = isObject$2(objValue) ? objValue : isIndex$2(path[index + 1]) ? [] : {};
        }
      }

      assignValue(nested, key, newValue);
      nested = nested[key];
    }

    return object;
  }

  var _baseSet = baseSet$1;

  var baseGet$2 = _baseGet,
      baseSet = _baseSet,
      castPath$3 = _castPath;
  /**
   * The base implementation of  `_.pickBy` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The source object.
   * @param {string[]} paths The property paths to pick.
   * @param {Function} predicate The function invoked per property.
   * @returns {Object} Returns the new object.
   */

  function basePickBy$1(object, paths, predicate) {
    var index = -1,
        length = paths.length,
        result = {};

    while (++index < length) {
      var path = paths[index],
          value = baseGet$2(object, path);

      if (predicate(value, path)) {
        baseSet(result, castPath$3(path, object), value);
      }
    }

    return result;
  }

  var _basePickBy = basePickBy$1;

  /**
   * The base implementation of `_.hasIn` without support for deep paths.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {Array|string} key The key to check.
   * @returns {boolean} Returns `true` if `key` exists, else `false`.
   */

  function baseHasIn$1(object, key) {
    return object != null && key in Object(object);
  }

  var _baseHasIn = baseHasIn$1;

  var castPath$2 = _castPath,
      isArguments$1 = isArguments_1,
      isArray$3 = isArray_1,
      isIndex$1 = _isIndex,
      isLength = isLength_1,
      toKey$3 = _toKey;
  /**
   * Checks if `path` exists on `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @param {Function} hasFunc The function to check properties.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   */

  function hasPath$1(object, path, hasFunc) {
    path = castPath$2(path, object);
    var index = -1,
        length = path.length,
        result = false;

    while (++index < length) {
      var key = toKey$3(path[index]);

      if (!(result = object != null && hasFunc(object, key))) {
        break;
      }

      object = object[key];
    }

    if (result || ++index != length) {
      return result;
    }

    length = object == null ? 0 : object.length;
    return !!length && isLength(length) && isIndex$1(key, length) && (isArray$3(object) || isArguments$1(object));
  }

  var _hasPath = hasPath$1;

  var baseHasIn = _baseHasIn,
      hasPath = _hasPath;
  /**
   * Checks if `path` is a direct or inherited property of `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   * @example
   *
   * var object = _.create({ 'a': _.create({ 'b': 2 }) });
   *
   * _.hasIn(object, 'a');
   * // => true
   *
   * _.hasIn(object, 'a.b');
   * // => true
   *
   * _.hasIn(object, ['a', 'b']);
   * // => true
   *
   * _.hasIn(object, 'b');
   * // => false
   */

  function hasIn$2(object, path) {
    return object != null && hasPath(object, path, baseHasIn);
  }

  var hasIn_1 = hasIn$2;

  var basePickBy = _basePickBy,
      hasIn$1 = hasIn_1;
  /**
   * The base implementation of `_.pick` without support for individual
   * property identifiers.
   *
   * @private
   * @param {Object} object The source object.
   * @param {string[]} paths The property paths to pick.
   * @returns {Object} Returns the new object.
   */

  function basePick$1(object, paths) {
    return basePickBy(object, paths, function (value, path) {
      return hasIn$1(object, path);
    });
  }

  var _basePick = basePick$1;

  var baseFlatten = _baseFlatten;
  /**
   * Flattens `array` a single level deep.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to flatten.
   * @returns {Array} Returns the new flattened array.
   * @example
   *
   * _.flatten([1, [2, [3, [4]], 5]]);
   * // => [1, 2, [3, [4]], 5]
   */

  function flatten$1(array) {
    var length = array == null ? 0 : array.length;
    return length ? baseFlatten(array, 1) : [];
  }

  var flatten_1 = flatten$1;

  var flatten = flatten_1,
      overRest = _overRest,
      setToString = _setToString;
  /**
   * A specialized version of `baseRest` which flattens the rest array.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @returns {Function} Returns the new function.
   */

  function flatRest$2(func) {
    return setToString(overRest(func, undefined, flatten), func + '');
  }

  var _flatRest = flatRest$2;

  var basePick = _basePick,
      flatRest$1 = _flatRest;
  /**
   * Creates an object composed of the picked `object` properties.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The source object.
   * @param {...(string|string[])} [paths] The property paths to pick.
   * @returns {Object} Returns the new object.
   * @example
   *
   * var object = { 'a': 1, 'b': '2', 'c': 3 };
   *
   * _.pick(object, ['a', 'c']);
   * // => { 'a': 1, 'c': 3 }
   */

  var pick = flatRest$1(function (object, paths) {
    return object == null ? {} : basePick(object, paths);
  });
  var pick_1 = pick;

  function ownKeys$x(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$x(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$x(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$x(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function getExposedProps(node) {
    var props = pick_1(node, ["value", "label", "data", "actived", "expanded", "checked", "indeterminate", "loading"]);
    return props;
  }

  function createNodeModel(node) {
    var props = getExposedProps(node);

    var model = _objectSpread$x(_objectSpread$x({}, props), {}, {
      getLevel: function getLevel() {
        return node.getLevel();
      },
      getIndex: function getIndex() {
        return node.getIndex();
      },
      isFirst: function isFirst() {
        return node.isFirst();
      },
      isLast: function isLast() {
        return node.isLast();
      },
      isLeaf: function isLeaf() {
        return node.isLeaf();
      },
      insertBefore: function insertBefore(newData) {
        return node.insertBefore(newData);
      },
      insertAfter: function insertAfter(newData) {
        return node.insertAfter(newData);
      },
      appendData: function appendData(data) {
        return node.append(data);
      },
      getPath: function getPath() {
        var nodes = node.getPath();
        return nodes.map(function (item) {
          return item.getModel();
        });
      },
      getParent: function getParent() {
        var _node$parent;

        return (_node$parent = node.parent) === null || _node$parent === void 0 ? void 0 : _node$parent.getModel();
      },
      getParents: function getParents() {
        var nodes = node.getParents();
        return nodes.map(function (item) {
          return item.getModel();
        });
      },
      getRoot: function getRoot() {
        var root = node.getRoot();
        return root === null || root === void 0 ? void 0 : root.getModel();
      },
      getSiblings: function getSiblings() {
        var nodes = node.getSiblings();
        return nodes.map(function (item) {
          return item.getModel();
        });
      },
      getChildren: function getChildren(deep) {
        var childrenModel = false;
        var children = node.children;

        if (Array.isArray(children)) {
          if (children.length > 0) {
            if (deep) {
              var nodes = node.walk();
              nodes.shift();
              childrenModel = nodes.map(function (item) {
                return item.getModel();
              });
            } else {
              childrenModel = children.map(function (item) {
                return item.getModel();
              });
            }
          } else {
            childrenModel = false;
          }
        } else if (typeof children === "boolean") {
          childrenModel = children;
        }

        return childrenModel;
      },
      remove: function remove(value) {
        if (!value) {
          node.remove();
          return;
        }

        var tree = node.tree;
        var targetNode = tree.getNode(value);

        if (!targetNode) {
          console.warn("TDesign Tree Warn: `".concat(value, "` is not exist"));
          return;
        }

        var parents = targetNode.getParents();
        var parentValues = parents.map(function (pnode) {
          return pnode.value;
        });

        if (parentValues.indexOf(node.value) < 0) {
          console.warn("TDesign Tree Warn: `".concat(value, "` is not a childNode of current node"));
          return;
        }

        targetNode.remove();
      },
      setData: function setData(data) {
        Object.assign(node.data, data);
      }
    });

    return model;
  }
  function updateNodeModel(model, node) {
    var props = getExposedProps(node);
    Object.assign(model, props);
  }

  function ownKeys$w(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$w(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$w(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$w(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var hasOwnProperty$3 = Object.prototype.hasOwnProperty;
  var defaultStatus = {
    expandMutex: false,
    activable: false,
    checkable: false,
    disabled: false,
    draggable: false,
    loading: false
  };
  var TreeNode = /*#__PURE__*/function () {
    function TreeNode(tree, data, parent) {
      _classCallCheck(this, TreeNode);

      this.data = data;
      this.tree = tree;
      var config = tree.config || {};
      var prefix = config.prefix || "t";
      var keys = get_1(tree, "config.keys") || {};
      var propChildren = keys.children || "children";
      var propLabel = keys.label || "label";
      var propValue = keys.value || "value";
      this.model = null;
      this.children = null;
      this.vmCheckable = false;
      this.vmIsLeaf = false;
      this.vmIsFirst = false;
      this.vmIsLast = false;
      this.vmIsRest = true;
      this.vmIsLocked = false;

      var spec = _objectSpread$w(_objectSpread$w({}, defaultStatus), {}, {
        actived: false,
        expanded: false,
        checked: false
      }, data);

      var children = spec[propChildren];
      this.set(spec);
      this.label = spec[propLabel] || "";
      this.value = spec[propValue] || uniqueId_1(prefix);
      this.tree.nodeMap.set(this.value, this);

      if (parent && parent instanceof TreeNode) {
        this.parent = parent;
      } else {
        this.parent = null;
      }

      if (children === true) {
        this.children = children;
      }

      this.level = 0;
      this.visible = true;
      this.actived = spec.actived;
      this.initActived();
      this.expanded = spec.expanded;
      this.initExpanded();
      this.checked = spec.checked;
      this.initChecked();
      this.update();
      tree.reflow(this);

      if (Array.isArray(children)) {
        this.append(children);
      } else if (children === true && !config.lazy) {
        this.loadChildren();
      }

      this.checked = false;
      this.indeterminate = false;
      this.updateChecked();
    }

    _createClass(TreeNode, [{
      key: "initChecked",
      value: function initChecked() {
        var tree = this.tree,
            value = this.value,
            parent = this.parent;
        var checkStrictly = tree.config.checkStrictly;
        var checked = this.checked;
        checked = parent === null || parent === void 0 ? void 0 : parent.isChecked();

        if (checked && !checkStrictly) {
          tree.checkedMap.set(value, true);
        }

        this.checked = checked;
      }
    }, {
      key: "initExpanded",
      value: function initExpanded() {
        var tree = this.tree;
        var expanded = this.expanded;
        var config = tree.config;

        if (typeof config.expandLevel === "number" && this.getLevel() < config.expandLevel) {
          tree.expandedMap.set(this.value, true);
          expanded = true;
        }

        if (config.expandAll) {
          expanded = true;
        }

        if (this.children === true && config.lazy) {
          expanded = false;
        }

        if (expanded) {
          tree.expandedMap.set(this.value, true);
        } else {
          tree.expandedMap["delete"](this.value);
        }

        this.expanded = expanded;
      }
    }, {
      key: "initActived",
      value: function initActived() {
        var tree = this.tree,
            actived = this.actived;

        if (actived) {
          tree.activedMap.set(this.value, true);
        }
      }
    }, {
      key: "append",
      value: function append(data) {
        var _this = this;

        var list = [];

        if (!Array.isArray(data)) {
          list.push(data);
        } else {
          list.push.apply(list, _toConsumableArray(data));
        }

        if (list.length <= 0) {
          return;
        }

        if (!Array.isArray(this.children)) {
          this.children = [];
        }

        var children = this.children,
            tree = this.tree;
        list.forEach(function (item) {
          var node = null;

          if (item instanceof TreeNode) {
            node = item;
            node.appendTo(_this.tree, _this);
          } else {
            node = new TreeNode(_this.tree, item, _this);
            children.push(node);
          }
        });
        tree.reflow(this);
        this.updateRelated();
      }
    }, {
      key: "appendTo",
      value: function appendTo(tree, parent, index) {
        var _this2 = this;

        var parentNode = parent;
        if (!parentNode) return;
        var targetParents = parentNode.getParents();
        var includeCurrent = targetParents.some(function (node) {
          return node.value === _this2.value;
        });

        if (includeCurrent) {
          return;
        }

        if (Array.isArray(parentNode.children)) {
          var targetIndex = 0;

          if (typeof index === "number") {
            targetIndex = index;
          }

          var targetPosNode = parentNode.children[targetIndex];

          if (targetPosNode.value === this.value) {
            return;
          }
        }

        this.remove();
        this.parent = parentNode;
        var siblings = null;

        if (parentNode instanceof TreeNode) {
          if (!Array.isArray(parentNode.children)) {
            parentNode.children = [];
          }

          siblings = parent.children;
        } else {
          siblings = tree.children;
        }

        if (Array.isArray(siblings)) {
          if (typeof index === "number") {
            siblings.splice(index, 0, this);
          } else {
            siblings.push(this);
          }
        }

        var nodes = this.walk();
        nodes.forEach(function (item) {
          var node = item;
          node.tree = tree;
          tree.nodeMap.set(node.value, node);

          if (node.expanded) {
            tree.expandedMap.set(node.value, true);
          }
        });
        var updateNodes = parentNode.walk();
        updateNodes.forEach(function (node) {
          node.update();
          node.updateChecked();
        });
        tree.reflow();
      }
    }, {
      key: "insert",
      value: function insert(item, index) {
        var tree = this.tree,
            parent = this.parent;
        var siblings = this.getSiblings();
        var node = null;

        if (item instanceof TreeNode) {
          node = item;
          node.appendTo(tree, parent, index);
        } else if (item) {
          node = new TreeNode(tree, item, parent);

          if (typeof index === "number") {
            siblings.splice(index, 0, node);
          }

          siblings.forEach(function (sibling) {
            sibling.update();
          });
        }

        tree.reflow();
      }
    }, {
      key: "insertBefore",
      value: function insertBefore(newData) {
        var index = this.getIndex();
        this.insert(newData, index);
      }
    }, {
      key: "insertAfter",
      value: function insertAfter(newData) {
        var index = this.getIndex();
        this.insert(newData, index + 1);
      }
    }, {
      key: "remove",
      value: function remove() {
        var tree = this.tree;
        var nodes = this.walk();
        var siblings = this.getSiblings();
        var index = this.getIndex();

        if (Array.isArray(siblings)) {
          siblings.splice(index, 1);
        }

        nodes.forEach(function (node) {
          node.clean();
        });
        siblings.forEach(function (node) {
          node.update();
        });
        this.updateParents();
        tree.reflow();
      }
    }, {
      key: "clean",
      value: function clean() {
        var tree = this.tree,
            value = this.value;
        tree.activedMap["delete"](value);
        tree.checkedMap["delete"](value);
        tree.expandedMap["delete"](value);
        tree.nodeMap["delete"](value);
      }
    }, {
      key: "loadChildren",
      value: function () {
        var _loadChildren = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
          var config, list;
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  config = get_1(this, "tree.config") || {};

                  if (!(this.children === true && !this.loading)) {
                    _context.next = 13;
                    break;
                  }

                  if (!(typeof config.load === "function")) {
                    _context.next = 13;
                    break;
                  }

                  this.loading = true;
                  this.update();
                  list = [];
                  _context.next = 8;
                  return config.load(this);

                case 8:
                  list = _context.sent;
                  this.tree.emit("load", {
                    node: this,
                    data: list
                  });
                  this.loading = false;

                  if (Array.isArray(list) && list.length > 0) {
                    this.append(list);
                  } else {
                    this.children = false;
                  }

                  this.update();

                case 13:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function loadChildren() {
          return _loadChildren.apply(this, arguments);
        }

        return loadChildren;
      }()
    }, {
      key: "set",
      value: function set(item) {
        var _this3 = this;

        var tree = this.tree;
        var keys = Object.keys(item);
        keys.forEach(function (key) {
          if (hasOwnProperty$3.call(defaultStatus, key) || key === "label") {
            _this3[key] = item[key];
          }
        });
        tree.updated(this);
      }
    }, {
      key: "getParent",
      value: function getParent() {
        return this.parent;
      }
    }, {
      key: "getParents",
      value: function getParents() {
        var parents = [];
        var node = this.parent;

        while (node) {
          parents.push(node);
          node = node.parent;
        }

        return parents;
      }
    }, {
      key: "getSiblings",
      value: function getSiblings() {
        var parent = this.parent,
            tree = this.tree;
        var list = [];

        if (parent) {
          if (Array.isArray(parent.children)) {
            list = parent.children;
          }
        } else if (tree) {
          list = tree.children;
        }

        return list;
      }
    }, {
      key: "getRoot",
      value: function getRoot() {
        var parents = this.getParents();
        return parents[parents.length - 1] || null;
      }
    }, {
      key: "getIndex",
      value: function getIndex() {
        var list = this.getSiblings();
        return list.indexOf(this);
      }
    }, {
      key: "getPath",
      value: function getPath() {
        var nodes = this.getParents();
        nodes.unshift(this);
        return nodes.reverse();
      }
    }, {
      key: "getLevel",
      value: function getLevel() {
        var parents = this.getParents();
        return parents.length;
      }
    }, {
      key: "isRest",
      value: function isRest() {
        var _this$tree = this.tree,
            config = _this$tree.config,
            filterMap = _this$tree.filterMap;
        var rest = true;

        if (typeof config.filter === "function") {
          var nodeModel = this.getModel();
          rest = config.filter(nodeModel);
        }

        if (rest) {
          filterMap.set(this.value, true);
        } else if (filterMap.get(this.value)) {
          filterMap["delete"](this.value);
        }

        return rest;
      }
    }, {
      key: "isVisible",
      value: function isVisible() {
        var nodeMap = this.tree.nodeMap;
        var visible = true;

        if (this.vmIsLocked) {
          return true;
        }

        if (nodeMap.get(this.value)) {
          var filterVisible = this.isRest();
          var expandVisible = true;
          var parents = this.getParents();

          if (parents.length > 0) {
            expandVisible = parents.every(function (node) {
              return node.isExpanded();
            });
          }

          visible = expandVisible && filterVisible;
        } else {
          visible = false;
        }

        return visible;
      }
    }, {
      key: "isDisabled",
      value: function isDisabled() {
        if (this.vmIsLocked) return true;
        var treeDisabled = get_1(this, "tree.config.disabled");
        return !!(treeDisabled || this.disabled);
      }
    }, {
      key: "isExpandMutex",
      value: function isExpandMutex() {
        return !!(get_1(this, "tree.config.expandMutex") || this.expandMutex);
      }
    }, {
      key: "isActivable",
      value: function isActivable() {
        return !!(get_1(this, "tree.config.activable") || this.activable);
      }
    }, {
      key: "isCheckable",
      value: function isCheckable() {
        return !!(get_1(this, "tree.config.checkable") || this.checkable);
      }
    }, {
      key: "isActived",
      value: function isActived(map) {
        var tree = this.tree,
            value = this.value;
        var activedMap = map || tree.activedMap;
        return !!(tree.nodeMap.get(value) && activedMap.get(value));
      }
    }, {
      key: "isExpanded",
      value: function isExpanded(map) {
        var tree = this.tree,
            value = this.value,
            vmIsLocked = this.vmIsLocked;
        if (vmIsLocked) return true;
        var expandedMap = map || tree.expandedMap;
        return !!(tree.nodeMap.get(value) && expandedMap.get(value));
      }
    }, {
      key: "isChecked",
      value: function isChecked(map) {
        var children = this.children,
            tree = this.tree;
        var checkStrictly = tree.config.checkStrictly;
        var checked = false;
        var checkedMap = map || tree.checkedMap;

        if (tree.nodeMap.get(this.value)) {
          if (checkedMap.get(this.value)) {
            checked = true;
          } else if (Array.isArray(children) && children.length > 0 && !checkStrictly) {
            checked = children.every(function (node) {
              var childIsChecked = node.isChecked(checkedMap);
              return childIsChecked;
            });
          } else if (!checkStrictly) {
            var parents = this.getParents();
            checked = parents.some(function (node) {
              return checkedMap.get(node.value);
            });
          }
        }

        return !!checked;
      }
    }, {
      key: "isIndeterminate",
      value: function isIndeterminate() {
        var children = this.children,
            tree = this.tree;
        var checkStrictly = tree.config.checkStrictly;

        if (checkStrictly) {
          return false;
        }

        var indeterminate = false;

        if (Array.isArray(children)) {
          var childChecked = null;
          indeterminate = children.some(function (node) {
            if (node.isIndeterminate()) {
              return true;
            }

            if (childChecked === null) {
              childChecked = node.isChecked();
            }

            if (childChecked !== node.isChecked()) {
              return true;
            }

            return false;
          });
        }

        return indeterminate;
      }
    }, {
      key: "isFirst",
      value: function isFirst() {
        var siblings = this.getSiblings();
        return siblings[0] === this;
      }
    }, {
      key: "isLast",
      value: function isLast() {
        var siblings = this.getSiblings();
        return siblings[siblings.length - 1] === this;
      }
    }, {
      key: "isLeaf",
      value: function isLeaf() {
        var isLeaf = false;

        if (Array.isArray(this.children)) {
          isLeaf = this.children.length <= 0;
        } else {
          isLeaf = !this.children;
        }

        return isLeaf;
      }
    }, {
      key: "lock",
      value: function lock(lockState) {
        this.vmIsLocked = lockState;
        this.expanded = this.isExpanded();
        this.visible = this.isVisible();
      }
    }, {
      key: "afterExpanded",
      value: function afterExpanded() {
        this.update();

        if (this.expanded && this.children === true) {
          this.loadChildren();
        }
      }
    }, {
      key: "toggleExpanded",
      value: function toggleExpanded() {
        return this.setExpanded(!this.isExpanded());
      }
    }, {
      key: "setExpanded",
      value: function setExpanded(expanded, opts) {
        var tree = this.tree;

        var options = _objectSpread$w({
          directly: false
        }, opts);

        var map = tree.expandedMap;

        if (!options.directly) {
          map = new Map(tree.expandedMap);
        }

        if (expanded) {
          var shouldExpandNodes = [];
          shouldExpandNodes.push(this);

          if (get_1(tree, "config.expandParent")) {
            this.getParents().forEach(function (node) {
              shouldExpandNodes.push(node);
            });
          }

          shouldExpandNodes.forEach(function (node) {
            var isExpandMutex = false;

            if (node.parent) {
              isExpandMutex = node.parent.isExpandMutex();
            } else {
              var _tree$config;

              isExpandMutex = tree === null || tree === void 0 ? void 0 : (_tree$config = tree.config) === null || _tree$config === void 0 ? void 0 : _tree$config.expandMutex;
            }

            if (isExpandMutex) {
              var siblings = node.getSiblings();
              siblings.forEach(function (snode) {
                map["delete"](snode.value);
              });
            }

            map.set(node.value, true);
          });
        } else {
          map["delete"](this.value);
        }

        if (options.directly) {
          this.afterExpanded();
          this.update();
          this.updateChildren();
        }

        return tree.getExpanded(map);
      }
    }, {
      key: "toggleActived",
      value: function toggleActived() {
        return this.setActived(!this.isActived());
      }
    }, {
      key: "setActived",
      value: function setActived(actived, opts) {
        var tree = this.tree;

        var options = _objectSpread$w({
          directly: false
        }, opts);

        var config = tree.config || {};
        var map = tree.activedMap;

        if (!options.directly) {
          map = new Map(tree.activedMap);
        }

        if (this.isActivable()) {
          if (actived) {
            if (!config.activeMultiple) {
              map.clear();
            }

            map.set(this.value, true);
          } else {
            map["delete"](this.value);
          }
        }

        if (options.directly) {
          this.update();
        }

        return tree.getActived(map);
      }
    }, {
      key: "toggleChecked",
      value: function toggleChecked() {
        return this.setChecked(!this.isChecked());
      }
    }, {
      key: "setChecked",
      value: function setChecked(checked, opts) {
        var tree = this.tree;
        var config = tree.config || {};

        var options = _objectSpread$w({
          directly: false
        }, opts);

        var map = tree.checkedMap;

        if (!options.directly) {
          map = new Map(tree.checkedMap);
        }

        if (this.isCheckable() && checked !== this.isChecked()) {
          if (config.checkStrictly) {
            if (checked) {
              map.set(this.value, true);
            } else {
              map["delete"](this.value);
            }
          } else {
            var children = this.walk();
            children.forEach(function (node) {
              if (checked) {
                map.set(node.value, true);
              } else {
                map["delete"](node.value);
              }
            });
            var parents = this.getParents();
            parents.forEach(function (node) {
              map["delete"](node.value);
            });
          }
        }

        if (options.directly) {
          if (config.checkStrictly) {
            this.updateChecked();
          } else {
            var relatedNodes = tree.getRelatedNodes([this.value]);
            relatedNodes.forEach(function (node) {
              node.updateChecked();
            });
          }
        }

        return tree.getChecked(map);
      }
    }, {
      key: "update",
      value: function update() {
        this.level = this.getLevel();
        this.actived = this.isActived();
        this.expanded = this.isExpanded();
        this.vmCheckable = this.isCheckable();
        this.visible = this.isVisible();
        this.vmIsRest = this.isRest();
        this.vmIsFirst = this.isFirst();
        this.vmIsLast = this.isLast();
        this.vmIsLeaf = this.isLeaf();
        this.tree.updated(this);
      }
    }, {
      key: "updateChecked",
      value: function updateChecked() {
        var tree = this.tree;
        this.vmCheckable = this.isCheckable();

        if (this.vmCheckable && !this.disabled) {
          this.checked = this.isChecked();

          if (this.checked) {
            tree.checkedMap.set(this.value, true);
          }

          this.indeterminate = this.isIndeterminate();
          tree.updated(this);
        }
      }
    }, {
      key: "updateChildren",
      value: function updateChildren() {
        var children = this.children;

        if (Array.isArray(children)) {
          children.forEach(function (node) {
            node.update();
            node.updateChecked();
            node.updateChildren();
          });
        }
      }
    }, {
      key: "updateParents",
      value: function updateParents() {
        var parent = this.parent;

        if (parent) {
          parent.update();
          parent.updateChecked();
          parent.updateParents();
        }
      }
    }, {
      key: "updateRelated",
      value: function updateRelated() {
        var tree = this.tree;
        var relatedNodes = tree.getRelatedNodes([this.value]);
        relatedNodes.forEach(function (node) {
          node.update();
          node.updateChecked();
        });
        tree.reflow();
      }
    }, {
      key: "walk",
      value: function walk() {
        var children = this.children;
        var list = [];
        list.push(this);

        if (Array.isArray(children) && children.length > 0) {
          children.forEach(function (node) {
            list = list.concat(node.walk());
          });
        }

        return list;
      }
    }, {
      key: "getModel",
      value: function getModel() {
        var model = this.model;

        if (!model) {
          model = createNodeModel(this);
          this.model = model;
        }

        updateNodeModel(model, this);
        return model;
      }
    }]);

    return TreeNode;
  }();

  function ownKeys$v(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$v(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$v(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$v(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TreeStore = /*#__PURE__*/function () {
    function TreeStore(options) {
      _classCallCheck(this, TreeStore);

      var config = _objectSpread$v({
        prefix: "t",
        keys: {},
        expandAll: false,
        expandLevel: 0,
        expandMutex: false,
        expandParent: false,
        activable: false,
        activeMultiple: false,
        checkable: false,
        checkStrictly: false,
        disabled: false,
        load: null,
        lazy: false,
        valueMode: "onlyLeaf",
        filter: null,
        onLoad: null,
        onReflow: null,
        onUpdate: null
      }, options);

      this.config = config;
      this.nodes = [];
      this.children = [];
      this.nodeMap = /* @__PURE__ */new Map();
      this.activedMap = /* @__PURE__ */new Map();
      this.expandedMap = /* @__PURE__ */new Map();
      this.checkedMap = /* @__PURE__ */new Map();
      this.updatedMap = /* @__PURE__ */new Map();
      this.filterMap = /* @__PURE__ */new Map();
      this.prevFilter = null;
      this.updateTimer = null;
      this.shouldReflow = false;
    }

    _createClass(TreeStore, [{
      key: "setConfig",
      value: function setConfig(options) {
        var _this = this;

        var hasChanged = false;
        Object.keys(options).forEach(function (key) {
          var val = options[key];

          if (val !== _this.config[key]) {
            hasChanged = true;
            _this.config[key] = val;
          }
        });

        if (hasChanged) {
          this.refreshState();
        }
      }
    }, {
      key: "getChildren",
      value: function getChildren() {
        return this.children;
      }
    }, {
      key: "getNode",
      value: function getNode(item) {
        var node = null;

        if (typeof item === "string" || typeof item === "number") {
          node = this.nodeMap.get(item);
        } else if (item instanceof TreeNode) {
          node = this.nodeMap.get(item.value);
        }

        return node;
      }
    }, {
      key: "getIndex",
      value: function getIndex(node) {
        return this.nodes.indexOf(node);
      }
    }, {
      key: "getParent",
      value: function getParent(value) {
        var parent = null;
        var node = this.getNode(value);

        if (node) {
          parent = node.getParent();
        }

        return parent;
      }
    }, {
      key: "getParents",
      value: function getParents(value) {
        var node = this.getNode(value);
        var parents = [];

        if (node) {
          parents = node.getParents();
        }

        return parents;
      }
    }, {
      key: "getNodeIndex",
      value: function getNodeIndex(value) {
        var node = this.getNode(value);
        var index = -1;

        if (node) {
          index = node.getIndex();
        }

        return index;
      }
    }, {
      key: "getNodes",
      value: function getNodes(item, options) {
        var nodes = [];
        var val = "";

        if (typeof item === "string" || typeof item === "number") {
          val = item;
        } else if (item instanceof TreeNode) {
          val = item.value;
        }

        if (!val) {
          nodes = this.nodes.slice(0);
        } else {
          var node = this.getNode(val);

          if (node) {
            nodes = node.walk();
          }
        }

        if (options) {
          var conf = _objectSpread$v({
            filter: null,
            level: Infinity
          }, options);

          if (typeof conf.level === "number" && conf.level !== Infinity) {
            nodes = nodes.filter(function (node) {
              return node.level <= conf.level;
            });
          }

          if (typeof conf.filter === "function") {
            nodes = nodes.filter(function (node) {
              var nodeModel = node.getModel();
              return conf.filter(nodeModel);
            });
          }

          if (isPlainObject_1(conf.props)) {
            nodes = nodes.filter(function (node) {
              var result = Object.keys(conf.props).every(function (key) {
                var propEqual = node[key] === conf.props[key];
                return propEqual;
              });
              return result;
            });
          }
        }

        return nodes;
      }
    }, {
      key: "append",
      value: function append(list) {
        var _this2 = this;

        list.forEach(function (item) {
          var node = new TreeNode(_this2, item);

          _this2.children.push(node);
        });
        this.reflow();
      }
    }, {
      key: "reload",
      value: function reload(list) {
        this.expandedMap.clear();
        this.checkedMap.clear();
        this.activedMap.clear();
        this.filterMap.clear();
        this.removeAll();
        this.append(list);
      }
    }, {
      key: "parseNodeData",
      value: function parseNodeData(para, item) {
        var value = "";
        var node = null;
        var data = null;

        if (typeof para === "string" || typeof para === "number") {
          value = para;
          data = item;
          node = this.getNode(value);
        } else if (para instanceof TreeNode) {
          node = para;
          data = item;
        } else {
          data = para;
        }

        var spec = {
          node: node,
          data: data
        };
        return spec;
      }
    }, {
      key: "appendNodes",
      value: function appendNodes(para, item) {
        var spec = this.parseNodeData(para, item);

        if (spec.data) {
          if (!spec.node) {
            if (spec.data instanceof TreeNode) {
              spec.data.appendTo(this);
            } else if (Array.isArray(spec.data)) {
              this.append(spec.data);
            } else {
              this.append([spec.data]);
            }
          } else {
            if (spec.data instanceof TreeNode) {
              spec.data.appendTo(this, spec.node);
            } else if (Array.isArray(spec.data)) {
              spec.node.append(spec.data);
            } else {
              spec.node.append([spec.data]);
            }

            spec.node.updateRelated();
          }
        }
      }
    }, {
      key: "insertBefore",
      value: function insertBefore(value, item) {
        var node = this.getNode(value);

        if (node) {
          node.insertBefore(item);
        }
      }
    }, {
      key: "insertAfter",
      value: function insertAfter(value, item) {
        var node = this.getNode(value);

        if (node) {
          node.insertAfter(item);
        }
      }
    }, {
      key: "refreshNodes",
      value: function refreshNodes() {
        var children = this.children,
            nodes = this.nodes;
        nodes.length = 0;
        children.forEach(function (node) {
          var list = node.walk();
          Array.prototype.push.apply(nodes, list);
        });
      }
    }, {
      key: "refreshState",
      value: function refreshState() {
        var nodes = this.nodes;
        nodes.forEach(function (node) {
          node.update();
          node.updateChecked();
        });
      }
    }, {
      key: "reflow",
      value: function reflow(node) {
        this.shouldReflow = true;
        this.updated(node);
      }
    }, {
      key: "updated",
      value: function updated(node) {
        var _this3 = this;

        if (node !== null && node !== void 0 && node.value) {
          this.updatedMap.set(node.value, true);
        }

        if (this.updateTimer) return;
        this.updateTimer = +setTimeout(function () {
          clearTimeout(_this3.updateTimer);
          _this3.updateTimer = null;

          if (_this3.shouldReflow) {
            _this3.refreshNodes();

            _this3.emit("reflow");
          }

          _this3.lockFilterPathNodes();

          var updatedList = Array.from(_this3.updatedMap.keys());

          if (updatedList.length > 0) {
            var updatedNodes = updatedList.map(function (value) {
              return _this3.getNode(value);
            });

            _this3.emit("update", {
              nodes: updatedNodes,
              map: _this3.updatedMap
            });
          } else if (_this3.shouldReflow) {
            _this3.emit("update", {
              nodes: [],
              map: _this3.updatedMap
            });
          }

          _this3.shouldReflow = false;

          _this3.updatedMap.clear();
        });
      }
    }, {
      key: "getActived",
      value: function getActived(map) {
        var activedMap = map || this.activedMap;
        return Array.from(activedMap.keys());
      }
    }, {
      key: "getActivedNodes",
      value: function getActivedNodes(item) {
        var nodes = this.getNodes(item);
        nodes = nodes.filter(function (node) {
          return node.isActived();
        });
        return nodes;
      }
    }, {
      key: "replaceActived",
      value: function replaceActived(list) {
        this.resetActived();
        this.setActived(list);
      }
    }, {
      key: "setActived",
      value: function setActived(actived) {
        var _this4 = this;

        var activeMultiple = this.config.activeMultiple;
        var list = actived.slice(0);

        if (!activeMultiple) {
          list.length = 1;
        }

        list.forEach(function (val) {
          _this4.activedMap.set(val, true);

          var node = _this4.getNode(val);

          if (node) {
            node.update();
          }
        });
      }
    }, {
      key: "resetActived",
      value: function resetActived() {
        var actived = this.getActived();
        this.activedMap.clear();
        var relatedNodes = this.getRelatedNodes(actived);
        relatedNodes.forEach(function (node) {
          node.update();
        });
      }
    }, {
      key: "getExpanded",
      value: function getExpanded(map) {
        var expandedMap = map || this.expandedMap;
        return Array.from(expandedMap.keys());
      }
    }, {
      key: "replaceExpanded",
      value: function replaceExpanded(list) {
        var expanded = this.getExpanded();
        var added = difference_1(list, expanded);
        var removed = difference_1(expanded, list);
        this.setExpandedDirectly(removed, false);
        this.updateExpanded(removed);
        this.setExpanded(added);
      }
    }, {
      key: "setExpanded",
      value: function setExpanded(list) {
        this.setExpandedDirectly(list);
        this.updateExpanded(list);
      }
    }, {
      key: "setExpandedDirectly",
      value: function setExpandedDirectly(list) {
        var _this5 = this;

        var expanded = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        list.forEach(function (val) {
          if (expanded) {
            _this5.expandedMap.set(val, true);

            var node = _this5.getNode(val);

            if (node) {
              node.afterExpanded();
            }
          } else {
            _this5.expandedMap["delete"](val);
          }
        });
      }
    }, {
      key: "resetExpanded",
      value: function resetExpanded() {
        var expanded = this.getExpanded();
        this.expandedMap.clear();
        this.updateExpanded(expanded);
      }
    }, {
      key: "updateExpanded",
      value: function updateExpanded(list) {
        var relatedNodes = this.getRelatedNodes(list, {
          withParents: false
        });
        relatedNodes.forEach(function (node) {
          node.update();
        });
      }
    }, {
      key: "getChecked",
      value: function getChecked(map) {
        var nodes = this.nodes,
            config = this.config;
        var valueMode = config.valueMode,
            checkStrictly = config.checkStrictly;
        var list = [];
        var checkedMap = map || this.checkedMap;
        nodes.forEach(function (node) {
          if (node.isChecked(checkedMap)) {
            if (valueMode === "parentFirst" && !checkStrictly) {
              if (!node.parent || !node.parent.isChecked(checkedMap)) {
                list.push(node.value);
              }
            } else if (valueMode === "onlyLeaf" && !checkStrictly) {
              if (node.isLeaf()) {
                list.push(node.value);
              }
            } else {
              list.push(node.value);
            }
          }
        });
        return list;
      }
    }, {
      key: "getCheckedNodes",
      value: function getCheckedNodes(item) {
        var nodes = this.getNodes(item);
        nodes = nodes.filter(function (node) {
          return node.isChecked();
        });
        return nodes;
      }
    }, {
      key: "replaceChecked",
      value: function replaceChecked(list) {
        this.resetChecked();
        this.setChecked(list);
      }
    }, {
      key: "setChecked",
      value: function setChecked(list) {
        var _this6 = this;

        var _this$config = this.config,
            valueMode = _this$config.valueMode,
            checkStrictly = _this$config.checkStrictly,
            checkable = _this$config.checkable;
        if (!checkable) return;
        list.forEach(function (val) {
          var node = _this6.getNode(val);

          if (node) {
            if (valueMode === "parentFirst" && !checkStrictly) {
              var childrenNodes = node.walk();
              childrenNodes.forEach(function (childNode) {
                _this6.checkedMap.set(childNode.value, true);
              });
            } else {
              _this6.checkedMap.set(val, true);

              node.updateChecked();
            }
          }
        });

        if (!checkStrictly) {
          var checked = this.getChecked();
          var relatedNodes = this.getRelatedNodes(checked);
          relatedNodes.forEach(function (node) {
            node.updateChecked();
          });
        }
      }
    }, {
      key: "resetChecked",
      value: function resetChecked() {
        var checked = this.getChecked();
        var relatedNodes = this.getRelatedNodes(checked);
        this.checkedMap.clear();
        relatedNodes.forEach(function (node) {
          node.updateChecked();
        });
      }
    }, {
      key: "updateAll",
      value: function updateAll() {
        var nodes = this.getNodes();
        nodes.forEach(function (node) {
          node.update();
        });
      }
    }, {
      key: "remove",
      value: function remove(value) {
        var node = this.getNode(value);

        if (node) {
          node.remove();
        }
      }
    }, {
      key: "removeAll",
      value: function removeAll() {
        var nodes = this.getNodes();
        nodes.forEach(function (node) {
          node.remove();
        });
      }
    }, {
      key: "getRelatedNodes",
      value: function getRelatedNodes(list, options) {
        var _this7 = this;

        var conf = _objectSpread$v({
          withParents: true
        }, options);

        var map = /* @__PURE__ */new Map();
        list.forEach(function (value) {
          if (map.get(value)) return;

          var node = _this7.getNode(value);

          if (node) {
            var parents = node.getParents();
            var children = node.walk();
            var related = [];

            if (conf.withParents) {
              related = parents.concat(children);
            } else {
              related = children;
            }

            related.forEach(function (relatedNode) {
              map.set(relatedNode.value, relatedNode);
            });
          }
        });
        var relatedNodes = Array.from(map.values());
        return relatedNodes;
      }
    }, {
      key: "emit",
      value: function emit(name, state) {
        var config = this.config || {};
        var methodName = camelCase_1("on-".concat(name));
        var method = config[methodName];

        if (typeof method === "function") {
          method(state);
        }
      }
    }, {
      key: "lockFilterPathNodes",
      value: function lockFilterPathNodes() {
        var _this8 = this;

        var config = this.config,
            filterMap = this.filterMap;

        if (!config.filter && !this.prevFilter) {
          return;
        }

        this.prevFilter = config.filter;
        var allNodes = this.getNodes();
        allNodes.forEach(function (node) {
          node.lock(false);
        });

        if (allNodes.length === filterMap.size) {
          return;
        }

        var map = /* @__PURE__ */new Map();
        allNodes.reverse().forEach(function (item) {
          var node = item;
          var parent = node.getParent();

          if (node.vmIsRest) {
            if (parent) {
              parent.expanded = true;
            }

            node.visible = true;
          }

          if (node.vmIsRest || map.get(node.value)) {
            if (parent && !parent.vmIsRest) {
              map.set(parent.value, true);
            }
          }
        });
        var filterPathValues = Array.from(map.keys());
        filterPathValues.forEach(function (value) {
          var node = _this8.getNode(value);

          if (node) {
            node.lock(true);
          }
        });
      }
    }]);

    return TreeStore;
  }();

  function useStore(props, refresh) {
    var storeRef = React.useRef();
    var data = props.data,
        keys = props.keys,
        expandAll = props.expandAll,
        expandParent = props.expandParent,
        expanded = props.expanded,
        expandLevel = props.expandLevel,
        expandMutex = props.expandMutex,
        activable = props.activable,
        activeMultiple = props.activeMultiple,
        actived = props.actived,
        disabled = props.disabled,
        checkable = props.checkable,
        value = props.value,
        checkStrictly = props.checkStrictly,
        load = props.load,
        lazy = props.lazy,
        valueMode = props.valueMode,
        filter = props.filter,
        _onLoad = props.onLoad;
    var handleUpdate = usePersistFn(function () {
      refresh();
    });

    var getExpandedArr = function getExpandedArr(arr, store2) {
      var expandedMap = /* @__PURE__ */new Map();
      arr.forEach(function (val) {
        expandedMap.set(val, true);

        if (expandParent) {
          var node = store2.getNode(val);
          node.getParents().forEach(function (tn) {
            expandedMap.set(tn.value, true);
          });
        }
      });
      return Array.from(expandedMap.keys());
    };

    var createStore = function createStore() {
      var store2 = new TreeStore({
        keys: keys,
        activable: activable,
        activeMultiple: activeMultiple,
        checkable: checkable,
        checkStrictly: checkStrictly,
        expandAll: expandAll,
        expandLevel: expandLevel,
        expandMutex: expandMutex,
        expandParent: expandParent,
        disabled: disabled,
        load: load,
        lazy: lazy,
        valueMode: valueMode,
        filter: filter,
        onLoad: function onLoad(info) {
          var node = info.node;
          _onLoad === null || _onLoad === void 0 ? void 0 : _onLoad({
            node: node.getModel()
          });
        },
        onUpdate: handleUpdate
      });
      var list = cloneDeep_1(data);

      if (!Array.isArray(list)) {
        list = [];
      }

      store2.append(list);
      store2.refreshNodes();

      if (Array.isArray(value)) {
        store2.setChecked(value);
      }

      if (Array.isArray(expanded)) {
        var expandedArr = getExpandedArr(expanded, store2);
        store2.setExpanded(expandedArr);
      }

      if (Array.isArray(actived)) {
        store2.setActived(actived);
      }

      store2.refreshNodes();
      return store2;
    };

    if (!storeRef.current) {
      storeRef.current = createStore();
    }

    var store = storeRef.current;
    useUpdateEffect(function () {
      if (data && Array.isArray(data)) {
        store.removeAll();
        store.append(data);
      }
    }, [data, store]);
    useUpdateEffect(function () {
      store.setConfig({
        keys: keys,
        expandAll: expandAll,
        expandLevel: expandLevel,
        expandMutex: expandMutex,
        expandParent: expandParent,
        activable: activable,
        activeMultiple: activeMultiple,
        disabled: disabled,
        checkable: checkable,
        checkStrictly: checkStrictly,
        load: load,
        lazy: lazy,
        valueMode: valueMode
      });
      store.refreshState();
    }, [activable, activeMultiple, checkStrictly, checkable, disabled, expandAll, expandLevel, expandMutex, expandParent, keys, lazy, load, store, valueMode]);
    useUpdateEffect(function () {
      if (Array.isArray(value)) {
        store.replaceChecked(value);
      }
    }, [store, value]);
    useUpdateEffect(function () {
      if (Array.isArray(expanded)) {
        var expandedArr = getExpandedArr(expanded, store);
        store.replaceExpanded(expandedArr);
      }
    }, [expanded, store]);
    useUpdateEffect(function () {
      if (Array.isArray(actived)) {
        store.replaceActived(actived);
      }
    }, [actived, store]);
    useUpdateEffect(function () {
      store.setConfig({
        filter: filter
      });
      store.updateAll();
    }, [filter, store]);
    return storeRef.current;
  }

  function ownKeys$u(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$u(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$u(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$u(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var Tree$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _classNames;

    var _useTreeConfig = useTreeConfig(),
        treeClassNames = _useTreeConfig.treeClassNames,
        transitionNames = _useTreeConfig.transitionNames,
        transitionClassNames = _useTreeConfig.transitionClassNames,
        transitionDuration = _useTreeConfig.transitionDuration;

    var _useState = React.useState([]),
        _useState2 = _slicedToArray(_useState, 2),
        visibleNodes = _useState2[0],
        setVisibleNodes = _useState2[1];

    var empty = props.empty,
        activable = props.activable,
        disabled = props.disabled,
        checkable = props.checkable,
        checkProps = props.checkProps,
        disableCheck = props.disableCheck,
        hover = props.hover,
        icon = props.icon,
        line = props.line,
        label = props.label,
        operations = props.operations,
        transition = props.transition,
        expandOnClickNode = props.expandOnClickNode,
        onClick = props.onClick;

    var _useControllable = useControllable(props),
        value = _useControllable.value,
        onChange = _useControllable.onChange,
        expanded = _useControllable.expanded,
        onExpand = _useControllable.onExpand,
        onActive = _useControllable.onActive,
        actived = _useControllable.actived;

    var _useLocaleReceiver = useLocaleReceiver("tree"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
        local = _useLocaleReceiver2[0],
        t = _useLocaleReceiver2[1];

    var emptyText = t(local.empty);
    var store = useStore(_objectSpread$u(_objectSpread$u({}, props), {}, {
      value: value,
      onChange: onChange,
      expanded: expanded,
      onExpand: onExpand,
      onActive: onActive,
      actived: actived
    }), function () {
      var nodes = store.getNodes();
      var newVisibleNodes = nodes.filter(function (node) {
        return node.visible;
      });
      setVisibleNodes(newVisibleNodes);
    });
    var setExpanded = usePersistFn(function (node, isExpanded, e) {
      var expanded2 = node.setExpanded(isExpanded);
      var treeNodeModel = node === null || node === void 0 ? void 0 : node.getModel();
      e && (onExpand === null || onExpand === void 0 ? void 0 : onExpand(expanded2, {
        node: treeNodeModel,
        e: e
      }));
      return expanded2;
    });
    var setActived = usePersistFn(function (node, isActived) {
      var actived2 = node.setActived(isActived);
      var treeNodeModel = node === null || node === void 0 ? void 0 : node.getModel();
      onActive === null || onActive === void 0 ? void 0 : onActive(actived2, {
        node: treeNodeModel
      });
      return actived2;
    });
    var setChecked = usePersistFn(function (node, isChecked) {
      var checked = node.setChecked(isChecked);
      var treeNodeModel = node === null || node === void 0 ? void 0 : node.getModel();
      onChange === null || onChange === void 0 ? void 0 : onChange(checked, {
        node: treeNodeModel
      });
      return checked;
    });

    var handleItemClick = function handleItemClick(node, options) {
      if (!node || disabled || node.disabled) {
        return;
      }

      var expand = options.expand,
          active = options.active,
          event = options.event;

      if (expand) {
        setExpanded(node, !node.isExpanded(), event);
      }

      if (active) {
        setActived(node, !node.isActived());
      }

      var treeNodeModel = node === null || node === void 0 ? void 0 : node.getModel();
      onClick === null || onClick === void 0 ? void 0 : onClick({
        node: treeNodeModel,
        e: event
      });
    };

    var handleChange = function handleChange(node) {
      if (!node || disabled || node.disabled) {
        return;
      }

      setChecked(node, !node.isChecked());
    };

    React.useImperativeHandle(ref, function () {
      return {
        store: store,
        appendTo: function appendTo(value2, newData) {
          var list = [];

          if (Array.isArray(newData)) {
            list = newData;
          } else {
            list = [newData];
          }

          list.forEach(function (item) {
            store.appendNodes(value2, item);
          });
        },
        getIndex: function getIndex(value2) {
          return store.getNodeIndex(value2);
        },
        getItem: function getItem(value2) {
          var node = store.getNode(value2);
          return node === null || node === void 0 ? void 0 : node.getModel();
        },
        getItems: function getItems(value2) {
          var nodes = store.getNodes(value2);
          return nodes.map(function (node) {
            return node.getModel();
          });
        },
        getParent: function getParent(value2) {
          var node = store.getParent(value2);
          return node === null || node === void 0 ? void 0 : node.getModel();
        },
        getParents: function getParents(value2) {
          var nodes = store.getParents(value2);
          return nodes.map(function (node) {
            return node.getModel();
          });
        },
        getPath: function getPath(value2) {
          var node = store.getNode(value2);
          var pathNodes = [];

          if (node) {
            pathNodes = node.getPath().map(function (node2) {
              return node2.getModel();
            });
          }

          return pathNodes;
        },
        insertAfter: function insertAfter(value2, newData) {
          return store.insertAfter(value2, newData);
        },
        insertBefore: function insertBefore(value2, newData) {
          return store.insertBefore(value2, newData);
        },
        remove: function remove(value2) {
          return store.remove(value2);
        },
        setItem: function setItem(value2, options) {
          var node = this.store.getNode(value2);
          var spec = options;

          if (node && spec) {
            if ("expanded" in options) {
              setExpanded(node, spec.expanded);
              delete spec.expanded;
            }

            if ("actived" in options) {
              setActived(node, spec.actived);
              delete spec.actived;
            }

            if ("checked" in options) {
              setChecked(node, spec.checked);
              delete spec.checked;
            }

            node.set(spec);
          }
        }
      };
    }, [store, setExpanded, setActived, setChecked]);
    var nodeList = React.useMemo(function () {
      return visibleNodes.map(function () {
        return /*#__PURE__*/React__default["default"].createRef();
      });
    }, [visibleNodes]);

    var renderEmpty = function renderEmpty() {
      var emptyView = empty || emptyText;

      if (empty instanceof Function) {
        emptyView = empty();
      }

      return emptyView;
    };

    var renderItems = function renderItems() {
      if (visibleNodes.length <= 0) {
        return renderEmpty();
      }

      return /* @__PURE__ */React__default["default"].createElement(TransitionGroup$1, {
        name: transitionNames.treeNode,
        className: treeClassNames.treeList
      }, visibleNodes.map(function (node, index) {
        return /* @__PURE__ */React__default["default"].createElement(CSSTransition$1, {
          nodeRef: nodeList[index],
          key: node.value,
          timeout: transitionDuration,
          classNames: transitionClassNames
        }, /* @__PURE__ */React__default["default"].createElement(TreeItem, {
          ref: nodeList[index],
          node: node,
          empty: empty,
          icon: icon,
          label: label,
          line: line,
          transition: transition,
          expandOnClickNode: expandOnClickNode,
          activable: activable,
          operations: operations,
          checkProps: checkProps,
          disableCheck: disableCheck,
          onClick: handleItemClick,
          onChange: handleChange
        }));
      }));
    };

    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(treeClassNames.tree, (_classNames = {}, _defineProperty$2(_classNames, treeClassNames.disabled, disabled), _defineProperty$2(_classNames, treeClassNames.treeHoverable, hover), _defineProperty$2(_classNames, treeClassNames.treeCheckable, checkable), _defineProperty$2(_classNames, treeClassNames.treeFx, transition), _defineProperty$2(_classNames, treeClassNames.treeBlockNode, expandOnClickNode), _classNames))
    }, renderItems());
  });
  Tree$1.displayName = "Tree";
  Tree$1.defaultProps = {
    data: [],
    empty: "",
    expandLevel: 0,
    icon: true,
    line: false,
    transition: true,
    lazy: true,
    valueMode: "onlyLeaf"
  };

  var Tree = Tree$1;

  var baseKeys = _baseKeys,
      getTag$1 = _getTag,
      isArguments = isArguments_1,
      isArray$2 = isArray_1,
      isArrayLike$1 = isArrayLike_1,
      isBuffer$1 = isBuffer$4.exports,
      isPrototype = _isPrototype,
      isTypedArray$1 = isTypedArray_1;
  /** `Object#toString` result references. */

  var mapTag$1 = '[object Map]',
      setTag$1 = '[object Set]';
  /** Used for built-in method references. */

  var objectProto$2 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$2 = objectProto$2.hasOwnProperty;
  /**
   * Checks if `value` is an empty object, collection, map, or set.
   *
   * Objects are considered empty if they have no own enumerable string keyed
   * properties.
   *
   * Array-like values such as `arguments` objects, arrays, buffers, strings, or
   * jQuery-like collections are considered empty if they have a `length` of `0`.
   * Similarly, maps and sets are considered empty if they have a `size` of `0`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is empty, else `false`.
   * @example
   *
   * _.isEmpty(null);
   * // => true
   *
   * _.isEmpty(true);
   * // => true
   *
   * _.isEmpty(1);
   * // => true
   *
   * _.isEmpty([1, 2, 3]);
   * // => false
   *
   * _.isEmpty({ 'a': 1 });
   * // => false
   */

  function isEmpty(value) {
    if (value == null) {
      return true;
    }

    if (isArrayLike$1(value) && (isArray$2(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer$1(value) || isTypedArray$1(value) || isArguments(value))) {
      return !value.length;
    }

    var tag = getTag$1(value);

    if (tag == mapTag$1 || tag == setTag$1) {
      return !value.size;
    }

    if (isPrototype(value)) {
      return !baseKeys(value).length;
    }

    for (var key in value) {
      if (hasOwnProperty$2.call(value, key)) {
        return false;
      }
    }

    return true;
  }

  var isEmpty_1 = isEmpty;

  var baseGetTag$1 = _baseGetTag,
      isObjectLike$2 = isObjectLike_1;
  /** `Object#toString` result references. */

  var boolTag$1 = '[object Boolean]';
  /**
   * Checks if `value` is classified as a boolean primitive or object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
   * @example
   *
   * _.isBoolean(false);
   * // => true
   *
   * _.isBoolean(null);
   * // => false
   */

  function isBoolean(value) {
    return value === true || value === false || isObjectLike$2(value) && baseGetTag$1(value) == boolTag$1;
  }

  var isBoolean_1 = isBoolean;

  function TreeSelectTags$1(props) {
    var tagList = props.tagList,
        minCollapsedNum = props.minCollapsedNum,
        collapsedItems = props.collapsedItems,
        disabled = props.disabled,
        size = props.size,
        value = props.value,
        data = props.data,
        onRemove = props.onRemove,
        onChange = props.onChange;
    if (!tagList.length) return null;

    function removeTag(index, data2, e) {
      e.stopPropagation();
      if (disabled || !Array.isArray(value)) return;
      onRemove === null || onRemove === void 0 ? void 0 : onRemove({
        value: value[index],
        data: data2,
        e: e
      });
      onChange === null || onChange === void 0 ? void 0 : onChange(value.filter(function (_, i) {
        return i !== index;
      }), null);
    }

    var tags = tagList.map(function (label, index) {
      return /* @__PURE__ */React__default["default"].createElement(Tag, {
        key: index,
        size: size,
        closable: !disabled,
        disabled: disabled,
        onClose: function onClose(_ref) {
          var e = _ref.e;
          return removeTag(index, data, e);
        }
      }, label);
    });

    if (minCollapsedNum) {
      tags = tags.slice(0, minCollapsedNum);
      var nums = tagList.length - minCollapsedNum;
      nums && tags.push( /* @__PURE__ */React__default["default"].createElement(Tag, {
        key: "collapsed-".concat(nums),
        size: size,
        disabled: disabled
      }, collapsedItems || "+".concat(nums)));
    }

    return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, tags);
  }

  var TreeSelectTags = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var selectedSingle = props.selectedSingle,
        visible = props.visible,
        filterText = props.filterText,
        setFilterText = props.setFilterText,
        setFocusing = props.setFocusing,
        placeholder = props.placeholder,
        filter = props.filter,
        filterable = props.filterable,
        multiple = props.multiple,
        disabled = props.disabled,
        size = props.size,
        value = props.value,
        onSearch = props.onSearch,
        onBlur = props.onBlur,
        onFocus = props.onFocus;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var showFilter = React.useMemo(function () {
      if (disabled) {
        return false;
      }

      if (!multiple && selectedSingle && (filterable || isFunction_1(filter))) {
        return visible;
      }

      return filterable || isFunction_1(filter);
    }, [disabled, multiple, selectedSingle, filterable, visible, filter]);
    var showPlaceholder = React.useMemo(function () {
      if (!showFilter && (isString_1(value) && value === "" && !selectedSingle || Array.isArray(value) && isEmpty_1(value) || value === null)) {
        return true;
      }

      return false;
    }, [showFilter, value, selectedSingle]);
    var filterPlaceholder = React.useMemo(function () {
      if (multiple && Array.isArray(value) && !isEmpty_1(value)) {
        return "";
      }

      if (!multiple && selectedSingle) {
        return selectedSingle;
      }

      return placeholder;
    }, [multiple, value, selectedSingle, placeholder]);

    function handleChange(value2) {
      setFilterText(value2);
      onSearch === null || onSearch === void 0 ? void 0 : onSearch(value2);
    }

    function handleBlur(value2, context) {
      setFocusing(false);
      onBlur === null || onBlur === void 0 ? void 0 : onBlur({
        value: value2,
        e: context.e
      });
    }

    function handleFocus(value2, context) {
      setFocusing(true);
      onFocus === null || onFocus === void 0 ? void 0 : onFocus({
        value: value2,
        e: context.e
      });
    }

    var searchInput = showFilter && /* @__PURE__ */React__default["default"].createElement(Input, {
      ref: ref,
      value: filterText,
      className: "".concat(classPrefix, "-select__input"),
      size: size,
      disabled: disabled,
      placeholder: filterPlaceholder,
      onChange: handleChange,
      onBlur: handleBlur,
      onFocus: handleFocus
    });
    return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, showPlaceholder && /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-select__placeholder")
    }, placeholder), !multiple && !showPlaceholder && !showFilter && /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-select__single")
    }, selectedSingle), searchInput);
  });

  function TreeSelectSuffix(props) {
    var visible = props.visible,
        isHover = props.isHover,
        handleClear = props.handleClear,
        showLoading = props.showLoading,
        clearable = props.clearable,
        multiple = props.multiple,
        value = props.value,
        disabled = props.disabled,
        size = props.size;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var showArrow = React.useMemo(function () {
      return !clearable || !isHover || disabled || !multiple && !value && value !== 0 || multiple && Array.isArray(value) && isEmpty_1(value);
    }, [clearable, isHover, disabled, multiple, value]);
    var showClose = React.useMemo(function () {
      return clearable && isHover && !disabled && (!multiple && (!!value || value === 0) || multiple && !isEmpty_1(value));
    }, [clearable, isHover, disabled, multiple, value]);
    return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, showArrow && !showLoading && /* @__PURE__ */React__default["default"].createElement(FakeArrow, {
      overlayClassName: "".concat(classPrefix, "-select__right-icon"),
      isActive: visible,
      disabled: disabled
    }), showClose && !showLoading && /* @__PURE__ */React__default["default"].createElement(CloseCircleFilledIcon, {
      className: "".concat(classPrefix, "-select__right-icon ").concat(classPrefix, "-select__right-icon-clear"),
      size: size,
      onClick: handleClear
    }), showLoading && /* @__PURE__ */React__default["default"].createElement(Loading, {
      loading: true,
      className: classNames$1("".concat(classPrefix, "-select__right-icon"), "".concat(classPrefix, "-select__active-icon")),
      size: "small"
    }));
  }

  var defaultPopupProps = {
    trigger: "click",
    placement: "bottom-left",
    overlayClassName: "",
    overlayStyle: function overlayStyle(trigger) {
      return {
        width: "".concat(trigger.offsetWidth, "px")
      };
    }
  };
  function useTreeSelectConfig(props) {
    var _useConfig = useConfig$1(),
        prefix = _useConfig.classPrefix;

    var CLASSNAMES = useCommonClassName();
    var disabled = props.disabled,
        prefixIcon = props.prefixIcon,
        size = props.size,
        visible = props.visible,
        popupProps = props.popupProps;
    return React.useMemo(function () {
      var _classNames;

      var selectClassName = classNames$1("".concat(prefix, "-select"), (_classNames = {}, _defineProperty$2(_classNames, CLASSNAMES.STATUS.disabled, disabled), _defineProperty$2(_classNames, CLASSNAMES.STATUS.active, visible), _defineProperty$2(_classNames, CLASSNAMES.SIZE[size], size), _defineProperty$2(_classNames, "".concat(prefix, "-has-prefix"), prefixIcon), _classNames));
      var popupObject = Object.assign(defaultPopupProps, popupProps);
      var popupClassName = classNames$1(popupObject.overlayClassName, "".concat(prefix, "-select__dropdown"), "narrow-scrollbar");
      return {
        selectClassName: selectClassName,
        popupClassName: popupClassName,
        popupObject: popupObject
      };
    }, [prefix, size, prefixIcon, disabled, visible, popupProps]);
  }

  function ownKeys$t(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$t(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$t(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$t(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TreeSelect$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var treeSelectClassName = props.className,
        treeSelectStyle = props.style,
        disabled = props.disabled,
        multiple = props.multiple,
        prefixIcon = props.prefixIcon,
        valueType = props.valueType,
        loading = props.loading,
        max = props.max,
        treeProps = props.treeProps,
        empty = props.empty,
        data = props.data,
        loadingText = props.loadingText,
        filter = props.filter,
        filterable = props.filterable,
        onClear = props.onClear;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var popupRef = React.useRef(null);
    var treeRef = React.useRef(null);
    var inputRef = React.useRef(null);

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        visible = _useState2[0],
        setVisible = _useState2[1];

    var _useState3 = React.useState(false),
        _useState4 = _slicedToArray(_useState3, 2),
        isHover = _useState4[0],
        setIsHover = _useState4[1];

    var _useState5 = React.useState(false),
        _useState6 = _slicedToArray(_useState5, 2),
        focusing = _useState6[0],
        setFocusing = _useState6[1];

    var _useState7 = React.useState(""),
        _useState8 = _slicedToArray(_useState7, 2),
        filterText = _useState8[0],
        setFilterText = _useState8[1];

    var _useState9 = React.useState([]),
        _useState10 = _slicedToArray(_useState9, 2),
        actived = _useState10[0],
        setActived = _useState10[1];

    var _useState11 = React.useState([]),
        _useState12 = _slicedToArray(_useState11, 2),
        expanded = _useState12[0],
        setExpanded = _useState12[1];

    var _useState13 = React.useState(null),
        _useState14 = _slicedToArray(_useState13, 2),
        nodeInfo = _useState14[0],
        setNodeInfo = _useState14[1];

    var _useDefault = useDefault(props.value, props.defaultValue, props.onChange),
        _useDefault2 = _slicedToArray(_useDefault, 2),
        value = _useDefault2[0],
        onChange = _useDefault2[1];

    var _useTreeSelectConfig = useTreeSelectConfig(_objectSpread$t({
      visible: visible
    }, props)),
        selectClassName = _useTreeSelectConfig.selectClassName,
        popupObject = _useTreeSelectConfig.popupObject,
        popupClassName = _useTreeSelectConfig.popupClassName;

    var defaultStore = new TreeStore(_objectSpread$t({}, treeProps));
    defaultStore.append(data);

    var defaultGetTreeItem = function defaultGetTreeItem(value2) {
      var node = defaultStore.getNode(value2);
      return node === null || node === void 0 ? void 0 : node.getModel();
    };

    var selectedMultiple = React.useMemo(function () {
      if (multiple && isArray_1(value) && !isEmpty_1(value)) {
        return value;
      }

      return [];
    }, [multiple, value]);
    var selectedSingle = React.useMemo(function () {
      if (multiple) return "";

      if (typeof value === "undefined") {
        return nodeInfo ? nodeInfo.label : "";
      }

      return nodeInfo ? nodeInfo.label : "".concat(value);
    }, [multiple, value, nodeInfo]);
    var checked = React.useMemo(function () {
      if (multiple) {
        if (valueType === "object") {
          return isArray_1(value) ? value.map(function (item) {
            return item.value;
          }) : [];
        }

        return isArray_1(value) ? value : [];
      }

      return [];
    }, [multiple, valueType, value]);
    var showLoading = React.useMemo(function () {
      return loading && !disabled;
    }, [loading, disabled]);
    var showFilter = React.useMemo(function () {
      if (disabled) {
        return false;
      }

      if (!multiple && selectedSingle && (filterable || isFunction_1(filter))) {
        return visible;
      }

      return filterable || isFunction_1(filter);
    }, [disabled, multiple, selectedSingle, filterable, visible, filter]);
    var multiLimitDisabled = React.useMemo(function () {
      if (multiple && max && isArray_1(value) && max <= value.length) {
        return true;
      }

      return false;
    }, [multiple, max, value]);
    var realLabel = React.useMemo(function () {
      if (!isEmpty_1(treeProps) && !isEmpty_1(treeProps.keys)) {
        return treeProps.keys.label || "label";
      }

      return "label";
    }, [treeProps]);
    var realValue = React.useMemo(function () {
      if (!isEmpty_1(treeProps) && !isEmpty_1(treeProps.keys)) {
        return treeProps.keys.value || "value";
      }

      return "value";
    }, [treeProps]);
    var tagList = React.useMemo(function () {
      if (nodeInfo && isArray_1(nodeInfo)) {
        return nodeInfo.map(function (node) {
          return node.label;
        });
      }

      return selectedMultiple;
    }, [nodeInfo, selectedMultiple]);
    var filterByText = React.useCallback(function (node) {
      if (isFunction_1(filter)) {
        var filterValue = filter(filterText, node);

        if (isBoolean_1(filterValue)) {
          return filterValue;
        }
      }

      return node.data[realLabel].indexOf(filterText) >= 0;
    }, [filterText, realLabel, filter]);
    React.useEffect(function () {
      if (valueType === "object") {
        setActived(isArray_1(value) ? value.map(function (item) {
          return item.value;
        }) : [value.value]);
      } else {
        setActived(isArray_1(value) ? value : [value]);
      }

      changeNodeInfo(value);
    }, [value, valueType]);

    function handleClear(e) {
      e.stopPropagation();
      var defaultValue = multiple ? [] : "";
      onChange === null || onChange === void 0 ? void 0 : onChange(defaultValue, null);
      setActived([]);
      setFilterText("");
      setNodeInfo(null);
      onClear === null || onClear === void 0 ? void 0 : onClear({
        e: e
      });
    }

    function changeNodeInfo(value2) {
      if (!multiple && value2) {
        var _treeRef$current;

        var nodeValue = valueType === "object" ? value2.value : value2;
        var node = ((_treeRef$current = treeRef.current) === null || _treeRef$current === void 0 ? void 0 : _treeRef$current.getItem(nodeValue)) || defaultGetTreeItem(nodeValue);
        node ? setNodeInfo({
          label: node.data[realLabel],
          value: node.data[realValue]
        }) : setNodeInfo(null);
      } else if (multiple && isArray_1(value2)) {
        setNodeInfo(value2.map(function (value3) {
          var _treeRef$current2;

          var nodeValue = valueType === "object" ? value3.value : value3;
          var node = ((_treeRef$current2 = treeRef.current) === null || _treeRef$current2 === void 0 ? void 0 : _treeRef$current2.getItem(nodeValue)) || defaultGetTreeItem(nodeValue);
          return node ? {
            label: node.data[realLabel],
            value: node.data[realValue]
          } : {};
        }));
      } else {
        setNodeInfo(null);
      }
    }

    function treeNodeChange(value2, context) {
      var current = value2;

      if (valueType === "object") {
        current = value2.map(function (nodeValue) {
          var node = treeRef.current.getItem(nodeValue);
          return {
            label: node.data[realLabel],
            value: node.data[realValue]
          };
        });
      }

      onChange === null || onChange === void 0 ? void 0 : onChange(current, context);
    }

    function treeNodeActive(value2, context) {
      if (multiple) return;
      var nodeValue = isEmpty_1(value2) ? "" : value2[0];
      var node = treeRef.current.getItem(nodeValue);
      var current = nodeValue;

      if (valueType === "object" && node) {
        current = {
          label: node.data[realLabel],
          value: node.data[realValue]
        };
      }

      onChange === null || onChange === void 0 ? void 0 : onChange(current, context);
      setFilterText("");
      setVisible(false);
    }

    function treeNodeExpand(value2) {
      setExpanded(value2);
    }

    function popupVisibleChange(visible2) {
      if (focusing && !visible2) {
        setVisible(true);
        return;
      }

      setVisible(visible2);

      if (showFilter && visible2) {
        var _inputRef$current;

        (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();
      }
    }

    var _useLocaleReceiver = useLocaleReceiver("treeSelect"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
        local = _useLocaleReceiver2[0],
        t = _useLocaleReceiver2[1];

    var emptyText = t(local.empty);
    var loadingTextLabel = t(local.loadingText);
    var treeItem = !loading && /* @__PURE__ */React__default["default"].createElement(Tree, _objectSpread$t({
      ref: treeRef,
      value: checked,
      hover: true,
      expandAll: true,
      expandOnClickNode: true,
      data: data,
      activable: !multiple,
      checkable: multiple,
      disabled: disabled || multiLimitDisabled,
      empty: empty || /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-select__empty")
      }, emptyText),
      filter: filterByText,
      actived: actived,
      expanded: expanded,
      activeMultiple: multiple,
      onChange: treeNodeChange,
      onActive: treeNodeActive,
      onExpand: treeNodeExpand
    }, treeProps));
    var loadingTip = showLoading && /* @__PURE__ */React__default["default"].createElement("p", {
      className: "".concat(classPrefix, "-select__loading-tips")
    }, loadingText || /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-select__empty")
    }, loadingTextLabel));
    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: ref,
      className: treeSelectClassName,
      style: treeSelectStyle
    }, /* @__PURE__ */React__default["default"].createElement(Popup, {
      ref: popupRef,
      className: "".concat(classPrefix, "-select__popup-reference"),
      visible: visible,
      disabled: disabled,
      placement: popupObject.placement,
      trigger: popupObject.trigger,
      overlayStyle: popupObject.overlayStyle,
      overlayClassName: popupClassName,
      onVisibleChange: popupVisibleChange,
      expandAnimation: true,
      destroyOnClose: true,
      content: /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, loadingTip, treeItem)
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      style: {
        minHeight: 30
      },
      className: selectClassName,
      onMouseEnter: function onMouseEnter() {
        return setIsHover(true);
      },
      onMouseLeave: function onMouseLeave() {
        return setIsHover(false);
      }
    }, prefixIcon && /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-select__left-icon")
    }, prefixIcon), /* @__PURE__ */React__default["default"].createElement(TreeSelectTags$1, _objectSpread$t({
      tagList: tagList
    }, props)), /* @__PURE__ */React__default["default"].createElement(TreeSelectTags, _objectSpread$t({
      ref: inputRef,
      visible: visible,
      filterText: filterText,
      selectedSingle: selectedSingle,
      setFocusing: setFocusing,
      setFilterText: setFilterText
    }, props)), /* @__PURE__ */React__default["default"].createElement(TreeSelectSuffix, _objectSpread$t({
      visible: visible,
      isHover: isHover,
      showLoading: showLoading,
      handleClear: handleClear
    }, props)))));
  });
  TreeSelect$1.displayName = "TreeSelect";
  TreeSelect$1.defaultProps = {
    clearable: false,
    data: [],
    disabled: false,
    empty: "",
    filterable: false,
    loading: false,
    loadingText: "",
    max: 0,
    multiple: false,
    placeholder: "\u8BF7\u8F93\u5165",
    size: "medium",
    valueType: "value",
    minCollapsedNum: 0
  };

  var TreeSelect = TreeSelect$1;

  var _excluded$8 = ["layout", "dashed", "align", "className", "style", "children"];

  function ownKeys$s(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$s(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$s(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$s(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var Divider$1 = function Divider(props) {
    var _classNames;

    var _props$layout = props.layout,
        layout = _props$layout === void 0 ? "horizontal" : _props$layout,
        dashed = props.dashed,
        _props$align = props.align,
        align = _props$align === void 0 ? "center" : _props$align,
        className = props.className,
        style = props.style,
        children = props.children,
        otherDividerProps = _objectWithoutProperties$1(props, _excluded$8);

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var dividerClassNames = classNames$1("".concat(classPrefix, "-divider"), className, (_classNames = {}, _defineProperty$2(_classNames, "".concat(classPrefix, "-divider--horizontal"), layout === "horizontal"), _defineProperty$2(_classNames, "".concat(classPrefix, "-divider--vertical"), layout === "vertical"), _defineProperty$2(_classNames, "".concat(classPrefix, "-divider--dashed"), !!dashed), _defineProperty$2(_classNames, "".concat(classPrefix, "-divider--with-text"), !!children), _defineProperty$2(_classNames, "".concat(classPrefix, "-divider--with-text-").concat(align), !!children), _classNames));
    return /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$s({
      className: dividerClassNames,
      style: style
    }, otherDividerProps), children ? /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-divider__inner-text")
    }, children) : null);
  };

  Divider$1.displayName = "Divider";

  var Divider = Divider$1;

  var _excluded$7 = ["className", "value", "defaultValue", "disabled", "loading", "size", "label", "customValue", "onChange"];

  function ownKeys$r(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$r(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$r(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$r(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var Switch$1 = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
    var _classNames;

    var className = _ref.className,
        value = _ref.value,
        defaultValue = _ref.defaultValue,
        disabled = _ref.disabled,
        loading = _ref.loading,
        size = _ref.size,
        label = _ref.label,
        customValue = _ref.customValue,
        onChange = _ref.onChange,
        restProps = _objectWithoutProperties$1(_ref, _excluded$7);

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _ref2 = customValue || [],
        _ref3 = _slicedToArray(_ref2, 2),
        _ref3$ = _ref3[0],
        activeValue = _ref3$ === void 0 ? true : _ref3$,
        _ref3$2 = _ref3[1],
        inactiveValue = _ref3$2 === void 0 ? false : _ref3$2;

    var isControlled = typeof value !== "undefined";
    var initChecked = defaultValue === activeValue || value === activeValue;

    var _useState = React.useState(initChecked),
        _useState2 = _slicedToArray(_useState, 2),
        innerChecked = _useState2[0],
        setInnerChecked = _useState2[1];

    function renderContent(checked) {
      if (typeof label === "function") return label({
        value: value
      });
      if (typeof label === "string") return label;

      if (Array.isArray(label)) {
        var _label = _slicedToArray(label, 2),
            _label$ = _label[0],
            activeContent = _label$ === void 0 ? "" : _label$,
            _label$2 = _label[1],
            inactiveContent = _label$2 === void 0 ? "" : _label$2;

        var content = checked ? activeContent : inactiveContent;
        if (typeof content === "function") return content();
        return content;
      }

      return null;
    }

    function onInternalClick() {
      if (disabled) return;
      !isControlled && setInnerChecked(!innerChecked);
      var changedValue = !innerChecked ? activeValue : inactiveValue;
      onChange === null || onChange === void 0 ? void 0 : onChange(changedValue);
    }

    React.useEffect(function () {
      if (Array.isArray(customValue) && !customValue.includes(value)) {
        throw "value is not in customValue: ".concat(JSON.stringify(customValue));
      }

      isControlled && setInnerChecked(value === activeValue);
    }, [value, customValue, activeValue, isControlled]);

    var _useCommonClassName = useCommonClassName(),
        SIZE = _useCommonClassName.SIZE,
        STATUS = _useCommonClassName.STATUS;

    var switchClassName = classNames$1("".concat(classPrefix, "-switch"), className, (_classNames = {}, _defineProperty$2(_classNames, STATUS.checked, innerChecked), _defineProperty$2(_classNames, STATUS.disabled, disabled), _defineProperty$2(_classNames, STATUS.loading, loading), _classNames), SIZE[size]);
    return /* @__PURE__ */React__default["default"].createElement("button", _objectSpread$r(_objectSpread$r({}, restProps), {}, {
      type: "button",
      role: "switch",
      disabled: disabled || loading,
      className: switchClassName,
      ref: ref,
      onClick: onInternalClick
    }), /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-switch__handle")
    }, loading && /* @__PURE__ */React__default["default"].createElement(Loading, {
      loading: true,
      size: "small"
    })), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-switch__content")
    }, renderContent(innerChecked)));
  });
  Switch$1.displayName = "Switch";

  var Switch = Switch$1;

  function ownKeys$q(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$q(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$q(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$q(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var Affix = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var children = props.children,
        _props$container = props.container,
        container = _props$container === void 0 ? function () {
      return window;
    } : _props$container,
        offsetBottom = props.offsetBottom,
        offsetTop = props.offsetTop,
        onFixedChange = props.onFixedChange;

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        affixed = _useState2[0],
        setAffixed = _useState2[1];

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var affixRef = React.useRef();
    var affixWrapRef = React.useRef();
    var stateRef = React.useRef({
      ticking: false,
      oldWidth: 0,
      oldHeight: 0,
      containerHeight: 0
    });
    var handleScroll = React.useCallback(function () {
      var _stateRef$current = stateRef.current,
          ticking = _stateRef$current.ticking,
          scrollContainer = _stateRef$current.scrollContainer,
          containerHeight = _stateRef$current.containerHeight,
          oldWidth2 = _stateRef$current.oldWidth;

      if (!ticking) {
        window.requestAnimationFrame(function () {
          var affixEl = affixRef.current;

          var _affixWrapRef$current = affixWrapRef.current.getBoundingClientRect(),
              top = _affixWrapRef$current.top;

          var containerTop = 0;

          if (scrollContainer instanceof HTMLElement) {
            containerTop = scrollContainer.getBoundingClientRect().top;
          }

          var fixedTop;
          var calcTop = top - containerTop;
          var calcBottom = containerTop + containerHeight - offsetBottom;

          if (offsetTop !== void 0 && calcTop <= offsetTop) {
            fixedTop = containerTop + offsetTop;
          } else if (offsetBottom !== void 0 && top >= calcBottom) {
            fixedTop = calcBottom;
          } else {
            fixedTop = false;
          }

          if (fixedTop !== false) {
            affixEl.className = "".concat(classPrefix, "-affix");
            affixEl.style.top = "".concat(fixedTop, "px");
            affixEl.style.width = "".concat(oldWidth2, "px");
          } else {
            affixEl.removeAttribute("class");
            affixEl.removeAttribute("style");
          }

          setAffixed(!!fixedTop);
          if (isFunction_1(onFixedChange)) onFixedChange(!!fixedTop, {
            top: fixedTop
          });
          stateRef.current.ticking = false;
        });
      }

      stateRef.current.ticking = true;
    }, [classPrefix, offsetBottom, offsetTop, onFixedChange]);
    var calcInitValue = React.useCallback(function () {
      var scrollContainer = getScrollContainer(container);
      if (!scrollContainer) return;
      var containerHeight = 0;

      if (scrollContainer instanceof Window) {
        containerHeight = scrollContainer.innerHeight;
      } else {
        containerHeight = scrollContainer.clientHeight;
      }

      var _ref = affixRef.current || {},
          clientWidth = _ref.clientWidth,
          clientHeight = _ref.clientHeight;

      stateRef.current = _objectSpread$q(_objectSpread$q({}, stateRef.current), {}, {
        scrollContainer: scrollContainer,
        oldWidth: clientWidth,
        oldHeight: clientHeight,
        containerHeight: containerHeight - clientHeight
      });
      handleScroll();
    }, [container, handleScroll]);
    React.useImperativeHandle(ref, function () {
      return {
        calcInitValue: calcInitValue,
        handleScroll: handleScroll
      };
    });
    React.useEffect(function () {
      calcInitValue();

      if (stateRef.current.scrollContainer) {
        stateRef.current.scrollContainer.addEventListener("scroll", handleScroll);
        window.addEventListener("resize", handleScroll);
        return function () {
          stateRef.current.scrollContainer.removeEventListener("scroll", handleScroll);
          window.removeEventListener("resize", handleScroll);
        };
      }
    }, [calcInitValue, handleScroll]);
    var _stateRef$current2 = stateRef.current,
        oldWidth = _stateRef$current2.oldWidth,
        oldHeight = _stateRef$current2.oldHeight;
    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: affixWrapRef
    }, affixed ? /* @__PURE__ */React__default["default"].createElement("div", {
      style: {
        width: "".concat(oldWidth, "px"),
        height: "".concat(oldHeight, "px")
      }
    }) : "", /* @__PURE__ */React__default["default"].createElement("div", {
      ref: affixRef
    }, children));
  });

  var AnchorContext = /*#__PURE__*/React.createContext({
    onClick: noop,
    activeItem: "",
    registerItem: noop,
    unregisterItem: noop
  });

  function getOffsetTop(target, container) {
    var _target$getBoundingCl = target.getBoundingClientRect(),
        top = _target$getBoundingCl.top;

    if (container === window) {
      return top - document.documentElement.clientTop;
    }

    return top - container.getBoundingClientRect().top;
  }

  function isWindow(obj) {
    return obj && obj === obj.window;
  }

  function getScroll(target, isLeft) {
    if (typeof window === "undefined" || !target) {
      return 0;
    }

    var method = isLeft ? "scrollLeft" : "scrollTop";
    var result = 0;

    if (isWindow(target)) {
      result = target[isLeft ? "pageXOffset" : "pageYOffset"];
    } else if (target instanceof Document) {
      result = target.documentElement[method];
    } else if (target) {
      result = target[method];
    }

    return result;
  }
  function scrollTo(target, opt) {
    var _opt$container = opt.container,
        container = _opt$container === void 0 ? window : _opt$container,
        _opt$duration = opt.duration,
        duration = _opt$duration === void 0 ? 450 : _opt$duration,
        _opt$easing = opt.easing,
        easing = _opt$easing === void 0 ? easeInOutCubic : _opt$easing;
    var scrollTop = getScroll(container);
    var startTime = Date.now();
    return new Promise(function (res) {
      var fnc = function fnc() {
        var timestamp = Date.now();
        var time = timestamp - startTime;
        var nextScrollTop = easing(Math.min(time, duration), scrollTop, target, duration);

        if (isWindow(container)) {
          container.scrollTo(window.pageXOffset, nextScrollTop);
        } else if (container instanceof HTMLDocument || container.constructor.name === "HTMLDocument") {
          container.documentElement.scrollTop = nextScrollTop;
        } else {
          container.scrollTop = nextScrollTop;
        }

        if (time < duration) {
          raf$1(fnc);
        } else {
          raf$1(res);
        }
      };

      raf$1(fnc);
    });
  }

  var AnchorItem = function AnchorItem(props) {
    var _useContext = React.useContext(AnchorContext),
        onClick = _useContext.onClick,
        activeItem = _useContext.activeItem,
        registerItem = _useContext.registerItem,
        unregisterItem = _useContext.unregisterItem;

    var href = props.href,
        title = props.title,
        target = props.target,
        _props$children = props.children,
        children = _props$children === void 0 ? [] : _props$children;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var titleAttr = typeof title === "string" ? title : null;

    var handleClick = function handleClick(e) {
      onClick({
        title: titleAttr,
        href: href
      }, e);
    };

    React.useEffect(function () {
      registerItem(href);
      return function () {
        return unregisterItem(href);
      };
    }, [href, registerItem, unregisterItem]);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-anchor__item"), _defineProperty$2({}, "".concat(classPrefix, "-is-active"), activeItem === href))
    }, /* @__PURE__ */React__default["default"].createElement("a", {
      href: href,
      className: classNames$1("".concat(classPrefix, "-anchor__item-link")),
      title: titleAttr,
      target: target,
      onClick: function onClick(e) {
        return handleClick(e);
      }
    }, title), children);
  };

  var clipboard = {exports: {}};

  /*!
   * clipboard.js v2.0.8
   * https://clipboardjs.com/
   *
   * Licensed MIT © Zeno Rocha
   */

  (function (module, exports) {
    (function webpackUniversalModuleDefinition(root, factory) {
      module.exports = factory();
    })(commonjsGlobal, function () {
      return (
        /******/
        function () {
          // webpackBootstrap

          /******/
          var __webpack_modules__ = {
            /***/
            134:
            /***/
            function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

              __webpack_require__.d(__webpack_exports__, {
                "default": function _default() {
                  return (
                    /* binding */
                    clipboard
                  );
                }
              }); // EXTERNAL MODULE: ./node_modules/tiny-emitter/index.js


              var tiny_emitter = __webpack_require__(279);

              var tiny_emitter_default = /*#__PURE__*/__webpack_require__.n(tiny_emitter); // EXTERNAL MODULE: ./node_modules/good-listener/src/listen.js


              var listen = __webpack_require__(370);

              var listen_default = /*#__PURE__*/__webpack_require__.n(listen); // EXTERNAL MODULE: ./node_modules/select/src/select.js


              var src_select = __webpack_require__(817);

              var select_default = /*#__PURE__*/__webpack_require__.n(src_select);

              function _typeof(obj) {
                "@babel/helpers - typeof";

                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof(obj) {
                    return typeof obj;
                  };
                } else {
                  _typeof = function _typeof(obj) {
                    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                  };
                }

                return _typeof(obj);
              }

              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }

              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps) _defineProperties(Constructor.prototype, protoProps);
                if (staticProps) _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              /**
               * Inner class which performs selection from either `text` or `target`
               * properties and then executes copy or cut operations.
               */


              var ClipboardAction = /*#__PURE__*/function () {
                /**
                 * @param {Object} options
                 */
                function ClipboardAction(options) {
                  _classCallCheck(this, ClipboardAction);

                  this.resolveOptions(options);
                  this.initSelection();
                }
                /**
                 * Defines base properties passed from constructor.
                 * @param {Object} options
                 */


                _createClass(ClipboardAction, [{
                  key: "resolveOptions",
                  value: function resolveOptions() {
                    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                    this.action = options.action;
                    this.container = options.container;
                    this.emitter = options.emitter;
                    this.target = options.target;
                    this.text = options.text;
                    this.trigger = options.trigger;
                    this.selectedText = '';
                  }
                  /**
                   * Decides which selection strategy is going to be applied based
                   * on the existence of `text` and `target` properties.
                   */

                }, {
                  key: "initSelection",
                  value: function initSelection() {
                    if (this.text) {
                      this.selectFake();
                    } else if (this.target) {
                      this.selectTarget();
                    }
                  }
                  /**
                   * Creates a fake textarea element, sets its value from `text` property,
                   */

                }, {
                  key: "createFakeElement",
                  value: function createFakeElement() {
                    var isRTL = document.documentElement.getAttribute('dir') === 'rtl';
                    this.fakeElem = document.createElement('textarea'); // Prevent zooming on iOS

                    this.fakeElem.style.fontSize = '12pt'; // Reset box model

                    this.fakeElem.style.border = '0';
                    this.fakeElem.style.padding = '0';
                    this.fakeElem.style.margin = '0'; // Move element out of screen horizontally

                    this.fakeElem.style.position = 'absolute';
                    this.fakeElem.style[isRTL ? 'right' : 'left'] = '-9999px'; // Move element to the same position vertically

                    var yPosition = window.pageYOffset || document.documentElement.scrollTop;
                    this.fakeElem.style.top = "".concat(yPosition, "px");
                    this.fakeElem.setAttribute('readonly', '');
                    this.fakeElem.value = this.text;
                    return this.fakeElem;
                  }
                  /**
                   * Get's the value of fakeElem,
                   * and makes a selection on it.
                   */

                }, {
                  key: "selectFake",
                  value: function selectFake() {
                    var _this = this;

                    var fakeElem = this.createFakeElement();

                    this.fakeHandlerCallback = function () {
                      return _this.removeFake();
                    };

                    this.fakeHandler = this.container.addEventListener('click', this.fakeHandlerCallback) || true;
                    this.container.appendChild(fakeElem);
                    this.selectedText = select_default()(fakeElem);
                    this.copyText();
                    this.removeFake();
                  }
                  /**
                   * Only removes the fake element after another click event, that way
                   * a user can hit `Ctrl+C` to copy because selection still exists.
                   */

                }, {
                  key: "removeFake",
                  value: function removeFake() {
                    if (this.fakeHandler) {
                      this.container.removeEventListener('click', this.fakeHandlerCallback);
                      this.fakeHandler = null;
                      this.fakeHandlerCallback = null;
                    }

                    if (this.fakeElem) {
                      this.container.removeChild(this.fakeElem);
                      this.fakeElem = null;
                    }
                  }
                  /**
                   * Selects the content from element passed on `target` property.
                   */

                }, {
                  key: "selectTarget",
                  value: function selectTarget() {
                    this.selectedText = select_default()(this.target);
                    this.copyText();
                  }
                  /**
                   * Executes the copy operation based on the current selection.
                   */

                }, {
                  key: "copyText",
                  value: function copyText() {
                    var succeeded;

                    try {
                      succeeded = document.execCommand(this.action);
                    } catch (err) {
                      succeeded = false;
                    }

                    this.handleResult(succeeded);
                  }
                  /**
                   * Fires an event based on the copy operation result.
                   * @param {Boolean} succeeded
                   */

                }, {
                  key: "handleResult",
                  value: function handleResult(succeeded) {
                    this.emitter.emit(succeeded ? 'success' : 'error', {
                      action: this.action,
                      text: this.selectedText,
                      trigger: this.trigger,
                      clearSelection: this.clearSelection.bind(this)
                    });
                  }
                  /**
                   * Moves focus away from `target` and back to the trigger, removes current selection.
                   */

                }, {
                  key: "clearSelection",
                  value: function clearSelection() {
                    if (this.trigger) {
                      this.trigger.focus();
                    }

                    document.activeElement.blur();
                    window.getSelection().removeAllRanges();
                  }
                  /**
                   * Sets the `action` to be performed which can be either 'copy' or 'cut'.
                   * @param {String} action
                   */

                }, {
                  key: "destroy",

                  /**
                   * Destroy lifecycle.
                   */
                  value: function destroy() {
                    this.removeFake();
                  }
                }, {
                  key: "action",
                  set: function set() {
                    var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'copy';
                    this._action = action;

                    if (this._action !== 'copy' && this._action !== 'cut') {
                      throw new Error('Invalid "action" value, use either "copy" or "cut"');
                    }
                  }
                  /**
                   * Gets the `action` property.
                   * @return {String}
                   */
                  ,
                  get: function get() {
                    return this._action;
                  }
                  /**
                   * Sets the `target` property using an element
                   * that will be have its content copied.
                   * @param {Element} target
                   */

                }, {
                  key: "target",
                  set: function set(target) {
                    if (target !== undefined) {
                      if (target && _typeof(target) === 'object' && target.nodeType === 1) {
                        if (this.action === 'copy' && target.hasAttribute('disabled')) {
                          throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');
                        }

                        if (this.action === 'cut' && (target.hasAttribute('readonly') || target.hasAttribute('disabled'))) {
                          throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');
                        }

                        this._target = target;
                      } else {
                        throw new Error('Invalid "target" value, use a valid Element');
                      }
                    }
                  }
                  /**
                   * Gets the `target` property.
                   * @return {String|HTMLElement}
                   */
                  ,
                  get: function get() {
                    return this._target;
                  }
                }]);

                return ClipboardAction;
              }();
              /* harmony default export */


              var clipboard_action = ClipboardAction;

              function clipboard_typeof(obj) {
                "@babel/helpers - typeof";

                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  clipboard_typeof = function _typeof(obj) {
                    return typeof obj;
                  };
                } else {
                  clipboard_typeof = function _typeof(obj) {
                    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                  };
                }

                return clipboard_typeof(obj);
              }

              function clipboard_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }

              function clipboard_defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              function clipboard_createClass(Constructor, protoProps, staticProps) {
                if (protoProps) clipboard_defineProperties(Constructor.prototype, protoProps);
                if (staticProps) clipboard_defineProperties(Constructor, staticProps);
                return Constructor;
              }

              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }

                subClass.prototype = Object.create(superClass && superClass.prototype, {
                  constructor: {
                    value: subClass,
                    writable: true,
                    configurable: true
                  }
                });
                if (superClass) _setPrototypeOf(subClass, superClass);
              }

              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                  o.__proto__ = p;
                  return o;
                };

                return _setPrototypeOf(o, p);
              }

              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();

                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived),
                      result;

                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;

                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }

                  return _possibleConstructorReturn(this, result);
                };
              }

              function _possibleConstructorReturn(self, call) {
                if (call && (clipboard_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                }

                return _assertThisInitialized(self);
              }

              function _assertThisInitialized(self) {
                if (self === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }

                return self;
              }

              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct) return false;
                if (Reflect.construct.sham) return false;
                if (typeof Proxy === "function") return true;

                try {
                  Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
                  return true;
                } catch (e) {
                  return false;
                }
              }

              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                  return o.__proto__ || Object.getPrototypeOf(o);
                };
                return _getPrototypeOf(o);
              }
              /**
               * Helper function to retrieve attribute value.
               * @param {String} suffix
               * @param {Element} element
               */


              function getAttributeValue(suffix, element) {
                var attribute = "data-clipboard-".concat(suffix);

                if (!element.hasAttribute(attribute)) {
                  return;
                }

                return element.getAttribute(attribute);
              }
              /**
               * Base class which takes one or more elements, adds event listeners to them,
               * and instantiates a new `ClipboardAction` on each click.
               */


              var Clipboard = /*#__PURE__*/function (_Emitter) {
                _inherits(Clipboard, _Emitter);

                var _super = _createSuper(Clipboard);
                /**
                 * @param {String|HTMLElement|HTMLCollection|NodeList} trigger
                 * @param {Object} options
                 */


                function Clipboard(trigger, options) {
                  var _this;

                  clipboard_classCallCheck(this, Clipboard);
                  _this = _super.call(this);

                  _this.resolveOptions(options);

                  _this.listenClick(trigger);

                  return _this;
                }
                /**
                 * Defines if attributes would be resolved using internal setter functions
                 * or custom functions that were passed in the constructor.
                 * @param {Object} options
                 */


                clipboard_createClass(Clipboard, [{
                  key: "resolveOptions",
                  value: function resolveOptions() {
                    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                    this.action = typeof options.action === 'function' ? options.action : this.defaultAction;
                    this.target = typeof options.target === 'function' ? options.target : this.defaultTarget;
                    this.text = typeof options.text === 'function' ? options.text : this.defaultText;
                    this.container = clipboard_typeof(options.container) === 'object' ? options.container : document.body;
                  }
                  /**
                   * Adds a click event listener to the passed trigger.
                   * @param {String|HTMLElement|HTMLCollection|NodeList} trigger
                   */

                }, {
                  key: "listenClick",
                  value: function listenClick(trigger) {
                    var _this2 = this;

                    this.listener = listen_default()(trigger, 'click', function (e) {
                      return _this2.onClick(e);
                    });
                  }
                  /**
                   * Defines a new `ClipboardAction` on each click event.
                   * @param {Event} e
                   */

                }, {
                  key: "onClick",
                  value: function onClick(e) {
                    var trigger = e.delegateTarget || e.currentTarget;

                    if (this.clipboardAction) {
                      this.clipboardAction = null;
                    }

                    this.clipboardAction = new clipboard_action({
                      action: this.action(trigger),
                      target: this.target(trigger),
                      text: this.text(trigger),
                      container: this.container,
                      trigger: trigger,
                      emitter: this
                    });
                  }
                  /**
                   * Default `action` lookup function.
                   * @param {Element} trigger
                   */

                }, {
                  key: "defaultAction",
                  value: function defaultAction(trigger) {
                    return getAttributeValue('action', trigger);
                  }
                  /**
                   * Default `target` lookup function.
                   * @param {Element} trigger
                   */

                }, {
                  key: "defaultTarget",
                  value: function defaultTarget(trigger) {
                    var selector = getAttributeValue('target', trigger);

                    if (selector) {
                      return document.querySelector(selector);
                    }
                  }
                  /**
                   * Returns the support of the given action, or all actions if no action is
                   * given.
                   * @param {String} [action]
                   */

                }, {
                  key: "defaultText",

                  /**
                   * Default `text` lookup function.
                   * @param {Element} trigger
                   */
                  value: function defaultText(trigger) {
                    return getAttributeValue('text', trigger);
                  }
                  /**
                   * Destroy lifecycle.
                   */

                }, {
                  key: "destroy",
                  value: function destroy() {
                    this.listener.destroy();

                    if (this.clipboardAction) {
                      this.clipboardAction.destroy();
                      this.clipboardAction = null;
                    }
                  }
                }], [{
                  key: "isSupported",
                  value: function isSupported() {
                    var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['copy', 'cut'];
                    var actions = typeof action === 'string' ? [action] : action;
                    var support = !!document.queryCommandSupported;
                    actions.forEach(function (action) {
                      support = support && !!document.queryCommandSupported(action);
                    });
                    return support;
                  }
                }]);
                return Clipboard;
              }(tiny_emitter_default());
              /* harmony default export */


              var clipboard = Clipboard;
              /***/
            },

            /***/
            828:
            /***/
            function _(module) {
              var DOCUMENT_NODE_TYPE = 9;
              /**
               * A polyfill for Element.matches()
               */

              if (typeof Element !== 'undefined' && !Element.prototype.matches) {
                var proto = Element.prototype;
                proto.matches = proto.matchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector || proto.oMatchesSelector || proto.webkitMatchesSelector;
              }
              /**
               * Finds the closest parent that matches a selector.
               *
               * @param {Element} element
               * @param {String} selector
               * @return {Function}
               */


              function closest(element, selector) {
                while (element && element.nodeType !== DOCUMENT_NODE_TYPE) {
                  if (typeof element.matches === 'function' && element.matches(selector)) {
                    return element;
                  }

                  element = element.parentNode;
                }
              }

              module.exports = closest;
              /***/
            },

            /***/
            438:
            /***/
            function _(module, __unused_webpack_exports, __webpack_require__) {
              var closest = __webpack_require__(828);
              /**
               * Delegates event to a selector.
               *
               * @param {Element} element
               * @param {String} selector
               * @param {String} type
               * @param {Function} callback
               * @param {Boolean} useCapture
               * @return {Object}
               */


              function _delegate(element, selector, type, callback, useCapture) {
                var listenerFn = listener.apply(this, arguments);
                element.addEventListener(type, listenerFn, useCapture);
                return {
                  destroy: function destroy() {
                    element.removeEventListener(type, listenerFn, useCapture);
                  }
                };
              }
              /**
               * Delegates event to a selector.
               *
               * @param {Element|String|Array} [elements]
               * @param {String} selector
               * @param {String} type
               * @param {Function} callback
               * @param {Boolean} useCapture
               * @return {Object}
               */


              function delegate(elements, selector, type, callback, useCapture) {
                // Handle the regular Element usage
                if (typeof elements.addEventListener === 'function') {
                  return _delegate.apply(null, arguments);
                } // Handle Element-less usage, it defaults to global delegation


                if (typeof type === 'function') {
                  // Use `document` as the first parameter, then apply arguments
                  // This is a short way to .unshift `arguments` without running into deoptimizations
                  return _delegate.bind(null, document).apply(null, arguments);
                } // Handle Selector-based usage


                if (typeof elements === 'string') {
                  elements = document.querySelectorAll(elements);
                } // Handle Array-like based usage


                return Array.prototype.map.call(elements, function (element) {
                  return _delegate(element, selector, type, callback, useCapture);
                });
              }
              /**
               * Finds closest match and invokes callback.
               *
               * @param {Element} element
               * @param {String} selector
               * @param {String} type
               * @param {Function} callback
               * @return {Function}
               */


              function listener(element, selector, type, callback) {
                return function (e) {
                  e.delegateTarget = closest(e.target, selector);

                  if (e.delegateTarget) {
                    callback.call(element, e);
                  }
                };
              }

              module.exports = delegate;
              /***/
            },

            /***/
            879:
            /***/
            function _(__unused_webpack_module, exports) {
              /**
               * Check if argument is a HTML element.
               *
               * @param {Object} value
               * @return {Boolean}
               */
              exports.node = function (value) {
                return value !== undefined && value instanceof HTMLElement && value.nodeType === 1;
              };
              /**
               * Check if argument is a list of HTML elements.
               *
               * @param {Object} value
               * @return {Boolean}
               */


              exports.nodeList = function (value) {
                var type = Object.prototype.toString.call(value);
                return value !== undefined && (type === '[object NodeList]' || type === '[object HTMLCollection]') && 'length' in value && (value.length === 0 || exports.node(value[0]));
              };
              /**
               * Check if argument is a string.
               *
               * @param {Object} value
               * @return {Boolean}
               */


              exports.string = function (value) {
                return typeof value === 'string' || value instanceof String;
              };
              /**
               * Check if argument is a function.
               *
               * @param {Object} value
               * @return {Boolean}
               */


              exports.fn = function (value) {
                var type = Object.prototype.toString.call(value);
                return type === '[object Function]';
              };
              /***/

            },

            /***/
            370:
            /***/
            function _(module, __unused_webpack_exports, __webpack_require__) {
              var is = __webpack_require__(879);

              var delegate = __webpack_require__(438);
              /**
               * Validates all params and calls the right
               * listener function based on its target type.
               *
               * @param {String|HTMLElement|HTMLCollection|NodeList} target
               * @param {String} type
               * @param {Function} callback
               * @return {Object}
               */


              function listen(target, type, callback) {
                if (!target && !type && !callback) {
                  throw new Error('Missing required arguments');
                }

                if (!is.string(type)) {
                  throw new TypeError('Second argument must be a String');
                }

                if (!is.fn(callback)) {
                  throw new TypeError('Third argument must be a Function');
                }

                if (is.node(target)) {
                  return listenNode(target, type, callback);
                } else if (is.nodeList(target)) {
                  return listenNodeList(target, type, callback);
                } else if (is.string(target)) {
                  return listenSelector(target, type, callback);
                } else {
                  throw new TypeError('First argument must be a String, HTMLElement, HTMLCollection, or NodeList');
                }
              }
              /**
               * Adds an event listener to a HTML element
               * and returns a remove listener function.
               *
               * @param {HTMLElement} node
               * @param {String} type
               * @param {Function} callback
               * @return {Object}
               */


              function listenNode(node, type, callback) {
                node.addEventListener(type, callback);
                return {
                  destroy: function destroy() {
                    node.removeEventListener(type, callback);
                  }
                };
              }
              /**
               * Add an event listener to a list of HTML elements
               * and returns a remove listener function.
               *
               * @param {NodeList|HTMLCollection} nodeList
               * @param {String} type
               * @param {Function} callback
               * @return {Object}
               */


              function listenNodeList(nodeList, type, callback) {
                Array.prototype.forEach.call(nodeList, function (node) {
                  node.addEventListener(type, callback);
                });
                return {
                  destroy: function destroy() {
                    Array.prototype.forEach.call(nodeList, function (node) {
                      node.removeEventListener(type, callback);
                    });
                  }
                };
              }
              /**
               * Add an event listener to a selector
               * and returns a remove listener function.
               *
               * @param {String} selector
               * @param {String} type
               * @param {Function} callback
               * @return {Object}
               */


              function listenSelector(selector, type, callback) {
                return delegate(document.body, selector, type, callback);
              }

              module.exports = listen;
              /***/
            },

            /***/
            817:
            /***/
            function _(module) {
              function select(element) {
                var selectedText;

                if (element.nodeName === 'SELECT') {
                  element.focus();
                  selectedText = element.value;
                } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {
                  var isReadOnly = element.hasAttribute('readonly');

                  if (!isReadOnly) {
                    element.setAttribute('readonly', '');
                  }

                  element.select();
                  element.setSelectionRange(0, element.value.length);

                  if (!isReadOnly) {
                    element.removeAttribute('readonly');
                  }

                  selectedText = element.value;
                } else {
                  if (element.hasAttribute('contenteditable')) {
                    element.focus();
                  }

                  var selection = window.getSelection();
                  var range = document.createRange();
                  range.selectNodeContents(element);
                  selection.removeAllRanges();
                  selection.addRange(range);
                  selectedText = selection.toString();
                }

                return selectedText;
              }

              module.exports = select;
              /***/
            },

            /***/
            279:
            /***/
            function _(module) {
              function E() {// Keep this empty so it's easier to inherit from
                // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)
              }

              E.prototype = {
                on: function on(name, callback, ctx) {
                  var e = this.e || (this.e = {});
                  (e[name] || (e[name] = [])).push({
                    fn: callback,
                    ctx: ctx
                  });
                  return this;
                },
                once: function once(name, callback, ctx) {
                  var self = this;

                  function listener() {
                    self.off(name, listener);
                    callback.apply(ctx, arguments);
                  }
                  listener._ = callback;
                  return this.on(name, listener, ctx);
                },
                emit: function emit(name) {
                  var data = [].slice.call(arguments, 1);
                  var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
                  var i = 0;
                  var len = evtArr.length;

                  for (i; i < len; i++) {
                    evtArr[i].fn.apply(evtArr[i].ctx, data);
                  }

                  return this;
                },
                off: function off(name, callback) {
                  var e = this.e || (this.e = {});
                  var evts = e[name];
                  var liveEvents = [];

                  if (evts && callback) {
                    for (var i = 0, len = evts.length; i < len; i++) {
                      if (evts[i].fn !== callback && evts[i].fn._ !== callback) liveEvents.push(evts[i]);
                    }
                  } // Remove event from queue to prevent memory leak
                  // Suggested by https://github.com/lazd
                  // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910


                  liveEvents.length ? e[name] = liveEvents : delete e[name];
                  return this;
                }
              };
              module.exports = E;
              module.exports.TinyEmitter = E;
              /***/
            }
            /******/

          };
          /************************************************************************/

          /******/
          // The module cache

          /******/

          var __webpack_module_cache__ = {};
          /******/

          /******/
          // The require function

          /******/

          function __webpack_require__(moduleId) {
            /******/
            // Check if module is in cache

            /******/
            if (__webpack_module_cache__[moduleId]) {
              /******/
              return __webpack_module_cache__[moduleId].exports;
              /******/
            }
            /******/
            // Create a new module (and put it into the cache)

            /******/


            var module = __webpack_module_cache__[moduleId] = {
              /******/
              // no module.id needed

              /******/
              // no module.loaded needed

              /******/
              exports: {}
              /******/

            };
            /******/

            /******/
            // Execute the module function

            /******/

            __webpack_modules__[moduleId](module, module.exports, __webpack_require__);
            /******/

            /******/
            // Return the exports of the module

            /******/


            return module.exports;
            /******/
          }
          /******/

          /************************************************************************/

          /******/

          /* webpack/runtime/compat get default export */

          /******/


          !function () {
            /******/
            // getDefaultExport function for compatibility with non-harmony modules

            /******/
            __webpack_require__.n = function (module) {
              /******/
              var getter = module && module.__esModule ?
              /******/
              function () {
                return module['default'];
              } :
              /******/
              function () {
                return module;
              };
              /******/

              __webpack_require__.d(getter, {
                a: getter
              });
              /******/


              return getter;
              /******/
            };
            /******/

          }();
          /******/

          /******/

          /* webpack/runtime/define property getters */

          /******/

          !function () {
            /******/
            // define getter functions for harmony exports

            /******/
            __webpack_require__.d = function (exports, definition) {
              /******/
              for (var key in definition) {
                /******/
                if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
                  /******/
                  Object.defineProperty(exports, key, {
                    enumerable: true,
                    get: definition[key]
                  });
                  /******/
                }
                /******/

              }
              /******/

            };
            /******/

          }();
          /******/

          /******/

          /* webpack/runtime/hasOwnProperty shorthand */

          /******/

          !function () {
            /******/
            __webpack_require__.o = function (obj, prop) {
              return Object.prototype.hasOwnProperty.call(obj, prop);
            };
            /******/

          }();
          /******/

          /************************************************************************/

          /******/
          // module exports must be returned from runtime so entry inlining is disabled

          /******/
          // startup

          /******/
          // Load entry module and return exports

          /******/

          return __webpack_require__(134);
          /******/
        }()["default"]
      );
    });
  })(clipboard);

  var Clipboard = /*@__PURE__*/getDefaultExportFromCjs(clipboard.exports);

  function copyText(_text) {
    var div = document.createElement("div");
    var clip = new Clipboard(div, {
      text: function text() {
        return _text;
      }
    });
    div.click();
    clip.destroy();
    div.remove();
  }

  var AnchorTarget = function AnchorTarget(props) {
    var id = props.id,
        _props$tag = props.tag,
        tag = _props$tag === void 0 ? "div" : _props$tag,
        children = props.children,
        className = props.className,
        style = props.style;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var tagClassName = classNames$1("".concat(classPrefix, "-anchor__target"), className);
    var iconClassName = "".concat(classPrefix, "-anchor__copy");

    var handleCopyText = function handleCopyText() {
      var a = document.createElement("a");
      a.href = "#".concat(id);
      copyText(a.href);
      MessagePlugin.success("\u94FE\u63A5\u590D\u5236\u6210\u529F", 1e3);
    };

    var Content = function Content() {
      return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, children, /* @__PURE__ */React__default["default"].createElement(Popup, {
        content: "\u590D\u5236\u94FE\u63A5",
        placement: "top",
        showArrow: true
      }, /* @__PURE__ */React__default["default"].createElement(FileCopyIcon, {
        className: iconClassName,
        onClick: handleCopyText
      })));
    };

    return /*#__PURE__*/React__default["default"].createElement(tag, {
      id: id,
      className: tagClassName,
      style: style
    }, /*#__PURE__*/React__default["default"].createElement(Content));
  };

  function ownKeys$p(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$p(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$p(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$p(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var ANCHOR_SHARP_REGEXP = /#(\S+)$/;

  var Anchor$1 = function Anchor(props) {
    var _classNames;

    var affixProps = props.affixProps,
        _props$bounds = props.bounds,
        bounds = _props$bounds === void 0 ? 5 : _props$bounds,
        _props$targetOffset = props.targetOffset,
        targetOffset = _props$targetOffset === void 0 ? 0 : _props$targetOffset,
        _props$container = props.container,
        container = _props$container === void 0 ? "" : _props$container,
        _props$size = props.size,
        size = _props$size === void 0 ? "medium" : _props$size,
        children = props.children,
        cursor = props.cursor,
        _props$onClick = props.onClick,
        onClick = _props$onClick === void 0 ? noop : _props$onClick,
        _props$onChange = props.onChange,
        onChange = _props$onChange === void 0 ? noop : _props$onChange;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useState = React.useState(""),
        _useState2 = _slicedToArray(_useState, 2),
        activeItem = _useState2[0],
        setActiveItem = _useState2[1];

    var _useState3 = React.useState({
      top: "0px",
      height: "0px",
      opacity: 0
    }),
        _useState4 = _slicedToArray(_useState3, 2),
        cursorStyle = _useState4[0],
        setCursorStyle = _useState4[1];

    var anchorEl = React.useRef(null);
    var intervalRef = React.useRef({
      items: [],
      scrollContainer: window,
      handleScrollLock: false
    });

    var registerItem = function registerItem(href) {
      var items = intervalRef.current.items;
      if (ANCHOR_SHARP_REGEXP.test(href) && items.indexOf(href) < 0) items.push(href);
    };

    var unregisterItem = function unregisterItem(href) {
      var items = intervalRef.current.items;
      intervalRef.current.items = items.filter(function (item) {
        return href !== item;
      });
    };

    var getAnchorTarget = function getAnchorTarget(href) {
      return document.querySelector(href);
    };

    var handleScrollTo = function handleScrollTo(link) {
      var anchor = getAnchorTarget(link);
      if (!anchor) return;
      if (isFunction_1(onChange)) onChange(link, activeItem);
      setActiveItem(link);
      intervalRef.current.handleScrollLock = true;
      var scrollContainer = intervalRef.current.scrollContainer;
      var scrollTop = getScroll(scrollContainer);
      var offsetTop = getOffsetTop(anchor, scrollContainer);
      var top = scrollTop + offsetTop - targetOffset;
      scrollTo(top, {
        container: scrollContainer
      }).then(function () {
        intervalRef.current.handleScrollLock = false;
      });
    };

    var handleClick = function handleClick(item, e) {
      onClick(_objectSpread$p({
        e: e
      }, item));
      handleScrollTo(item.href);
    };

    React.useEffect(function () {
      var pointEl = anchorEl.current.querySelector(".".concat(classPrefix, "-is-active>a"));

      if (!pointEl) {
        setCursorStyle(null);
      } else {
        var top = pointEl.offsetTop,
            height = pointEl.offsetHeight;
        setCursorStyle({
          top: "".concat(top, "px"),
          height: "".concat(height, "px"),
          opacity: 1
        });
      }
    }, [activeItem, classPrefix]);
    var handleScroll = React.useCallback(function () {
      var _intervalRef$current = intervalRef.current,
          scrollContainer = _intervalRef$current.scrollContainer,
          handleScrollLock = _intervalRef$current.handleScrollLock;
      if (handleScrollLock) return;
      var items = intervalRef.current.items;
      var filters = [];
      var active = "";
      items.forEach(function (href) {
        var anchor = getAnchorTarget(href);
        if (!anchor) return;
        var top = getOffsetTop(anchor, scrollContainer);

        if (top <= bounds + targetOffset) {
          filters.push({
            href: href,
            top: top
          });
        }
      });

      if (filters.length) {
        var latest = filters.reduce(function (prev, cur) {
          return prev.top > cur.top ? prev : cur;
        });
        active = latest.href;
      }

      if (active !== activeItem) {
        if (isFunction_1(onChange)) onChange(active, activeItem);
        setActiveItem(active);
      }
    }, [activeItem, bounds, onChange, targetOffset]);
    React.useEffect(function () {
      intervalRef.current.scrollContainer = getScrollContainer(container);
      var scrollContainer = intervalRef.current.scrollContainer;
      handleScroll();
      scrollContainer.addEventListener("scroll", handleScroll);
      return function () {
        scrollContainer.removeEventListener("scroll", handleScroll);
      };
    }, [container, handleScroll]);
    var anchorClass = classNames$1("".concat(classPrefix, "-anchor"), (_classNames = {}, _defineProperty$2(_classNames, "".concat(classPrefix, "-size-s"), size === "small"), _defineProperty$2(_classNames, "".concat(classPrefix, "-size-m"), size === "medium"), _defineProperty$2(_classNames, "".concat(classPrefix, "-size-l"), size === "large"), _classNames));

    var CursorCmp = function CursorCmp() {
      if (isFunction_1(cursor)) return cursor();
      if (isEmpty_1(cursor)) return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-anchor__line-cursor")
      });
      return cursor;
    };

    var Cmp = /* @__PURE__ */React__default["default"].createElement(AnchorContext.Provider, {
      value: {
        onClick: handleClick,
        activeItem: activeItem,
        registerItem: registerItem,
        unregisterItem: unregisterItem
      }
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: anchorClass,
      ref: anchorEl
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-anchor__line")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-anchor__line-cursor-wrapper"),
      style: cursorStyle
    }, CursorCmp())), children));
    return isEmpty_1(affixProps) ? Cmp : /* @__PURE__ */React__default["default"].createElement(Affix, _objectSpread$p({}, affixProps), Cmp);
  };

  Anchor$1.AnchorItem = AnchorItem;
  Anchor$1.AnchorTarget = AnchorTarget;
  Anchor$1.displayName = "Anchor";

  var Anchor = Anchor$1;

  var dayjs_min = {exports: {}};

  (function (module, exports) {
    !function (t, e) {
      module.exports = e() ;
    }(commonjsGlobal, function () {

      var t = "millisecond",
          e = "second",
          n = "minute",
          r = "hour",
          i = "day",
          s = "week",
          u = "month",
          a = "quarter",
          o = "year",
          f = "date",
          h = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[^0-9]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?.?(\d+)?$/,
          c = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,
          d = {
        name: "en",
        weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
        months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_")
      },
          $ = function $(t, e, n) {
        var r = String(t);
        return !r || r.length >= e ? t : "" + Array(e + 1 - r.length).join(n) + t;
      },
          l = {
        s: $,
        z: function z(t) {
          var e = -t.utcOffset(),
              n = Math.abs(e),
              r = Math.floor(n / 60),
              i = n % 60;
          return (e <= 0 ? "+" : "-") + $(r, 2, "0") + ":" + $(i, 2, "0");
        },
        m: function t(e, n) {
          if (e.date() < n.date()) return -t(n, e);
          var r = 12 * (n.year() - e.year()) + (n.month() - e.month()),
              i = e.clone().add(r, u),
              s = n - i < 0,
              a = e.clone().add(r + (s ? -1 : 1), u);
          return +(-(r + (n - i) / (s ? i - a : a - i)) || 0);
        },
        a: function a(t) {
          return t < 0 ? Math.ceil(t) || 0 : Math.floor(t);
        },
        p: function p(h) {
          return {
            M: u,
            y: o,
            w: s,
            d: i,
            D: f,
            h: r,
            m: n,
            s: e,
            ms: t,
            Q: a
          }[h] || String(h || "").toLowerCase().replace(/s$/, "");
        },
        u: function u(t) {
          return void 0 === t;
        }
      },
          y = "en",
          M = {};

      M[y] = d;

      var m = function m(t) {
        return t instanceof S;
      },
          D = function D(t, e, n) {
        var r;
        if (!t) return y;
        if ("string" == typeof t) M[t] && (r = t), e && (M[t] = e, r = t);else {
          var i = t.name;
          M[i] = t, r = i;
        }
        return !n && r && (y = r), r || !n && y;
      },
          v = function v(t, e) {
        if (m(t)) return t.clone();
        var n = "object" == _typeof(e) ? e : {};
        return n.date = t, n.args = arguments, new S(n);
      },
          g = l;

      g.l = D, g.i = m, g.w = function (t, e) {
        return v(t, {
          locale: e.$L,
          utc: e.$u,
          x: e.$x,
          $offset: e.$offset
        });
      };

      var S = function () {
        function d(t) {
          this.$L = D(t.locale, null, !0), this.parse(t);
        }

        var $ = d.prototype;
        return $.parse = function (t) {
          this.$d = function (t) {
            var e = t.date,
                n = t.utc;
            if (null === e) return new Date(NaN);
            if (g.u(e)) return new Date();
            if (e instanceof Date) return new Date(e);

            if ("string" == typeof e && !/Z$/i.test(e)) {
              var r = e.match(h);

              if (r) {
                var i = r[2] - 1 || 0,
                    s = (r[7] || "0").substring(0, 3);
                return n ? new Date(Date.UTC(r[1], i, r[3] || 1, r[4] || 0, r[5] || 0, r[6] || 0, s)) : new Date(r[1], i, r[3] || 1, r[4] || 0, r[5] || 0, r[6] || 0, s);
              }
            }

            return new Date(e);
          }(t), this.$x = t.x || {}, this.init();
        }, $.init = function () {
          var t = this.$d;
          this.$y = t.getFullYear(), this.$M = t.getMonth(), this.$D = t.getDate(), this.$W = t.getDay(), this.$H = t.getHours(), this.$m = t.getMinutes(), this.$s = t.getSeconds(), this.$ms = t.getMilliseconds();
        }, $.$utils = function () {
          return g;
        }, $.isValid = function () {
          return !("Invalid Date" === this.$d.toString());
        }, $.isSame = function (t, e) {
          var n = v(t);
          return this.startOf(e) <= n && n <= this.endOf(e);
        }, $.isAfter = function (t, e) {
          return v(t) < this.startOf(e);
        }, $.isBefore = function (t, e) {
          return this.endOf(e) < v(t);
        }, $.$g = function (t, e, n) {
          return g.u(t) ? this[e] : this.set(n, t);
        }, $.unix = function () {
          return Math.floor(this.valueOf() / 1e3);
        }, $.valueOf = function () {
          return this.$d.getTime();
        }, $.startOf = function (t, a) {
          var h = this,
              c = !!g.u(a) || a,
              d = g.p(t),
              $ = function $(t, e) {
            var n = g.w(h.$u ? Date.UTC(h.$y, e, t) : new Date(h.$y, e, t), h);
            return c ? n : n.endOf(i);
          },
              l = function l(t, e) {
            return g.w(h.toDate()[t].apply(h.toDate("s"), (c ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e)), h);
          },
              y = this.$W,
              M = this.$M,
              m = this.$D,
              D = "set" + (this.$u ? "UTC" : "");

          switch (d) {
            case o:
              return c ? $(1, 0) : $(31, 11);

            case u:
              return c ? $(1, M) : $(0, M + 1);

            case s:
              var v = this.$locale().weekStart || 0,
                  S = (y < v ? y + 7 : y) - v;
              return $(c ? m - S : m + (6 - S), M);

            case i:
            case f:
              return l(D + "Hours", 0);

            case r:
              return l(D + "Minutes", 1);

            case n:
              return l(D + "Seconds", 2);

            case e:
              return l(D + "Milliseconds", 3);

            default:
              return this.clone();
          }
        }, $.endOf = function (t) {
          return this.startOf(t, !1);
        }, $.$set = function (s, a) {
          var h,
              c = g.p(s),
              d = "set" + (this.$u ? "UTC" : ""),
              $ = (h = {}, h[i] = d + "Date", h[f] = d + "Date", h[u] = d + "Month", h[o] = d + "FullYear", h[r] = d + "Hours", h[n] = d + "Minutes", h[e] = d + "Seconds", h[t] = d + "Milliseconds", h)[c],
              l = c === i ? this.$D + (a - this.$W) : a;

          if (c === u || c === o) {
            var y = this.clone().set(f, 1);
            y.$d[$](l), y.init(), this.$d = y.set(f, Math.min(this.$D, y.daysInMonth())).$d;
          } else $ && this.$d[$](l);

          return this.init(), this;
        }, $.set = function (t, e) {
          return this.clone().$set(t, e);
        }, $.get = function (t) {
          return this[g.p(t)]();
        }, $.add = function (t, a) {
          var f,
              h = this;
          t = Number(t);

          var c = g.p(a),
              d = function d(e) {
            var n = v(h);
            return g.w(n.date(n.date() + Math.round(e * t)), h);
          };

          if (c === u) return this.set(u, this.$M + t);
          if (c === o) return this.set(o, this.$y + t);
          if (c === i) return d(1);
          if (c === s) return d(7);
          var $ = (f = {}, f[n] = 6e4, f[r] = 36e5, f[e] = 1e3, f)[c] || 1,
              l = this.$d.getTime() + t * $;
          return g.w(l, this);
        }, $.subtract = function (t, e) {
          return this.add(-1 * t, e);
        }, $.format = function (t) {
          var e = this;
          if (!this.isValid()) return "Invalid Date";

          var n = t || "YYYY-MM-DDTHH:mm:ssZ",
              r = g.z(this),
              i = this.$locale(),
              s = this.$H,
              u = this.$m,
              a = this.$M,
              o = i.weekdays,
              f = i.months,
              h = function h(t, r, i, s) {
            return t && (t[r] || t(e, n)) || i[r].substr(0, s);
          },
              d = function d(t) {
            return g.s(s % 12 || 12, t, "0");
          },
              $ = i.meridiem || function (t, e, n) {
            var r = t < 12 ? "AM" : "PM";
            return n ? r.toLowerCase() : r;
          },
              l = {
            YY: String(this.$y).slice(-2),
            YYYY: this.$y,
            M: a + 1,
            MM: g.s(a + 1, 2, "0"),
            MMM: h(i.monthsShort, a, f, 3),
            MMMM: h(f, a),
            D: this.$D,
            DD: g.s(this.$D, 2, "0"),
            d: String(this.$W),
            dd: h(i.weekdaysMin, this.$W, o, 2),
            ddd: h(i.weekdaysShort, this.$W, o, 3),
            dddd: o[this.$W],
            H: String(s),
            HH: g.s(s, 2, "0"),
            h: d(1),
            hh: d(2),
            a: $(s, u, !0),
            A: $(s, u, !1),
            m: String(u),
            mm: g.s(u, 2, "0"),
            s: String(this.$s),
            ss: g.s(this.$s, 2, "0"),
            SSS: g.s(this.$ms, 3, "0"),
            Z: r
          };

          return n.replace(c, function (t, e) {
            return e || l[t] || r.replace(":", "");
          });
        }, $.utcOffset = function () {
          return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
        }, $.diff = function (t, f, h) {
          var c,
              d = g.p(f),
              $ = v(t),
              l = 6e4 * ($.utcOffset() - this.utcOffset()),
              y = this - $,
              M = g.m(this, $);
          return M = (c = {}, c[o] = M / 12, c[u] = M, c[a] = M / 3, c[s] = (y - l) / 6048e5, c[i] = (y - l) / 864e5, c[r] = y / 36e5, c[n] = y / 6e4, c[e] = y / 1e3, c)[d] || y, h ? M : g.a(M);
        }, $.daysInMonth = function () {
          return this.endOf(u).$D;
        }, $.$locale = function () {
          return M[this.$L];
        }, $.locale = function (t, e) {
          if (!t) return this.$L;
          var n = this.clone(),
              r = D(t, e, !0);
          return r && (n.$L = r), n;
        }, $.clone = function () {
          return g.w(this.$d, this);
        }, $.toDate = function () {
          return new Date(this.valueOf());
        }, $.toJSON = function () {
          return this.isValid() ? this.toISOString() : null;
        }, $.toISOString = function () {
          return this.$d.toISOString();
        }, $.toString = function () {
          return this.$d.toUTCString();
        }, d;
      }(),
          p = S.prototype;

      return v.prototype = p, [["$ms", t], ["$s", e], ["$m", n], ["$H", r], ["$W", i], ["$M", u], ["$y", o], ["$D", f]].forEach(function (t) {
        p[t[1]] = function (e) {
          return this.$g(e, t[0], t[1]);
        };
      }), v.extend = function (t, e) {
        return t.$i || (t(e, S, v), t.$i = !0), v;
      }, v.locale = D, v.isDayjs = m, v.unix = function (t) {
        return v(1e3 * t);
      }, v.en = M[y], v.Ls = M, v.p = {}, v;
    });
  })(dayjs_min);

  var dayjs = dayjs_min.exports;

  var getDay = function getDay(dt) {
    var day = dayjs(dt).day();

    if (day === 0) {
      day = 7;
    }

    return day;
  };
  var createDateList = function createDateList(year, month, firstDayOfWeek, currentValue, format) {
    var createCellData = function createCellData(belongTo, isCurrent, date, weekOrder) {
      var day = getDay(date);
      return {
        mode: "month",
        belongTo: belongTo,
        isCurrent: isCurrent,
        day: day,
        weekOrder: weekOrder,
        date: date,
        formattedDate: dayjs(date).format(format),
        filterDate: null,
        formattedFilterDate: null,
        isShowWeekend: true
      };
    };

    var monthFirstDay = dayjs("".concat(year, "-").concat(month));
    var rowList = [];
    var list = [];
    var weekCount = 1;
    var lastMonthDaysCount = (getDay(monthFirstDay.toDate()) - firstDayOfWeek + 7) % 7;

    for (var i = 0; i < lastMonthDaysCount; i++) {
      var dayObj = monthFirstDay.subtract(i + 1, "day");
      list.unshift(createCellData(-1, false, dayObj.toDate(), weekCount));
    }

    var monthDaysCount = monthFirstDay.endOf("month").daysInMonth();

    for (var _i = 0; _i < monthDaysCount; _i++) {
      var _dayObj = monthFirstDay.add(_i, "day");

      list.push(createCellData(0, currentValue.isSame(_dayObj), _dayObj.toDate(), weekCount));

      if (list.length === 7) {
        rowList.push(list);
        list = [];
        weekCount += 1;
      }
    }

    if (list.length) {
      var monthLastDay = dayjs("".concat(year, "-").concat(month)).endOf("month");
      var nextMonthDaysCount = 7 - list.length;

      for (var _i2 = 0; _i2 < nextMonthDaysCount; _i2++) {
        var _dayObj2 = monthLastDay.add(_i2 + 1, "day");

        list.push(createCellData(1, false, _dayObj2.toDate(), weekCount));
      }

      rowList.push(list);
    }

    return rowList;
  };
  var createMonthList = function createMonthList(year, currentValue, format) {
    var rowNum = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 4;
    var monthsArr = [];
    var isCurYear = currentValue.year() === year;
    var tmpArr = [];

    for (var i = 1; i <= 12; i++) {
      var date = new Date(year, i - 1);
      var curDateMon = parseInt(currentValue.format("M"), 10);
      var isCurrent = isCurYear && curDateMon === i;
      tmpArr.push({
        mode: "year",
        isCurrent: isCurrent,
        date: date,
        formattedDate: dayjs(date).format(format),
        filterDate: null,
        formattedFilterDate: null,
        isShowWeekend: true
      });

      if (tmpArr.length === rowNum) {
        monthsArr.push(tmpArr);
        tmpArr = [];
      }
    }

    return monthsArr;
  };

  function ownKeys$o(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$o(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$o(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$o(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var getDefaultControllerConfigData = function getDefaultControllerConfigData() {
    var visible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    return {
      visible: visible,
      disabled: false,
      mode: {
        visible: true,
        radioGroupProps: {}
      },
      year: {
        visible: true,
        selectProps: {
          popupProps: {
            overlayStyle: {
              width: "110px"
            }
          }
        }
      },
      month: {
        visible: true,
        selectProps: {
          popupProps: {
            overlayStyle: {
              width: "90px"
            }
          }
        }
      },
      weekend: {
        visible: true,
        showWeekendButtonProps: {},
        hideWeekendButtonProps: {}
      },
      current: {
        visible: true,
        currentDayButtonProps: {},
        currentMonthButtonProps: {}
      }
    };
  };

  var blockName = "calendar";
  var controlSectionSize = "medium";
  var minYear = 1970;
  var Calendar$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _props$className = props.className,
        className = _props$className === void 0 ? "" : _props$className,
        _props$style = props.style,
        style = _props$style === void 0 ? {} : _props$style,
        _props$mode = props.mode,
        modeFromProps = _props$mode === void 0 ? "month" : _props$mode,
        _props$value = props.value,
        valueFromProps = _props$value === void 0 ? null : _props$value,
        _props$firstDayOfWeek = props.firstDayOfWeek,
        firstDayOfWeek = _props$firstDayOfWeek === void 0 ? 1 : _props$firstDayOfWeek,
        _props$format = props.format,
        format = _props$format === void 0 ? "YYYY-MM-DD" : _props$format,
        _props$range = props.range,
        range = _props$range === void 0 ? null : _props$range,
        _props$head = props.head,
        head = _props$head === void 0 ? null : _props$head,
        _props$cell = props.cell,
        cell = _props$cell === void 0 ? null : _props$cell,
        _props$cellAppend = props.cellAppend,
        cellAppend = _props$cellAppend === void 0 ? null : _props$cellAppend,
        _props$week = props.week,
        week = _props$week === void 0 ? null : _props$week,
        _props$theme = props.theme,
        theme = _props$theme === void 0 ? "full" : _props$theme,
        controllerConfig = props.controllerConfig,
        _props$isShowWeekendD = props.isShowWeekendDefault,
        isShowWeekendDefault = _props$isShowWeekendD === void 0 ? true : _props$isShowWeekendD,
        _props$preventCellCon = props.preventCellContextmenu,
        preventCellContextmenu = _props$preventCellCon === void 0 ? false : _props$preventCellCon,
        _props$onControllerCh = props.onControllerChange,
        onControllerChange = _props$onControllerCh === void 0 ? noop : _props$onControllerCh,
        _props$onCellClick = props.onCellClick,
        onCellClick = _props$onCellClick === void 0 ? noop : _props$onCellClick,
        _props$onCellDoubleCl = props.onCellDoubleClick,
        onCellDoubleClick = _props$onCellDoubleCl === void 0 ? noop : _props$onCellDoubleCl,
        _props$onCellRightCli = props.onCellRightClick,
        onCellRightClick = _props$onCellRightCli === void 0 ? noop : _props$onCellRightCli,
        _props$onMonthChange = props.onMonthChange,
        onMonthChange = _props$onMonthChange === void 0 ? noop : _props$onMonthChange,
        _props$fillWithZero = props.fillWithZero,
        fillWithZero = _props$fillWithZero === void 0 ? false : _props$fillWithZero;
    var controllerConfigData = typeof controllerConfig === "boolean" ? getDefaultControllerConfigData(controllerConfig) : _objectSpread$o(_objectSpread$o({}, getDefaultControllerConfigData()), controllerConfig);
    var visible = controllerConfigData.visible,
        disabled = controllerConfigData.disabled,
        modeFromConfig = controllerConfigData.mode,
        yearFromConfig = controllerConfigData.year,
        monthFromConfig = controllerConfigData.month,
        weekend = controllerConfigData.weekend,
        current = controllerConfigData.current;
    var _modeFromConfig$visib = modeFromConfig.visible,
        visibleForMode = _modeFromConfig$visib === void 0 ? true : _modeFromConfig$visib,
        _modeFromConfig$radio = modeFromConfig.radioGroupProps,
        radioGroupPropsForMode = _modeFromConfig$radio === void 0 ? {} : _modeFromConfig$radio;
    var _yearFromConfig$visib = yearFromConfig.visible,
        visibleForYear = _yearFromConfig$visib === void 0 ? true : _yearFromConfig$visib,
        _yearFromConfig$selec = yearFromConfig.selectProps,
        selectPropsForYear = _yearFromConfig$selec === void 0 ? {} : _yearFromConfig$selec;
    var _monthFromConfig$visi = monthFromConfig.visible,
        visibleForMonth = _monthFromConfig$visi === void 0 ? true : _monthFromConfig$visi,
        _monthFromConfig$sele = monthFromConfig.selectProps,
        selectPropsForMonth = _monthFromConfig$sele === void 0 ? {} : _monthFromConfig$sele;
    var _weekend$visible = weekend.visible,
        visibleForWeekendToggle = _weekend$visible === void 0 ? true : _weekend$visible,
        _weekend$showWeekendB = weekend.showWeekendButtonProps,
        showWeekendButtonProps = _weekend$showWeekendB === void 0 ? {} : _weekend$showWeekendB,
        _weekend$hideWeekendB = weekend.hideWeekendButtonProps,
        hideWeekendButtonProps = _weekend$hideWeekendB === void 0 ? {} : _weekend$hideWeekendB;
    var _current$visible = current.visible,
        visibleForCurrent = _current$visible === void 0 ? true : _current$visible,
        _current$currentDayBu = current.currentDayButtonProps,
        currentDayButtonProps = _current$currentDayBu === void 0 ? {} : _current$currentDayBu,
        _current$currentMonth = current.currentMonthButtonProps,
        currentMonthButtonProps = _current$currentMonth === void 0 ? {} : _current$currentMonth;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useState = React.useState("month"),
        _useState2 = _slicedToArray(_useState, 2),
        mode = _useState2[0],
        setMode = _useState2[1];

    var _useState3 = React.useState(dayjs(valueFromProps || dayjs().format("YYYY-MM-DD"))),
        _useState4 = _slicedToArray(_useState3, 2),
        value = _useState4[0],
        setValue = _useState4[1];

    var _useState5 = React.useState(value.year()),
        _useState6 = _slicedToArray(_useState5, 2),
        year = _useState6[0],
        setYearState = _useState6[1];

    var _useState7 = React.useState(parseInt(value.format("M"), 10)),
        _useState8 = _slicedToArray(_useState7, 2),
        month = _useState8[0],
        setMonthState = _useState8[1];

    var _useState9 = React.useState(isShowWeekendDefault),
        _useState10 = _slicedToArray(_useState9, 2),
        isShowWeekend = _useState10[0],
        setIsShowWeekend = _useState10[1];

    var _useLocaleReceiver = useLocaleReceiver("calendar"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
        local = _useLocaleReceiver2[0],
        t = _useLocaleReceiver2[1];

    var setMonth = React.useCallback(function (newMonth) {
      setMonthState(newMonth);
      onMonthChange({
        month: String(newMonth),
        year: String(year)
      });
    }, [onMonthChange, year]);

    var setYear = function setYear(newYear) {
      setYearState(newYear);
    };

    var weekLabelList = t(local.week).split(",");
    var colHeaderList = React.useMemo(function () {
      if (mode === "year") return [];
      var weekTextArr = Array.isArray(week) && week.length >= 7 ? week : _toConsumableArray(weekLabelList);
      var list = [];

      for (var i = firstDayOfWeek; i <= 7; i++) {
        if (!isShowWeekend && i > 5) {
          break;
        }

        list.push({
          day: i,
          text: weekTextArr[i - 1]
        });
      }

      if (firstDayOfWeek > 1) {
        for (var _i = 1; _i < firstDayOfWeek; _i++) {
          if (!isShowWeekend && _i > 5) {
            break;
          }

          list.push({
            day: _i,
            text: weekTextArr[_i - 1]
          });
        }
      }

      return list;
    }, [mode, firstDayOfWeek, isShowWeekend, week, weekLabelList]);
    var rangeFromTo = React.useMemo(function () {
      if (!range || range.length < 2) {
        return null;
      }

      var _range = _slicedToArray(range, 2),
          v1 = _range[0],
          v2 = _range[1];

      if (dayjs(v1).isBefore(dayjs(v2))) {
        return {
          from: v1,
          to: v2
        };
      }

      return {
        from: v2,
        to: v1
      };
    }, [range]);
    var controllerOptions = React.useMemo(function () {
      var dayJsFilterDate = dayjs("".concat(year, "-").concat(month));
      var re = {
        filterDate: dayJsFilterDate.toDate(),
        formattedFilterDate: dayJsFilterDate.format(format),
        mode: mode,
        isShowWeekend: isShowWeekend
      };
      return re;
    }, [isShowWeekend, mode, year, month, format]);

    var _useMemo = React.useMemo(function () {
      var isRangeValid = rangeFromTo && rangeFromTo.from && rangeFromTo.to;

      var checkMonthSelectorDisabled = function checkMonthSelectorDisabled(yearIn, monthIn) {
        if (isRangeValid) {
          var beginYear = dayjs(rangeFromTo.from).year();
          var endYear = dayjs(rangeFromTo.to).year();

          if (yearIn === beginYear) {
            var beginMon = parseInt(dayjs(rangeFromTo.from).format("M"), 10);
            return monthIn < beginMon;
          }

          if (yearIn === endYear) {
            var endMon = parseInt(dayjs(rangeFromTo.to).format("M"), 10);
            return monthIn > endMon;
          }
        }

        return false;
      };

      var yearList = [];
      var monthList2 = [];
      var yearBegin = isRangeValid ? dayjs(rangeFromTo.from).year() : Math.max(minYear, year - 10);
      var yearEnd = isRangeValid ? dayjs(rangeFromTo.to).year() : Math.max(minYear, year + 10);

      for (var i = yearBegin; i <= yearEnd; i++) {
        yearList.push({
          value: i,
          disabled: checkMonthSelectorDisabled(i, month)
        });
      }

      for (var _i2 = 1; _i2 <= 12; _i2++) {
        monthList2.push({
          value: _i2,
          disabled: checkMonthSelectorDisabled(year, _i2)
        });
      }

      return [yearList, monthList2];
    }, [rangeFromTo, year, month]),
        _useMemo2 = _slicedToArray(_useMemo, 2),
        yearSelectList = _useMemo2[0],
        monthSelectList = _useMemo2[1];

    var dateList = React.useMemo(function () {
      return createDateList(year, month, firstDayOfWeek, value, format);
    }, [year, month, firstDayOfWeek, format, value]);
    var monthList = React.useMemo(function () {
      return createMonthList(year, value, format);
    }, [year, value, format]);
    var prefixCls = React.useCallback(function () {
      var className2 = "";

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      args.forEach(function (item, index) {
        if (item && index > 0) className2 = className2.concat(" ");

        if (item instanceof Array) {
          var _item = _slicedToArray(item, 3),
              block = _item[0],
              element = _item[1],
              modifier = _item[2];

          className2 = className2.concat(classPrefix, "-", block);
          if (element) className2 = className2.concat("__", element);
          if (modifier) className2 = className2.concat("--", modifier);
        } else if (typeof item === "string") {
          className2 = className2.concat(classPrefix, "-", item);
        }
      });
      return className2;
    }, [classPrefix]);
    var createCalendarCell = React.useCallback(function (cellData) {
      return _objectSpread$o(_objectSpread$o({}, cellData), controllerOptions);
    }, [controllerOptions]);
    var toCurrent = React.useCallback(function () {
      var valueIn = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var now = dayjs(valueIn).isValid() ? dayjs(valueIn) : dayjs(dayjs().format("YYYY-MM-DD"));
      setValue(now);
      setYear(now.year());
      setMonth(parseInt(now.format("M"), 10));
    }, [setMonth]);
    React__default["default"].useImperativeHandle(ref, function () {
      return {
        toCurrent: toCurrent
      };
    }, [toCurrent]);
    var execCellEvent = React.useCallback(function (event, calendarCell, handleFunc) {
      if (handleFunc && typeof handleFunc === "function") {
        handleFunc({
          cell: createCalendarCell(calendarCell),
          e: event
        });
      }
    }, [createCalendarCell]);
    var clickCell = React.useCallback(function (event, calendarCell) {
      setValue(dayjs(calendarCell.formattedDate));
      execCellEvent(event, calendarCell, onCellClick);
    }, [onCellClick, execCellEvent]);
    var doubleClickCell = React.useCallback(function (event, calendarCell) {
      execCellEvent(event, calendarCell, onCellDoubleClick);
    }, [onCellDoubleClick, execCellEvent]);
    var rightClickCell = React.useCallback(function (event, calendarCell) {
      if (preventCellContextmenu) event.preventDefault();
      execCellEvent(event, calendarCell, onCellRightClick);
    }, [onCellRightClick, execCellEvent, preventCellContextmenu]);
    React.useEffect(function () {
      toCurrent(valueFromProps);
    }, [valueFromProps, toCurrent]);
    React.useEffect(function () {
      setMode(modeFromProps);
    }, [modeFromProps]);
    React.useEffect(function () {
      setIsShowWeekend(isShowWeekendDefault);
    }, [isShowWeekendDefault]);
    React.useLayoutEffect(function () {
      onControllerChange(controllerOptions);
    }, [onControllerChange, controllerOptions]);
    var monthLabelList = t(local.cellMonth).split(",");

    var getMonthCN = function getMonthCN(month2) {
      return monthLabelList[month2];
    };

    var fix0 = function fix0(num) {
      var _ref;

      var fillZero = num < 10 && ((_ref = fillWithZero !== null && fillWithZero !== void 0 ? fillWithZero : local.fillWithZero) !== null && _ref !== void 0 ? _ref : true);
      return fillZero ? "0".concat(num) : num;
    };

    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: prefixCls(blockName, [blockName, "", theme]).concat(" ", className),
      style: style
    }, visible && /* @__PURE__ */React__default["default"].createElement("div", {
      className: prefixCls([blockName, "control"])
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: prefixCls([blockName, "title"])
    }, function () {
      if (head && typeof head === "function") return head(controllerOptions);
      if (head && typeof head !== "function") return head;
    }()), /* @__PURE__ */React__default["default"].createElement("div", {
      className: prefixCls([blockName, "control-section"])
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: prefixCls([blockName, "control-section-cell"])
    }, visibleForYear && /* @__PURE__ */React__default["default"].createElement(Select, _objectSpread$o({
      size: controlSectionSize,
      disabled: disabled,
      value: year,
      options: yearSelectList.map(function (item) {
        return {
          label: t(local.yearSelection, {
            year: item.value
          }),
          value: item.value,
          disabled: item.disabled
        };
      }),
      onChange: function onChange(selectYear) {
        return setYear(selectYear);
      }
    }, selectPropsForYear))), /* @__PURE__ */React__default["default"].createElement("div", {
      className: prefixCls([blockName, "control-section-cell"])
    }, visibleForMonth && mode === "month" && /* @__PURE__ */React__default["default"].createElement(Select, _objectSpread$o({
      size: controlSectionSize,
      disabled: disabled,
      value: month,
      options: monthSelectList.map(function (item) {
        return {
          label: t(local.monthSelection, {
            month: item.value
          }),
          value: item.value,
          disabled: item.disabled
        };
      }),
      onChange: function onChange(selectMonth) {
        return setMonth(selectMonth);
      }
    }, selectPropsForMonth)))), /* @__PURE__ */React__default["default"].createElement("div", {
      className: prefixCls([blockName, "control-section"]),
      style: {
        height: "auto"
      }
    }, visibleForMode && /* @__PURE__ */React__default["default"].createElement(Radio.Group, _objectSpread$o({
      variant: "default-filled",
      size: controlSectionSize,
      value: mode,
      disabled: disabled,
      onChange: function onChange(value2) {
        return setMode(value2);
      }
    }, radioGroupPropsForMode), /* @__PURE__ */React__default["default"].createElement(Radio.Button, {
      value: "month"
    }, t(local.monthRadio)), /* @__PURE__ */React__default["default"].createElement(Radio.Button, {
      value: "year"
    }, t(local.yearRadio)))), mode === "month" && theme === "full" && visibleForWeekendToggle && /* @__PURE__ */React__default["default"].createElement("div", {
      className: prefixCls([blockName, "control-section"])
    }, /* @__PURE__ */React__default["default"].createElement(CheckTag, _objectSpread$o({
      className: "t-calendar__control-tag",
      theme: isShowWeekend ? "default" : "primary",
      size: controlSectionSize,
      disabled: disabled,
      onClick: function onClick() {
        setIsShowWeekend(!isShowWeekend);
      }
    }, isShowWeekend ? hideWeekendButtonProps : showWeekendButtonProps), "".concat(isShowWeekend ? t(local.hideWeekend) : t(local.showWeekend)))), theme === "full" && visibleForCurrent && /* @__PURE__ */React__default["default"].createElement("div", {
      className: prefixCls([blockName, "control-section"])
    }, /* @__PURE__ */React__default["default"].createElement(Button, _objectSpread$o({
      size: controlSectionSize,
      disabled: disabled,
      onClick: toCurrent
    }, mode === "year" ? currentMonthButtonProps : currentDayButtonProps), mode === "year" ? t(local.thisMonth) : t(local.today)))), /* @__PURE__ */React__default["default"].createElement("div", {
      className: prefixCls([blockName, "panel"], [blockName, "panel--".concat(mode)])
    }, /* @__PURE__ */React__default["default"].createElement("table", {
      className: prefixCls([blockName, "table"])
    }, colHeaderList.length > 0 && /* @__PURE__ */React__default["default"].createElement("thead", {
      className: prefixCls([blockName, "table-head"])
    }, /* @__PURE__ */React__default["default"].createElement("tr", {
      className: prefixCls([blockName, "table-head-row"])
    }, colHeaderList.map(function (item) {
      return /* @__PURE__ */React__default["default"].createElement("th", {
        key: item.day,
        className: prefixCls([blockName, "table-head-cell"])
      }, week && typeof week === "function" ? week({
        day: item.day
      }) : item.text);
    }))), mode === "month" && /* @__PURE__ */React__default["default"].createElement("tbody", {
      className: prefixCls([blockName, "table-body"])
    }, dateList.map(function (dateRow, dateRowIndex) {
      return /* @__PURE__ */React__default["default"].createElement("tr", {
        key: String(dateRowIndex),
        className: prefixCls([blockName, "table-body-row"])
      }, dateRow.map(function (dateCell, dateCellIndex) {
        if (!isShowWeekend && [6, 7].indexOf(dateCell.day) >= 0) return null;
        var isNow = dateCell.formattedDate === dayjs().format("YYYY-MM-DD");
        return /* @__PURE__ */React__default["default"].createElement("td", {
          key: String(dateCellIndex),
          className: prefixCls([blockName, "table-body-cell"], dateCell.belongTo !== 0 && "is-disabled", dateCell.isCurrent && "is-checked", isNow && "is-now"),
          onClick: function onClick(event) {
            return clickCell(event, dateCell);
          },
          onDoubleClick: function onDoubleClick(event) {
            return doubleClickCell(event, dateCell);
          },
          onContextMenu: function onContextMenu(event) {
            return rightClickCell(event, dateCell);
          }
        }, function () {
          if (cell && typeof cell === "function") return cell(createCalendarCell(dateCell));
          if (cell && typeof cell !== "function") return cell;
          return /* @__PURE__ */React__default["default"].createElement("div", {
            className: prefixCls([blockName, "table-body-cell-display"])
          }, fix0(dateCell.date.getDate()));
        }(), function () {
          var celAppend;
          if (cellAppend && typeof cellAppend === "function") celAppend = cellAppend(createCalendarCell(dateCell));
          if (cellAppend && typeof cellAppend !== "function") celAppend = cellAppend;
          return cellAppend && /* @__PURE__ */React__default["default"].createElement("div", {
            className: prefixCls([blockName, "table-body-cell-content"])
          }, celAppend);
        }());
      }));
    })), mode === "year" && /* @__PURE__ */React__default["default"].createElement("tbody", {
      className: prefixCls([blockName, "table-body"])
    }, monthList.map(function (monthRow, monthRowIndex) {
      return /* @__PURE__ */React__default["default"].createElement("tr", {
        key: String(monthRowIndex),
        className: prefixCls([blockName, "table-body-row"])
      }, monthRow.map(function (monthCell, monthCellIndex) {
        var isNow = new Date().getMonth() === monthCell.date.getMonth();
        return /* @__PURE__ */React__default["default"].createElement("td", {
          key: String(monthCellIndex),
          className: prefixCls([blockName, "table-body-cell"], [monthCell.isCurrent && "is-checked"], [isNow && "calendar__table-body-cell--now"]),
          onClick: function onClick(event) {
            return clickCell(event, monthCell);
          },
          onDoubleClick: function onDoubleClick(event) {
            return doubleClickCell(event, monthCell);
          },
          onContextMenu: function onContextMenu(event) {
            return rightClickCell(event, monthCell);
          }
        }, function () {
          if (cell && typeof cell === "function") return cell(monthCell);
          if (cell && typeof cell !== "function") return cell;
          var monthCellIndex2 = monthCell.date.getMonth();
          var monthText = theme === "full" ? getMonthCN(monthCellIndex2) : t(local.monthSelection, {
            month: (monthCellIndex2 + 1).toString()
          });
          return /* @__PURE__ */React__default["default"].createElement("div", {
            className: prefixCls([blockName, "table-body-cell-value"])
          }, monthText);
        }(), function () {
          if (cellAppend && typeof cellAppend === "function") {
            return cellAppend(monthCell);
          }

          if (cellAppend && typeof cellAppend !== "function") return cellAppend;
          return /* @__PURE__ */React__default["default"].createElement("div", {
            className: prefixCls([blockName, "table-body-cell-content"])
          });
        }());
      }));
    })))));
  });

  var Calendar = Calendar$1;

  var FormContext = /*#__PURE__*/React__default["default"].createContext({
    labelWidth: "calc(1 / 12 * 100%)",
    labelAlign: "right",
    layout: "vertical",
    size: "medium",
    colon: false,
    requiredMark: true,
    scrollToFirstError: void 0,
    showErrorMessage: true,
    resetType: "empty",
    rules: void 0,
    statusIcon: false,
    onFormItemValueChange: void 0,
    formItemsRef: null
  });
  var useFormContext = function useFormContext() {
    return React__default["default"].useContext(FormContext);
  };

  /**
   * Checks if `value` is `null` or `undefined`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
   * @example
   *
   * _.isNil(null);
   * // => true
   *
   * _.isNil(void 0);
   * // => true
   *
   * _.isNil(NaN);
   * // => false
   */

  function isNil(value) {
    return value == null;
  }

  var isNil_1 = isNil;

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */

  function arraySome$1(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }

    return false;
  }

  var _arraySome = arraySome$1;

  var SetCache = _SetCache,
      arraySome = _arraySome,
      cacheHas = _cacheHas;
  /** Used to compose bitmasks for value comparisons. */

  var COMPARE_PARTIAL_FLAG$5 = 1,
      COMPARE_UNORDERED_FLAG$3 = 2;
  /**
   * A specialized version of `baseIsEqualDeep` for arrays with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Array} array The array to compare.
   * @param {Array} other The other array to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `array` and `other` objects.
   * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
   */

  function equalArrays$2(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5,
        arrLength = array.length,
        othLength = other.length;

    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    } // Check that cyclic values are equal.


    var arrStacked = stack.get(array);
    var othStacked = stack.get(other);

    if (arrStacked && othStacked) {
      return arrStacked == other && othStacked == array;
    }

    var index = -1,
        result = true,
        seen = bitmask & COMPARE_UNORDERED_FLAG$3 ? new SetCache() : undefined;
    stack.set(array, other);
    stack.set(other, array); // Ignore non-index properties.

    while (++index < arrLength) {
      var arrValue = array[index],
          othValue = other[index];

      if (customizer) {
        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
      }

      if (compared !== undefined) {
        if (compared) {
          continue;
        }

        result = false;
        break;
      } // Recursively compare arrays (susceptible to call stack limits).


      if (seen) {
        if (!arraySome(other, function (othValue, othIndex) {
          if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            return seen.push(othIndex);
          }
        })) {
          result = false;
          break;
        }
      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
        result = false;
        break;
      }
    }

    stack['delete'](array);
    stack['delete'](other);
    return result;
  }

  var _equalArrays = equalArrays$2;

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */

  function mapToArray$1(map) {
    var index = -1,
        result = Array(map.size);
    map.forEach(function (value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  var _mapToArray = mapToArray$1;

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */

  function setToArray$1(set) {
    var index = -1,
        result = Array(set.size);
    set.forEach(function (value) {
      result[++index] = value;
    });
    return result;
  }

  var _setToArray = setToArray$1;

  var _Symbol = _Symbol$6,
      Uint8Array = _Uint8Array,
      eq$1 = eq_1,
      equalArrays$1 = _equalArrays,
      mapToArray = _mapToArray,
      setToArray = _setToArray;
  /** Used to compose bitmasks for value comparisons. */

  var COMPARE_PARTIAL_FLAG$4 = 1,
      COMPARE_UNORDERED_FLAG$2 = 2;
  /** `Object#toString` result references. */

  var boolTag = '[object Boolean]',
      dateTag$1 = '[object Date]',
      errorTag = '[object Error]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]';
  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]';
  /** Used to convert symbols to primitives and strings. */

  var symbolProto = _Symbol ? _Symbol.prototype : undefined,
      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;
  /**
   * A specialized version of `baseIsEqualDeep` for comparing objects of
   * the same `toStringTag`.
   *
   * **Note:** This function only supports comparing values with tags of
   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {string} tag The `toStringTag` of the objects to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */

  function equalByTag$1(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {
      case dataViewTag:
        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
          return false;
        }

        object = object.buffer;
        other = other.buffer;

      case arrayBufferTag:
        if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
          return false;
        }

        return true;

      case boolTag:
      case dateTag$1:
      case numberTag:
        // Coerce booleans to `1` or `0` and dates to milliseconds.
        // Invalid dates are coerced to `NaN`.
        return eq$1(+object, +other);

      case errorTag:
        return object.name == other.name && object.message == other.message;

      case regexpTag:
      case stringTag:
        // Coerce regexes to strings and treat strings, primitives and objects,
        // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
        // for more details.
        return object == other + '';

      case mapTag:
        var convert = mapToArray;

      case setTag:
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4;
        convert || (convert = setToArray);

        if (object.size != other.size && !isPartial) {
          return false;
        } // Assume cyclic values are equal.


        var stacked = stack.get(object);

        if (stacked) {
          return stacked == other;
        }

        bitmask |= COMPARE_UNORDERED_FLAG$2; // Recursively compare objects (susceptible to call stack limits).

        stack.set(object, other);
        var result = equalArrays$1(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
        stack['delete'](object);
        return result;

      case symbolTag:
        if (symbolValueOf) {
          return symbolValueOf.call(object) == symbolValueOf.call(other);
        }

    }

    return false;
  }

  var _equalByTag = equalByTag$1;

  var getAllKeys = _getAllKeys;
  /** Used to compose bitmasks for value comparisons. */

  var COMPARE_PARTIAL_FLAG$3 = 1;
  /** Used for built-in method references. */

  var objectProto$1 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$1 = objectProto$1.hasOwnProperty;
  /**
   * A specialized version of `baseIsEqualDeep` for objects with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */

  function equalObjects$1(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3,
        objProps = getAllKeys(object),
        objLength = objProps.length,
        othProps = getAllKeys(other),
        othLength = othProps.length;

    if (objLength != othLength && !isPartial) {
      return false;
    }

    var index = objLength;

    while (index--) {
      var key = objProps[index];

      if (!(isPartial ? key in other : hasOwnProperty$1.call(other, key))) {
        return false;
      }
    } // Check that cyclic values are equal.


    var objStacked = stack.get(object);
    var othStacked = stack.get(other);

    if (objStacked && othStacked) {
      return objStacked == other && othStacked == object;
    }

    var result = true;
    stack.set(object, other);
    stack.set(other, object);
    var skipCtor = isPartial;

    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key],
          othValue = other[key];

      if (customizer) {
        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
      } // Recursively compare objects (susceptible to call stack limits).


      if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
        result = false;
        break;
      }

      skipCtor || (skipCtor = key == 'constructor');
    }

    if (result && !skipCtor) {
      var objCtor = object.constructor,
          othCtor = other.constructor; // Non `Object` object instances with different constructors are not equal.

      if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
        result = false;
      }
    }

    stack['delete'](object);
    stack['delete'](other);
    return result;
  }

  var _equalObjects = equalObjects$1;

  var Stack$1 = _Stack,
      equalArrays = _equalArrays,
      equalByTag = _equalByTag,
      equalObjects = _equalObjects,
      getTag = _getTag,
      isArray$1 = isArray_1,
      isBuffer = isBuffer$4.exports,
      isTypedArray = isTypedArray_1;
  /** Used to compose bitmasks for value comparisons. */

  var COMPARE_PARTIAL_FLAG$2 = 1;
  /** `Object#toString` result references. */

  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      objectTag = '[object Object]';
  /** Used for built-in method references. */

  var objectProto = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty = objectProto.hasOwnProperty;
  /**
   * A specialized version of `baseIsEqual` for arrays and objects which performs
   * deep comparisons and tracks traversed objects enabling objects with circular
   * references to be compared.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} [stack] Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */

  function baseIsEqualDeep$1(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray$1(object),
        othIsArr = isArray$1(other),
        objTag = objIsArr ? arrayTag : getTag(object),
        othTag = othIsArr ? arrayTag : getTag(other);
    objTag = objTag == argsTag ? objectTag : objTag;
    othTag = othTag == argsTag ? objectTag : othTag;
    var objIsObj = objTag == objectTag,
        othIsObj = othTag == objectTag,
        isSameTag = objTag == othTag;

    if (isSameTag && isBuffer(object)) {
      if (!isBuffer(other)) {
        return false;
      }

      objIsArr = true;
      objIsObj = false;
    }

    if (isSameTag && !objIsObj) {
      stack || (stack = new Stack$1());
      return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }

    if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {
      var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
          othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object,
            othUnwrapped = othIsWrapped ? other.value() : other;
        stack || (stack = new Stack$1());
        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
      }
    }

    if (!isSameTag) {
      return false;
    }

    stack || (stack = new Stack$1());
    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
  }

  var _baseIsEqualDeep = baseIsEqualDeep$1;

  var baseIsEqualDeep = _baseIsEqualDeep,
      isObjectLike$1 = isObjectLike_1;
  /**
   * The base implementation of `_.isEqual` which supports partial comparisons
   * and tracks traversed objects.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @param {boolean} bitmask The bitmask flags.
   *  1 - Unordered comparison
   *  2 - Partial comparison
   * @param {Function} [customizer] The function to customize comparisons.
   * @param {Object} [stack] Tracks traversed `value` and `other` objects.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   */

  function baseIsEqual$2(value, other, bitmask, customizer, stack) {
    if (value === other) {
      return true;
    }

    if (value == null || other == null || !isObjectLike$1(value) && !isObjectLike$1(other)) {
      return value !== value && other !== other;
    }

    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual$2, stack);
  }

  var _baseIsEqual = baseIsEqual$2;

  var Stack = _Stack,
      baseIsEqual$1 = _baseIsEqual;
  /** Used to compose bitmasks for value comparisons. */

  var COMPARE_PARTIAL_FLAG$1 = 1,
      COMPARE_UNORDERED_FLAG$1 = 2;
  /**
   * The base implementation of `_.isMatch` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The object to inspect.
   * @param {Object} source The object of property values to match.
   * @param {Array} matchData The property names, values, and compare flags to match.
   * @param {Function} [customizer] The function to customize comparisons.
   * @returns {boolean} Returns `true` if `object` is a match, else `false`.
   */

  function baseIsMatch$1(object, source, matchData, customizer) {
    var index = matchData.length,
        length = index,
        noCustomizer = !customizer;

    if (object == null) {
      return !length;
    }

    object = Object(object);

    while (index--) {
      var data = matchData[index];

      if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
        return false;
      }
    }

    while (++index < length) {
      data = matchData[index];
      var key = data[0],
          objValue = object[key],
          srcValue = data[1];

      if (noCustomizer && data[2]) {
        if (objValue === undefined && !(key in object)) {
          return false;
        }
      } else {
        var stack = new Stack();

        if (customizer) {
          var result = customizer(objValue, srcValue, key, object, source, stack);
        }

        if (!(result === undefined ? baseIsEqual$1(srcValue, objValue, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, customizer, stack) : result)) {
          return false;
        }
      }
    }

    return true;
  }

  var _baseIsMatch = baseIsMatch$1;

  var isObject$1 = isObject_1;
  /**
   * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` if suitable for strict
   *  equality comparisons, else `false`.
   */

  function isStrictComparable$2(value) {
    return value === value && !isObject$1(value);
  }

  var _isStrictComparable = isStrictComparable$2;

  var isStrictComparable$1 = _isStrictComparable,
      keys = keys_1;
  /**
   * Gets the property names, values, and compare flags of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the match data of `object`.
   */

  function getMatchData$1(object) {
    var result = keys(object),
        length = result.length;

    while (length--) {
      var key = result[length],
          value = object[key];
      result[length] = [key, value, isStrictComparable$1(value)];
    }

    return result;
  }

  var _getMatchData = getMatchData$1;

  /**
   * A specialized version of `matchesProperty` for source values suitable
   * for strict equality comparisons, i.e. `===`.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @param {*} srcValue The value to match.
   * @returns {Function} Returns the new spec function.
   */

  function matchesStrictComparable$2(key, srcValue) {
    return function (object) {
      if (object == null) {
        return false;
      }

      return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
    };
  }

  var _matchesStrictComparable = matchesStrictComparable$2;

  var baseIsMatch = _baseIsMatch,
      getMatchData = _getMatchData,
      matchesStrictComparable$1 = _matchesStrictComparable;
  /**
   * The base implementation of `_.matches` which doesn't clone `source`.
   *
   * @private
   * @param {Object} source The object of property values to match.
   * @returns {Function} Returns the new spec function.
   */

  function baseMatches$1(source) {
    var matchData = getMatchData(source);

    if (matchData.length == 1 && matchData[0][2]) {
      return matchesStrictComparable$1(matchData[0][0], matchData[0][1]);
    }

    return function (object) {
      return object === source || baseIsMatch(object, source, matchData);
    };
  }

  var _baseMatches = baseMatches$1;

  var baseIsEqual = _baseIsEqual,
      get = get_1,
      hasIn = hasIn_1,
      isKey$1 = _isKey,
      isStrictComparable = _isStrictComparable,
      matchesStrictComparable = _matchesStrictComparable,
      toKey$2 = _toKey;
  /** Used to compose bitmasks for value comparisons. */

  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;
  /**
   * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
   *
   * @private
   * @param {string} path The path of the property to get.
   * @param {*} srcValue The value to match.
   * @returns {Function} Returns the new spec function.
   */

  function baseMatchesProperty$1(path, srcValue) {
    if (isKey$1(path) && isStrictComparable(srcValue)) {
      return matchesStrictComparable(toKey$2(path), srcValue);
    }

    return function (object) {
      var objValue = get(object, path);
      return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
    };
  }

  var _baseMatchesProperty = baseMatchesProperty$1;

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */

  function baseProperty$2(key) {
    return function (object) {
      return object == null ? undefined : object[key];
    };
  }

  var _baseProperty = baseProperty$2;

  var baseGet$1 = _baseGet;
  /**
   * A specialized version of `baseProperty` which supports deep paths.
   *
   * @private
   * @param {Array|string} path The path of the property to get.
   * @returns {Function} Returns the new accessor function.
   */

  function basePropertyDeep$1(path) {
    return function (object) {
      return baseGet$1(object, path);
    };
  }

  var _basePropertyDeep = basePropertyDeep$1;

  var baseProperty$1 = _baseProperty,
      basePropertyDeep = _basePropertyDeep,
      isKey = _isKey,
      toKey$1 = _toKey;
  /**
   * Creates a function that returns the value at `path` of a given object.
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Util
   * @param {Array|string} path The path of the property to get.
   * @returns {Function} Returns the new accessor function.
   * @example
   *
   * var objects = [
   *   { 'a': { 'b': 2 } },
   *   { 'a': { 'b': 1 } }
   * ];
   *
   * _.map(objects, _.property('a.b'));
   * // => [2, 1]
   *
   * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
   * // => [1, 2]
   */

  function property$1(path) {
    return isKey(path) ? baseProperty$1(toKey$1(path)) : basePropertyDeep(path);
  }

  var property_1 = property$1;

  var baseMatches = _baseMatches,
      baseMatchesProperty = _baseMatchesProperty,
      identity = identity_1,
      isArray = isArray_1,
      property = property_1;
  /**
   * The base implementation of `_.iteratee`.
   *
   * @private
   * @param {*} [value=_.identity] The value to convert to an iteratee.
   * @returns {Function} Returns the iteratee.
   */

  function baseIteratee$1(value) {
    // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
    // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
    if (typeof value == 'function') {
      return value;
    }

    if (value == null) {
      return identity;
    }

    if (_typeof(value) == 'object') {
      return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
    }

    return property(value);
  }

  var _baseIteratee = baseIteratee$1;

  var toNumber = toNumber_1;
  /** Used as references for various `Number` constants. */

  var INFINITY = 1 / 0,
      MAX_INTEGER = 1.7976931348623157e+308;
  /**
   * Converts `value` to a finite number.
   *
   * @static
   * @memberOf _
   * @since 4.12.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {number} Returns the converted number.
   * @example
   *
   * _.toFinite(3.2);
   * // => 3.2
   *
   * _.toFinite(Number.MIN_VALUE);
   * // => 5e-324
   *
   * _.toFinite(Infinity);
   * // => 1.7976931348623157e+308
   *
   * _.toFinite('3.2');
   * // => 3.2
   */

  function toFinite$2(value) {
    if (!value) {
      return value === 0 ? value : 0;
    }

    value = toNumber(value);

    if (value === INFINITY || value === -INFINITY) {
      var sign = value < 0 ? -1 : 1;
      return sign * MAX_INTEGER;
    }

    return value === value ? value : 0;
  }

  var toFinite_1 = toFinite$2;

  var toFinite$1 = toFinite_1;
  /**
   * Converts `value` to an integer.
   *
   * **Note:** This method is loosely based on
   * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {number} Returns the converted integer.
   * @example
   *
   * _.toInteger(3.2);
   * // => 3
   *
   * _.toInteger(Number.MIN_VALUE);
   * // => 0
   *
   * _.toInteger(Infinity);
   * // => 1.7976931348623157e+308
   *
   * _.toInteger('3.2');
   * // => 3
   */

  function toInteger$3(value) {
    var result = toFinite$1(value),
        remainder = result % 1;
    return result === result ? remainder ? result - remainder : result : 0;
  }

  var toInteger_1 = toInteger$3;

  var baseFindIndex = _baseFindIndex,
      baseIteratee = _baseIteratee,
      toInteger$2 = toInteger_1;
  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeMax$2 = Math.max;
  /**
   * This method is like `_.find` except that it returns the index of the first
   * element `predicate` returns truthy for instead of the element itself.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {Function} [predicate=_.identity] The function invoked per iteration.
   * @param {number} [fromIndex=0] The index to search from.
   * @returns {number} Returns the index of the found element, else `-1`.
   * @example
   *
   * var users = [
   *   { 'user': 'barney',  'active': false },
   *   { 'user': 'fred',    'active': false },
   *   { 'user': 'pebbles', 'active': true }
   * ];
   *
   * _.findIndex(users, function(o) { return o.user == 'barney'; });
   * // => 0
   *
   * // The `_.matches` iteratee shorthand.
   * _.findIndex(users, { 'user': 'fred', 'active': false });
   * // => 1
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.findIndex(users, ['active', false]);
   * // => 0
   *
   * // The `_.property` iteratee shorthand.
   * _.findIndex(users, 'active');
   * // => 2
   */

  function findIndex(array, predicate, fromIndex) {
    var length = array == null ? 0 : array.length;

    if (!length) {
      return -1;
    }

    var index = fromIndex == null ? 0 : toInteger$2(fromIndex);

    if (index < 0) {
      index = nativeMax$2(length + index, 0);
    }

    return baseFindIndex(array, baseIteratee(predicate), index);
  }

  var findIndex_1 = findIndex;

  function returnFileSize(number) {
    if (number < 1024) {
      return "".concat(number, " Bytes");
    }

    if (number >= 1024 && number < 1048576) {
      return "".concat((number / 1024).toFixed(1), " KB");
    }

    if (number >= 1048576) {
      return "".concat((number / 1048576).toFixed(1), " MB");
    }
  }
  function getCurrentDate() {
    var d = new Date();
    var month = d.getMonth() + 1;
    month = month < 10 ? "0".concat(month) : month;
    return "".concat(d.getFullYear(), "-").concat(month, "-").concat(d.getDate(), " ").concat(d.getHours(), ":").concat(d.getMinutes(), ":").concat(d.getSeconds());
  }
  function abridgeName() {
    var inputName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
    var leftCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;
    var rightcount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 7;
    var name = inputName;
    var leftLength = 0;
    var rightLength = 0;

    for (var i = 0; i < name.length; i++) {
      var w = name[i];
      var isCn = escape(w).indexOf("%u") === 0;

      if (i < leftCount * 2 && leftLength < leftCount) {
        isCn ? leftLength += 1 : leftLength += 2;
      } else if (i > i - rightcount && rightLength < rightcount) {
        isCn ? rightLength += 1 : rightLength += 2;
      }
    }

    return name.replace(new RegExp("^(.{".concat(leftLength, "})(.+)(.{").concat(rightLength, "})$")), "$1\u2026$3");
  }
  function updateFileList(file, fileList) {
    var nextFileList = _toConsumableArray(fileList);

    var fileIndex = nextFileList.findIndex(function (_ref) {
      var uid = _ref.uid;
      return uid === file.uid;
    });

    if (fileIndex === -1) {
      nextFileList.push(file);
    } else {
      nextFileList[fileIndex] = file;
    }

    return nextFileList;
  }
  function finishUpload(state) {
    return ["success", "fail"].includes(state);
  }
  function isSingleFile() {
    var multiple = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    var theme = arguments.length > 1 ? arguments[1] : undefined;
    return !multiple && ["file", "file-input", "image"].includes(theme);
  }

  var DraggerProgress = function DraggerProgress(props) {
    var file = props.file,
        onUpload = props.onUpload,
        onRemove = props.onRemove,
        display = props.display,
        onTrigger = props.onTrigger;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var reUpload = function reUpload(e) {
      onRemove === null || onRemove === void 0 ? void 0 : onRemove({
        e: e,
        file: file,
        index: 0
      });
      onTrigger === null || onTrigger === void 0 ? void 0 : onTrigger();
    };

    var showResultOperate = React__default["default"].useMemo(function () {
      return ["success", "fail"].includes(file === null || file === void 0 ? void 0 : file.status);
    }, [file]);

    var handleRemove = function handleRemove(e) {
      onRemove === null || onRemove === void 0 ? void 0 : onRemove({
        e: e,
        file: file,
        index: 0
      });
    };

    var renderUploading = React.useCallback(function () {
      if ((file === null || file === void 0 ? void 0 : file.status) === "fail") {
        return /* @__PURE__ */React__default["default"].createElement(ErrorCircleFilledIcon, null);
      }

      if ((file === null || file === void 0 ? void 0 : file.status) === "progress") {
        return /* @__PURE__ */React__default["default"].createElement("div", {
          className: "t-upload__single-progress"
        }, /* @__PURE__ */React__default["default"].createElement(Loading, {
          loading: true,
          size: "small"
        }), /* @__PURE__ */React__default["default"].createElement("span", {
          className: "t-upload__single-percent"
        }, Math.min((file === null || file === void 0 ? void 0 : file.percent) || 0, 99), "%"));
      }
    }, [file]);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-upload__dragger-progress")
    }, display === "image" && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "t-upload__dragger-img-wrap"
    }, file && /* @__PURE__ */React__default["default"].createElement("img", {
      src: (file === null || file === void 0 ? void 0 : file.url) || "default.png",
      alt: ""
    })), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-upload__dragger-progress-info")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-upload__dragger-text")
    }, /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-upload__single-name")
    }, abridgeName(file === null || file === void 0 ? void 0 : file.name)), (file === null || file === void 0 ? void 0 : file.status) !== "success" && renderUploading(), (file === null || file === void 0 ? void 0 : file.status) === "success" && /* @__PURE__ */React__default["default"].createElement(CheckCircleFilledIcon, null)), /* @__PURE__ */React__default["default"].createElement("small", {
      className: "".concat(classPrefix, "-size-s")
    }, "\u6587\u4EF6\u5927\u5C0F\uFF1A", returnFileSize(file === null || file === void 0 ? void 0 : file.size)), /* @__PURE__ */React__default["default"].createElement("small", {
      className: "".concat(classPrefix, "-size-s")
    }, "\u4E0A\u4F20\u65E5\u671F\uFF1A", getCurrentDate()), !["success", "fail"].includes(file === null || file === void 0 ? void 0 : file.status) && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-upload__dragger-btns")
    }, /* @__PURE__ */React__default["default"].createElement(Button, {
      theme: "primary",
      variant: "text",
      className: "".concat(classPrefix, "-upload__dragger-progress-cancel"),
      onClick: handleRemove
    }, "\u53D6\u6D88\u4E0A\u4F20"), /* @__PURE__ */React__default["default"].createElement(Button, {
      theme: "primary",
      variant: "text",
      onClick: onUpload
    }, "\u70B9\u51FB\u4E0A\u4F20")), showResultOperate && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "t-upload__dragger-btns"
    }, /* @__PURE__ */React__default["default"].createElement(Button, {
      theme: "primary",
      variant: "text",
      className: "t-upload__dragger-progress-cancel",
      onClick: reUpload
    }, "\u91CD\u65B0\u4E0A\u4F20"), /* @__PURE__ */React__default["default"].createElement(Button, {
      theme: "primary",
      variant: "text",
      onClick: handleRemove
    }, "\u5220\u9664"))));
  };

  var Dragger = function Dragger(props) {
    var file = props.file,
        display = props.display,
        _onUpload = props.onUpload,
        onRemove = props.onRemove,
        customDraggerRender = props.customDraggerRender;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        dragActive = _useState2[0],
        setDragActive = _useState2[1];

    var target = React__default["default"].useRef();
    var classes = classNames$1("".concat(classPrefix, "-upload__dragger"), !file ? "".concat(classPrefix, "-upload__dragger-center") : "", (file === null || file === void 0 ? void 0 : file.status) === "fail" ? "".concat(classPrefix, "-upload__dragger-error") : "");
    var defaultDragElement = React__default["default"].useMemo(function () {
      var unActiveElement = /* @__PURE__ */React__default["default"].createElement("div", null, /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(classPrefix, "-upload--highlight")
      }, "\u70B9\u51FB\u4E0A\u4F20"), /* @__PURE__ */React__default["default"].createElement("span", null, "\xA0\xA0/\xA0\xA0\u62D6\u62FD\u5230\u6B64\u533A\u57DF"));
      var activeElement = /* @__PURE__ */React__default["default"].createElement("div", null, "\u91CA\u653E\u9F20\u6807");
      return dragActive ? activeElement : unActiveElement;
    }, [classPrefix, dragActive]);
    var dragElement = React__default["default"].useMemo(function () {
      var content;

      if (file && display !== "custom") {
        content = /* @__PURE__ */React__default["default"].createElement(DraggerProgress, {
          onRemove: onRemove,
          display: display,
          onTrigger: props.onTrigger,
          file: file,
          onUpload: function onUpload() {
            _onUpload === null || _onUpload === void 0 ? void 0 : _onUpload(file);
          }
        });
      } else {
        content = /* @__PURE__ */React__default["default"].createElement("div", {
          className: "".concat(classPrefix, "-upload__trigger"),
          onClick: props.onTrigger
        }, (customDraggerRender === null || customDraggerRender === void 0 ? void 0 : customDraggerRender({
          dragActive: dragActive
        })) || defaultDragElement);
      }

      return content;
    }, [classPrefix, defaultDragElement, display, dragActive, file, onRemove, _onUpload, props, customDraggerRender]);

    var handleDrop = function handleDrop(event) {
      var _props$onChange, _props$onDragleave;

      event.preventDefault();
      (_props$onChange = props.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call(props, event.dataTransfer.files);
      (_props$onDragleave = props.onDragleave) === null || _props$onDragleave === void 0 ? void 0 : _props$onDragleave.call(props, event);
      setDragActive(false);
    };

    var handleDragenter = function handleDragenter(event) {
      var _props$onDragenter;

      event.preventDefault();
      (_props$onDragenter = props.onDragenter) === null || _props$onDragenter === void 0 ? void 0 : _props$onDragenter.call(props, event);
      setDragActive(true);
    };

    var handleDragleave = function handleDragleave(event) {
      var _props$onDragleave2;

      if (!target.current) return;
      event.preventDefault();
      (_props$onDragleave2 = props.onDragleave) === null || _props$onDragleave2 === void 0 ? void 0 : _props$onDragleave2.call(props, event);
      setDragActive(false);
    };

    var handleDragover = function handleDragover(event) {
      event.preventDefault();
    };

    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: target,
      className: classes,
      onDrop: handleDrop,
      onDragEnter: handleDragenter,
      onDragOver: handleDragover,
      onDragLeave: handleDragleave
    }, dragElement);
  };

  var UploadTrigger = function UploadTrigger(props) {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-upload__trigger"),
      onClick: props.onClick
    }, props.children ? props.children : /* @__PURE__ */React__default["default"].createElement(Button, {
      icon: /* @__PURE__ */React__default["default"].createElement(UploadIcon, null),
      variant: "outline"
    }, "\u9009\u62E9\u6587\u4EF6"));
  };

  var Tips = function Tips(props) {
    var _props$type = props.type,
        type = _props$type === void 0 ? "default" : _props$type,
        children = props.children;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var tipsClass = classNames$1("".concat(classPrefix, "-upload__tips"), "".concat(classPrefix, "-size-s"), type === "error" ? "".concat(classPrefix, "-upload__tips-error") : null);
    return /* @__PURE__ */React__default["default"].createElement("small", {
      className: tipsClass
    }, children);
  };

  function xhr(_ref) {
    var action = _ref.action,
        _ref$withCredentials = _ref.withCredentials,
        withCredentials = _ref$withCredentials === void 0 ? false : _ref$withCredentials,
        _ref$headers = _ref.headers,
        headers = _ref$headers === void 0 ? {} : _ref$headers,
        _ref$data = _ref.data,
        data = _ref$data === void 0 ? {} : _ref$data,
        file = _ref.file,
        _ref$name = _ref.name,
        name = _ref$name === void 0 ? "file" : _ref$name,
        onError = _ref.onError,
        onProgress = _ref.onProgress,
        onSuccess = _ref.onSuccess;
    var xhr2 = new XMLHttpRequest();

    if (withCredentials) {
      xhr2.withCredentials = true;
    }

    var formData = new FormData();
    var sendData = typeof data === "function" ? data(file) : data;
    Object.keys(sendData).forEach(function (key) {
      formData.append(key, data[key]);
    });
    formData.append(name, file.raw);
    xhr2.open("post", action, true);
    Object.keys(headers).forEach(function (key) {
      xhr2.setRequestHeader(key, headers[key]);
    });

    xhr2.onerror = function (event) {
      return onError({
        event: event,
        file: file
      });
    };

    if (xhr2.upload) {
      xhr2.upload.onprogress = function (event) {
        var percent = 0;

        if (event.total > 0) {
          percent = Math.round(event.loaded / event.total * 100);
        }

        onProgress({
          event: event,
          percent: percent,
          file: file
        });
      };
    }

    xhr2.onload = function (event) {
      var response;
      var isFail = xhr2.status < 200 || xhr2.status >= 300;

      if (isFail) {
        return onError({
          event: event,
          file: file,
          response: response
        });
      }

      var text = xhr2.responseText || xhr2.response;

      try {
        response = JSON.parse(text);
      } catch (e) {
        response = text;
      }

      onSuccess({
        event: event,
        file: file,
        response: response
      });
    };

    xhr2.send(formData);
    return xhr2;
  }

  var SingleFile = function SingleFile(props) {
    var _props$display = props.display,
        display = _props$display === void 0 ? "file" : _props$display,
        onRemove = props.onRemove,
        file = props.file,
        showUploadProgress = props.showUploadProgress;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var fileClass = classNames$1("".concat(classPrefix, "-upload__single"), "".concat(classPrefix, "-upload__single-").concat(display));
    var showProgress = showUploadProgress && file && file.status !== "success";
    var inputName = file === null || file === void 0 ? void 0 : file.name;
    var handleRemove = React.useCallback(function (e) {
      onRemove === null || onRemove === void 0 ? void 0 : onRemove({
        e: e,
        file: file,
        index: 0
      });
    }, [file, onRemove]);
    var renderProgress = React.useCallback(function () {
      if ((file === null || file === void 0 ? void 0 : file.status) === "fail") {
        return /* @__PURE__ */React__default["default"].createElement(ErrorCircleFilledIcon, null);
      }

      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-upload__single-progress")
      }, /* @__PURE__ */React__default["default"].createElement(Loading, {
        loading: true,
        size: "small"
      }), /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(classPrefix, "-upload__single-percent")
      }, Math.min((file === null || file === void 0 ? void 0 : file.percent) || 0, 99), "%"));
    }, [classPrefix, file]);
    var renderFilePreviewAsText = React.useCallback(function () {
      if (!inputName) return;
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-upload__single-display-text ").concat(classPrefix, "-upload__display-text--margin")
      }, /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(classPrefix, "-upload__single-name")
      }, inputName), showProgress ? renderProgress() : /* @__PURE__ */React__default["default"].createElement(CloseCircleFilledIcon, {
        className: "".concat(classPrefix, "-upload__icon-delete"),
        onClick: handleRemove
      }));
    }, [classPrefix, inputName, renderProgress, showProgress, handleRemove]);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: fileClass
    }, props.children, display === "file" && renderFilePreviewAsText());
  };

  var BooleanRender = function BooleanRender(props) {
    var children = props.children,
        boolExpression = props.boolExpression,
        _props$falseRender = props.falseRender,
        falseRender = _props$falseRender === void 0 ? function () {
      return null;
    } : _props$falseRender;
    return /* @__PURE__ */React__default["default"].createElement(React.Fragment, null, boolExpression ? children : falseRender());
  };

  var ImageCard = function ImageCard(props) {
    var files = props.files,
        _props$multiple = props.multiple,
        multiple = _props$multiple === void 0 ? false : _props$multiple,
        _props$max = props.max,
        max = _props$max === void 0 ? 0 : _props$max,
        onRemove = props.onRemove,
        showUploadProgress = props.showUploadProgress;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        showImg = _useState2[0],
        setShowImg = _useState2[1];

    var _useState3 = React.useState(),
        _useState4 = _slicedToArray(_useState3, 2),
        imgURL = _useState4[0],
        setImgURL = _useState4[1];

    var preview = function preview(file) {
      setShowImg(true);
      setImgURL(file.url);
    };

    var showTrigger = React__default["default"].useMemo(function () {
      if (multiple) {
        return !max || files.length < max;
      }

      return !(files && files[0]);
    }, [files, max, multiple]);
    return /* @__PURE__ */React__default["default"].createElement(React.Fragment, null, /* @__PURE__ */React__default["default"].createElement(Dialog, {
      visible: showImg,
      showOverlay: true,
      width: "auto",
      top: "10%",
      className: "".concat(classPrefix, "-upload__dialog"),
      footer: false,
      header: false,
      onClose: function onClose() {
        setShowImg(false);
        setImgURL(null);
      }
    }, /* @__PURE__ */React__default["default"].createElement("p", {
      className: "".concat(classPrefix, "-dialog__dialog-body-img-box")
    }, /* @__PURE__ */React__default["default"].createElement("img", {
      src: imgURL,
      alt: ""
    }))), /* @__PURE__ */React__default["default"].createElement("ul", {
      className: "".concat(classPrefix, "-upload__card")
    }, /* @__PURE__ */React__default["default"].createElement(BooleanRender, {
      boolExpression: !!files
    }, files.map(function (file, index) {
      return /* @__PURE__ */React__default["default"].createElement("li", {
        className: "".concat(classPrefix, "-upload__card-item ").concat(classPrefix, "-is--background"),
        key: index
      }, /* @__PURE__ */React__default["default"].createElement(BooleanRender, {
        falseRender: function falseRender() {
          return /* @__PURE__ */React__default["default"].createElement("div", {
            className: "".concat(classPrefix, "-upload__card-content ").concat(classPrefix, "-upload__card-box")
          }, /* @__PURE__ */React__default["default"].createElement("img", {
            className: "".concat(classPrefix, "-upload__card-image"),
            src: file.url
          }), /* @__PURE__ */React__default["default"].createElement("div", {
            className: "".concat(classPrefix, "-upload__card-mask")
          }, /* @__PURE__ */React__default["default"].createElement("span", {
            className: "".concat(classPrefix, "-upload__card-mask-item"),
            onClick: function onClick(e) {
              return e.stopPropagation();
            }
          }, /* @__PURE__ */React__default["default"].createElement(BrowseIcon, {
            onClick: function onClick() {
              preview(file);
            }
          })), /* @__PURE__ */React__default["default"].createElement("span", {
            className: "".concat(classPrefix, "-upload__card-mask-item-divider")
          }), /* @__PURE__ */React__default["default"].createElement("span", {
            className: "".concat(classPrefix, "-upload__card-mask-item"),
            onClick: function onClick(e) {
              return e.stopPropagation();
            }
          }, /* @__PURE__ */React__default["default"].createElement(DeleteIcon, {
            onClick: function onClick(e) {
              onRemove === null || onRemove === void 0 ? void 0 : onRemove({
                e: e,
                file: file,
                index: index
              });
            }
          }))));
        },
        boolExpression: showUploadProgress && !finishUpload(file.status)
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-upload__card-container ").concat(classPrefix, "-upload__card-box")
      }, /* @__PURE__ */React__default["default"].createElement(Loading, {
        loading: true,
        size: "medium"
      }), /* @__PURE__ */React__default["default"].createElement("p", null, "\u4E0A\u4F20\u4E2D ", Math.min(files[0].percent, 99), "%"))));
    })), /* @__PURE__ */React__default["default"].createElement(BooleanRender, {
      boolExpression: showTrigger
    }, /* @__PURE__ */React__default["default"].createElement("li", {
      className: "".concat(classPrefix, "-upload__card-item ").concat(classPrefix, "-is--background"),
      onClick: props.onTrigger
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-upload__card-container ").concat(classPrefix, "-upload__card-box")
    }, /* @__PURE__ */React__default["default"].createElement(AddIcon, null), /* @__PURE__ */React__default["default"].createElement("p", {
      className: "".concat(classPrefix, "-size-s")
    }, "\u70B9\u51FB\u4E0A\u4F20\u56FE\u7247"))))));
  };

  var ImgList = function ImgList(props) {
    var showInitial = props.showInitial,
        listFiles = props.listFiles,
        renderDragger = props.renderDragger,
        onImgPreview = props.onImgPreview,
        remove = props.remove;

    var _useConfig = useConfig$1(),
        prefix = _useConfig.classPrefix;

    var UPLOAD_NAME = "".concat(prefix, "-upload");
    var UPLOAD_NAME_CARD = "".concat(UPLOAD_NAME, "__card");
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(UPLOAD_NAME, "__flow-card-area")
    }, showInitial && renderDragger(), !!listFiles.length && /* @__PURE__ */React__default["default"].createElement("ul", {
      className: "".concat(UPLOAD_NAME_CARD, " clearfix")
    }, listFiles.map(function (file, index) {
      var _classNames;

      return /* @__PURE__ */React__default["default"].createElement("li", {
        className: "".concat(UPLOAD_NAME_CARD, "-item"),
        key: index
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1((_classNames = {}, _defineProperty$2(_classNames, "".concat(UPLOAD_NAME_CARD, "-content"), true), _defineProperty$2(_classNames, "".concat(UPLOAD_NAME_CARD, "-content-border"), file.status !== "waiting"), _classNames))
      }, file.status === "fail" && /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(UPLOAD_NAME_CARD, "-status-wrap")
      }, /* @__PURE__ */React__default["default"].createElement(ErrorCircleFilledIcon, null), /* @__PURE__ */React__default["default"].createElement("p", null, "\u4E0A\u4F20\u5931\u8D25")), file.status === "progress" && /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(UPLOAD_NAME_CARD, "-status-wrap")
      }, /* @__PURE__ */React__default["default"].createElement(Loading, null), /* @__PURE__ */React__default["default"].createElement("p", null, "\u4E0A\u4F20\u4E2D ", Math.min(file.percent, 99))), (["waiting", "success"].includes(file.status) || !file.status && file.url) && /* @__PURE__ */React__default["default"].createElement("img", {
        className: "".concat(UPLOAD_NAME_CARD, "-image"),
        src: file.url || "//tdesign.gtimg.com/tdesign-default-img.png",
        alt: ""
      }), /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(UPLOAD_NAME_CARD, "-mask")
      }, file.url && /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(UPLOAD_NAME_CARD, "__mask__item")
      }, /* @__PURE__ */React__default["default"].createElement(BrowseIcon, {
        onClick: function onClick(e) {
          return onImgPreview(e, file);
        }
      }), /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(UPLOAD_NAME_CARD, "__mask__item-divider")
      })), /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(UPLOAD_NAME_CARD, "-mask__item"),
        onClick: function onClick(e) {
          return remove({
            e: e,
            index: index,
            file: file
          });
        }
      }, /* @__PURE__ */React__default["default"].createElement(DeleteIcon, null)))), /* @__PURE__ */React__default["default"].createElement("p", {
        className: "".concat(UPLOAD_NAME_CARD, "-name")
      }, abridgeName(file.name)));
    })));
  };

  var FileList = function FileList(props) {
    var listFiles = props.listFiles,
        showInitial = props.showInitial,
        renderDragger = props.renderDragger,
        showUploadProgress = props.showUploadProgress,
        remove = props.remove;

    var _useConfig = useConfig$1(),
        prefix = _useConfig.classPrefix;

    var UPLOAD_NAME = "".concat(prefix, "-upload");

    var renderStatus = function renderStatus(file) {
      var STATUS_MAP = {
        success: {
          icon: /* @__PURE__ */React__default["default"].createElement(CheckCircleFilledIcon, null),
          text: "\u4E0A\u4F20\u6210\u529F"
        },
        fail: {
          icon: /* @__PURE__ */React__default["default"].createElement(ErrorCircleFilledIcon, null),
          text: "\u4E0A\u4F20\u5931\u8D25"
        },
        progress: {
          icon: /* @__PURE__ */React__default["default"].createElement(Loading, null),
          text: "\u4E0A\u4F20\u4E2D ".concat(Math.min(file.percent, 99), "%")
        },
        waiting: {
          icon: /* @__PURE__ */React__default["default"].createElement(TimeFilledIcon, null),
          text: "\u5F85\u4E0A\u4F20"
        }
      };
      if (file.status === "progress" && !showUploadProgress) return null;
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(UPLOAD_NAME, "__flow-status")
      }, STATUS_MAP[file.status].icon, /* @__PURE__ */React__default["default"].createElement("span", null, STATUS_MAP[file.status].text));
    };

    return /* @__PURE__ */React__default["default"].createElement("table", {
      className: "".concat(UPLOAD_NAME, "__flow-table")
    }, /* @__PURE__ */React__default["default"].createElement("thead", null, /* @__PURE__ */React__default["default"].createElement("tr", null, /* @__PURE__ */React__default["default"].createElement("th", null, "\u6587\u4EF6\u540D"), /* @__PURE__ */React__default["default"].createElement("th", null, "\u5927\u5C0F"), /* @__PURE__ */React__default["default"].createElement("th", null, "\u72B6\u6001"), /* @__PURE__ */React__default["default"].createElement("th", null, "\u64CD\u4F5C"))), /* @__PURE__ */React__default["default"].createElement("tbody", null, showInitial && /* @__PURE__ */React__default["default"].createElement("tr", null, /* @__PURE__ */React__default["default"].createElement("td", {
      colSpan: 4
    }, renderDragger())), listFiles.map(function (file, index) {
      return /* @__PURE__ */React__default["default"].createElement("tr", {
        key: index
      }, /* @__PURE__ */React__default["default"].createElement("td", null, abridgeName(file.name, 7, 10)), /* @__PURE__ */React__default["default"].createElement("td", null, returnFileSize(file.size)), /* @__PURE__ */React__default["default"].createElement("td", null, renderStatus(file)), /* @__PURE__ */React__default["default"].createElement("td", null, /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(UPLOAD_NAME, "__flow-button"),
        onClick: function onClick(e) {
          return remove({
            e: e,
            index: index,
            file: file
          });
        }
      }, "\u5220\u9664")));
    })));
  };

  var Index = function Index(props) {
    var _classNames;

    var listFiles = props.files,
        _props$toUploadFiles = props.toUploadFiles,
        toUploadFiles = _props$toUploadFiles === void 0 ? [] : _props$toUploadFiles,
        _props$showUploadProg = props.showUploadProgress,
        showUploadProgress = _props$showUploadProg === void 0 ? false : _props$showUploadProg,
        placeholder = props.placeholder,
        display = props.display,
        onImgPreview = props.onImgPreview,
        remove = props.remove,
        upload = props.upload,
        cancel = props.cancel,
        onChange = props.onChange,
        onDragenter = props.onDragenter,
        onDragleave = props.onDragleave,
        _props$children = props.children,
        children = _props$children === void 0 ? null : _props$children;
    var target = React__default["default"].useRef();

    var _useConfig = useConfig$1(),
        prefix = _useConfig.classPrefix;

    var UPLOAD_NAME = "".concat(prefix, "-upload");

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        dragActive = _useState2[0],
        setDragActive = _useState2[1];

    var showInitial = !listFiles.length;
    var failedList = toUploadFiles.filter(function (file) {
      return file.status === "fail";
    });
    var isUploading = toUploadFiles.filter(function (file) {
      return file.status === "progress";
    }).length > 0;
    var allowUpload = toUploadFiles.length > 0 && !isUploading;
    var uploadText = failedList.length ? "\u91CD\u65B0\u4E0A\u4F20" : "\u5F00\u59CB\u4E0A\u4F20";
    if (isUploading) uploadText = "\u4E0A\u4F20\u4E2D...";

    var handleDrop = function handleDrop(event) {
      event.preventDefault();
      onChange === null || onChange === void 0 ? void 0 : onChange(event.dataTransfer.files);
      onDragleave === null || onDragleave === void 0 ? void 0 : onDragleave(event);
      setDragActive(false);
    };

    var handleDragenter = function handleDragenter(event) {
      event.preventDefault();
      onDragenter === null || onDragenter === void 0 ? void 0 : onDragenter(event);
      setDragActive(true);
    };

    var handleDragleave = function handleDragleave(event) {
      if (event.target !== target.current) return;
      event.preventDefault();
      onDragleave === null || onDragleave === void 0 ? void 0 : onDragleave(event);
      setDragActive(false);
    };

    var handleDragover = function handleDragover(event) {
      event.preventDefault();
    };

    var renderDragger = function renderDragger() {
      return /* @__PURE__ */React__default["default"].createElement("div", {
        ref: target,
        className: "".concat(UPLOAD_NAME, "__flow-empty"),
        onDrop: handleDrop,
        onDragEnter: handleDragenter,
        onDragOver: handleDragover,
        onDragLeave: handleDragleave
      }, dragActive ? "\u91CA\u653E\u9F20\u6807" : "\u70B9\u51FB\u4E0A\u65B9\u201C\u9009\u62E9\u6587\u4EF6\u201D\u6216\u5C06\u6587\u4EF6\u62D6\u62FD\u5230\u6B64\u533A\u57DF");
    };

    var wrapperClassNames = classNames$1((_classNames = {}, _defineProperty$2(_classNames, "".concat(UPLOAD_NAME, "__flow"), true), _defineProperty$2(_classNames, "".concat(UPLOAD_NAME, "__flow-").concat(display), true), _classNames));
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: wrapperClassNames
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(UPLOAD_NAME, "__flow-op")
    }, children, /* @__PURE__ */React__default["default"].createElement("small", {
      className: "".concat(UPLOAD_NAME, "__small ").concat(UPLOAD_NAME, "__flow-placeholder")
    }, placeholder)), /* @__PURE__ */React__default["default"].createElement(BooleanRender, {
      boolExpression: display === "file-flow"
    }, /* @__PURE__ */React__default["default"].createElement(FileList, {
      listFiles: listFiles,
      showInitial: showInitial,
      renderDragger: renderDragger,
      showUploadProgress: showUploadProgress,
      remove: remove
    })), /* @__PURE__ */React__default["default"].createElement(BooleanRender, {
      boolExpression: display === "image-flow"
    }, /* @__PURE__ */React__default["default"].createElement(ImgList, {
      listFiles: listFiles,
      showInitial: showInitial,
      renderDragger: renderDragger,
      onImgPreview: onImgPreview,
      remove: remove
    })), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(UPLOAD_NAME, "__flow-bottom")
    }, /* @__PURE__ */React__default["default"].createElement(Button, {
      theme: "default",
      onClick: cancel
    }, "\u53D6\u6D88"), /* @__PURE__ */React__default["default"].createElement(Button, {
      disabled: !allowUpload,
      theme: "primary",
      onClick: function onClick(e) {
        return upload(toUploadFiles, e);
      }
    }, uploadText)));
  };

  var _excluded$6 = ["value", "defaultFiles", "files", "onChange"];

  function ownKeys$n(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$n(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$n(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$n(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function useDefaultValue(props, defaultDefaultValue) {
    var value = props.value,
        defaultFiles = props.defaultFiles,
        files = props.files,
        _props$onChange = props.onChange,
        onChange = _props$onChange === void 0 ? noop : _props$onChange,
        restProps = _objectWithoutProperties$1(props, _excluded$6);

    var controlledValue = React.useMemo(function () {
      var formValue = value !== void 0 && !isArray_1(value) ? [] : value;
      return formValue || files;
    }, [files, value]);

    var _useDefault = useDefault(controlledValue, typeof defaultFiles === "undefined" ? defaultDefaultValue : defaultFiles, onChange),
        _useDefault2 = _slicedToArray(_useDefault, 2),
        finalValue = _useDefault2[0],
        finalOnChange = _useDefault2[1];

    return _objectSpread$n({
      files: finalValue,
      onChange: finalOnChange
    }, restProps);
  }

  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function ownKeys$m(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$m(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$m(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$m(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var urlCreator = window.webkitURL || window.URL;

  var Upload$1 = function Upload(props, ref) {
    var _useDefaultValue = useDefaultValue(props, []),
        disabled = _useDefaultValue.disabled,
        multiple = _useDefaultValue.multiple,
        accept = _useDefaultValue.accept,
        draggable = _useDefaultValue.draggable,
        placeholder = _useDefaultValue.placeholder,
        _useDefaultValue$max = _useDefaultValue.max,
        max = _useDefaultValue$max === void 0 ? 0 : _useDefaultValue$max,
        _useDefaultValue$name = _useDefaultValue.name,
        name = _useDefaultValue$name === void 0 ? "file" : _useDefaultValue$name,
        _useDefaultValue$them = _useDefaultValue.theme,
        theme = _useDefaultValue$them === void 0 ? "file" : _useDefaultValue$them,
        _useDefaultValue$show = _useDefaultValue.showUploadProgress,
        showUploadProgress = _useDefaultValue$show === void 0 ? true : _useDefaultValue$show,
        action = _useDefaultValue.action,
        tips = _useDefaultValue.tips,
        format = _useDefaultValue.format,
        data = _useDefaultValue.data,
        headers = _useDefaultValue.headers,
        withCredentials = _useDefaultValue.withCredentials,
        _useDefaultValue$auto = _useDefaultValue.autoUpload,
        autoUpload = _useDefaultValue$auto === void 0 ? true : _useDefaultValue$auto,
        formatResponse = _useDefaultValue.formatResponse,
        beforeUpload = _useDefaultValue.beforeUpload,
        onProgress = _useDefaultValue.onProgress,
        onChange = _useDefaultValue.onChange,
        onSuccess = _useDefaultValue.onSuccess,
        onFail = _useDefaultValue.onFail,
        onRemove = _useDefaultValue.onRemove,
        onDragenter = _useDefaultValue.onDragenter,
        onDragleave = _useDefaultValue.onDragleave,
        requestMethod = _useDefaultValue.requestMethod,
        _useDefaultValue$file = _useDefaultValue.files,
        fileList = _useDefaultValue$file === void 0 ? [] : _useDefaultValue$file,
        customDraggerRender = _useDefaultValue.customDraggerRender,
        children = _useDefaultValue.children;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var uploadRef = React.useRef();

    var _useState = React.useState(""),
        _useState2 = _slicedToArray(_useState, 2),
        errorMsg = _useState2[0],
        setErrorMsg = _useState2[1];

    var _useState3 = React.useState(false),
        _useState4 = _slicedToArray(_useState3, 2),
        uploading = _useState4[0],
        setUploading = _useState4[1];

    var _useState5 = React.useState([]),
        _useState6 = _slicedToArray(_useState5, 2),
        toUploadFiles = _useState6[0],
        setToUploadFiles = _useState6[1];

    var showImgDialog = ["image", "image-flow", "custom"].includes(theme);

    var _useState7 = React.useState(false),
        _useState8 = _slicedToArray(_useState7, 2),
        showImg = _useState8[0],
        setShowImg = _useState8[1];

    var _useState9 = React.useState(""),
        _useState10 = _slicedToArray(_useState9, 2),
        imgURL = _useState10[0],
        setImgURL = _useState10[1];

    var closePreview = React.useCallback(function () {
      setShowImg(false);
      setImgURL("");
    }, []);
    var handlePreviewImg = React.useCallback(function (event, file) {
      if (!file.url) throw new Error("Error file");
      setImgURL(file.url);
      setShowImg(true);
    }, []);

    var triggerUpload = function triggerUpload() {
      if (disabled) return;
      uploadRef === null || uploadRef === void 0 ? void 0 : uploadRef.current.click();
    };

    var getLimitedFiles = function getLimitedFiles() {
      var files = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var isSingleMode = isSingleFile(multiple, theme);
      var mergedLen = files.length + fileList.length;

      if (isSingleMode) {
        return files.splice(0, 1);
      }

      if (max > 0) {
        var limitedFiles = mergedLen > max ? files.slice(0, max - fileList.length) : files;
        return fileList.concat(limitedFiles);
      }

      return fileList.concat(files);
    };

    var onError = React.useCallback(function (options) {
      var _res;

      var event = options.event,
          file = options.file,
          response = options.response;
      file.status = "fail";
      var res = response;

      if (typeof formatResponse === "function") {
        res = formatResponse(response, {
          file: file
        });
      }

      setErrorMsg(((_res = res) === null || _res === void 0 ? void 0 : _res.error) || "\u4E0A\u4F20\u5931\u8D25");
      var context = {
        e: event,
        file: file
      };
      var nextFileList = updateFileList(file, fileList);
      onChange === null || onChange === void 0 ? void 0 : onChange(nextFileList, {
        trigger: "upload fail"
      });
      onFail === null || onFail === void 0 ? void 0 : onFail(context);
    }, [fileList, formatResponse, onChange, onFail]);
    var singleDraggable = React.useMemo(function () {
      return !multiple && draggable && ["file", "file-input", "image", "custom"].includes(theme);
    }, [draggable, multiple, theme]);

    var handleSingleRemove = function handleSingleRemove(e) {
      var changeCtx = {
        trigger: "remove"
      };
      setErrorMsg("");
      onChange === null || onChange === void 0 ? void 0 : onChange([], changeCtx);
      onRemove === null || onRemove === void 0 ? void 0 : onRemove({
        e: e
      });
    };

    var handleSuccess = React.useCallback(function (_ref) {
      var e = _ref.e,
          tmpFile = _ref.file,
          response = _ref.response;
      var file = tmpFile;
      file.status = "success";
      file.url = response.url || file.url;
      var context = {
        e: e,
        response: response,
        trigger: "upload-success"
      };
      var nextFileList = updateFileList(file, fileList);
      var sContext = {
        file: file,
        fileList: nextFileList,
        e: e,
        response: response
      };
      setToUploadFiles(function (toUploadFiles2) {
        return toUploadFiles2.filter(function (toUploadFile) {
          return toUploadFile.name !== file.name;
        });
      });
      onChange === null || onChange === void 0 ? void 0 : onChange(nextFileList, context);
      onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(sContext);
    }, [fileList, onChange, onSuccess]);
    var handleProgress = React.useCallback(function (_ref2) {
      var e = _ref2.e,
          file = _ref2.file,
          percent = _ref2.percent,
          _ref2$type = _ref2.type,
          type = _ref2$type === void 0 ? "mock" : _ref2$type;

      var tmpFile = _objectSpread$m({}, file);

      tmpFile.percent = percent;
      var progressCtx = {
        percent: percent,
        e: e,
        file: tmpFile,
        type: type
      };
      var nextFileList = updateFileList(tmpFile, fileList);
      onChange === null || onChange === void 0 ? void 0 : onChange(nextFileList, {
        trigger: "progress"
      });
      onProgress === null || onProgress === void 0 ? void 0 : onProgress(progressCtx);
    }, [fileList, onChange, onProgress]);
    var handleRequestMethod = React.useCallback(function (file) {
      if (typeof requestMethod !== "function") {
        console.warn("TDesign Upload Warn: `requestMethod` must be a function.");
        return;
      }

      requestMethod(file).then(function (res) {
        if (!handleRequestMethodResponse(res)) return;

        if (res.status === "success") {
          return handleSuccess({
            file: file,
            response: res.response
          });
        }

        if (res.status === "fail") {
          var r = res.response || {};
          onError({
            file: file,
            response: _objectSpread$m(_objectSpread$m({}, r), {}, {
              error: res.error
            })
          });
        }
      });
    }, [handleSuccess, onError, requestMethod]);
    var upload = React.useCallback( /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(uploadFile) {
        var file;
        return regenerator.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                file = _objectSpread$m({}, uploadFile);

                if (!(file.status !== "waiting")) {
                  _context.next = 3;
                  break;
                }

                return _context.abrupt("return");

              case 3:
                if (!(!action && !requestMethod)) {
                  _context.next = 6;
                  break;
                }

                console.error("TDesign Upload Error: action or requestMethod is required.");
                return _context.abrupt("return");

              case 6:
                setErrorMsg("");
                file.status = "progress";

                if (!requestMethod) {
                  _context.next = 10;
                  break;
                }

                return _context.abrupt("return", handleRequestMethod(file));

              case 10:
                xhr({
                  action: action,
                  data: data,
                  file: file,
                  name: name,
                  onError: onError,
                  headers: headers,
                  withCredentials: withCredentials,
                  onProgress: handleProgress,
                  onSuccess: handleSuccess
                });

              case 11:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }(), [action, data, handleProgress, handleRequestMethod, handleSuccess, headers, name, onError, requestMethod, withCredentials]);

    function handleRequestMethodResponse(res) {
      if (!res) {
        console.error("TDesign Upload Error: `requestMethodResponse` is required.");
        return false;
      }

      if (!res.status) {
        console.error("TDesign Upload Error: `requestMethodResponse.status` is missing, which value is `success` or `fail`");
        return false;
      }

      if (!["success", "fail"].includes(res.status)) {
        console.error("TDesign Upload Error: `requestMethodResponse.status` must be `success` or `fail`");
        return false;
      }

      if (res.status === "success" && (!res.response || !res.response.url)) {
        console.warn("TDesign Upload Warn: `requestMethodResponse.response.url` is required, when `status` is `success`");
      }

      return true;
    }

    var formatFiles = function formatFiles() {
      var files = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      return files.map(function (fileRaw) {
        var file = typeof format === "function" ? format(fileRaw) : fileRaw;

        var uploadFile = _objectSpread$m({
          raw: fileRaw,
          lastModified: fileRaw.lastModified,
          name: fileRaw.name,
          size: fileRaw.size,
          type: fileRaw.type,
          percent: 0,
          status: "waiting"
        }, file);

        uploadFile.url = urlCreator.createObjectURL(fileRaw);
        return uploadFile;
      });
    };

    var handleBeforeUpload = function handleBeforeUpload(file) {
      if (typeof beforeUpload === "function") {
        var r = beforeUpload(file);
        if (r instanceof Promise) return r;
        return new Promise(function (resolve) {
          return resolve(r);
        });
      }

      return new Promise(function (resolve) {
        return resolve(true);
      });
    };

    var uploadFiles = function uploadFiles() {
      var length = fileList.length;
      var count = 0;
      var newFileList = [];
      fileList.forEach(function (uploadFile) {
        handleBeforeUpload(uploadFile).then(function (canUpload) {
          count += 1;

          if (canUpload) {
            newFileList.push(uploadFile);

            if (autoUpload) {
              upload(uploadFile);
            }
          }

          if (count === length) {
            setToUploadFiles(_toConsumableArray( /* @__PURE__ */new Set([].concat(_toConsumableArray(toUploadFiles), newFileList))));
            onChange === null || onChange === void 0 ? void 0 : onChange(newFileList, {
              trigger: "remove"
            });
          }
        });
      });
    };

    var generateUploadFiles = function generateUploadFiles(files) {
      var uploadList = formatFiles(Array.from(files));
      return getLimitedFiles(uploadList);
    };

    var handleChange = function handleChange(event) {
      if (disabled) return;
      var files = event.target.files;
      var uploadFiles2 = generateUploadFiles(files);
      setUploading(true);
      uploadRef.current.value = "";
      onChange === null || onChange === void 0 ? void 0 : onChange(uploadFiles2, {
        trigger: "upload"
      });
    };

    var handleDragChange = function handleDragChange(files) {
      if (disabled) return;
      var uploadFiles2 = generateUploadFiles(files);
      setUploading(true);
      onChange === null || onChange === void 0 ? void 0 : onChange(uploadFiles2, {
        trigger: "drag"
      });
    };

    var handleDragenter = React.useCallback(function (e) {
      if (disabled) return;
      onDragenter === null || onDragenter === void 0 ? void 0 : onDragenter({
        e: e
      });
    }, [disabled, onDragenter]);
    var handleDragleave = React.useCallback(function (e) {
      if (disabled) return;
      onDragleave === null || onDragleave === void 0 ? void 0 : onDragleave({
        e: e
      });
    }, [disabled, onDragleave]);
    var cancelUpload = React.useCallback(function () {
      if (!fileList[0]) {
        urlCreator === null || urlCreator === void 0 ? void 0 : urlCreator.revokeObjectURL(fileList[0].url);
      }

      uploadRef.current.value = "";
    }, [fileList]);
    var showUploadList = React.useMemo(function () {
      return multiple && ["file-flow", "image-flow"].includes(theme);
    }, [theme, multiple]);
    var showErrorMsg = React.useMemo(function () {
      return !showUploadList && !!errorMsg;
    }, [errorMsg, showUploadList]);
    var showTips = React.useMemo(function () {
      if (theme === "file") {
        var noFile = isEmpty_1(fileList);
        return tips && noFile;
      }

      return Boolean(tips);
    }, [fileList, theme, tips]);
    var handleMultipleRemove = React.useCallback(function (options) {
      var files = fileList.concat();
      files.splice(options.index, 1);
      onChange === null || onChange === void 0 ? void 0 : onChange(files, {
        trigger: "remove"
      });
      onRemove === null || onRemove === void 0 ? void 0 : onRemove(options);
    }, [fileList, onChange, onRemove]);
    var handleListRemove = React.useCallback(function (context) {
      var file = context.file;
      var index = findIndex_1(toUploadFiles, function (o) {
        return o.name === file.name;
      });

      if (index >= 0) {
        setToUploadFiles(function (toUploadFiles2) {
          return toUploadFiles2.splice(index, 1);
        });
      } else {
        var index2 = findIndex_1(fileList, function (o) {
          return o.name === file.name;
        });
        handleMultipleRemove({
          e: context.e,
          index: index2
        });
      }
    }, [fileList, handleMultipleRemove, toUploadFiles]);
    var multipleUpload = React.useCallback(function (fileList2) {
      var _iterator = _createForOfIteratorHelper(fileList2),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var file = _step.value;
          upload(file);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }, [upload]);
    React__default["default"].useEffect(function () {
      if (uploading) {
        uploadFiles();
      }
    }, [uploading]);
    React.useMemo(function () {
      var timestamp = Date.now();
      (fileList || []).forEach(function (file, index) {
        if (!file.uid && !Object.isFrozen(file)) {
          file.uid = "td__upload__".concat(timestamp, "_").concat(index, "__");
        }
      });
      var finish = fileList.every(function (file) {
        return finishUpload(file.status);
      });
      setUploading(!finish);
    }, [fileList]);
    React__default["default"].useImperativeHandle(ref, function () {
      return {
        upload: uploadRef.current,
        triggerUpload: triggerUpload
      };
    });
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-upload")
    }, /* @__PURE__ */React__default["default"].createElement("input", {
      ref: uploadRef,
      type: "file",
      disabled: disabled,
      multiple: multiple,
      accept: accept,
      hidden: true,
      onChange: handleChange
    }), /* @__PURE__ */React__default["default"].createElement(BooleanRender, {
      boolExpression: !draggable && theme === "custom"
    }, /* @__PURE__ */React__default["default"].createElement(UploadTrigger, {
      onClick: triggerUpload
    }, children)), /* @__PURE__ */React__default["default"].createElement(BooleanRender, {
      boolExpression: !draggable && ["file", "file-input"].includes(theme)
    }, /* @__PURE__ */React__default["default"].createElement(SingleFile, {
      file: fileList && fileList[0],
      display: theme,
      placeholder: placeholder,
      onRemove: handleSingleRemove,
      showUploadProgress: showUploadProgress
    }, /* @__PURE__ */React__default["default"].createElement(UploadTrigger, {
      onClick: triggerUpload
    }))), /* @__PURE__ */React__default["default"].createElement(BooleanRender, {
      boolExpression: !draggable && theme === "image"
    }, /* @__PURE__ */React__default["default"].createElement(ImageCard, {
      multiple: multiple,
      max: max,
      onRemove: handleMultipleRemove,
      onTrigger: triggerUpload,
      files: fileList,
      showUploadProgress: showUploadProgress
    })), /* @__PURE__ */React__default["default"].createElement(BooleanRender, {
      boolExpression: singleDraggable
    }, /* @__PURE__ */React__default["default"].createElement(Dragger, {
      onChange: handleDragChange,
      onDragenter: handleDragenter,
      onDragleave: handleDragleave,
      file: fileList && fileList[0],
      display: theme,
      customDraggerRender: customDraggerRender,
      onCancel: cancelUpload,
      onRemove: handleSingleRemove,
      onUpload: function onUpload(file) {
        upload(file);
      },
      onTrigger: triggerUpload
    })), /* @__PURE__ */React__default["default"].createElement(BooleanRender, {
      boolExpression: showUploadList
    }, /* @__PURE__ */React__default["default"].createElement(Index, {
      files: fileList,
      placeholder: placeholder,
      toUploadFiles: toUploadFiles,
      remove: handleListRemove,
      showUploadProgress: showUploadProgress,
      upload: multipleUpload,
      cancel: cancelUpload,
      display: theme,
      onImgPreview: handlePreviewImg,
      onChange: handleDragChange,
      onDragenter: handleDragenter,
      onDragleave: handleDragleave
    }, /* @__PURE__ */React__default["default"].createElement(UploadTrigger, {
      onClick: triggerUpload
    }))), /* @__PURE__ */React__default["default"].createElement(BooleanRender, {
      boolExpression: showImgDialog
    }, /* @__PURE__ */React__default["default"].createElement(Dialog, {
      visible: showImg,
      showOverlay: true,
      width: "auto",
      top: "10%",
      className: "".concat(classPrefix, "-upload__dialog"),
      footer: false,
      header: false,
      onClose: closePreview
    }, /* @__PURE__ */React__default["default"].createElement("p", {
      className: "".concat(classPrefix, "-dialog__dialog-body-img-box")
    }, /* @__PURE__ */React__default["default"].createElement("img", {
      src: imgURL,
      alt: ""
    })))), /* @__PURE__ */React__default["default"].createElement(BooleanRender, {
      boolExpression: !errorMsg && showTips
    }, /* @__PURE__ */React__default["default"].createElement(Tips, null, tips)), /* @__PURE__ */React__default["default"].createElement(BooleanRender, {
      boolExpression: showErrorMsg
    }, /* @__PURE__ */React__default["default"].createElement(Tips, {
      type: "error"
    }, errorMsg)));
  };

  var _Upload = /*#__PURE__*/React.forwardRef(Upload$1);

  var Upload = _Upload;

  var isDate$2 = {exports: {}};

  var merge = {exports: {}};

  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = merge;

    function merge() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var defaults = arguments.length > 1 ? arguments[1] : undefined;

      for (var key in defaults) {
        if (typeof obj[key] === 'undefined') {
          obj[key] = defaults[key];
        }
      }

      return obj;
    }

    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(merge, merge.exports);

  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isDate;

    var _merge = _interopRequireDefault(merge.exports);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }

    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }

    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    function _iterableToArrayLimit(arr, i) {
      if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }

    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it;

      if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it) o = it;
          var i = 0;

          var F = function F() {};

          return {
            s: F,
            n: function n() {
              if (i >= o.length) return {
                done: true
              };
              return {
                done: false,
                value: o[i++]
              };
            },
            e: function e(_e2) {
              throw _e2;
            },
            f: F
          };
        }

        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      var normalCompletion = true,
          didErr = false,
          err;
      return {
        s: function s() {
          it = o[Symbol.iterator]();
        },
        n: function n() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function e(_e3) {
          didErr = true;
          err = _e3;
        },
        f: function f() {
          try {
            if (!normalCompletion && it["return"] != null) it["return"]();
          } finally {
            if (didErr) throw err;
          }
        }
      };
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }

    var default_date_options = {
      format: 'YYYY/MM/DD',
      delimiters: ['/', '-'],
      strictMode: false
    };

    function isValidFormat(format) {
      return /(^(y{4}|y{2})[.\/-](m{1,2})[.\/-](d{1,2})$)|(^(m{1,2})[.\/-](d{1,2})[.\/-]((y{4}|y{2})$))|(^(d{1,2})[.\/-](m{1,2})[.\/-]((y{4}|y{2})$))/gi.test(format);
    }

    function zip(date, format) {
      var zippedArr = [],
          len = Math.min(date.length, format.length);

      for (var i = 0; i < len; i++) {
        zippedArr.push([date[i], format[i]]);
      }

      return zippedArr;
    }

    function isDate(input, options) {
      if (typeof options === 'string') {
        // Allow backward compatbility for old format isDate(input [, format])
        options = (0, _merge["default"])({
          format: options
        }, default_date_options);
      } else {
        options = (0, _merge["default"])(options, default_date_options);
      }

      if (typeof input === 'string' && isValidFormat(options.format)) {
        var formatDelimiter = options.delimiters.find(function (delimiter) {
          return options.format.indexOf(delimiter) !== -1;
        });
        var dateDelimiter = options.strictMode ? formatDelimiter : options.delimiters.find(function (delimiter) {
          return input.indexOf(delimiter) !== -1;
        });
        var dateAndFormat = zip(input.split(dateDelimiter), options.format.toLowerCase().split(formatDelimiter));
        var dateObj = {};

        var _iterator = _createForOfIteratorHelper(dateAndFormat),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var _step$value = _slicedToArray(_step.value, 2),
                dateWord = _step$value[0],
                formatWord = _step$value[1];

            if (dateWord.length !== formatWord.length) {
              return false;
            }

            dateObj[formatWord.charAt(0)] = dateWord;
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        return new Date("".concat(dateObj.m, "/").concat(dateObj.d, "/").concat(dateObj.y)).getDate() === +dateObj.d;
      }

      if (!options.strictMode) {
        return Object.prototype.toString.call(input) === '[object Date]' && isFinite(input);
      }

      return false;
    }

    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(isDate$2, isDate$2.exports);

  var isDate$1 = /*@__PURE__*/getDefaultExportFromCjs(isDate$2.exports);

  var isEmail$1 = {exports: {}};

  var assertString = {exports: {}};

  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = assertString;

    function _typeof(obj) {
      "@babel/helpers - typeof";

      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof(obj) {
          return typeof obj;
        };
      } else {
        _typeof = function _typeof(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
      }

      return _typeof(obj);
    }

    function assertString(input) {
      var isString = typeof input === 'string' || input instanceof String;

      if (!isString) {
        var invalidType = _typeof(input);

        if (input === null) invalidType = 'null';else if (invalidType === 'object') invalidType = input.constructor.name;
        throw new TypeError("Expected a string but received a ".concat(invalidType));
      }
    }

    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(assertString, assertString.exports);

  var isByteLength = {exports: {}};

  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isByteLength;

    var _assertString = _interopRequireDefault(assertString.exports);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }

    function _typeof(obj) {
      "@babel/helpers - typeof";

      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof(obj) {
          return typeof obj;
        };
      } else {
        _typeof = function _typeof(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
      }

      return _typeof(obj);
    }
    /* eslint-disable prefer-rest-params */


    function isByteLength(str, options) {
      (0, _assertString["default"])(str);
      var min;
      var max;

      if (_typeof(options) === 'object') {
        min = options.min || 0;
        max = options.max;
      } else {
        // backwards compatibility: isByteLength(str, min [, max])
        min = arguments[1];
        max = arguments[2];
      }

      var len = encodeURI(str).split(/%..|./).length - 1;
      return len >= min && (typeof max === 'undefined' || len <= max);
    }

    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(isByteLength, isByteLength.exports);

  var isFQDN = {exports: {}};

  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isFQDN;

    var _assertString = _interopRequireDefault(assertString.exports);

    var _merge = _interopRequireDefault(merge.exports);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }

    var default_fqdn_options = {
      require_tld: true,
      allow_underscores: false,
      allow_trailing_dot: false,
      allow_numeric_tld: false,
      allow_wildcard: false
    };

    function isFQDN(str, options) {
      (0, _assertString["default"])(str);
      options = (0, _merge["default"])(options, default_fqdn_options);
      /* Remove the optional trailing dot before checking validity */

      if (options.allow_trailing_dot && str[str.length - 1] === '.') {
        str = str.substring(0, str.length - 1);
      }
      /* Remove the optional wildcard before checking validity */


      if (options.allow_wildcard === true && str.indexOf('*.') === 0) {
        str = str.substring(2);
      }

      var parts = str.split('.');
      var tld = parts[parts.length - 1];

      if (options.require_tld) {
        // disallow fqdns without tld
        if (parts.length < 2) {
          return false;
        }

        if (!/^([a-z\u00A1-\u00A8\u00AA-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,}|xn[a-z0-9-]{2,})$/i.test(tld)) {
          return false;
        } // disallow spaces


        if (/\s/.test(tld)) {
          return false;
        }
      } // reject numeric TLDs


      if (!options.allow_numeric_tld && /^\d+$/.test(tld)) {
        return false;
      }

      return parts.every(function (part) {
        if (part.length > 63) {
          return false;
        }

        if (!/^[a-z_\u00a1-\uffff0-9-]+$/i.test(part)) {
          return false;
        } // disallow full-width chars


        if (/[\uff01-\uff5e]/.test(part)) {
          return false;
        } // disallow parts starting or ending with hyphen


        if (/^-|-$/.test(part)) {
          return false;
        }

        if (!options.allow_underscores && /_/.test(part)) {
          return false;
        }

        return true;
      });
    }

    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(isFQDN, isFQDN.exports);

  var isIP = {exports: {}};

  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isIP;

    var _assertString = _interopRequireDefault(assertString.exports);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }
    /**
    11.3.  Examples
    
       The following addresses
    
                 fe80::1234 (on the 1st link of the node)
                 ff02::5678 (on the 5th link of the node)
                 ff08::9abc (on the 10th organization of the node)
    
       would be represented as follows:
    
                 fe80::1234%1
                 ff02::5678%5
                 ff08::9abc%10
    
       (Here we assume a natural translation from a zone index to the
       <zone_id> part, where the Nth zone of any scope is translated into
       "N".)
    
       If we use interface names as <zone_id>, those addresses could also be
       represented as follows:
    
                fe80::1234%ne0
                ff02::5678%pvc1.3
                ff08::9abc%interface10
    
       where the interface "ne0" belongs to the 1st link, "pvc1.3" belongs
       to the 5th link, and "interface10" belongs to the 10th organization.
     * * */


    var IPv4SegmentFormat = '(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';
    var IPv4AddressFormat = "(".concat(IPv4SegmentFormat, "[.]){3}").concat(IPv4SegmentFormat);
    var IPv4AddressRegExp = new RegExp("^".concat(IPv4AddressFormat, "$"));
    var IPv6SegmentFormat = '(?:[0-9a-fA-F]{1,4})';
    var IPv6AddressRegExp = new RegExp('^(' + "(?:".concat(IPv6SegmentFormat, ":){7}(?:").concat(IPv6SegmentFormat, "|:)|") + "(?:".concat(IPv6SegmentFormat, ":){6}(?:").concat(IPv4AddressFormat, "|:").concat(IPv6SegmentFormat, "|:)|") + "(?:".concat(IPv6SegmentFormat, ":){5}(?::").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,2}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){4}(?:(:").concat(IPv6SegmentFormat, "){0,1}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,3}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){3}(?:(:").concat(IPv6SegmentFormat, "){0,2}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,4}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){2}(?:(:").concat(IPv6SegmentFormat, "){0,3}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,5}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){1}(?:(:").concat(IPv6SegmentFormat, "){0,4}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,6}|:)|") + "(?::((?::".concat(IPv6SegmentFormat, "){0,5}:").concat(IPv4AddressFormat, "|(?::").concat(IPv6SegmentFormat, "){1,7}|:))") + ')(%[0-9a-zA-Z-.:]{1,})?$');

    function isIP(str) {
      var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      (0, _assertString["default"])(str);
      version = String(version);

      if (!version) {
        return isIP(str, 4) || isIP(str, 6);
      }

      if (version === '4') {
        if (!IPv4AddressRegExp.test(str)) {
          return false;
        }

        var parts = str.split('.').sort(function (a, b) {
          return a - b;
        });
        return parts[3] <= 255;
      }

      if (version === '6') {
        return !!IPv6AddressRegExp.test(str);
      }

      return false;
    }

    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(isIP, isIP.exports);

  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isEmail;

    var _assertString = _interopRequireDefault(assertString.exports);

    var _merge = _interopRequireDefault(merge.exports);

    var _isByteLength = _interopRequireDefault(isByteLength.exports);

    var _isFQDN = _interopRequireDefault(isFQDN.exports);

    var _isIP = _interopRequireDefault(isIP.exports);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }

    var default_email_options = {
      allow_display_name: false,
      require_display_name: false,
      allow_utf8_local_part: true,
      require_tld: true,
      blacklisted_chars: '',
      ignore_max_length: false,
      host_blacklist: []
    };
    /* eslint-disable max-len */

    /* eslint-disable no-control-regex */

    var splitNameAddress = /^([^\x00-\x1F\x7F-\x9F\cX]+)</i;
    var emailUserPart = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~]+$/i;
    var gmailUserPart = /^[a-z\d]+$/;
    var quotedEmailUser = /^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f]))*$/i;
    var emailUserUtf8Part = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+$/i;
    var quotedEmailUserUtf8 = /^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))*$/i;
    var defaultMaxEmailLength = 254;
    /* eslint-enable max-len */

    /* eslint-enable no-control-regex */

    /**
     * Validate display name according to the RFC2822: https://tools.ietf.org/html/rfc2822#appendix-A.1.2
     * @param {String} display_name
     */

    function validateDisplayName(display_name) {
      var display_name_without_quotes = display_name.replace(/^"(.+)"$/, '$1'); // display name with only spaces is not valid

      if (!display_name_without_quotes.trim()) {
        return false;
      } // check whether display name contains illegal character


      var contains_illegal = /[\.";<>]/.test(display_name_without_quotes);

      if (contains_illegal) {
        // if contains illegal characters,
        // must to be enclosed in double-quotes, otherwise it's not a valid display name
        if (display_name_without_quotes === display_name) {
          return false;
        } // the quotes in display name must start with character symbol \


        var all_start_with_back_slash = display_name_without_quotes.split('"').length === display_name_without_quotes.split('\\"').length;

        if (!all_start_with_back_slash) {
          return false;
        }
      }

      return true;
    }

    function isEmail(str, options) {
      (0, _assertString["default"])(str);
      options = (0, _merge["default"])(options, default_email_options);

      if (options.require_display_name || options.allow_display_name) {
        var display_email = str.match(splitNameAddress);

        if (display_email) {
          var display_name = display_email[1]; // Remove display name and angle brackets to get email address
          // Can be done in the regex but will introduce a ReDOS (See  #1597 for more info)

          str = str.replace(display_name, '').replace(/(^<|>$)/g, ''); // sometimes need to trim the last space to get the display name
          // because there may be a space between display name and email address
          // eg. myname <address@gmail.com>
          // the display name is `myname` instead of `myname `, so need to trim the last space

          if (display_name.endsWith(' ')) {
            display_name = display_name.substr(0, display_name.length - 1);
          }

          if (!validateDisplayName(display_name)) {
            return false;
          }
        } else if (options.require_display_name) {
          return false;
        }
      }

      if (!options.ignore_max_length && str.length > defaultMaxEmailLength) {
        return false;
      }

      var parts = str.split('@');
      var domain = parts.pop();
      var lower_domain = domain.toLowerCase();

      if (options.host_blacklist.includes(lower_domain)) {
        return false;
      }

      var user = parts.join('@');

      if (options.domain_specific_validation && (lower_domain === 'gmail.com' || lower_domain === 'googlemail.com')) {
        /*
          Previously we removed dots for gmail addresses before validating.
          This was removed because it allows `multiple..dots@gmail.com`
          to be reported as valid, but it is not.
          Gmail only normalizes single dots, removing them from here is pointless,
          should be done in normalizeEmail
        */
        user = user.toLowerCase(); // Removing sub-address from username before gmail validation

        var username = user.split('+')[0]; // Dots are not included in gmail length restriction

        if (!(0, _isByteLength["default"])(username.replace(/\./g, ''), {
          min: 6,
          max: 30
        })) {
          return false;
        }

        var _user_parts = username.split('.');

        for (var i = 0; i < _user_parts.length; i++) {
          if (!gmailUserPart.test(_user_parts[i])) {
            return false;
          }
        }
      }

      if (options.ignore_max_length === false && (!(0, _isByteLength["default"])(user, {
        max: 64
      }) || !(0, _isByteLength["default"])(domain, {
        max: 254
      }))) {
        return false;
      }

      if (!(0, _isFQDN["default"])(domain, {
        require_tld: options.require_tld
      })) {
        if (!options.allow_ip_domain) {
          return false;
        }

        if (!(0, _isIP["default"])(domain)) {
          if (!domain.startsWith('[') || !domain.endsWith(']')) {
            return false;
          }

          var noBracketdomain = domain.substr(1, domain.length - 2);

          if (noBracketdomain.length === 0 || !(0, _isIP["default"])(noBracketdomain)) {
            return false;
          }
        }
      }

      if (user[0] === '"') {
        user = user.slice(1, user.length - 1);
        return options.allow_utf8_local_part ? quotedEmailUserUtf8.test(user) : quotedEmailUser.test(user);
      }

      var pattern = options.allow_utf8_local_part ? emailUserUtf8Part : emailUserPart;
      var user_parts = user.split('.');

      for (var _i = 0; _i < user_parts.length; _i++) {
        if (!pattern.test(user_parts[_i])) {
          return false;
        }
      }

      if (options.blacklisted_chars) {
        if (user.search(new RegExp("[".concat(options.blacklisted_chars, "]+"), 'g')) !== -1) return false;
      }

      return true;
    }

    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(isEmail$1, isEmail$1.exports);

  var isEmail = /*@__PURE__*/getDefaultExportFromCjs(isEmail$1.exports);

  var isURL$1 = {exports: {}};

  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isURL;

    var _assertString = _interopRequireDefault(assertString.exports);

    var _isFQDN = _interopRequireDefault(isFQDN.exports);

    var _isIP = _interopRequireDefault(isIP.exports);

    var _merge = _interopRequireDefault(merge.exports);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }

    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }

    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }

    function _iterableToArrayLimit(arr, i) {
      if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }
    /*
    options for isURL method
    
    require_protocol - if set as true isURL will return false if protocol is not present in the URL
    require_valid_protocol - isURL will check if the URL's protocol is present in the protocols option
    protocols - valid protocols can be modified with this option
    require_host - if set as false isURL will not check if host is present in the URL
    require_port - if set as true isURL will check if port is present in the URL
    allow_protocol_relative_urls - if set as true protocol relative URLs will be allowed
    validate_length - if set as false isURL will skip string length validation (IE maximum is 2083)
    
    */


    var default_url_options = {
      protocols: ['http', 'https', 'ftp'],
      require_tld: true,
      require_protocol: false,
      require_host: true,
      require_port: false,
      require_valid_protocol: true,
      allow_underscores: false,
      allow_trailing_dot: false,
      allow_protocol_relative_urls: false,
      allow_fragments: true,
      allow_query_components: true,
      validate_length: true
    };
    var wrapped_ipv6 = /^\[([^\]]+)\](?::([0-9]+))?$/;

    function isRegExp(obj) {
      return Object.prototype.toString.call(obj) === '[object RegExp]';
    }

    function checkHost(host, matches) {
      for (var i = 0; i < matches.length; i++) {
        var match = matches[i];

        if (host === match || isRegExp(match) && match.test(host)) {
          return true;
        }
      }

      return false;
    }

    function isURL(url, options) {
      (0, _assertString["default"])(url);

      if (!url || /[\s<>]/.test(url)) {
        return false;
      }

      if (url.indexOf('mailto:') === 0) {
        return false;
      }

      options = (0, _merge["default"])(options, default_url_options);

      if (options.validate_length && url.length >= 2083) {
        return false;
      }

      if (!options.allow_fragments && url.includes('#')) {
        return false;
      }

      if (!options.allow_query_components && (url.includes('?') || url.includes('&'))) {
        return false;
      }

      var protocol, auth, host, hostname, port, port_str, split, ipv6;
      split = url.split('#');
      url = split.shift();
      split = url.split('?');
      url = split.shift();
      split = url.split('://');

      if (split.length > 1) {
        protocol = split.shift().toLowerCase();

        if (options.require_valid_protocol && options.protocols.indexOf(protocol) === -1) {
          return false;
        }
      } else if (options.require_protocol) {
        return false;
      } else if (url.substr(0, 2) === '//') {
        if (!options.allow_protocol_relative_urls) {
          return false;
        }

        split[0] = url.substr(2);
      }

      url = split.join('://');

      if (url === '') {
        return false;
      }

      split = url.split('/');
      url = split.shift();

      if (url === '' && !options.require_host) {
        return true;
      }

      split = url.split('@');

      if (split.length > 1) {
        if (options.disallow_auth) {
          return false;
        }

        if (split[0] === '') {
          return false;
        }

        auth = split.shift();

        if (auth.indexOf(':') >= 0 && auth.split(':').length > 2) {
          return false;
        }

        var _auth$split = auth.split(':'),
            _auth$split2 = _slicedToArray(_auth$split, 2),
            user = _auth$split2[0],
            password = _auth$split2[1];

        if (user === '' && password === '') {
          return false;
        }
      }

      hostname = split.join('@');
      port_str = null;
      ipv6 = null;
      var ipv6_match = hostname.match(wrapped_ipv6);

      if (ipv6_match) {
        host = '';
        ipv6 = ipv6_match[1];
        port_str = ipv6_match[2] || null;
      } else {
        split = hostname.split(':');
        host = split.shift();

        if (split.length) {
          port_str = split.join(':');
        }
      }

      if (port_str !== null && port_str.length > 0) {
        port = parseInt(port_str, 10);

        if (!/^[0-9]+$/.test(port_str) || port <= 0 || port > 65535) {
          return false;
        }
      } else if (options.require_port) {
        return false;
      }

      if (options.host_whitelist) {
        return checkHost(host, options.host_whitelist);
      }

      if (!(0, _isIP["default"])(host) && !(0, _isFQDN["default"])(host, options) && (!ipv6 || !(0, _isIP["default"])(ipv6, 6))) {
        return false;
      }

      host = host || ipv6;

      if (options.host_blacklist && checkHost(host, options.host_blacklist)) {
        return false;
      }

      return true;
    }

    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(isURL$1, isURL$1.exports);

  var isURL = /*@__PURE__*/getDefaultExportFromCjs(isURL$1.exports);

  function ownKeys$l(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$l(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$l(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$l(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function isValueEmpty(val) {
    var type = Object.prototype.toString.call(val);
    var typeMap = {
      Date: "[object Date]"
    };

    if (type === typeMap.Date) {
      return false;
    }

    return _typeof(val) === "object" ? isEmpty_1(val) : ["", void 0, null].includes(val);
  }
  var VALIDATE_MAP = {
    date: isDate$1,
    url: isURL,
    email: isEmail,
    required: function required(val) {
      return !isValueEmpty(val);
    },
    "boolean": function boolean(val) {
      return typeof val === "boolean";
    },
    max: function max(val, num) {
      return getCharacterLength(val) <= num;
    },
    min: function min(val, num) {
      return val.length >= num;
    },
    len: function len(val, num) {
      return val.length === num;
    },
    number: function number(val) {
      return !isNaN(val);
    },
    "enum": function _enum(val, strs) {
      return strs.includes(val);
    },
    idcard: function idcard(val) {
      return /^(\d{18,18}|\d{15,15}|\d{17,17}x)$/i.test(val);
    },
    telnumber: function telnumber(val) {
      return /^1[3-9]\d{9}$/.test(val);
    },
    pattern: function pattern(val, regexp) {
      return regexp.test(val);
    },
    validator: function validator(val, validate2) {
      return validate2(val);
    }
  };
  function validateOneRule(_x, _x2) {
    return _validateOneRule.apply(this, arguments);
  }

  function _validateOneRule() {
    _validateOneRule = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(value, rule) {
      var validateResult, keys, vOptions, vValidateFun, i, key, validateRule;
      return regenerator.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              validateResult = {
                result: true
              };
              keys = Object.keys(rule);
              vOptions = {};
              i = 0;

            case 4:
              if (!(i < keys.length)) {
                _context.next = 16;
                break;
              }

              key = keys[i];

              if (!(!rule.required && isValueEmpty(value))) {
                _context.next = 8;
                break;
              }

              return _context.abrupt("return", validateResult);

            case 8:
              validateRule = VALIDATE_MAP[key];

              if (!(validateRule && rule[key])) {
                _context.next = 13;
                break;
              }

              vOptions = rule[key] === true ? {} : rule[key];
              vValidateFun = validateRule;
              return _context.abrupt("break", 16);

            case 13:
              i++;
              _context.next = 4;
              break;

            case 16:
              if (!vValidateFun) {
                _context.next = 24;
                break;
              }

              _context.next = 19;
              return vValidateFun(value, vOptions);

            case 19:
              validateResult = _context.sent;

              if (!(typeof validateResult === "boolean")) {
                _context.next = 22;
                break;
              }

              return _context.abrupt("return", _objectSpread$l(_objectSpread$l({}, rule), {}, {
                result: validateResult
              }));

            case 22:
              if (!(_typeof(validateResult) === "object")) {
                _context.next = 24;
                break;
              }

              return _context.abrupt("return", validateResult);

            case 24:
              return _context.abrupt("return", validateResult);

            case 25:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return _validateOneRule.apply(this, arguments);
  }

  function validate(_x3, _x4) {
    return _validate.apply(this, arguments);
  }

  function _validate() {
    _validate = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(value, rules) {
      var all, r;
      return regenerator.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              all = rules.map(function (rule) {
                return validateOneRule(value, rule);
              });
              _context2.next = 3;
              return Promise.all(all);

            case 3:
              r = _context2.sent;
              return _context2.abrupt("return", r);

            case 5:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
    return _validate.apply(this, arguments);
  }

  function ownKeys$k(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$k(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$k(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$k(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var ctrlKeyMap = /* @__PURE__ */new Map();
  ctrlKeyMap.set(Checkbox, "checked");
  ctrlKeyMap.set(Tag.CheckTag, "checked");
  ctrlKeyMap.set(Upload, "file");
  var FormItem = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _classNames, _classNames2, _classNames3;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var children = props.children,
        label = props.label,
        name = props.name,
        help = props.help,
        statusIconFromProp = props.statusIcon,
        rulesFromProp = props.rules,
        labelWidth = props.labelWidth,
        labelAlign = props.labelAlign,
        initialData = props.initialData,
        className = props.className,
        formItemStyle = props.style;

    var _useFormContext = useFormContext(),
        colon = _useFormContext.colon,
        requiredMark = _useFormContext.requiredMark,
        layout = _useFormContext.layout,
        labelAlignFromContext = _useFormContext.labelAlign,
        labelWidthFromContext = _useFormContext.labelWidth,
        showErrorMessage = _useFormContext.showErrorMessage,
        resetType = _useFormContext.resetType,
        rulesFromContext = _useFormContext.rules,
        statusIconFromContext = _useFormContext.statusIcon,
        formItemsRef = _useFormContext.formItemsRef,
        onFormItemValueChange = _useFormContext.onFormItemValueChange;

    var _useState = React.useState([]),
        _useState2 = _slicedToArray(_useState, 2),
        errorList = _useState2[0],
        setErrorList = _useState2[1];

    var _useState3 = React.useState([]),
        _useState4 = _slicedToArray(_useState3, 2),
        successList = _useState4[0],
        setSuccessList = _useState4[1];

    var _useState5 = React.useState("not"
    /* TO_BE_VALIDATED */
    ),
        _useState6 = _slicedToArray(_useState5, 2),
        verifyStatus = _useState6[0],
        setVerifyStatus = _useState6[1];

    var _useState7 = React.useState(false),
        _useState8 = _slicedToArray(_useState7, 2),
        resetValidating = _useState8[0],
        setResetValidating = _useState8[1];

    var _useState9 = React.useState(false),
        _useState10 = _slicedToArray(_useState9, 2),
        needResetField = _useState10[0],
        setNeedResetField = _useState10[1];

    var _useState11 = React.useState(initialData),
        _useState12 = _slicedToArray(_useState11, 2),
        formValue = _useState12[0],
        setFormValue = _useState12[1];

    var currentFormItemRef = React.useRef();
    var innerFormItemsRef = React.useRef([]);
    var shouldValidate = React.useRef(null);
    var isMounted = React.useRef(false);
    var innerRules = rulesFromContext && rulesFromContext[name] || rulesFromProp || [];
    var innerLabelWidth = isNil_1(labelWidth) ? labelWidthFromContext : labelWidth;
    var innerLabelAlign = isNil_1(labelAlign) ? labelAlignFromContext : labelAlign;
    var formItemClass = classNames$1(className, "".concat(classPrefix, "-form__item"), (_classNames = {}, _defineProperty$2(_classNames, "".concat(classPrefix, "-form-item__").concat(name), name), _defineProperty$2(_classNames, "".concat(classPrefix, "-form__item-with-help"), help), _defineProperty$2(_classNames, "".concat(classPrefix, "-form__item-with-extra"), renderTipsInfo()), _classNames));
    var formItemLabelClass = classNames$1("".concat(classPrefix, "-form__label"), (_classNames2 = {}, _defineProperty$2(_classNames2, "".concat(classPrefix, "-form__label--required"), requiredMark && innerRules.filter(function (rule) {
      return rule.required;
    }).length > 0), _defineProperty$2(_classNames2, "".concat(classPrefix, "-form__label--colon"), colon && label), _defineProperty$2(_classNames2, "".concat(classPrefix, "-form__label--top"), innerLabelAlign === "top" || !innerLabelWidth), _defineProperty$2(_classNames2, "".concat(classPrefix, "-form__label--left"), innerLabelAlign === "left" && innerLabelWidth), _defineProperty$2(_classNames2, "".concat(classPrefix, "-form__label--right"), innerLabelAlign === "right" && innerLabelWidth), _classNames2));
    var contentClasses = classNames$1("".concat(classPrefix, "-form__controls"), (_classNames3 = {}, _defineProperty$2(_classNames3, "".concat(classPrefix, "-is-success"), showErrorMessage && verifyStatus === "success"), _defineProperty$2(_classNames3, "".concat(classPrefix, "-is-warning"), showErrorMessage && errorList.length && errorList[0].type === "warning"), _defineProperty$2(_classNames3, "".concat(classPrefix, "-is-error"), showErrorMessage && errorList.length && errorList[0].type === "error"), _classNames3));
    var labelStyle = {};
    var contentStyle = {};

    if (innerLabelWidth && innerLabelAlign !== "top") {
      if (typeof innerLabelWidth === "number") {
        labelStyle = {
          width: "".concat(innerLabelWidth, "px")
        };
        contentStyle = {
          marginLeft: layout !== "inline" ? "".concat(innerLabelWidth, "px") : ""
        };
      } else {
        labelStyle = {
          width: innerLabelWidth
        };
        contentStyle = {
          marginLeft: layout !== "inline" ? innerLabelWidth : ""
        };
      }
    }

    function renderTipsInfo() {
      var helpNode = null;
      if (help) helpNode = /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-form__help")
      }, help);

      if (showErrorMessage && errorList.length && errorList[0].message) {
        return /* @__PURE__ */React__default["default"].createElement("p", {
          className: "".concat(classPrefix, "-input__extra")
        }, errorList[0].message);
      }

      if (successList.length) {
        return /* @__PURE__ */React__default["default"].createElement("p", {
          className: "".concat(classPrefix, "-input__extra")
        }, successList[0].message);
      }

      return helpNode;
    }

    var renderSuffixIcon = function renderSuffixIcon() {
      if (statusIconFromProp === false) return null;

      var resultIcon = function resultIcon(iconSlot) {
        return /* @__PURE__ */React__default["default"].createElement("span", {
          className: "".concat(classPrefix, "-form__status")
        }, iconSlot);
      };

      var getDefaultIcon = function getDefaultIcon() {
        var iconMap = {
          success: /* @__PURE__ */React__default["default"].createElement(CheckCircleFilledIcon, {
            size: "25px"
          }),
          error: /* @__PURE__ */React__default["default"].createElement(CloseCircleFilledIcon, {
            size: "25px"
          }),
          warning: /* @__PURE__ */React__default["default"].createElement(ErrorCircleFilledIcon, {
            size: "25px"
          })
        };

        if (verifyStatus === "success"
        /* SUCCESS */
        ) {
          return resultIcon(iconMap[verifyStatus]);
        }

        if (errorList && errorList[0]) {
          var type = errorList[0].type || "error";
          return resultIcon(iconMap[type]);
        }

        return null;
      };

      if ( /*#__PURE__*/React__default["default"].isValidElement(statusIconFromProp)) {
        return resultIcon( /*#__PURE__*/React__default["default"].cloneElement(statusIconFromProp, _objectSpread$k({
          style: {
            color: "unset"
          }
        }, statusIconFromProp.props)));
      }

      if (statusIconFromContext === true) {
        return getDefaultIcon();
      }

      if ( /*#__PURE__*/React__default["default"].isValidElement(statusIconFromContext)) {
        return resultIcon(statusIconFromProp);
      }

      return null;
    };

    function validate$1(trigger) {
      if (innerFormItemsRef.current.length) {
        return innerFormItemsRef.current.map(function (innerFormItem) {
          return innerFormItem === null || innerFormItem === void 0 ? void 0 : innerFormItem.validate();
        });
      }

      var rules = trigger === "all" ? innerRules : innerRules.filter(function (item) {
        return (item.trigger || "change") === trigger;
      });
      setResetValidating(true);
      return new Promise(function (resolve) {
        validate(formValue, rules).then(function (r) {
          var filterErrorList = r.filter(function (item) {
            return item.result !== true;
          });
          setErrorList(filterErrorList);
          setSuccessList(r.filter(function (item) {
            return item.result === true && item.message && item.type === "success";
          }));
          var nextVerifyStatus = filterErrorList.length && rules.length ? "fail"
          /* FAIL */
          : "success"
          /* SUCCESS */
          ;

          if (!rules.some(function (rule) {
            return rule.required;
          }) && isValueEmpty(formValue) || !rules.length) {
            nextVerifyStatus = "not"
            /* TO_BE_VALIDATED */
            ;
          }

          setVerifyStatus(nextVerifyStatus);
          needResetField && resetHandler();
          setResetValidating(false);
          resolve(_defineProperty$2({}, name, !filterErrorList.length ? true : r));
        });
      });
    }

    function handleItemBlur() {
      var filterRules = innerRules.filter(function (item) {
        return item.trigger === "blur";
      });
      filterRules.length && validate$1("blur");
    }

    function getEmptyValue() {
      var type = Object.prototype.toString.call(initialData);
      var emptyValue = "";

      if (type === "[object Array]") {
        emptyValue = [];
      }

      if (type === "[object Object]") {
        emptyValue = {};
      }

      return emptyValue;
    }

    function resetField() {
      if (!name) return;

      if (resetType === "empty") {
        setFormValue(getEmptyValue());
      }

      if (resetType === "initial") {
        setFormValue(initialData);
      }

      if (resetValidating) {
        setNeedResetField(true);
      } else {
        resetHandler();
      }
    }

    function resetHandler() {
      shouldValidate.current = false;
      setNeedResetField(false);
      setErrorList([]);
      setSuccessList([]);
      setVerifyStatus("not"
      /* TO_BE_VALIDATED */
      );
    }

    function setField(field) {
      var value = field.value,
          status = field.status;

      if (typeof status !== "undefined") {
        shouldValidate.current = false;
        setErrorList([]);
        setSuccessList([]);
        setNeedResetField(false);
        setVerifyStatus(status);
      }

      if (typeof value !== "undefined") {
        setFormValue(value);
      }
    }

    React.useEffect(function () {
      if (isMounted.current) {
        if (!name) console.warn("FormItem prop name is required.");
        name && onFormItemValueChange(_defineProperty$2({}, name, formValue));
      }

      if (!shouldValidate.current || !isMounted.current) {
        isMounted.current = true;
        shouldValidate.current = true;
        return;
      }

      var filterRules = innerRules.filter(function (item) {
        return (item.trigger || "change") === "change";
      });
      filterRules.length && validate$1("change");
    }, [formValue]);
    React.useEffect(function () {
      formItemsRef.current.push(currentFormItemRef);
    }, []);
    React.useImperativeHandle(currentFormItemRef, function () {
      return {
        name: name,
        value: formValue,
        setValue: setFormValue,
        setField: setField,
        validate: validate$1,
        resetField: resetField
      };
    });
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: formItemClass,
      style: formItemStyle,
      ref: ref
    }, label && /* @__PURE__ */React__default["default"].createElement("div", {
      className: formItemLabelClass,
      style: labelStyle
    }, /* @__PURE__ */React__default["default"].createElement("label", {
      htmlFor: props === null || props === void 0 ? void 0 : props["for"]
    }, label)), /* @__PURE__ */React__default["default"].createElement("div", {
      className: contentClasses,
      style: contentStyle
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-form__controls-content")
    }, React__default["default"].Children.map(children, function (child, index) {
      if (!child) return null;

      var onChangeFromProps = function onChangeFromProps() {
        return {};
      };

      var onBlurFromProps = function onBlurFromProps() {
        return {};
      };

      var ctrlKey = "value";

      if ( /*#__PURE__*/React__default["default"].isValidElement(child)) {
        var _objectSpread2;

        if (child.type === FormItem) {
          return /*#__PURE__*/React__default["default"].cloneElement(child, {
            ref: function ref(el) {
              if (!el) return;
              innerFormItemsRef.current[index] = el;
            }
          });
        }

        if (typeof child.props.onChange === "function") {
          onChangeFromProps = child.props.onChange;
        }

        if (typeof child.props.onBlur === "function") {
          onBlurFromProps = child.props.onBlur;
        }

        if (_typeof(child.type) === "object") {
          ctrlKey = ctrlKeyMap.get(child.type) || "value";
        }

        return /*#__PURE__*/React__default["default"].cloneElement(child, _objectSpread$k(_objectSpread$k({}, child.props), {}, (_objectSpread2 = {}, _defineProperty$2(_objectSpread2, ctrlKey, formValue), _defineProperty$2(_objectSpread2, "onChange", function onChange(value) {
          onChangeFromProps.call(null, value);
          setFormValue(value);
        }), _defineProperty$2(_objectSpread2, "onBlur", function onBlur(value) {
          onBlurFromProps.call(null, value);
          handleItemBlur();
        }), _objectSpread2)));
      }

      return child;
    }), renderSuffixIcon()), renderTipsInfo()));
  });

  function ownKeys$j(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$j(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$j(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$j(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var Form$1 = forwardRefWithStatics(function (props, ref) {
    var style = props.style,
        className = props.className,
        _props$labelWidth = props.labelWidth,
        labelWidth = _props$labelWidth === void 0 ? "100px" : _props$labelWidth,
        statusIcon = props.statusIcon,
        _props$labelAlign = props.labelAlign,
        labelAlign = _props$labelAlign === void 0 ? "right" : _props$labelAlign,
        _props$layout = props.layout,
        layout = _props$layout === void 0 ? "vertical" : _props$layout,
        _props$size = props.size,
        size = _props$size === void 0 ? "medium" : _props$size,
        _props$colon = props.colon,
        colon = _props$colon === void 0 ? false : _props$colon,
        _props$requiredMark = props.requiredMark,
        requiredMark = _props$requiredMark === void 0 ? true : _props$requiredMark,
        scrollToFirstError = props.scrollToFirstError,
        _props$showErrorMessa = props.showErrorMessage,
        showErrorMessage = _props$showErrorMessa === void 0 ? true : _props$showErrorMessa,
        _props$resetType = props.resetType,
        resetType = _props$resetType === void 0 ? "empty" : _props$resetType,
        rules = props.rules,
        children = props.children,
        onSubmit = props.onSubmit,
        onReset = props.onReset,
        _props$onValuesChange = props.onValuesChange,
        onValuesChange = _props$onValuesChange === void 0 ? noop : _props$onValuesChange;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var formClass = classNames$1(className, "".concat(classPrefix, "-form"), _defineProperty$2({}, "".concat(classPrefix, "-form-inline"), layout === "inline"));
    var formItemsRef = React.useRef([]);
    var FORM_ITEM_CLASS_PREFIX = "".concat(classPrefix, "-form-item__");

    function getFirstError(r) {
      var _r$firstKey$;

      if (r === true) return;

      var _Object$keys = Object.keys(r),
          _Object$keys2 = _slicedToArray(_Object$keys, 1),
          firstKey = _Object$keys2[0];

      if (scrollToFirstError) {
        scrollTo(".".concat(FORM_ITEM_CLASS_PREFIX + firstKey));
      }

      return (_r$firstKey$ = r[firstKey][0]) === null || _r$firstKey$ === void 0 ? void 0 : _r$firstKey$.message;
    }

    function scrollTo(selector) {
      var dom = document.querySelector(selector);
      var behavior = scrollToFirstError;
      dom && dom.scrollIntoView({
        behavior: behavior
      });
    }

    function submitHandler(e) {
      e === null || e === void 0 ? void 0 : e.preventDefault();
      validate().then(function (r) {
        getFirstError(r);
        onSubmit === null || onSubmit === void 0 ? void 0 : onSubmit({
          validateResult: r,
          e: e
        });
      });
    }

    function resetHandler(e) {
      e === null || e === void 0 ? void 0 : e.preventDefault();
      formItemsRef.current.forEach(function (_ref) {
        var formItemRef = _ref.current;
        if (!isFunction_1(formItemRef.resetField)) return;
        formItemRef.resetField();
      });
      onReset === null || onReset === void 0 ? void 0 : onReset({
        e: e
      });
    }

    function validate(param) {
      function needValidate(name, fields2) {
        if (!fields2 || !Array.isArray(fields2)) return true;
        return fields2.indexOf(name) !== -1;
      }

      var _ref2 = param || {},
          fields = _ref2.fields,
          _ref2$trigger = _ref2.trigger,
          trigger = _ref2$trigger === void 0 ? "all" : _ref2$trigger;

      var list = formItemsRef.current.filter(function (_ref3) {
        var formItemRef = _ref3.current;
        return isFunction_1(formItemRef.validate) && needValidate(formItemRef.name, fields);
      }).map(function (_ref4) {
        var formItemRef = _ref4.current;
        return formItemRef.validate(trigger);
      });
      return new Promise(function (resolve) {
        Promise.all(flatten_1(list)).then(function (arr) {
          var r = arr.reduce(function (r2, err) {
            return Object.assign(r2 || {}, err);
          }, {});
          Object.keys(r).forEach(function (key) {
            if (r[key] === true) {
              delete r[key];
            }
          });
          resolve(isEmpty_1(r) ? true : r);
        })["catch"](console.error);
      });
    }

    function getAllFieldsValue() {
      var fieldsValue = {};
      formItemsRef.current.forEach(function (_ref5) {
        var formItemRef = _ref5.current;

        if (formItemRef.name) {
          fieldsValue[formItemRef.name] = formItemRef.value;
        }
      });
      return fieldsValue;
    }

    function getFieldValue(name) {
      if (!name) return null;
      var target = formItemsRef.current.find(function (_ref6) {
        var formItemRef = _ref6.current;
        return formItemRef.name === name;
      });
      return target && target.value;
    }

    function setFieldsValue() {
      var fileds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var formItemsMap = formItemsRef.current.reduce(function (acc, _ref7) {
        var currItem = _ref7.current;
        var name = currItem.name;
        return _objectSpread$j(_objectSpread$j({}, acc), {}, _defineProperty$2({}, name, currItem));
      }, {});
      Object.keys(fileds).forEach(function (key) {
        var _formItemsMap$key;

        (_formItemsMap$key = formItemsMap[key]) === null || _formItemsMap$key === void 0 ? void 0 : _formItemsMap$key.setValue(fileds[key]);
      });
    }

    function setFields() {
      var fileds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      if (!Array.isArray(fileds)) throw new Error("setFields \u53C2\u6570\u9700\u8981 Array \u7C7B\u578B");
      var formItemsMap = formItemsRef.current.reduce(function (acc, _ref8) {
        var currItem = _ref8.current;
        var name = currItem.name;
        return _objectSpread$j(_objectSpread$j({}, acc), {}, _defineProperty$2({}, name, currItem));
      }, {});
      fileds.forEach(function (filed) {
        var _formItemsMap$name;

        var name = filed.name,
            value = filed.value,
            status = filed.status;
        (_formItemsMap$name = formItemsMap[name]) === null || _formItemsMap$name === void 0 ? void 0 : _formItemsMap$name.setField({
          value: value,
          status: status
        });
      });
    }

    React.useImperativeHandle(ref, function () {
      return {
        submit: submitHandler,
        reset: resetHandler,
        getFieldValue: getFieldValue,
        setFieldsValue: setFieldsValue,
        setFields: setFields,
        validate: validate,
        getAllFieldsValue: getAllFieldsValue
      };
    });

    function onFormItemValueChange(changedValue) {
      var allFileds = getAllFieldsValue();
      onValuesChange(changedValue, allFileds);
    }

    return /* @__PURE__ */React__default["default"].createElement(FormContext.Provider, {
      value: {
        labelWidth: labelWidth,
        statusIcon: statusIcon,
        labelAlign: labelAlign,
        layout: layout,
        size: size,
        colon: colon,
        requiredMark: requiredMark,
        showErrorMessage: showErrorMessage,
        scrollToFirstError: scrollToFirstError,
        resetType: resetType,
        rules: rules,
        formItemsRef: formItemsRef,
        onFormItemValueChange: onFormItemValueChange
      }
    }, /* @__PURE__ */React__default["default"].createElement("form", {
      className: formClass,
      style: style,
      onSubmit: submitHandler,
      onReset: resetHandler,
      ref: ref
    }, children));
  }, {
    FormItem: FormItem
  });
  Form$1.displayName = "Form";

  var Form = Form$1;

  function getScrollbarWidth() {
    var scrollDiv = document.createElement("div");
    scrollDiv.style.cssText = "width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;";
    document.body.appendChild(scrollDiv);
    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
    document.body.removeChild(scrollDiv);
    return scrollbarWidth;
  }

  function hasScrollbar() {
    return document.body.scrollHeight > (window.innerHeight || document.documentElement.clientHeight);
  }

  var DrawerWrapper = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var children = props.children,
        attach = props.attach;
    var portalRef = React.useRef(null);
    var portal = null;
    React.useImperativeHandle(ref, function () {
      if (attach === "") {
        return portalRef.current.parentElement;
      }

      return portalRef.current;
    });

    if (attach === "") {
      portal = /* @__PURE__ */React__default["default"].createElement("div", {
        ref: portalRef
      }, /*#__PURE__*/React.cloneElement(children));
    } else {
      portal = /* @__PURE__ */React__default["default"].createElement(Portal$1, {
        getContainer: attach,
        ref: portalRef
      }, children);
    }

    return portal;
  });
  DrawerWrapper.displayName = "DrawerWrapper";

  function ownKeys$i(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$i(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$i(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$i(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var CloseTriggerType = {
    CLICK_OVERLAY: "overlay",
    CLICK_CLOSE_BTN: "close-btn",
    CLICK_CANCEL_BTN: "cancel",
    KEYDOWN_ESC: "esc"
  };

  var getSizeValue = function getSizeValue(size) {
    var defaultSize = isNaN(Number(size)) ? size : "".concat(size, "px");
    return {
      small: "300px",
      medium: "500px",
      large: "760px"
    }[size] || defaultSize;
  };

  var Drawer$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _classnames;

    var className = props.className,
        style = props.style,
        visible = props.visible,
        _props$attach = props.attach,
        attach = _props$attach === void 0 ? "" : _props$attach,
        showOverlay = props.showOverlay,
        size = props.size,
        placement = props.placement,
        onCancel = props.onCancel,
        onConfirm = props.onConfirm,
        onClose = props.onClose,
        onCloseBtnClick = props.onCloseBtnClick,
        onOverlayClick = props.onOverlayClick,
        onEscKeydown = props.onEscKeydown,
        showInAttachedElement = props.showInAttachedElement,
        closeOnOverlayClick = props.closeOnOverlayClick,
        closeOnEscKeydown = props.closeOnEscKeydown,
        children = props.children,
        header = props.header,
        body = props.body,
        footer = props.footer,
        closeBtn = props.closeBtn,
        cancelBtn = props.cancelBtn,
        confirmBtn = props.confirmBtn,
        zIndex = props.zIndex,
        destroyOnClose = props.destroyOnClose,
        mode = props.mode,
        _props$preventScrollT = props.preventScrollThrough,
        preventScrollThrough = _props$preventScrollT === void 0 ? true : _props$preventScrollT;

    var _useLocaleReceiver = useLocaleReceiver("drawer"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
        local = _useLocaleReceiver2[0],
        t = _useLocaleReceiver2[1];

    var confirmText = t(local.confirm);
    var cancelText = t(local.cancel);

    var _useContext = React.useContext(ConfigContext$1),
        classPrefix = _useContext.classPrefix;

    var containerRef = React.useRef();
    var contentWrapperRef = React.useRef();
    var drawerRef = React.useRef();
    var prefixCls = "".concat(classPrefix, "-drawer");
    var lockCls = "".concat(prefixCls, "--lock");
    var transform = visible ? "translate(0px)" : "";
    var closeIcon = /*#__PURE__*/React__default["default"].isValidElement(closeBtn) ? closeBtn : /* @__PURE__ */React__default["default"].createElement(CloseIcon, null);

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        isDestroyOnClose = _useState2[0],
        setIsDestroyOnClose = _useState2[1];

    React.useImperativeHandle(ref, function () {
      return containerRef.current;
    });
    React.useEffect(function () {
      if (preventScrollThrough) {
        if (visible && !showInAttachedElement) {
          addClass$1(document.body, lockCls);
        } else {
          removeClass$2(document.body, lockCls);
        }
      }
    }, [visible, showInAttachedElement, lockCls, preventScrollThrough]);
    React.useEffect(function () {
      if (!destroyOnClose || !visible) return;
      setIsDestroyOnClose(false);
    }, [visible, destroyOnClose]);
    React.useEffect(function () {
      var documentBodyCssText = "";

      if (visible) {
        if (attach !== "" && hasScrollbar()) {
          var scrollbarWidth = getScrollbarWidth();
          documentBodyCssText = "overflow: hidden; width: calc(100% - ".concat(scrollbarWidth, "px);");

          if (mode !== "push") {
            document.body.style.cssText = documentBodyCssText;
          }
        }
      }

      if (mode === "push") {
        drawerRef.current.style.cssText = "transition: margin 300ms cubic-bezier(0.7, 0.3, 0.1, 1) 0s";
        var marginStr = {
          left: "margin: 0 0 0 ".concat(getSizeValue(size)),
          right: "margin: 0 0 0 -".concat(getSizeValue(size)),
          top: "margin: ".concat(getSizeValue(size), " 0 0 0"),
          bottom: "margin: -".concat(getSizeValue(size), " 0 0 0")
        }[placement];

        if (visible) {
          drawerRef.current.style.cssText += marginStr;
        } else {
          drawerRef.current.style.cssText = drawerRef.current.style.cssText.replace(/margin:.+;/, "");
        }
      }

      if (contentWrapperRef.current) {
        containerRef.current.focus();
        contentWrapperRef.current.style.transform = transform;
      }
    }, [attach, mode, transform, visible, placement, size]);

    function onMaskClick(e) {
      onOverlayClick === null || onOverlayClick === void 0 ? void 0 : onOverlayClick({
        e: e
      });
      closeOnOverlayClick && (onClose === null || onClose === void 0 ? void 0 : onClose({
        e: e,
        trigger: CloseTriggerType.CLICK_OVERLAY
      }));
    }

    function onClickCloseBtn(e) {
      onCloseBtnClick === null || onCloseBtnClick === void 0 ? void 0 : onCloseBtnClick({
        e: e
      });
      onClose === null || onClose === void 0 ? void 0 : onClose({
        e: e,
        trigger: CloseTriggerType.CLICK_CLOSE_BTN
      });
    }

    function onKeyDownEsc(e) {
      if (e.key !== "Escape") return;
      onEscKeydown === null || onEscKeydown === void 0 ? void 0 : onEscKeydown({
        e: e
      });
      closeOnEscKeydown && (onClose === null || onClose === void 0 ? void 0 : onClose({
        e: e,
        trigger: CloseTriggerType.KEYDOWN_ESC
      }));
    }

    function onCancelClick(e) {
      onCancel === null || onCancel === void 0 ? void 0 : onCancel({
        e: e
      });
      onClose === null || onClose === void 0 ? void 0 : onClose({
        e: e,
        trigger: CloseTriggerType.CLICK_CANCEL_BTN
      });
    }

    function onConfirmClick(e) {
      onConfirm === null || onConfirm === void 0 ? void 0 : onConfirm({
        e: e
      });
    }

    function onTransitionEnd() {
      if (!visible) {
        document.body.style.display = "none";
        document.body.style.overflow = "";
        document.body.style.width = "";
        document.body.style.margin = "";
        document.body.style.display = "block";
        destroyOnClose && setIsDestroyOnClose(true);
      }
    }

    var drawerClass = classNames$1(prefixCls, className, "".concat(prefixCls, "--").concat(placement), (_classnames = {}, _defineProperty$2(_classnames, "".concat(prefixCls, "--open"), visible), _defineProperty$2(_classnames, "".concat(prefixCls, "--attach"), showInAttachedElement), _defineProperty$2(_classnames, "".concat(prefixCls, "--without-mask"), !showOverlay), _classnames));
    var contentWrapperClass = classNames$1("".concat(prefixCls, "__content-wrapper"), "".concat(prefixCls, "__content-wrapper--").concat(placement));
    var contentWrapperStyle = {
      transform: visible ? "translateX(0)" : void 0,
      width: ["left", "right"].includes(placement) ? getSizeValue(size) : "",
      height: ["top", "bottom"].includes(placement) ? getSizeValue(size) : ""
    };

    function getFooter() {
      if (footer !== true) return footer;
      var defaultCancelBtn = /* @__PURE__ */React__default["default"].createElement(Button, {
        theme: "default",
        onClick: onCancelClick,
        className: "".concat(prefixCls, "__cancel")
      }, cancelText);
      var defaultConfirmBtn = /* @__PURE__ */React__default["default"].createElement(Button, {
        theme: "primary",
        onClick: onConfirmClick,
        className: "".concat(prefixCls, "__confirm")
      }, confirmText);
      var renderCancelBtn = cancelBtn && /*#__PURE__*/React__default["default"].isValidElement(cancelBtn) ? cancelBtn : defaultCancelBtn;
      var renderConfirmBtn = confirmBtn && /*#__PURE__*/React__default["default"].isValidElement(confirmBtn) ? confirmBtn : defaultConfirmBtn;
      var footerStyle = {
        display: "flex",
        justifyContent: placement === "right" ? "flex-start" : "flex-end"
      };
      return /* @__PURE__ */React__default["default"].createElement("div", {
        style: footerStyle
      }, placement === "right" && renderConfirmBtn, renderCancelBtn, placement !== "right" && renderConfirmBtn);
    }

    var renderOverlay = showOverlay && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(prefixCls, "__mask"),
      onClick: onMaskClick
    });
    var renderCloseBtn = closeBtn && /* @__PURE__ */React__default["default"].createElement("div", {
      onClick: onClickCloseBtn,
      className: "".concat(prefixCls, "__close-btn")
    }, closeIcon);
    var renderHeader = header && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(prefixCls, "__header")
    }, header);
    var renderBody = /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(prefixCls, "__body")
    }, body || children);
    var renderFooter = footer && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(prefixCls, "__footer")
    }, getFooter());
    if (isDestroyOnClose && !visible) return null;
    return /* @__PURE__ */React__default["default"].createElement(DrawerWrapper, {
      attach: attach,
      ref: drawerRef
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      ref: containerRef,
      className: drawerClass,
      style: _objectSpread$i({
        zIndex: zIndex
      }, style),
      tabIndex: 0,
      onKeyDown: onKeyDownEsc,
      onTransitionEnd: onTransitionEnd
    }, renderOverlay, /* @__PURE__ */React__default["default"].createElement("div", {
      ref: contentWrapperRef,
      className: contentWrapperClass,
      style: contentWrapperStyle
    }, renderCloseBtn, renderHeader, renderBody, renderFooter)));
  });
  Drawer$1.defaultProps = {
    attach: "",
    closeBtn: true,
    closeOnOverlayClick: true,
    closeOnEscKeydown: true,
    size: "small",
    placement: "right",
    mode: "overlay",
    destroyOnClose: false,
    showOverlay: true,
    header: void 0,
    footer: true
  };
  Drawer$1.displayName = "Drawer";

  var Drawer = Drawer$1;

  var _excluded$5 = ["from", "to", "direction"];

  var getBackgroundColor = function getBackgroundColor(color) {
    if (typeof color === "string") {
      return color;
    }

    if (Array.isArray(color)) {
      if (color[0] && color[0][0] === "#") {
        color.unshift("90deg");
      }

      return "linear-gradient( ".concat(color.join(","), " )");
    }

    var from = color.from,
        to = color.to,
        _color$direction = color.direction,
        direction = _color$direction === void 0 ? "to right" : _color$direction,
        rest = _objectWithoutProperties$1(color, _excluded$5);

    var keys = Object.keys(rest);

    if (keys.length) {
      keys = keys.sort(function (a, b) {
        return parseFloat(a.substr(0, a.length - 1)) - parseFloat(b.substr(0, b.length - 1));
      });
      var tempArr = keys.map(function (key) {
        return "".concat(rest[key], " ").concat(key);
      });
      return "linear-gradient(".concat(direction, ", ").concat(tempArr.join(","), ")");
    }

    return "linear-gradient(".concat(direction, ", ").concat(from, ", ").concat(to, ")");
  };

  var Progress$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _props$theme = props.theme,
        theme = _props$theme === void 0 ? "line" : _props$theme,
        _props$percentage = props.percentage,
        percentage = _props$percentage === void 0 ? 0 : _props$percentage,
        _props$label = props.label,
        label = _props$label === void 0 ? true : _props$label,
        _props$color = props.color,
        color = _props$color === void 0 ? "" : _props$color,
        _props$trackColor = props.trackColor,
        trackColor = _props$trackColor === void 0 ? "#f5f5f5" : _props$trackColor,
        strokeWidth = props.strokeWidth,
        _props$size = props.size,
        size = _props$size === void 0 ? "medium" : _props$size,
        className = props.className;
    var status = props.status;

    if (!status && percentage >= 100) {
      status = "success";
    }

    var iconMap = {
      success: CheckCircleFilledIcon,
      error: CloseCircleFilledIcon,
      warning: ErrorCircleFilledIcon
    };

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var getInfoContent = function getInfoContent() {
      if (!label) {
        return "";
      }

      var info;

      if (typeof label === "boolean") {
        info = /* @__PURE__ */React__default["default"].createElement("div", {
          className: "".concat(classPrefix, "-progress__info")
        }, "".concat(percentage, "%"));

        if (["success", "error", "warning"].includes(status)) {
          var Icon = iconMap[status];
          info = /* @__PURE__ */React__default["default"].createElement("div", {
            className: "".concat(classPrefix, "-progress__info")
          }, /* @__PURE__ */React__default["default"].createElement(Icon, {
            className: "".concat(classPrefix, "-progress__icon")
          }));
        }
      } else {
        info = /* @__PURE__ */React__default["default"].createElement("div", {
          className: "".concat(classPrefix, "-progress__info")
        }, label);
      }

      return info;
    };

    var statusClassName = "".concat(classPrefix, "-progress--status--").concat(status);
    var progressDom;

    if (theme === "circle") {
      iconMap = {
        success: CheckCircleIcon,
        error: CloseCircleIcon,
        warning: ErrorCircleIcon
      };

      var getDiameter = function getDiameter() {
        var diameter2 = 112;

        if (!size) {
          return diameter2;
        }

        switch (size) {
          default:
            diameter2 = Number(size);
            break;

          case "small":
            diameter2 = 72;
            break;

          case "medium":
            diameter2 = 112;
            break;

          case "large":
            diameter2 = 160;
            break;
        }

        return diameter2;
      };

      var getCircleStokeWidth = function getCircleStokeWidth() {
        if (!strokeWidth) {
          if (size === "small") {
            return 4;
          }
        }

        if (typeof strokeWidth !== "number" || Number.isNaN(strokeWidth)) {
          return 6;
        }

        return strokeWidth;
      };

      var circleStokeWidth = getCircleStokeWidth();
      var diameter = getDiameter();
      var radius = diameter / 2;
      var innerRadius = radius - circleStokeWidth;
      var perimeter = Math.PI * 2 * radius;
      var percent = percentage / 100;
      var strokeDasharray = "".concat(perimeter * percent, "  ").concat(perimeter * (1 - percent));
      var fontSizeRatio = innerRadius * 0.27;
      var circleBoxStyle = {
        width: diameter,
        height: diameter,
        fontSize: 4 + fontSizeRatio
      };
      var circlePathStyle = {
        stroke: color,
        strokeLinecap: circleStokeWidth < 30 ? "round" : "buff"
      };
      var circleCenterInViewBox = radius + circleStokeWidth / 2;
      progressDom = /* @__PURE__ */React__default["default"].createElement("div", {
        ref: ref,
        className: classNames$1("".concat(classPrefix, "-progress--circle"), _defineProperty$2({}, "".concat(statusClassName), status)),
        style: circleBoxStyle
      }, getInfoContent(), /* @__PURE__ */React__default["default"].createElement("svg", {
        width: diameter,
        height: diameter,
        viewBox: "0 0 ".concat(diameter + circleStokeWidth, " ").concat(diameter + circleStokeWidth)
      }, /* @__PURE__ */React__default["default"].createElement("circle", {
        cx: circleCenterInViewBox,
        cy: circleCenterInViewBox,
        r: radius,
        strokeWidth: circleStokeWidth,
        stroke: trackColor,
        fill: "none"
      }), /* @__PURE__ */React__default["default"].createElement("circle", {
        cx: circleCenterInViewBox,
        cy: circleCenterInViewBox,
        r: radius,
        strokeWidth: circleStokeWidth,
        fill: "none",
        transform: "matrix(0,-1,1,0,0,".concat(diameter + circleStokeWidth, ")"),
        strokeDasharray: strokeDasharray,
        className: "".concat(classPrefix, "-progress__circle-inner"),
        style: circlePathStyle
      })));
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: className
      }, progressDom);
    }

    var getHeight = function getHeight() {
      if (strokeWidth) {
        return typeof strokeWidth === "string" ? strokeWidth : "".concat(strokeWidth, "px");
      }
    };

    var trackStyle = {
      height: getHeight(),
      backgroundColor: trackColor,
      borderRadius: getHeight()
    };
    var barStyle = {
      width: "".concat(percentage, "%"),
      background: getBackgroundColor(color),
      borderRadius: getHeight()
    };

    if (theme === "plump") {
      var _classNames2;

      var PLUMP_SEPERATE = 10;
      progressDom = /* @__PURE__ */React__default["default"].createElement("div", {
        ref: ref,
        className: classNames$1("".concat(classPrefix, "-progress__bar"), "".concat(classPrefix, "-progress--plump"), (_classNames2 = {}, _defineProperty$2(_classNames2, "".concat(statusClassName), status), _defineProperty$2(_classNames2, "".concat(classPrefix, "-progress--over-ten"), percentage > PLUMP_SEPERATE), _defineProperty$2(_classNames2, "".concat(classPrefix, "-progress--under-ten"), percentage <= PLUMP_SEPERATE), _classNames2)),
        style: trackStyle
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-progress__inner"),
        style: barStyle
      }, label && /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-progress__info"),
        style: percentage > 10 ? {
          color: "#fff"
        } : {
          right: "-2.5em"
        }
      }, "".concat(percentage, "%"))));
    } else {
      progressDom = /* @__PURE__ */React__default["default"].createElement("div", {
        ref: ref,
        className: classNames$1("".concat(classPrefix, "-progress--thin"), _defineProperty$2({}, "".concat(statusClassName), status))
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-progress__bar"),
        style: trackStyle
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-progress__inner"),
        style: barStyle
      })), getInfoContent());
    }

    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: className
    }, progressDom);
  });
  Progress$1.displayName = "Progress";

  var Progress = Progress$1;

  function ownKeys$h(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$h(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$h(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$h(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var PopContent = function PopContent(props) {
    var content = props.content,
        cancelBtn = props.cancelBtn,
        confirmBtn = props.confirmBtn,
        icon = props.icon,
        _props$theme = props.theme,
        theme = _props$theme === void 0 ? "default" : _props$theme,
        _props$onCancel = props.onCancel,
        onCancel = _props$onCancel === void 0 ? noop : _props$onCancel,
        _props$onConfirm = props.onConfirm,
        onConfirm = _props$onConfirm === void 0 ? noop : _props$onConfirm,
        _props$onClose = props.onClose,
        onClose = _props$onClose === void 0 ? noop : _props$onClose;

    var _useLocaleReceiver = useLocaleReceiver("popconfirm"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
        local = _useLocaleReceiver2[0],
        t = _useLocaleReceiver2[1];

    var confirmText = t(local.confirm);
    var cancelText = t(local.cancel);

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var hideCancel = cancelBtn === null || cancelBtn === void 0;
    var hideConfirm = confirmBtn === null || confirmBtn === void 0;

    function renderIcon() {
      var color = "#0052D9";
      var defaultIcon = /* @__PURE__ */React__default["default"].createElement(InfoCircleFilledIcon, null);

      switch (theme) {
        case "warning":
          color = "#FFAA00";
          break;

        case "danger":
          color = "#FF3E00";
          break;
      }

      var iconComponent = null;

      if ( /*#__PURE__*/React__default["default"].isValidElement(icon)) {
        iconComponent = /*#__PURE__*/React__default["default"].cloneElement(icon, _objectSpread$h({
          style: {
            color: color
          }
        }, icon.props));
      } else if (typeof icon === "function") {
        iconComponent = icon();
      } else if (defaultIcon) {
        iconComponent = /*#__PURE__*/React__default["default"].cloneElement(defaultIcon, {
          style: {
            color: color
          }
        });
      }

      return iconComponent;
    }

    function renderCancel() {
      if ( /*#__PURE__*/React__default["default"].isValidElement(cancelBtn)) {
        return /*#__PURE__*/React__default["default"].cloneElement(cancelBtn, {
          onClick: function onClick(e) {
            var _cancelBtn$props, _cancelBtn$props$onCl;

            onClose({
              e: e,
              trigger: "cancel"
            });
            (_cancelBtn$props = cancelBtn.props) === null || _cancelBtn$props === void 0 ? void 0 : (_cancelBtn$props$onCl = _cancelBtn$props.onClick) === null || _cancelBtn$props$onCl === void 0 ? void 0 : _cancelBtn$props$onCl.call(_cancelBtn$props, e);
          }
        });
      }

      if (hideCancel) {
        return null;
      }

      return /* @__PURE__ */React__default["default"].createElement(Button$1, {
        size: "small",
        variant: "outline",
        onClick: function onClick(e) {
          onClose({
            e: e,
            trigger: "cancel"
          });
          onCancel({
            e: e
          });
        }
      }, isString_1(cancelBtn) ? cancelBtn : cancelText);
    }

    function renderConfirm() {
      if ( /*#__PURE__*/React__default["default"].isValidElement(confirmBtn)) {
        return /*#__PURE__*/React__default["default"].cloneElement(confirmBtn, {
          onClick: function onClick(e) {
            var _confirmBtn$props, _confirmBtn$props$onC;

            onClose({
              e: e,
              trigger: "confirm"
            });
            (_confirmBtn$props = confirmBtn.props) === null || _confirmBtn$props === void 0 ? void 0 : (_confirmBtn$props$onC = _confirmBtn$props.onClick) === null || _confirmBtn$props$onC === void 0 ? void 0 : _confirmBtn$props$onC.call(_confirmBtn$props, e);
          }
        });
      }

      if (hideConfirm) {
        return null;
      }

      return /* @__PURE__ */React__default["default"].createElement(Button$1, {
        size: "small",
        theme: "primary",
        onClick: function onClick(e) {
          onClose({
            e: e,
            trigger: "confirm"
          });
          onConfirm({
            e: e
          });
        }
      }, isString_1(confirmBtn) ? confirmBtn : confirmText);
    }

    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-popconfirm__content")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-popconfirm__body")
    }, renderIcon(), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-popconfirm__inner")
    }, content)), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-popconfirm__buttons")
    }, /* @__PURE__ */React__default["default"].createElement("span", {
      className: classNames$1("".concat(classPrefix, "-popconfirm__cancel"))
    }, renderCancel()), /* @__PURE__ */React__default["default"].createElement("span", {
      className: classNames$1("".concat(classPrefix, "-popconfirm__confirm"))
    }, renderConfirm())));
  };

  PopContent.displayName = "PopContent";

  function ownKeys$g(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$g(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$g(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$g(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var PopConfirm$1 = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
    var props = _extends({}, _ref);

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useDefault = useDefault(props.visible, props.defaultVisible, props.onVisibleChange),
        _useDefault2 = _slicedToArray(_useDefault, 2),
        visible = _useDefault2[0],
        setVisible = _useDefault2[1];

    return /* @__PURE__ */React__default["default"].createElement(Popup$1, _objectSpread$g(_objectSpread$g({
      ref: ref,
      destroyOnClose: true
    }, props), {}, {
      visible: visible,
      trigger: "click",
      onVisibleChange: function onVisibleChange(visible2) {
        return setVisible(visible2);
      },
      overlayClassName: classNames$1("".concat(classPrefix, "-popconfirm")),
      content: /* @__PURE__ */React__default["default"].createElement(PopContent, _objectSpread$g(_objectSpread$g({}, props), {}, {
        onClose: function onClose(context) {
          return setVisible(false, context);
        }
      }))
    }, props.popupProps));
  });
  PopConfirm$1.displayName = "PopConfirm";
  PopConfirm$1.defaultProps = {
    showArrow: true,
    cancelBtn: "\u53D6\u6D88",
    confirmBtn: "\u786E\u5B9A",
    onCancel: noop,
    onConfirm: noop,
    theme: "default"
  };

  var PopConfirm = PopConfirm$1;

  var _excluded$4 = ["disabled", "maxlength", "maxcharacter", "className", "readonly", "autofocus", "defaultValue", "style", "onKeydown", "onKeypress", "onKeyup", "autosize"];

  function ownKeys$f(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$f(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$f(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$f(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var Textarea$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _classNames;

    var disabled = props.disabled,
        maxlength = props.maxlength,
        maxcharacter = props.maxcharacter,
        className = props.className,
        readonly = props.readonly,
        autofocus = props.autofocus,
        defaultValue = props.defaultValue,
        style = props.style,
        _props$onKeydown = props.onKeydown,
        onKeydown = _props$onKeydown === void 0 ? noop : _props$onKeydown,
        _props$onKeypress = props.onKeypress,
        onKeypress = _props$onKeypress === void 0 ? noop : _props$onKeypress,
        _props$onKeyup = props.onKeyup,
        onKeyup = _props$onKeyup === void 0 ? noop : _props$onKeyup,
        _props$autosize = props.autosize,
        autosize = _props$autosize === void 0 ? false : _props$autosize,
        otherProps = _objectWithoutProperties$1(props, _excluded$4);

    var _useDefault = useDefault(props.value, defaultValue, props.onChange),
        _useDefault2 = _slicedToArray(_useDefault, 2),
        _useDefault2$ = _useDefault2[0],
        value = _useDefault2$ === void 0 ? "" : _useDefault2$,
        setValue = _useDefault2[1];

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        isFocused = _useState2[0],
        setIsFocused = _useState2[1];

    var hasMaxcharacter = typeof maxcharacter !== "undefined";
    var currentLength = React.useMemo(function () {
      return value ? String(value).length : 0;
    }, [value]);
    var characterLength = React.useMemo(function () {
      var characterInfo = getCharacterLength(String(value), maxcharacter);
      if (_typeof(characterInfo) === "object") return characterInfo.length;
      return characterInfo;
    }, [value, maxcharacter]);

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var textareaPropsNames = Object.keys(otherProps).filter(function (key) {
      return !/^on[A-Z]/.test(key);
    });
    var textareaProps = textareaPropsNames.reduce(function (textareaProps2, key) {
      return Object.assign(textareaProps2, _defineProperty$2({}, key, props[key]));
    }, {});
    var eventPropsNames = Object.keys(otherProps).filter(function (key) {
      return /^on[A-Z]/.test(key);
    });
    var eventProps = eventPropsNames.reduce(function (eventProps2, key) {
      Object.assign(eventProps2, _defineProperty$2({}, key, function (e) {
        if (disabled) return;
        if (key === "onFocus") setIsFocused(true);
        if (key === "onBlur") setIsFocused(false);
        props[key](e.currentTarget.value, {
          e: e
        });
      }));
      return eventProps2;
    }, {});
    var textareaClassNames = classNames$1(className, "".concat(classPrefix, "-textarea__inner"), (_classNames = {}, _defineProperty$2(_classNames, "".concat(classPrefix, "-is-disabled"), disabled), _defineProperty$2(_classNames, "".concat(classPrefix, "-is-focused"), isFocused), _defineProperty$2(_classNames, "".concat(classPrefix, "-resize-none"), _typeof(autosize) === "object"), _classNames));

    function inputValueChangeHandle(e) {
      var target = e.target;
      var val = target.value;

      if (maxcharacter && maxcharacter >= 0) {
        var stringInfo = getCharacterLength(val, maxcharacter);
        val = _typeof(stringInfo) === "object" && stringInfo.characters;
      }

      setValue(val, {
        e: e
      });
    }

    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: ref,
      style: style,
      className: classNames$1(className, "".concat(classPrefix, "-textarea"))
    }, /* @__PURE__ */React__default["default"].createElement("textarea", _objectSpread$f(_objectSpread$f(_objectSpread$f({}, textareaProps), eventProps), {}, {
      value: value,
      style: {
        height: autosize ? null : "auto"
      },
      className: textareaClassNames,
      readOnly: readonly,
      autoFocus: autofocus,
      disabled: disabled,
      maxLength: maxlength,
      onChange: inputValueChangeHandle,
      onKeyDown: function onKeyDown(e) {
        return onKeydown(e.currentTarget.value, {
          e: e
        });
      },
      onKeyPress: function onKeyPress(e) {
        return onKeypress(e.currentTarget.value, {
          e: e
        });
      },
      onKeyUp: function onKeyUp(e) {
        return onKeyup(e.currentTarget.value, {
          e: e
        });
      }
    })), hasMaxcharacter ? /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-textarea__limit")
    }, "".concat(characterLength, "/").concat(maxcharacter)) : null, !hasMaxcharacter && maxlength ? /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-textarea__limit")
    }, "".concat(currentLength, "/").concat(maxlength)) : null);
  });
  Textarea$1.displayName = "Textarea";

  var Textarea = Textarea$1;

  var BreadcrumbContext = /*#__PURE__*/React.createContext({
    maxItemWidthInContext: ""
  });

  var _excluded$3 = ["children", "separator", "disabled", "maxItemWidth", "maxWidth", "href", "to", "target", "router", "replace"];

  function ownKeys$e(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$e(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$e(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$e(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var BreadcrumbItem = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var children = props.children,
        _props$separator = props.separator,
        separator = _props$separator === void 0 ? /* @__PURE__ */React__default["default"].createElement(ChevronRightIcon, {
      style: {
        color: "rgba(0,0,0,.3)"
      }
    }) : _props$separator,
        disabled = props.disabled,
        maxItemWidth = props.maxItemWidth,
        maxWidth = props.maxWidth,
        href = props.href,
        to = props.to,
        target = props.target,
        router = props.router,
        replace = props.replace,
        restProps = _objectWithoutProperties$1(props, _excluded$3);

    var _useContext = React.useContext(BreadcrumbContext),
        maxItemWidthInContext = _useContext.maxItemWidthInContext;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var commonClassNames = useCommonClassName();
    var breadcrumbItemClassNames = classNames$1("".concat(classPrefix, "-breadcrumb__item"));
    var textWrapperClassName = "".concat(classPrefix, "-breadcrumb__inner");
    var textClassNames = classNames$1("".concat(classPrefix, "-breadcrumb--text-oveflow"), _defineProperty$2({}, commonClassNames.STATUS.disabled, disabled));
    var separatorClassName = "".concat(classPrefix, "-breadcrumb__separator");
    var linkClassName = "".concat(classPrefix, "-link");
    var maxWidthForItem = React.useMemo(function () {
      return {
        maxWidth: maxWidth || maxItemWidth || maxItemWidthInContext || "120px"
      };
    }, [maxItemWidth, maxWidth, maxItemWidthInContext]);
    var textContent = /* @__PURE__ */React__default["default"].createElement("span", {
      className: textWrapperClassName,
      style: maxWidthForItem
    }, children);
    var itemContent = /* @__PURE__ */React__default["default"].createElement("span", {
      className: textClassNames
    }, textContent);

    if ((href || to) && !disabled) {
      var handleRouting = function handleRouting() {
        if (href || !router) return;
        replace ? router.replace(to) : router.push(to);
      };

      itemContent = /* @__PURE__ */React__default["default"].createElement("a", {
        className: classNames$1(textClassNames, linkClassName),
        href: href,
        target: target,
        onClick: handleRouting
      }, textContent);
    }

    var separatorContent = typeof separator === "function" ? separator() : separator;
    return /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$e({
      className: breadcrumbItemClassNames,
      ref: ref
    }, restProps), itemContent, /* @__PURE__ */React__default["default"].createElement("span", {
      className: separatorClassName
    }, separatorContent));
  });
  BreadcrumbItem.displayName = "BreadcrumbItem";

  var _excluded$2 = ["children", "options", "separator", "maxItemWidth"];

  function ownKeys$d(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$d(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$d(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$d(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var Breadcrumb$1 = forwardRefWithStatics(function (props, ref) {
    var children = props.children,
        options = props.options,
        separator = props.separator,
        maxItemWidth = props.maxItemWidth,
        restProps = _objectWithoutProperties$1(props, _excluded$2);

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var content = children;

    if (options && options.length) {
      content = options.map(function (option, index) {
        return /* @__PURE__ */React__default["default"].createElement(BreadcrumbItem, {
          key: index,
          maxWidth: option.maxWidth,
          disabled: option.disabled,
          href: option.href,
          target: option.target,
          to: option.to,
          router: option.router,
          replace: option.replace,
          separator: separator,
          maxItemWidth: maxItemWidth
        }, option.content || option.children);
      });
    }

    return /* @__PURE__ */React__default["default"].createElement(BreadcrumbContext.Provider, {
      value: {
        maxItemWidthInContext: maxItemWidth
      }
    }, /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$d({
      ref: ref,
      className: "".concat(classPrefix, "-breadcrumb")
    }, restProps), content));
  }, {
    BreadcrumbItem: BreadcrumbItem
  });
  Breadcrumb$1.displayName = "Breadcrumb";

  var Breadcrumb = Breadcrumb$1;

  /**
   * Gets the last element of `array`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to query.
   * @returns {*} Returns the last element of `array`.
   * @example
   *
   * _.last([1, 2, 3]);
   * // => 3
   */

  function last$1(array) {
    var length = array == null ? 0 : array.length;
    return length ? array[length - 1] : undefined;
  }

  var last_1 = last$1;

  var baseGet = _baseGet,
      baseSlice$1 = _baseSlice;
  /**
   * Gets the parent value at `path` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} path The path to get the parent value of.
   * @returns {*} Returns the parent value.
   */

  function parent$1(object, path) {
    return path.length < 2 ? object : baseGet(object, baseSlice$1(path, 0, -1));
  }

  var _parent = parent$1;

  var castPath$1 = _castPath,
      last = last_1,
      parent = _parent,
      toKey = _toKey;
  /**
   * The base implementation of `_.unset`.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {Array|string} path The property path to unset.
   * @returns {boolean} Returns `true` if the property is deleted, else `false`.
   */

  function baseUnset$1(object, path) {
    path = castPath$1(path, object);
    object = parent(object, path);
    return object == null || delete object[toKey(last(path))];
  }

  var _baseUnset = baseUnset$1;

  var isPlainObject = isPlainObject_1;
  /**
   * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
   * objects.
   *
   * @private
   * @param {*} value The value to inspect.
   * @param {string} key The key of the property to inspect.
   * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
   */

  function customOmitClone$1(value) {
    return isPlainObject(value) ? undefined : value;
  }

  var _customOmitClone = customOmitClone$1;

  var arrayMap = _arrayMap,
      baseClone = _baseClone,
      baseUnset = _baseUnset,
      castPath = _castPath,
      copyObject = _copyObject,
      customOmitClone = _customOmitClone,
      flatRest = _flatRest,
      getAllKeysIn = _getAllKeysIn;
  /** Used to compose bitmasks for cloning. */

  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;
  /**
   * The opposite of `_.pick`; this method creates an object composed of the
   * own and inherited enumerable property paths of `object` that are not omitted.
   *
   * **Note:** This method is considerably slower than `_.pick`.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The source object.
   * @param {...(string|string[])} [paths] The property paths to omit.
   * @returns {Object} Returns the new object.
   * @example
   *
   * var object = { 'a': 1, 'b': '2', 'c': 3 };
   *
   * _.omit(object, ['a', 'c']);
   * // => { 'b': '2' }
   */

  var omit = flatRest(function (object, paths) {
    var result = {};

    if (object == null) {
      return result;
    }

    var isDeep = false;
    paths = arrayMap(paths, function (path) {
      path = castPath(path, object);
      isDeep || (isDeep = path.length > 1);
      return path;
    });
    copyObject(object, getAllKeysIn(object), result);

    if (isDeep) {
      result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
    }

    var length = paths.length;

    while (length--) {
      baseUnset(result, paths[length]);
    }

    return result;
  });
  var omit_1 = omit;

  var DropdownItem = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _classNames;

    var _props$path = props.path,
        path = _props$path === void 0 ? "" : _props$path,
        _props$hasChildren = props.hasChildren,
        hasChildren = _props$hasChildren === void 0 ? false : _props$hasChildren,
        maxColumnWidth = props.maxColumnWidth,
        minColumnWidth = props.minColumnWidth,
        active = props.active,
        disabled = props.disabled,
        content = props.content,
        value = props.value,
        divider = props.divider;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var dropdownItemRef = React.useRef(null);
    useRipple(ref || dropdownItemRef);
    var dropdownItemClass = "".concat(classPrefix, "-dropdown__item");

    var renderSuffix = function renderSuffix() {
      return hasChildren ? /* @__PURE__ */React__default["default"].createElement(ChevronRightIcon, {
        className: "".concat(classPrefix, "-dropdown__item-icon")
      }) : null;
    };

    var handleItemClick = function handleItemClick(e) {
      if (!hasChildren && !disabled) {
        var data = {
          value: value,
          path: path,
          content: content
        };
        props.onClick(data, {
          e: e
        });
      }
    };

    var handleMouseover = function handleMouseover() {
      props.onHover(path);
    };

    return /* @__PURE__ */React__default["default"].createElement("div", null, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(dropdownItemClass, (_classNames = {}, _defineProperty$2(_classNames, "".concat(classPrefix, "-dropdown--suffix"), hasChildren), _defineProperty$2(_classNames, "".concat(classPrefix, "-is-disabled"), disabled), _defineProperty$2(_classNames, "".concat(classPrefix, "-is-active"), active), _classNames)),
      style: {
        maxWidth: pxCompat(maxColumnWidth),
        minWidth: pxCompat(minColumnWidth)
      },
      onClick: handleItemClick,
      onMouseOver: handleMouseover,
      ref: ref || dropdownItemRef
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(dropdownItemClass, "-content")
    }, /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(dropdownItemClass, "-text")
    }, content)), renderSuffix()), divider ? /* @__PURE__ */React__default["default"].createElement(Divider, null) : null);
  });

  var DropdownMenu = function DropdownMenu(props) {
    var _props$options = props.options,
        options = _props$options === void 0 ? [] : _props$options,
        _props$maxHeight = props.maxHeight,
        maxHeight = _props$maxHeight === void 0 ? 300 : _props$maxHeight,
        _props$maxColumnWidth = props.maxColumnWidth,
        maxColumnWidth = _props$maxColumnWidth === void 0 ? 100 : _props$maxColumnWidth,
        _props$minColumnWidth = props.minColumnWidth,
        minColumnWidth = _props$minColumnWidth === void 0 ? 10 : _props$minColumnWidth;

    var _useState = React.useState(""),
        _useState2 = _slicedToArray(_useState, 2),
        path = _useState2[0],
        setPath = _useState2[1];

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var dropdownMenuClass = "".concat(classPrefix, "-dropdown__menu");

    var isActive = function isActive(item, pathPrefix) {
      var excludeSelf = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var itemPath = "".concat(pathPrefix, "/").concat(item.value);

      if (excludeSelf && path === itemPath) {
        return false;
      }

      return path.indexOf(itemPath) === 0;
    };

    var handleHoverItem = function handleHoverItem(path2) {
      setPath(path2);
    };

    var handleItemClick = function handleItemClick(data, context, idx) {
      var _options$idx, _options$idx$onClick;

      (_options$idx = options[idx]) === null || _options$idx === void 0 ? void 0 : (_options$idx$onClick = _options$idx.onClick) === null || _options$idx$onClick === void 0 ? void 0 : _options$idx$onClick.call(_options$idx, data, context);
      props.onClick(data, context);
    };

    var renderDropdownColumn = function renderDropdownColumn(children, showSubmenu, pathPrefix) {
      var menuClass = ["".concat(dropdownMenuClass, "-column"), "narrow-scrollbar", {
        submenu__visible: showSubmenu
      }];
      return /* @__PURE__ */React__default["default"].createElement("div", {
        key: "/".concat(pathPrefix),
        className: classNames$1(menuClass),
        style: {
          maxHeight: "".concat(maxHeight, "px")
        }
      }, children.map(function (item, idx) {
        return /* @__PURE__ */React__default["default"].createElement(DropdownItem, {
          key: idx,
          disabled: item.disabled,
          active: isActive(item, pathPrefix) || item.active,
          value: item.value,
          content: item.content,
          divider: item.divider,
          hasChildren: item.children && item.children.length > 0,
          path: "".concat(pathPrefix, "/").concat(item.value),
          maxColumnWidth: maxColumnWidth,
          minColumnWidth: minColumnWidth,
          onClick: function onClick(data, context) {
            return handleItemClick(data, context, idx);
          },
          onHover: handleHoverItem
        });
      }));
    };

    var dropdownItems = function dropdownItems(options2) {
      var _activeItem$children;

      var pathPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
      var columns = [];
      var activeItem = options2.find(function (item) {
        return isActive(item, pathPrefix, false);
      });
      columns.push(renderDropdownColumn(options2, !!activeItem, pathPrefix));

      if (activeItem !== null && activeItem !== void 0 && (_activeItem$children = activeItem.children) !== null && _activeItem$children !== void 0 && _activeItem$children.length) {
        columns.push.apply(columns, _toConsumableArray(dropdownItems(activeItem.children, "".concat(pathPrefix, "/").concat(activeItem.value))));
      }

      return columns;
    };

    var renderDropdownItems = dropdownItems(options);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: dropdownMenuClass
    }, renderDropdownItems);
  };

  function ownKeys$c(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$c(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$c(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$c(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var Dropdown$1 = function Dropdown(props) {
    var _props$popupProps = props.popupProps,
        popupProps = _props$popupProps === void 0 ? {} : _props$popupProps,
        disabled = props.disabled,
        _props$placement = props.placement,
        placement = _props$placement === void 0 ? "bottom-left" : _props$placement,
        _props$trigger = props.trigger,
        trigger = _props$trigger === void 0 ? "hover" : _props$trigger,
        _props$className = props.className,
        className = _props$className === void 0 ? "" : _props$className,
        children = props.children,
        _props$hideAfterItemC = props.hideAfterItemClick,
        hideAfterItemClick = _props$hideAfterItemC === void 0 ? true : _props$hideAfterItemC;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        isPopupVisible = _useState2[0],
        togglePopupVisible = _useState2[1];

    var dropdownClass = "".concat(classPrefix, "-dropdown");

    var handleMenuClick = function handleMenuClick(data, context) {
      var _props$onClick;

      if (hideAfterItemClick) {
        togglePopupVisible(false);
      }

      (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, data, context);
    };

    var DropdownContent = function DropdownContent() {
      return /* @__PURE__ */React__default["default"].createElement(DropdownMenu, _objectSpread$c(_objectSpread$c({}, props), {}, {
        onClick: handleMenuClick
      }));
    };

    var handleVisibleChange = function handleVisibleChange(visible, context) {
      var _popupProps$onVisible;

      togglePopupVisible(visible);
      popupProps === null || popupProps === void 0 ? void 0 : (_popupProps$onVisible = popupProps.onVisibleChange) === null || _popupProps$onVisible === void 0 ? void 0 : _popupProps$onVisible.call(popupProps, visible, context);
    };

    var popupParams = _objectSpread$c({
      disabled: disabled,
      placement: placement,
      trigger: trigger,
      showArrow: false,
      overlayClassName: classNames$1(dropdownClass, className),
      content: DropdownContent()
    }, omit_1(popupProps, "onVisibleChange"));

    return /* @__PURE__ */React__default["default"].createElement(Popup, _objectSpread$c({
      expandAnimation: true,
      destroyOnClose: true,
      visible: isPopupVisible,
      onVisibleChange: handleVisibleChange
    }, popupParams), children);
  };

  Dropdown$1.displayName = "Dropdown";

  var Dropdown = Dropdown$1;

  var numberToPencent = function numberToPencent(number) {
    return "".concat(number * 100, "%");
  };

  function ownKeys$b(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$b(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$b(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$b(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var SliderHandleButton = function SliderHandleButton(_ref) {
    var onChange = _ref.onChange,
        style = _ref.style,
        classPrefix = _ref.classPrefix,
        toolTipProps = _ref.toolTipProps;

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        popupVisible = _useState2[0],
        setPopupVisible = _useState2[1];

    var onSliderDragging = function onSliderDragging(e) {
      onChange(e);
    };

    var onSliderDraggingEnd = function onSliderDraggingEnd() {
      window.removeEventListener("mousemove", onSliderDragging);
      window.removeEventListener("mouseup", onSliderDraggingEnd);
      window.removeEventListener("touchmove", onSliderDragging);
      window.removeEventListener("touchend", onSliderDraggingEnd);
    };

    var handleSliderMouseDown = function handleSliderMouseDown(e) {
      e.stopPropagation();
      setPopupVisible(true);
      window.addEventListener("mousemove", onSliderDragging);
      window.addEventListener("mouseup", onSliderDraggingEnd);
      window.addEventListener("touchmove", onSliderDragging);
      window.addEventListener("touchend", onSliderDraggingEnd);
    };

    var handleSliderEnter = function handleSliderEnter(event) {
      event.stopPropagation();
      setPopupVisible(true);
    };

    var handleSliderLeave = function handleSliderLeave(event) {
      event.stopPropagation();
      setPopupVisible(false);
    };

    return /* @__PURE__ */React__default["default"].createElement("div", {
      style: style,
      className: "".concat(classPrefix, "-slider__button-wrapper"),
      onMouseDown: function onMouseDown(e) {
        return handleSliderMouseDown(e);
      },
      onMouseEnter: function onMouseEnter(e) {
        return handleSliderEnter(e);
      },
      onMouseLeave: function onMouseLeave(e) {
        return handleSliderLeave(e);
      }
    }, /* @__PURE__ */React__default["default"].createElement(Tooltip$1, _objectSpread$b({
      visible: popupVisible,
      placement: "top"
    }, toolTipProps), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-slider__button")
    })));
  };

  function accAdd(arg1, arg2) {
    var r1 = 0;
    var r2 = 0;
    var newArg1 = arg1;
    var newArg2 = arg2;

    try {
      r1 = arg1.toString().split(".")[1].length;
    } catch (e) {
      r1 = 0;
    }

    try {
      r2 = arg2.toString().split(".")[1].length;
    } catch (e) {
      r2 = 0;
    }

    var c = Math.abs(r1 - r2);
    var m = Math.pow(10, Math.max(r1, r2));

    if (c > 0) {
      var cm = Math.pow(10, c);

      if (r1 > r2) {
        newArg1 = Number(arg1.toString().replace(".", ""));
        newArg2 = Number(arg2.toString().replace(".", "")) * cm;
      } else {
        newArg1 = Number(arg1.toString().replace(".", "")) * cm;
        newArg2 = Number(arg2.toString().replace(".", ""));
      }
    } else {
      newArg1 = Number(arg1.toString().replace(".", ""));
      newArg2 = Number(arg2.toString().replace(".", ""));
    }

    return (newArg1 + newArg2) / m;
  }

  function ownKeys$a(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$a(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$a(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$a(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var LEFT_NODE = 0;
  var RIGHT_NODE = 1;
  var Slider$1 = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
    var _classNames, _style;

    var disabled = _ref.disabled,
        _ref$inputNumberProps = _ref.inputNumberProps,
        inputNumberProps = _ref$inputNumberProps === void 0 ? true : _ref$inputNumberProps,
        label = _ref.label,
        _ref$layout = _ref.layout,
        layout = _ref$layout === void 0 ? "horizontal" : _ref$layout,
        marks = _ref.marks,
        _ref$max = _ref.max,
        max = _ref$max === void 0 ? 100 : _ref$max,
        _ref$min = _ref.min,
        min = _ref$min === void 0 ? 0 : _ref$min,
        range = _ref.range,
        _ref$step = _ref.step,
        step = _ref$step === void 0 ? 1 : _ref$step,
        tooltipProps = _ref.tooltipProps,
        propsValue = _ref.value,
        defaultValue = _ref.defaultValue,
        onChange = _ref.onChange,
        className = _ref.className,
        style = _ref.style;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var sliderRef = React.useRef();

    var _useDefault = useDefault(propsValue, defaultValue, onChange),
        _useDefault2 = _slicedToArray(_useDefault, 2),
        value = _useDefault2[0],
        setValue = _useDefault2[1];

    var isVertical = layout === "vertical";
    var renderVaule = Array.isArray(value) ? value : [min, value];
    var start = (renderVaule[LEFT_NODE] - min) / (max - min);
    var width = (renderVaule[RIGHT_NODE] - renderVaule[LEFT_NODE]) / (max - min);
    var end = start + width;
    var dots = React.useMemo(function () {
      if (Array.isArray(marks)) {
        if (marks.find(function (mark) {
          return typeof mark !== "number";
        })) {
          console.warn('The props "marks" only support number!');
          return [];
        }

        return marks.map(function (mark) {
          return {
            value: mark,
            position: (mark - min) / max,
            label: mark
          };
        });
      }

      if (marks && _typeof(marks) === "object") {
        var result = [];

        for (var key in marks) {
          var numberKey = Number(key);

          if (typeof numberKey !== "number" || !numberKey) {
            console.warn('The props "marks" key only support number!');
          } else {
            result.push({
              value: numberKey,
              label: marks[numberKey],
              position: (numberKey - min) / max
            });
          }
        }

        return result;
      }

      return [];
    }, [max, min, marks]);
    var allDots = React.useMemo(function () {
      var result = [];

      for (var i = min; i <= max; i = accAdd(i, step)) {
        result.push({
          value: i,
          position: (i - min) / (max - min)
        });
      }

      return result;
    }, [max, min, step]);
    var startDirection = isVertical ? "bottom" : "left";
    var stepDirection = isVertical ? "top" : "left";
    var sizeKey = isVertical ? "height" : "width";
    var renderDots = isVertical ? dots.map(function (item) {
      return _objectSpread$a(_objectSpread$a({}, item), {}, {
        position: 1 - item.position
      });
    }) : dots;

    var handleInputChange = function handleInputChange(newValue, nodeIndex) {
      var safeValue = Number(newValue.toFixed(32));
      var resultValue = Math.max(Math.min(max, safeValue), min);
      if (nodeIndex === LEFT_NODE && safeValue > value[RIGHT_NODE]) resultValue = value[RIGHT_NODE];
      if (nodeIndex === RIGHT_NODE && safeValue < value[LEFT_NODE]) resultValue = value[LEFT_NODE];

      if (Array.isArray(value)) {
        var arrValue = value.slice();
        arrValue[nodeIndex] = resultValue;
        setValue(arrValue);
      } else {
        setValue(resultValue);
      }
    };

    var createInput = function createInput(nodeIndex) {
      var inputProps = _typeof(inputNumberProps) === "object" ? inputNumberProps : {};
      var currentValue = renderVaule[nodeIndex];
      return /* @__PURE__ */React__default["default"].createElement(InputNumber$1, _objectSpread$a({
        theme: "normal",
        value: currentValue,
        onChange: function onChange(value2) {
          return handleInputChange(Number(value2), nodeIndex);
        },
        className: classNames$1("".concat(classPrefix, "-slider-input"), {
          "is-vertical": isVertical
        }),
        disabled: disabled
      }, inputProps));
    };

    var nearbyValueChange = function nearbyValueChange(value2) {
      var buttonBias = Math.abs(value2 - renderVaule[LEFT_NODE]) > Math.abs(value2 - renderVaule[RIGHT_NODE]) ? RIGHT_NODE : LEFT_NODE;
      handleInputChange(value2, buttonBias);
    };

    var setPosition = function setPosition(position, nodeIndex) {
      var index = 0;
      var minDistance = 1;

      for (var i = 0; i < allDots.length; i++) {
        var diff = Math.abs(allDots[i].position - position);

        if (minDistance > diff) {
          index = i;
          minDistance = diff;
        }
      }

      var value2 = allDots[index].value;

      if (nodeIndex === void 0 && range) {
        nearbyValueChange(value2);
      } else {
        handleInputChange(value2, nodeIndex);
      }
    };

    var onSliderChange = function onSliderChange(event, nodeIndex) {
      var clientKey = isVertical ? "clientY" : "clientX";
      var sliderPositionInfo = sliderRef.current.getBoundingClientRect();
      var sliderOffset = sliderPositionInfo[startDirection];
      var position = (event[clientKey] - sliderOffset) / sliderPositionInfo[sizeKey] * (isVertical ? -1 : 1);
      setPosition(position, nodeIndex);
    };

    var handleClickMarks = function handleClickMarks(event, value2) {
      event.stopPropagation();
      nearbyValueChange(value2);
    };

    var createHandleButton = function createHandleButton(nodeIndex, style2) {
      var currentValue = renderVaule[nodeIndex];
      var tipLabel = typeof label === "string" ? label.replace(/\$\{value\}/g, currentValue.toString()) : label;
      if (tipLabel === true || !tipLabel) tipLabel = currentValue;
      return /* @__PURE__ */React__default["default"].createElement(SliderHandleButton, {
        toolTipProps: _objectSpread$a({
          disabled: label === false,
          content: tipLabel
        }, tooltipProps),
        classPrefix: classPrefix,
        style: style2,
        onChange: function onChange(e) {
          return onSliderChange(e, nodeIndex);
        }
      });
    };

    return /* @__PURE__ */React__default["default"].createElement("div", {
      style: _objectSpread$a({}, style),
      className: classNames$1("".concat(classPrefix, "-slider__container"), {
        "is-vertical": isVertical
      }),
      ref: ref
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      ref: sliderRef,
      className: classNames$1(className, "".concat(classPrefix, "-slider"), (_classNames = {}, _defineProperty$2(_classNames, "".concat(classPrefix, "-is-disabled"), disabled), _defineProperty$2(_classNames, "".concat(classPrefix, "-slider--vertical"), isVertical), _defineProperty$2(_classNames, "".concat(classPrefix, "-slider--with-input"), inputNumberProps), _classNames)),
      onClick: onSliderChange
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-slider__rail"))
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      style: (_style = {}, _defineProperty$2(_style, startDirection, numberToPencent(start)), _defineProperty$2(_style, sizeKey, numberToPencent(width)), _style),
      className: classNames$1("".concat(classPrefix, "-slider__track"))
    }), range ? createHandleButton(LEFT_NODE, _defineProperty$2({}, startDirection, numberToPencent(start))) : null, createHandleButton(RIGHT_NODE, _defineProperty$2({}, startDirection, numberToPencent(end))), /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-slider__step"))
    }, renderDots.map(function (_ref2) {
      var position = _ref2.position,
          value2 = _ref2.value;
      return /* @__PURE__ */React__default["default"].createElement("div", {
        key: value2,
        style: _defineProperty$2({}, stepDirection, numberToPencent(position)),
        className: classNames$1("".concat(classPrefix, "-slider__stop"))
      });
    })), /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-slider__mark"))
    }, renderDots.map(function (_ref3) {
      var position = _ref3.position,
          value2 = _ref3.value,
          label2 = _ref3.label;
      return /* @__PURE__ */React__default["default"].createElement("div", {
        key: value2,
        onClick: function onClick(event) {
          return handleClickMarks(event, value2);
        },
        style: _defineProperty$2({}, stepDirection, numberToPencent(position)),
        className: classNames$1("".concat(classPrefix, "-slider__mark-text"))
      }, label2);
    })))), inputNumberProps ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-slider__input-container"), {
        "is-vertical": isVertical
      })
    }, range && createInput(LEFT_NODE), createInput(RIGHT_NODE)) : null);
  });
  Slider$1.displayName = "Slider";

  var Slider = Slider$1;

  function getPanels(treeNodes) {
    var panels = [];
    treeNodes.forEach(function (node) {
      if (panels[node.level]) {
        panels[node.level].push(node);
      } else {
        panels[node.level] = [node];
      }
    });
    return panels;
  }
  function expendClickEffect(propsTrigger, trigger, node, cascaderContext) {
    var checkStrictly = cascaderContext.checkStrictly,
        filterActive = cascaderContext.filterActive,
        multiple = cascaderContext.multiple,
        treeStore = cascaderContext.treeStore,
        setFilterActive = cascaderContext.setFilterActive,
        setVisible = cascaderContext.setVisible,
        setValue = cascaderContext.setValue,
        setTreeNodes = cascaderContext.setTreeNodes,
        setExpend = cascaderContext.setExpend,
        value = cascaderContext.value,
        max = cascaderContext.max;
    var isDisabled = node.disabled || multiple && value.length >= max && max !== 0;
    if (isDisabled) return;

    if (propsTrigger === trigger && !node.isLeaf()) {
      var expanded = node.setExpanded(true);
      treeStore.refreshNodes();
      treeStore.replaceExpanded(expanded);
      var nodes = treeStore.getNodes().filter(function (node2) {
        return node2.visible;
      });
      setTreeNodes(nodes);

      if (multiple) {
        setExpend(expanded);
      }
    }

    if (!multiple && (node.isLeaf() || checkStrictly) && trigger === "click") {
      treeStore.resetChecked();
      var checked = node.setChecked(!node.isChecked());

      var _checked = _slicedToArray(checked, 1),
          value2 = _checked[0];

      if (filterActive) {
        setFilterActive(false);
      }

      if (!filterActive && !checkStrictly) {
        setVisible(false);
      }

      setValue(value2, "checked", node.getModel());
    }
  }
  function valueChangeEffect(node, cascaderContext) {
    var disabled = cascaderContext.disabled,
        max = cascaderContext.max,
        multiple = cascaderContext.multiple,
        setVisible = cascaderContext.setVisible,
        setValue = cascaderContext.setValue,
        filterActive = cascaderContext.filterActive,
        setFilterActive = cascaderContext.setFilterActive,
        treeNodes = cascaderContext.treeNodes,
        treeStore = cascaderContext.treeStore;

    if (!node || disabled || node.disabled) {
      return;
    }

    var checked = node.setChecked(!node.isChecked());

    if (isNumber_1(max) && max < 0) {
      console.warn("TDesign Warn:", "max should > 0");
    }

    if (checked.length > max && isNumber_1(max) && max > 0) {
      return;
    }

    if (checked.length === 0) {
      var expanded = treeStore.getExpanded();
      setTimeout(function () {
        treeStore.replaceExpanded(expanded);
        treeStore.refreshNodes();
      }, 0);
    }

    if (!multiple) {
      setVisible(false);
    }

    var isSelectAll = treeNodes.every(function (item) {
      return checked.indexOf(item.value) > -1;
    });

    if (filterActive && isSelectAll) {
      setVisible(false);
      setFilterActive(false);
    }

    setValue(checked, "checked", node.getModel());
  }

  function getLabelIsEllipsis(node, size) {
    var sizeMap = {
      small: 11,
      medium: 9,
      large: 8
    };
    return sizeMap[size] < node.label.length;
  }
  function getNodeStatusClass(node, CLASSNAMES, cascaderContext) {
    var _ref;

    var checkStrictly = cascaderContext.checkStrictly,
        multiple = cascaderContext.multiple,
        value = cascaderContext.value,
        max = cascaderContext.max;
    var expandedActive = !checkStrictly && node.expanded && (multiple ? !node.isLeaf() : true);
    var isLeaf = node.isLeaf();
    var isDisabled = node.disabled || multiple && value.length >= max && max !== 0;
    var isSelected = node.checked || multiple && !checkStrictly && node.expanded && !isLeaf;
    return [(_ref = {}, _defineProperty$2(_ref, CLASSNAMES.STATUS.selected, !isDisabled && isSelected), _defineProperty$2(_ref, CLASSNAMES.STATUS.expanded, !isDisabled && expandedActive), _defineProperty$2(_ref, CLASSNAMES.STATUS.disabled, isDisabled), _ref)];
  }
  function getCascaderItemClass(prefix, node, CLASSNAMES, cascaderContext) {
    var _ref2;

    var size = cascaderContext.size;
    return ["".concat(prefix, "-cascader__item")].concat(_toConsumableArray(getNodeStatusClass(node, CLASSNAMES, cascaderContext)), [(_ref2 = {}, _defineProperty$2(_ref2, "".concat(prefix, "-cascader__item--with-icon"), node.children), _defineProperty$2(_ref2, "".concat(prefix, "-cascader__item--leaf"), node.isLeaf()), _defineProperty$2(_ref2, CLASSNAMES.SIZE[size], size), _ref2)]);
  }
  function getCascaderItemIconClass(prefix, node, CLASSNAMES, cascaderContext) {
    return ["".concat(prefix, "-cascader__item-icon")].concat(_toConsumableArray(getNodeStatusClass(node, CLASSNAMES, cascaderContext)));
  }

  function getFullPathLabel(node) {
    return node.getPath().map(function (node2) {
      return node2.label;
    }).join("/");
  }
  var getTreeValue = function getTreeValue(value) {
    var treeValue = [];

    if (Array.isArray(value)) {
      if (value.length > 0 && _typeof(value[0]) === "object") {
        treeValue = value.map(function (val) {
          return val.value;
        });
      } else if (value.length) {
        treeValue = value;
      }
    } else if (value) {
      if (_typeof(value) === "object") {
        treeValue = [value.value];
      } else {
        treeValue = [value];
      }
    }

    return treeValue;
  };

  function ownKeys$9(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$9(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$9(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$9(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var RenderLabelInner = function RenderLabelInner(name, node, cascaderContext) {
    var filterActive = cascaderContext.filterActive,
        inputVal = cascaderContext.inputVal;
    var labelText = filterActive ? getFullPathLabel(node) : node.label;

    if (filterActive) {
      var texts = labelText.split(inputVal);
      var doms = [];

      for (var index = 0; index < texts.length; index++) {
        doms.push( /* @__PURE__ */React__default["default"].createElement("span", {
          key: index
        }, texts[index]));
        if (index === texts.length - 1) break;
        doms.push( /* @__PURE__ */React__default["default"].createElement("span", {
          key: "".concat(index, "filter"),
          className: "".concat(name, "-label--filter")
        }, inputVal));
      }

      return doms;
    }

    return labelText;
  };

  var RenderLabelContent = function RenderLabelContent(node, cascaderContext) {
    var _useConfig = useConfig$1(),
        prefix = _useConfig.classPrefix;

    var name = "".concat(prefix, "-cascader__item");
    var label = RenderLabelInner(name, node, cascaderContext);
    var isEllipsis = getLabelIsEllipsis(node, cascaderContext.size);

    if (isEllipsis) {
      return /* @__PURE__ */React__default["default"].createElement("span", {
        className: "".concat(name, "-label"),
        role: "label"
      }, label, /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(name, "-label--ellipsis")
      }, /* @__PURE__ */React__default["default"].createElement(Tooltip$1, {
        content: node.label,
        placement: "top-left"
      })));
    }

    return /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(name, "__label")
    }, label);
  };

  var RenderCheckBox = function RenderCheckBox(node, cascaderContext, handleChange) {
    var _useConfig2 = useConfig$1(),
        prefix = _useConfig2.classPrefix;

    var name = "".concat(prefix, "-cascader__item");
    var checkProps = cascaderContext.checkProps,
        value = cascaderContext.value,
        max = cascaderContext.max;
    var label = RenderLabelInner(name, node, cascaderContext);
    return /* @__PURE__ */React__default["default"].createElement(Checkbox$1, _objectSpread$9(_objectSpread$9({}, checkProps), {}, {
      checked: node.checked,
      indeterminate: node.indeterminate,
      disabled: node.isDisabled() || value.length >= max && max !== 0,
      name: node.value,
      onChange: handleChange
    }), label);
  };

  var Item = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var node = props.node,
        multiple = props.cascaderContext.multiple,
        onClick = props.onClick,
        onChange = props.onChange,
        onMouseEnter = props.onMouseEnter,
        cascaderContext = props.cascaderContext;

    var _useConfig3 = useConfig$1(),
        prefix = _useConfig3.classPrefix;

    var itemRef = React.useRef();
    useRipple(ref || itemRef);
    var CLASSNAMES = useCommonClassName();
    var itemClass = React.useMemo(function () {
      return classNames$1(getCascaderItemClass(prefix, node, CLASSNAMES, cascaderContext));
    }, [prefix, node, CLASSNAMES, cascaderContext]);
    var iconClass = React.useMemo(function () {
      return classNames$1(getCascaderItemIconClass(prefix, node, CLASSNAMES, cascaderContext));
    }, [prefix, node, CLASSNAMES, cascaderContext]);

    var handleClick = function handleClick(e) {
      e.stopPropagation();
      var ctx = {
        e: e,
        node: node
      };
      onClick(ctx);
    };

    var handleChange = function handleChange(e) {
      var ctx = {
        e: e,
        node: node
      };
      onChange(ctx);
    };

    var handleMouseenter = function handleMouseenter(e) {
      e.stopPropagation();
      var ctx = {
        e: e,
        node: node
      };
      onMouseEnter(ctx);
    };

    return /* @__PURE__ */React__default["default"].createElement("li", {
      ref: ref || itemRef,
      className: itemClass,
      onClick: handleClick,
      onMouseEnter: handleMouseenter
    }, multiple ? RenderCheckBox(node, cascaderContext, handleChange) : RenderLabelContent(node, cascaderContext), node.children && (node.loading ? /* @__PURE__ */React__default["default"].createElement(Loading, {
      className: iconClass,
      loading: true,
      size: "small"
    }) : /* @__PURE__ */React__default["default"].createElement(ChevronRightIcon, {
      className: iconClass
    })));
  });

  var Panel = function Panel(props) {
    var _props$cascaderContex = props.cascaderContext,
        filterActive = _props$cascaderContex.filterActive,
        treeNodes = _props$cascaderContex.treeNodes,
        inputWidth = _props$cascaderContex.inputWidth,
        cascaderContext = props.cascaderContext,
        empty = props.empty;
    var panels = React.useMemo(function () {
      return getPanels(treeNodes);
    }, [treeNodes]);

    var handleExpand = function handleExpand(ctx, trigger) {
      var node = ctx.node;
      var propsTrigger = props.trigger,
          cascaderContext2 = props.cascaderContext;
      expendClickEffect(propsTrigger, trigger, node, cascaderContext2);
    };

    var handleChange = function handleChange(ctx) {
      var node = ctx.node;
      valueChangeEffect(node, cascaderContext);
    };

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var name = "".concat(classPrefix, "-cascader");
    var renderEmpty = /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(name, "__panel--empty")
    }, empty);

    var renderItem = function renderItem(node) {
      return /* @__PURE__ */React__default["default"].createElement(Item, {
        key: node.value,
        node: node,
        cascaderContext: cascaderContext,
        onClick: function onClick(ctx) {
          handleExpand(ctx, "click");
        },
        onMouseEnter: function onMouseEnter(ctx) {
          handleExpand(ctx, "hover");
        },
        onChange: handleChange
      });
    };

    var panelsContainer = panels.map(function (panel, index) {
      return /* @__PURE__ */React__default["default"].createElement("ul", {
        className: classNames$1("".concat(name, "__menu"), "narrow-scrollbar", _defineProperty$2({}, "".concat(name, "__menu--segment"), index !== panels.length - 1)),
        key: index
      }, panel.map(function (node) {
        return renderItem(node);
      }));
    });
    var filterPanelsContainer = /* @__PURE__ */React__default["default"].createElement("ul", {
      className: classNames$1("".concat(name, "__menu"), "narrow-scrollbar", "".concat(name, "__menu--segment"), "".concat(name, "__menu--filter"))
    }, treeNodes.map(function (node) {
      return renderItem(node);
    }));
    var renderPanels = filterActive ? filterPanelsContainer : panelsContainer;
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(name, "__panel"), _defineProperty$2({}, "".concat(name, "--normal"), panels.length)),
      style: {
        width: panels.length === 0 ? "".concat(inputWidth, "px") : null
      }
    }, panels && panels.length ? renderPanels : renderEmpty);
  };

  function getCloseIconClass(prefix, CLASSNAMES, cascaderContext) {
    var _ref;

    var visible = cascaderContext.visible,
        disabled = cascaderContext.disabled;
    return ["".concat(prefix, "-cascader__icon"), (_ref = {}, _defineProperty$2(_ref, CLASSNAMES.STATUS.visible, visible), _defineProperty$2(_ref, CLASSNAMES.STATUS.disabled, disabled), _ref)];
  }
  function getFakeArrowIconClass(prefix, CLASSNAMES, cascaderContext) {
    var disabled = cascaderContext.disabled;
    return ["".concat(prefix, "-cascader__icon"), _defineProperty$2({}, CLASSNAMES.STATUS.disabled, disabled)];
  }
  function getCascaderInnerClasses(prefix, CLASSNAMES, cascaderContext) {
    var _ref3;

    var disabled = cascaderContext.disabled,
        visible = cascaderContext.visible,
        size = cascaderContext.size,
        multiple = cascaderContext.multiple;
    return ["".concat(prefix, "-cascader"), (_ref3 = {}, _defineProperty$2(_ref3, CLASSNAMES.STATUS.disabled, disabled), _defineProperty$2(_ref3, CLASSNAMES.STATUS.active, visible), _defineProperty$2(_ref3, CLASSNAMES.SIZE[size], size), _defineProperty$2(_ref3, "".concat(prefix, "-cascader--multiple"), multiple), _ref3)];
  }
  function getCloseShow(isHover, cascaderContext) {
    var value = cascaderContext.value,
        disabled = cascaderContext.disabled,
        clearable = cascaderContext.clearable,
        visible = cascaderContext.visible;
    return !!(!visible && clearable && isHover && !disabled && !isEmpty_1(value));
  }
  function getPlaceholderShow(cascaderContext, singleContent, multipleContent) {
    var filterable = cascaderContext.filterable,
        visible = cascaderContext.visible,
        multiple = cascaderContext.multiple;
    var valEmpty = !(multiple ? multipleContent.length : singleContent);

    if (filterable) {
      return valEmpty && !visible;
    }

    return valEmpty;
  }
  function getSingleContent(cascaderContext) {
    var value = cascaderContext.value,
        multiple = cascaderContext.multiple,
        treeStore = cascaderContext.treeStore,
        showAllLevels = cascaderContext.showAllLevels;
    if (multiple || !value) return "";
    if (Array.isArray(value)) return "";
    var node = treeStore && treeStore.getNodes(value);

    if (!(node && node.length)) {
      return "";
    }

    var path = node && node[0].getPath();

    if (path && path.length) {
      return showAllLevels ? path.map(function (node2) {
        return node2.label;
      }).join(" / ") : path[path.length - 1].label;
    }

    return value;
  }
  function getMultipleContent(cascaderContext) {
    var value = cascaderContext.value,
        multiple = cascaderContext.multiple,
        treeStore = cascaderContext.treeStore;
    if (!multiple) return [];
    if (multiple && !Array.isArray(value)) return [];
    var node = treeStore && treeStore.getNodes(value);
    if (!node) return [];
    var path = value.map(function (item) {
      var node2 = treeStore.getNodes(item);
      return node2[0];
    });

    if (value && value.length) {
      return path && path.length ? path : value;
    }

    return [];
  }
  function outerClickListenerEffect(ref, cascaderContext, event) {
    var visible = cascaderContext.visible,
        setVisible = cascaderContext.setVisible;

    if (!ref || ref.contains(event.target)) {
      return;
    }

    if (visible) {
      setVisible(false);
    }
  }
  function closeIconClickEffect(cascaderContext) {
    var setVisible = cascaderContext.setVisible,
        multiple = cascaderContext.multiple,
        setExpend = cascaderContext.setExpend,
        setValue = cascaderContext.setValue;
    setVisible(false);

    if (multiple) {
      setExpend([]);
    }

    setValue(multiple ? [] : "", "clear");
  }
  function handleRemoveTagEffect(cascaderContext, node, onRemove) {
    var disabled = cascaderContext.disabled,
        setValue = cascaderContext.setValue;
    if (disabled) return;
    var checked = node.setChecked(!node.isChecked());
    setValue(checked, "unchecked", node.getModel());

    if (isFunction_1(onRemove)) {
      onRemove({
        value: checked,
        node: node
      });
    }
  }
  function innerContentClickEffect(cascaderContext) {
    var setVisible = cascaderContext.setVisible,
        visible = cascaderContext.visible,
        filterActive = cascaderContext.filterActive,
        disabled = cascaderContext.disabled;

    if (!disabled) {
      if (visible && filterActive) return;
      setVisible(!visible);
    }
  }

  var SuffixIcon = function SuffixIcon(props) {
    var cascaderContext = props.cascaderContext,
        closeShow = props.closeShow,
        fakeArrowIconClass = props.fakeArrowIconClass,
        closeIconClass = props.closeIconClass;
    var visible = cascaderContext.visible,
        disabled = cascaderContext.disabled,
        size = cascaderContext.size;

    var closeIconClick = function closeIconClick(e) {
      e.stopPropagation();
      closeIconClickEffect(cascaderContext);
    };

    if (closeShow) {
      return /* @__PURE__ */React__default["default"].createElement(CloseCircleFilledIcon, {
        className: closeIconClass,
        onClick: closeIconClick,
        size: size
      });
    }

    return /* @__PURE__ */React__default["default"].createElement(FakeArrow, {
      overlayClassName: fakeArrowIconClass,
      isActive: visible,
      disabled: disabled
    });
  };

  var InnerContent = function InnerContent(props) {
    var cascaderContext = props.cascaderContext,
        listeners = props.listeners,
        placeholder = props.placeholder,
        collapsedItems = props.collapsedItems;

    var _useConfig = useConfig$1(),
        prefix = _useConfig.classPrefix;

    var multiple = cascaderContext.multiple,
        size = cascaderContext.size,
        disabled = cascaderContext.disabled,
        filterable = cascaderContext.filterable,
        setFilterActive = cascaderContext.setFilterActive,
        visible = cascaderContext.visible,
        inputVal = cascaderContext.inputVal,
        setInputVal = cascaderContext.setInputVal,
        minCollapsedNum = cascaderContext.minCollapsedNum;
    var _onFocus = listeners.onFocus,
        _onBlur = listeners.onBlur,
        onRemove = listeners.onRemove;
    var singleContent = React.useMemo(function () {
      return getSingleContent(cascaderContext);
    }, [cascaderContext]);
    var multipleContent = React.useMemo(function () {
      return getMultipleContent(cascaderContext);
    }, [cascaderContext]);

    var renderSelfTag = function renderSelfTag(node, index) {
      return /* @__PURE__ */React__default["default"].createElement(Tag, {
        closable: !disabled,
        key: index,
        disabled: disabled,
        onClose: function onClose(ctx) {
          ctx.e.stopPropagation();
          handleRemoveTagEffect(cascaderContext, node, onRemove);
        },
        size: size
      }, node.label);
    };

    var generalContent = !multiple ? /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(prefix, "-cascader__content")
    }, singleContent) : /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, minCollapsedNum > 0 && multipleContent.length > minCollapsedNum ? /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, multipleContent.slice(0, minCollapsedNum).map(function (node, index) {
      return renderSelfTag(node, index);
    }), !collapsedItems ? /* @__PURE__ */React__default["default"].createElement(Tag, {
      size: size,
      disabled: disabled
    }, "+", multipleContent.length - minCollapsedNum) : collapsedItems) : multipleContent.map(function (node, index) {
      return renderSelfTag(node, index);
    }));
    var inputPlaceholder = multiple ? multipleContent.map(function (node) {
      return node.label;
    }).join("\u3001") : singleContent;
    var filterContent = /* @__PURE__ */React__default["default"].createElement(Input, {
      placeholder: inputPlaceholder || placeholder,
      value: inputVal,
      onChange: function onChange(value) {
        setInputVal(value);
        setFilterActive(!!value);
      },
      autofocus: true,
      onFocus: function onFocus(v, context) {
        return isFunction_1(_onFocus) && _onFocus({
          inputVal: inputVal,
          e: context === null || context === void 0 ? void 0 : context.e
        });
      },
      onBlur: function onBlur(v, context) {
        return isFunction_1(_onBlur) && _onBlur({
          inputVal: inputVal,
          e: context === null || context === void 0 ? void 0 : context.e
        });
      }
    });
    var showFilter = React.useMemo(function () {
      return filterable && visible;
    }, [filterable, visible]);
    return showFilter ? filterContent : generalContent;
  };

  var Content = function Content(props) {
    var placeholder = props.placeholder,
        cascaderContext = props.cascaderContext,
        listeners = props.listeners,
        isHover = props.isHover,
        collapsedItems = props.collapsedItems;

    var _useConfig2 = useConfig$1(),
        prefix = _useConfig2.classPrefix;

    var singleContent = React.useMemo(function () {
      return getSingleContent(cascaderContext);
    }, [cascaderContext]);
    var multipleContent = React.useMemo(function () {
      return getMultipleContent(cascaderContext);
    }, [cascaderContext]);
    var showPlaceholder = React.useMemo(function () {
      return getPlaceholderShow(cascaderContext, singleContent, multipleContent);
    }, [cascaderContext, singleContent, multipleContent]);
    var content = !showPlaceholder ? /* @__PURE__ */React__default["default"].createElement(InnerContent, {
      isHover: isHover,
      cascaderContext: cascaderContext,
      listeners: listeners,
      collapsedItems: collapsedItems,
      placeholder: placeholder
    }) : /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(prefix, "-cascader__placeholder")
    }, placeholder || "\u8BF7\u9009\u62E9");
    return content;
  };

  var InputContent = function InputContent(props) {
    var cascaderContext = props.cascaderContext,
        className = props.className,
        style = props.style,
        placeholder = props.placeholder,
        listeners = props.listeners,
        collapsedItems = props.collapsedItems;

    var _useConfig3 = useConfig$1(),
        prefix = _useConfig3.classPrefix;

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        isHover = _useState2[0],
        setIsHover = _useState2[1];

    var CLASSNAMES = useCommonClassName();
    var cascaderInnerClasses = React.useMemo(function () {
      return classNames$1(getCascaderInnerClasses(prefix, CLASSNAMES, cascaderContext), className);
    }, [prefix, CLASSNAMES, cascaderContext, className]);
    var inputContentRef = React.useRef();
    React.useEffect(function () {
      var outerClickListenerFn = function outerClickListenerFn(event) {
        return outerClickListenerEffect(inputContentRef.current, cascaderContext, event);
      };

      document.addEventListener("click", outerClickListenerFn);

      var _inputContentRef$curr = inputContentRef.current.getBoundingClientRect(),
          width = _inputContentRef$curr.width;

      cascaderContext.setInputWidth(width);
      return function () {
        document.removeEventListener("click", outerClickListenerFn);
      };
    }, [cascaderContext]);
    var closeIconClass = React.useMemo(function () {
      return classNames$1(getCloseIconClass(prefix, CLASSNAMES, cascaderContext));
    }, [prefix, CLASSNAMES, cascaderContext]);
    var fakeArrowIconClass = React.useMemo(function () {
      return classNames$1(getFakeArrowIconClass(prefix, CLASSNAMES, cascaderContext));
    }, [prefix, CLASSNAMES, cascaderContext]);
    var closeShow = React.useMemo(function () {
      return getCloseShow(isHover, cascaderContext);
    }, [isHover, cascaderContext]);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: cascaderInnerClasses,
      style: style,
      onMouseEnter: function onMouseEnter() {
        setIsHover(true);
      },
      onMouseLeave: function onMouseLeave() {
        setIsHover(false);
      },
      ref: inputContentRef,
      onClick: function onClick(e) {
        e.preventDefault();
        innerContentClickEffect(cascaderContext);
      }
    }, /* @__PURE__ */React__default["default"].createElement(Content, {
      cascaderContext: cascaderContext,
      isHover: isHover,
      collapsedItems: collapsedItems,
      placeholder: placeholder,
      listeners: listeners
    }), /* @__PURE__ */React__default["default"].createElement(SuffixIcon, {
      cascaderContext: cascaderContext,
      closeShow: closeShow,
      closeIconClass: closeIconClass,
      fakeArrowIconClass: fakeArrowIconClass,
      listeners: listeners
    }));
  };

  var treeNodesEffect = function treeNodesEffect(inputVal, treeStore, setTreeNodes) {
    if (!treeStore) return;
    var nodes = [];

    if (inputVal) {
      nodes = treeStore.nodes.filter(function (node) {
        var fullPathLabel = getFullPathLabel(node);
        return fullPathLabel.indexOf(inputVal) > -1 && node.isLeaf();
      });
    } else {
      nodes = treeStore.getNodes().filter(function (node) {
        return node.visible;
      });
    }

    setTreeNodes(nodes);
  };
  var treeStoreExpendEffect = function treeStoreExpendEffect(treeStore, value, expend) {
    var treeValue = getTreeValue(value);
    if (!treeStore) return;

    if (Array.isArray(treeValue) && expend.length === 0) {
      var expandedMap = /* @__PURE__ */new Map();

      var _treeValue = _slicedToArray(treeValue, 1),
          val = _treeValue[0];

      if (val) {
        expandedMap.set(val, true);
        var node = treeStore.getNode(val);
        if (!node) return;
        node.getParents().forEach(function (tn) {
          expandedMap.set(tn.value, true);
        });
        var expandedArr = Array.from(expandedMap.keys());
        treeStore.replaceExpanded(expandedArr);
      } else {
        treeStore.resetExpanded();
      }
    }

    if (treeStore.getExpanded() && expend.length) {
      treeStore.replaceExpanded(expend);
    }

    treeStore.refreshNodes();
  };

  function ownKeys$8(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$8(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$8(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$8(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var Cascader$1 = function Cascader(props) {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var name = "".concat(classPrefix, "-cascader");
    var className = props.className,
        style = props.style,
        defaultValue = props.defaultValue,
        onChange = props.onChange,
        collapsedItems = props.collapsedItems;

    var _useDefault = useDefault(props.value, defaultValue, onChange),
        _useDefault2 = _slicedToArray(_useDefault, 2),
        value = _useDefault2[0],
        _setValue = _useDefault2[1];

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        visible = _useState2[0],
        setVisible = _useState2[1];

    var _useState3 = React.useState(null),
        _useState4 = _slicedToArray(_useState3, 2),
        treeStore = _useState4[0],
        setTreeStore = _useState4[1];

    var _useState5 = React.useState(false),
        _useState6 = _slicedToArray(_useState5, 2),
        filterActive = _useState6[0],
        setFilterActive = _useState6[1];

    var _useState7 = React.useState(""),
        _useState8 = _slicedToArray(_useState7, 2),
        inputVal = _useState8[0],
        setInputVal = _useState8[1];

    var _useState9 = React.useState(0),
        _useState10 = _slicedToArray(_useState9, 2),
        inputWidth = _useState10[0],
        setInputWidth = _useState10[1];

    var _useState11 = React.useState([]),
        _useState12 = _slicedToArray(_useState11, 2),
        treeNodes = _useState12[0],
        setTreeNodes = _useState12[1];

    var _useState13 = React.useState([]),
        _useState14 = _slicedToArray(_useState13, 2),
        expend = _useState14[0],
        setExpend = _useState14[1];

    var cascaderContext = React.useMemo(function () {
      var _props$size = props.size,
          size = _props$size === void 0 ? "medium" : _props$size,
          _props$disabled = props.disabled,
          disabled2 = _props$disabled === void 0 ? false : _props$disabled,
          _props$checkStrictly = props.checkStrictly,
          checkStrictly2 = _props$checkStrictly === void 0 ? false : _props$checkStrictly,
          _props$lazy = props.lazy,
          lazy2 = _props$lazy === void 0 ? true : _props$lazy,
          _props$multiple = props.multiple,
          multiple = _props$multiple === void 0 ? false : _props$multiple,
          _props$filterable = props.filterable,
          filterable = _props$filterable === void 0 ? false : _props$filterable,
          _props$clearable = props.clearable,
          clearable = _props$clearable === void 0 ? false : _props$clearable,
          _props$checkProps = props.checkProps,
          checkProps = _props$checkProps === void 0 ? {} : _props$checkProps,
          _props$max = props.max,
          max = _props$max === void 0 ? 0 : _props$max,
          _props$showAllLevels = props.showAllLevels,
          showAllLevels = _props$showAllLevels === void 0 ? true : _props$showAllLevels,
          _props$minCollapsedNu = props.minCollapsedNum,
          minCollapsedNum = _props$minCollapsedNu === void 0 ? false : _props$minCollapsedNu;
      return {
        size: size,
        disabled: disabled2,
        checkStrictly: checkStrictly2,
        lazy: lazy2,
        multiple: multiple,
        filterable: filterable,
        value: value,
        setValue: function setValue(val, source, node) {
          _setValue(val, {
            source: source,
            node: node
          });
        },
        visible: visible,
        setVisible: setVisible,
        treeStore: treeStore,
        checkProps: checkProps,
        clearable: clearable,
        showAllLevels: showAllLevels,
        max: max,
        treeNodes: treeNodes,
        setTreeNodes: setTreeNodes,
        filterActive: filterActive,
        setFilterActive: setFilterActive,
        inputVal: inputVal,
        setInputVal: setInputVal,
        setExpend: setExpend,
        minCollapsedNum: minCollapsedNum,
        inputWidth: inputWidth,
        setInputWidth: setInputWidth
      };
    }, [props, inputVal, value, _setValue, visible, treeStore, treeNodes, filterActive, inputWidth, setInputWidth]);
    var disabled = props.disabled,
        _props$options = props.options,
        options = _props$options === void 0 ? [] : _props$options,
        keys = props.keys,
        _props$checkStrictly2 = props.checkStrictly,
        checkStrictly = _props$checkStrictly2 === void 0 ? false : _props$checkStrictly2,
        _props$lazy2 = props.lazy,
        lazy = _props$lazy2 === void 0 ? true : _props$lazy2,
        load = props.load,
        _props$valueMode = props.valueMode,
        valueMode = _props$valueMode === void 0 ? "onlyLeaf" : _props$valueMode;

    var createStore = function createStore(onLoad) {
      var treeProps = {
        keys: keys || {},
        checkable: true,
        checkStrictly: checkStrictly,
        expandMutex: true,
        expandParent: true,
        disabled: disabled,
        load: load,
        lazy: lazy,
        valueMode: valueMode,
        onLoad: onLoad
      };
      var store = new TreeStore(treeProps);
      store.append(options);
      return store;
    };

    if (!treeStore) {
      var store = createStore(function () {
        setTimeout(function () {
          store.refreshNodes();
          treeNodesEffect(inputVal, store, setTreeNodes);
        }, 0);
      });
      setTreeStore(store);
    }

    React.useEffect(function () {
      var treeProps = {
        keys: keys || {},
        checkable: true,
        checkStrictly: checkStrictly,
        expandMutex: true,
        expandParent: true,
        disabled: disabled,
        load: load,
        lazy: lazy,
        valueMode: valueMode,
        options: options
      };
      treeStore.setConfig(treeProps);
    }, [checkStrictly, disabled, keys, lazy, load, options, valueMode, treeStore]);
    React.useEffect(function () {
      if (!treeStore) return;
      treeStoreExpendEffect(treeStore, value, expend);
    }, [treeStore, value, expend]);
    React.useEffect(function () {
      if (!treeStore) return;
      treeNodesEffect(inputVal, treeStore, setTreeNodes);
    }, [inputVal, treeStore, value]);
    React.useEffect(function () {
      if (!treeStore) return;
      treeStore.replaceChecked(getTreeValue(value));
    }, [value, treeStore]);
    React.useEffect(function () {
      if (!filterActive) {
        setInputVal("");
      }
    }, [filterActive]);

    var _useLocaleReceiver = useLocaleReceiver("cascader"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
        local = _useLocaleReceiver2[0],
        t = _useLocaleReceiver2[1];

    var _props$empty = props.empty,
        empty = _props$empty === void 0 ? t(local.empty) : _props$empty,
        _props$trigger = props.trigger,
        trigger = _props$trigger === void 0 ? "click" : _props$trigger;
    var _props$placeholder = props.placeholder,
        placeholder = _props$placeholder === void 0 ? "\u8BF7\u8F93\u5165" : _props$placeholder,
        onRemove = props.onRemove,
        onBlur = props.onBlur,
        onFocus = props.onFocus;
    return /* @__PURE__ */React__default["default"].createElement(Popup, _objectSpread$8(_objectSpread$8({
      className: "".concat(name, "__popup"),
      placement: "bottom-left",
      visible: visible,
      overlayClassName: "".concat(name, "__dropdown"),
      expandAnimation: true,
      destroyOnClose: true
    }, props === null || props === void 0 ? void 0 : props.popupProps), {}, {
      content: /* @__PURE__ */React__default["default"].createElement(Panel, {
        cascaderContext: cascaderContext,
        trigger: trigger,
        onChange: onChange,
        empty: empty
      })
    }), /* @__PURE__ */React__default["default"].createElement(InputContent, {
      collapsedItems: collapsedItems,
      cascaderContext: cascaderContext,
      style: style,
      className: className,
      listeners: {
        onRemove: onRemove,
        onBlur: onBlur,
        onFocus: onFocus,
        onChange: onChange
      },
      placeholder: placeholder
    }), /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null));
  };

  var Cascader = Cascader$1;

  var customParseFormat$1 = {exports: {}};

  (function (module, exports) {
    !function (t, e) {
      module.exports = e() ;
    }(commonjsGlobal, function () {

      var t,
          e = {
        LTS: "h:mm:ss A",
        LT: "h:mm A",
        L: "MM/DD/YYYY",
        LL: "MMMM D, YYYY",
        LLL: "MMMM D, YYYY h:mm A",
        LLLL: "dddd, MMMM D, YYYY h:mm A"
      },
          n = function n(t, _n) {
        return t.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g, function (t, r, i) {
          var o = i && i.toUpperCase();
          return r || _n[i] || e[i] || _n[o].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function (t, e, n) {
            return e || n.slice(1);
          });
        });
      },
          r = /(\[[^[]*\])|([-:/.()\s]+)|(A|a|YYYY|YY?|MM?M?M?|Do|DD?|hh?|HH?|mm?|ss?|S{1,3}|z|ZZ?)/g,
          i = /\d\d/,
          o = /\d\d?/,
          s = /\d*[^\s\d-:/()]+/;

      var a = function a(t) {
        return function (e) {
          this[t] = +e;
        };
      },
          f = [/[+-]\d\d:?(\d\d)?/, function (t) {
        (this.zone || (this.zone = {})).offset = function (t) {
          if (!t) return 0;
          var e = t.match(/([+-]|\d\d)/g),
              n = 60 * e[1] + (+e[2] || 0);
          return 0 === n ? 0 : "+" === e[0] ? -n : n;
        }(t);
      }],
          u = function u(e) {
        var n = t[e];
        return n && (n.indexOf ? n : n.s.concat(n.f));
      },
          h = function h(e, n) {
        var r,
            i = t.meridiem;

        if (i) {
          for (var o = 1; o <= 24; o += 1) {
            if (e.indexOf(i(o, 0, n)) > -1) {
              r = o > 12;
              break;
            }
          }
        } else r = e === (n ? "pm" : "PM");

        return r;
      },
          d = {
        A: [s, function (t) {
          this.afternoon = h(t, !1);
        }],
        a: [s, function (t) {
          this.afternoon = h(t, !0);
        }],
        S: [/\d/, function (t) {
          this.milliseconds = 100 * +t;
        }],
        SS: [i, function (t) {
          this.milliseconds = 10 * +t;
        }],
        SSS: [/\d{3}/, function (t) {
          this.milliseconds = +t;
        }],
        s: [o, a("seconds")],
        ss: [o, a("seconds")],
        m: [o, a("minutes")],
        mm: [o, a("minutes")],
        H: [o, a("hours")],
        h: [o, a("hours")],
        HH: [o, a("hours")],
        hh: [o, a("hours")],
        D: [o, a("day")],
        DD: [i, a("day")],
        Do: [s, function (e) {
          var n = t.ordinal,
              r = e.match(/\d+/);
          if (this.day = r[0], n) for (var i = 1; i <= 31; i += 1) {
            n(i).replace(/\[|\]/g, "") === e && (this.day = i);
          }
        }],
        M: [o, a("month")],
        MM: [i, a("month")],
        MMM: [s, function (t) {
          var e = u("months"),
              n = (u("monthsShort") || e.map(function (t) {
            return t.substr(0, 3);
          })).indexOf(t) + 1;
          if (n < 1) throw new Error();
          this.month = n % 12 || n;
        }],
        MMMM: [s, function (t) {
          var e = u("months").indexOf(t) + 1;
          if (e < 1) throw new Error();
          this.month = e % 12 || e;
        }],
        Y: [/[+-]?\d+/, a("year")],
        YY: [i, function (t) {
          t = +t, this.year = t + (t > 68 ? 1900 : 2e3);
        }],
        YYYY: [/\d{4}/, a("year")],
        Z: f,
        ZZ: f
      };

      var c = function c(e, i, o) {
        try {
          var s = function (e) {
            for (var i = (e = n(e, t && t.formats)).match(r), o = i.length, s = 0; s < o; s += 1) {
              var a = i[s],
                  f = d[a],
                  u = f && f[0],
                  h = f && f[1];
              i[s] = h ? {
                regex: u,
                parser: h
              } : a.replace(/^\[|\]$/g, "");
            }

            return function (t) {
              for (var e = {}, n = 0, r = 0; n < o; n += 1) {
                var s = i[n];
                if ("string" == typeof s) r += s.length;else {
                  var a = s.regex,
                      f = s.parser,
                      u = t.substr(r),
                      h = a.exec(u)[0];
                  f.call(e, h), t = t.replace(h, "");
                }
              }

              return function (t) {
                var e = t.afternoon;

                if (void 0 !== e) {
                  var n = t.hours;
                  e ? n < 12 && (t.hours += 12) : 12 === n && (t.hours = 0), delete t.afternoon;
                }
              }(e), e;
            };
          }(i)(e),
              a = s.year,
              f = s.month,
              u = s.day,
              h = s.hours,
              c = s.minutes,
              m = s.seconds,
              l = s.milliseconds,
              M = s.zone,
              Y = new Date(),
              v = u || (a || f ? 1 : Y.getDate()),
              p = a || Y.getFullYear(),
              D = 0;

          a && !f || (D = f > 0 ? f - 1 : Y.getMonth());
          var y = h || 0,
              L = c || 0,
              g = m || 0,
              $ = l || 0;
          return M ? new Date(Date.UTC(p, D, v, y, L, g, $ + 60 * M.offset * 1e3)) : o ? new Date(Date.UTC(p, D, v, y, L, g, $)) : new Date(p, D, v, y, L, g, $);
        } catch (t) {
          return new Date("");
        }
      };

      return function (e, n, r) {
        r.p.customParseFormat = !0;
        var i = n.prototype,
            o = i.parse;

        i.parse = function (e) {
          var n = e.date,
              i = e.utc,
              s = e.args;
          this.$u = i;
          var a = s[1];

          if ("string" == typeof a) {
            var f = !0 === s[2],
                u = !0 === s[3],
                h = f || u,
                d = s[2];
            u && (d = s[2]), f || (t = d ? r.Ls[d] : this.$locale()), this.$d = c(n, a, i), this.init(), d && !0 !== d && (this.$L = this.locale(d).$L), h && n !== this.format(a) && (this.$d = new Date("")), t = void 0;
          } else if (a instanceof Array) for (var m = a.length, l = 1; l <= m; l += 1) {
            s[1] = a[l - 1];
            var M = r.apply(this, s);

            if (M.isValid()) {
              this.$d = M.$d, this.$L = M.$L, this.init();
              break;
            }

            l === m && (this.$d = new Date(""));
          } else o.call(this, e);
        };
      };
    });
  })(customParseFormat$1);

  var customParseFormat = customParseFormat$1.exports;

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER = 9007199254740991;
  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeFloor = Math.floor;
  /**
   * The base implementation of `_.repeat` which doesn't coerce arguments.
   *
   * @private
   * @param {string} string The string to repeat.
   * @param {number} n The number of times to repeat the string.
   * @returns {string} Returns the repeated string.
   */

  function baseRepeat$1(string, n) {
    var result = '';

    if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
      return result;
    } // Leverage the exponentiation by squaring algorithm for a faster repeat.
    // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.


    do {
      if (n % 2) {
        result += string;
      }

      n = nativeFloor(n / 2);

      if (n) {
        string += string;
      }
    } while (n);

    return result;
  }

  var _baseRepeat = baseRepeat$1;

  var baseProperty = _baseProperty;
  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */

  var asciiSize$1 = baseProperty('length');
  var _asciiSize = asciiSize$1;

  /** Used to compose unicode character classes. */
  var rsAstralRange = "\\ud800-\\udfff",
      rsComboMarksRange = "\\u0300-\\u036f",
      reComboHalfMarksRange = "\\ufe20-\\ufe2f",
      rsComboSymbolsRange = "\\u20d0-\\u20ff",
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsVarRange = "\\ufe0e\\ufe0f";
  /** Used to compose unicode capture groups. */

  var rsAstral = '[' + rsAstralRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsFitz = "\\ud83c[\\udffb-\\udfff]",
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}",
      rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]",
      rsZWJ = "\\u200d";
  /** Used to compose unicode regexes. */

  var reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';
  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */

  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */

  function unicodeSize$1(string) {
    var result = reUnicode.lastIndex = 0;

    while (reUnicode.test(string)) {
      ++result;
    }

    return result;
  }

  var _unicodeSize = unicodeSize$1;

  var asciiSize = _asciiSize,
      hasUnicode$1 = _hasUnicode,
      unicodeSize = _unicodeSize;
  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */

  function stringSize$2(string) {
    return hasUnicode$1(string) ? unicodeSize(string) : asciiSize(string);
  }

  var _stringSize = stringSize$2;

  var baseRepeat = _baseRepeat,
      baseToString = _baseToString,
      castSlice = _castSlice,
      hasUnicode = _hasUnicode,
      stringSize$1 = _stringSize,
      stringToArray = _stringToArray;
  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeCeil$2 = Math.ceil;
  /**
   * Creates the padding for `string` based on `length`. The `chars` string
   * is truncated if the number of characters exceeds `length`.
   *
   * @private
   * @param {number} length The padding length.
   * @param {string} [chars=' '] The string used as padding.
   * @returns {string} Returns the padding for `string`.
   */

  function createPadding$1(length, chars) {
    chars = chars === undefined ? ' ' : baseToString(chars);
    var charsLength = chars.length;

    if (charsLength < 2) {
      return charsLength ? baseRepeat(chars, length) : chars;
    }

    var result = baseRepeat(chars, nativeCeil$2(length / stringSize$1(chars)));
    return hasUnicode(chars) ? castSlice(stringToArray(result), 0, length).join('') : result.slice(0, length);
  }

  var _createPadding = createPadding$1;

  var createPadding = _createPadding,
      stringSize = _stringSize,
      toInteger$1 = toInteger_1,
      toString = toString_1;
  /**
   * Pads `string` on the left side if it's shorter than `length`. Padding
   * characters are truncated if they exceed `length`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category String
   * @param {string} [string=''] The string to pad.
   * @param {number} [length=0] The padding length.
   * @param {string} [chars=' '] The string used as padding.
   * @returns {string} Returns the padded string.
   * @example
   *
   * _.padStart('abc', 6);
   * // => '   abc'
   *
   * _.padStart('abc', 6, '_-');
   * // => '_-_abc'
   *
   * _.padStart('abc', 3);
   * // => 'abc'
   */

  function padStart(string, length, chars) {
    string = toString(string);
    length = toInteger$1(length);
    var strLength = length ? stringSize(string) : 0;
    return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
  }

  var padStart_1 = padStart;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeCeil$1 = Math.ceil,
      nativeMax$1 = Math.max;
  /**
   * The base implementation of `_.range` and `_.rangeRight` which doesn't
   * coerce arguments.
   *
   * @private
   * @param {number} start The start of the range.
   * @param {number} end The end of the range.
   * @param {number} step The value to increment or decrement by.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Array} Returns the range of numbers.
   */

  function baseRange$1(start, end, step, fromRight) {
    var index = -1,
        length = nativeMax$1(nativeCeil$1((end - start) / (step || 1)), 0),
        result = Array(length);

    while (length--) {
      result[fromRight ? length : ++index] = start;
      start += step;
    }

    return result;
  }

  var _baseRange = baseRange$1;

  var eq = eq_1,
      isArrayLike = isArrayLike_1,
      isIndex = _isIndex,
      isObject = isObject_1;
  /**
   * Checks if the given arguments are from an iteratee call.
   *
   * @private
   * @param {*} value The potential iteratee value argument.
   * @param {*} index The potential iteratee index or key argument.
   * @param {*} object The potential iteratee object argument.
   * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
   *  else `false`.
   */

  function isIterateeCall$2(value, index, object) {
    if (!isObject(object)) {
      return false;
    }

    var type = _typeof(index);

    if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
      return eq(object[index], value);
    }

    return false;
  }

  var _isIterateeCall = isIterateeCall$2;

  var baseRange = _baseRange,
      isIterateeCall$1 = _isIterateeCall,
      toFinite = toFinite_1;
  /**
   * Creates a `_.range` or `_.rangeRight` function.
   *
   * @private
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new range function.
   */

  function createRange$1(fromRight) {
    return function (start, end, step) {
      if (step && typeof step != 'number' && isIterateeCall$1(start, end, step)) {
        end = step = undefined;
      } // Ensure the sign of `-0` is preserved.


      start = toFinite(start);

      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }

      step = step === undefined ? start < end ? 1 : -1 : toFinite(step);
      return baseRange(start, end, step, fromRight);
    };
  }

  var _createRange = createRange$1;

  var createRange = _createRange;
  /**
   * Creates an array of numbers (positive and/or negative) progressing from
   * `start` up to, but not including, `end`. A step of `-1` is used if a negative
   * `start` is specified without an `end` or `step`. If `end` is not specified,
   * it's set to `start` with `start` then set to `0`.
   *
   * **Note:** JavaScript follows the IEEE-754 standard for resolving
   * floating-point values which can produce unexpected results.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {number} [start=0] The start of the range.
   * @param {number} end The end of the range.
   * @param {number} [step=1] The value to increment or decrement by.
   * @returns {Array} Returns the range of numbers.
   * @see _.inRange, _.rangeRight
   * @example
   *
   * _.range(4);
   * // => [0, 1, 2, 3]
   *
   * _.range(-4);
   * // => [0, -1, -2, -3]
   *
   * _.range(1, 5);
   * // => [1, 2, 3, 4]
   *
   * _.range(0, 20, 5);
   * // => [0, 5, 10, 15]
   *
   * _.range(0, -4, -1);
   * // => [0, -1, -2, -3]
   *
   * _.range(1, 4, 0);
   * // => [1, 1, 1]
   *
   * _.range(0);
   * // => []
   */

  var range = createRange();
  var range_1 = range;

  var KeyboardDirection = /* @__PURE__ */function (KeyboardDirection2) {
    KeyboardDirection2[KeyboardDirection2["left"] = 37] = "left";
    KeyboardDirection2[KeyboardDirection2["up"] = 38] = "up";
    KeyboardDirection2[KeyboardDirection2["right"] = 39] = "right";
    KeyboardDirection2[KeyboardDirection2["down"] = 40] = "down";
    return KeyboardDirection2;
  }(KeyboardDirection || {});
  var EPickerCols = /* @__PURE__ */function (EPickerCols2) {
    EPickerCols2["hour"] = "hour";
    EPickerCols2["minute"] = "minute";
    EPickerCols2["second"] = "second";
    EPickerCols2["meridiem"] = "meridiem";
    return EPickerCols2;
  }(EPickerCols || {});

  var useTimePickerTextConfig = function useTimePickerTextConfig() {
    var _useLocaleReceiver = useLocaleReceiver("timePicker"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
        local = _useLocaleReceiver2[0],
        t = _useLocaleReceiver2[1];

    return {
      nowtime: t(local.nowtime),
      confirm: t(local.confirm),
      am: t(local.anteMeridiem),
      pm: t(local.postMeridiem),
      placeholder: t(local.placeholder)
    };
  };
  var AM = "am";
  var PM = "pm";
  var MERIDIEM_LIST = [AM, PM];
  var DEFAULT_STEPS = [1, 1, 1];
  var DEFAULT_FORMAT = "HH:mm:ss";

  var timeArr = [EPickerCols.hour, EPickerCols.minute, EPickerCols.second];

  var SinglePanel = function SinglePanel(props) {
    var steps = props.steps,
        format = props.format,
        _props$onChange = props.onChange,
        onChange = _props$onChange === void 0 ? noop : _props$onChange,
        value = props.value,
        _props$hideDisabledTi = props.hideDisabledTime,
        hideDisabledTime = _props$hideDisabledTi === void 0 ? true : _props$hideDisabledTi,
        disableTime = props.disableTime;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var TEXT_CONFIG = useTimePickerTextConfig();
    var panelClassName = "".concat(classPrefix, "-time-picker__panel");

    var _useState = React.useState([]),
        _useState2 = _slicedToArray(_useState, 2),
        cols = _useState2[0],
        setCols = _useState2[1];

    var colsRef = React.useRef([]);
    var maskRef = React.useRef(null);
    var dayjsValue = React.useMemo(function () {
      var isStepsSet = !!steps.filter(function (v) {
        return v > 1;
      }).length;

      if (value) {
        return dayjs(value, format);
      }

      if (isStepsSet) {
        return dayjs().hour(0).minute(0).second(0);
      }

      return dayjs();
    }, [value, format, steps]);
    React.useEffect(function () {
      colsRef.current = colsRef.current.slice(0, cols.length);
    }, [cols]);
    React.useEffect(function () {
      var match = format.match(/(a\s+|A\s+)?(h+|H+)?:?(m+)?:?(s+)?(\s+a|\s+A)?/);

      var _match = _slicedToArray(match, 6),
          startCol = _match[1],
          hourCol = _match[2],
          minuteCol = _match[3],
          secondCol = _match[4],
          endCol = _match[5];

      var meridiem = EPickerCols.meridiem,
          hour = EPickerCols.hour,
          minute = EPickerCols.minute,
          second = EPickerCols.second;
      var renderCol = [startCol && meridiem, hourCol && hour, minuteCol && minute, secondCol && second, endCol && meridiem].filter(function (v) {
        return !!v;
      });
      setCols(renderCol);
    }, [format]);
    var getItemHeight = React.useCallback(function () {
      var _maskRef$current;

      var maskDom = maskRef === null || maskRef === void 0 ? void 0 : (_maskRef$current = maskRef.current) === null || _maskRef$current === void 0 ? void 0 : _maskRef$current.querySelector("div");
      var timeItemTotalHeight = maskDom.offsetHeight + parseInt(getComputedStyle(maskDom).marginTop, 10);
      return timeItemTotalHeight;
    }, []);

    var closestLookup = function closestLookup(availableArr, calcVal, step) {
      if (step <= 1) return calcVal;
      return availableArr.sort(function (a, b) {
        return Math.abs(calcVal + 1 - a) - Math.abs(calcVal + 1 - b);
      })[0];
    };

    var timeItemCanUsed = function timeItemCanUsed(col, el) {
      var colIdx = timeArr.indexOf(col);

      if (colIdx !== -1) {
        var params = [dayjsValue.hour(), dayjsValue.minute(), dayjsValue.second()];
        params[colIdx] = el;
        return !(disableTime && disableTime !== null && disableTime !== void 0 && disableTime.apply(void 0, params));
      }

      return true;
    };

    var getColList = React.useCallback(function (col) {
      var count = 0;

      if (timeArr.includes(col)) {
        var colIdx = timeArr.indexOf(col);
        var colStep = steps[colIdx];

        if (col === EPickerCols.hour) {
          count = /[h]{1}/.test(format) ? 11 : 23;
        } else {
          count = 59;
        }

        var colList = range_1(0, count + 1, Number(colStep)).map(function (v) {
          return padStart_1(String(v), 2, "0");
        }) || [];
        return hideDisabledTime && !!disableTime ? colList.filter(function (t) {
          var params = [dayjsValue.hour(), dayjsValue.minute(), dayjsValue.second()];
          params[colIdx] = Number(t);
          return !(disableTime !== null && disableTime !== void 0 && disableTime.apply(void 0, params));
        }) : colList;
      }

      return MERIDIEM_LIST;
    }, [steps, format, hideDisabledTime, dayjsValue, disableTime]);
    var getScrollDistance = React.useCallback(function (col, time) {
      if (col === EPickerCols.hour && /[h]{1}/.test(format)) {
        time %= 12;
      }

      var itemIdx = getColList(col).indexOf(padStart_1(String(time), 2, "0"));
      var timeItemTotalHeight = getItemHeight();
      var distance = Math.abs(itemIdx * timeItemTotalHeight + timeItemTotalHeight / 2);
      return distance;
    }, [getItemHeight, getColList, format]);

    var handleScroll = function handleScroll(col, idx, e) {
      var _colsRef$current$idx;

      var val;
      var isScrollUp = e.deltaY < 0;
      var scrollTop = (_colsRef$current$idx = colsRef.current[idx]) === null || _colsRef$current$idx === void 0 ? void 0 : _colsRef$current$idx.scrollTop;
      var colStep = Math.abs(Math.round(scrollTop / getItemHeight() - (isScrollUp && scrollTop >= 1 ? 1 : 0)));

      if (timeArr.includes(col)) {
        var _dayjsValue$col;

        var max = 59;

        if (col === EPickerCols.hour) {
          max = /[h]{1}/.test(format) ? 11 : 23;
        }

        var colIdx = timeArr.indexOf(col);
        var availableArr = range_1(0, max + 1, Number(steps[colIdx]));
        val = closestLookup(availableArr, Number(getColList(col)[Math.min(colStep, max, availableArr.length - 1)]), Number(steps[colIdx]));

        if (col === EPickerCols.hour && cols.includes(EPickerCols.meridiem) && dayjsValue.hour() > 12) {
          val = Number(val) + 12;
        }

        if (timeItemCanUsed(col, val)) onChange((_dayjsValue$col = dayjsValue[col]) === null || _dayjsValue$col === void 0 ? void 0 : _dayjsValue$col.call(dayjsValue, val).format(format));
      } else {
        var meridiem = MERIDIEM_LIST[Math.min(colStep, 1)].toLowerCase();
        val = meridiem;
        var currentHour = dayjsValue.hour();

        if (meridiem === AM && currentHour >= 12) {
          onChange(dayjsValue.hour(currentHour - 12).format(format));
        } else if (meridiem === PM && currentHour < 12) {
          onChange(dayjsValue.hour(currentHour + 12).format(format));
        }
      }

      var distance = getScrollDistance(col, val);

      if (distance !== scrollTop) {
        var scroller = colsRef.current[cols.indexOf(col)];
        if (!distance || !scroller || scroller.scrollTop === distance) return;
        scroller.scrollTo({
          top: distance,
          behavior: "smooth"
        });
      }
    };

    var scrollToTime = React.useCallback(function (col, time, idx) {
      var behavior = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "auto";
      var distance = getScrollDistance(col, time);
      var scroller = colsRef.current[idx];
      if (!distance || !scroller || scroller.scrollTop === distance) return;
      scroller.scrollTo({
        top: distance,
        behavior: behavior
      });
    }, [getScrollDistance]);

    var handleTimeItemClick = function handleTimeItemClick(col, el) {
      if (timeArr.includes(col)) {
        var _dayjsValue$col2, _dayjsValue$col3;

        if (col === EPickerCols.hour && dayjsValue.format("a") === PM && cols.includes(EPickerCols.meridiem)) {
          el = Number(el) + 12;
        }

        value ? onChange((_dayjsValue$col2 = dayjsValue[col]) === null || _dayjsValue$col2 === void 0 ? void 0 : _dayjsValue$col2.call(dayjsValue, el).format(format)) : onChange((_dayjsValue$col3 = dayjsValue[col]) === null || _dayjsValue$col3 === void 0 ? void 0 : _dayjsValue$col3.call(dayjsValue, el).format(format));
      } else {
        var currentHour = dayjsValue.hour();

        if (el === AM && currentHour >= 12) {
          onChange(dayjsValue.hour(currentHour - 12).format(format));
        } else if (el === PM && currentHour < 12) {
          onChange(dayjsValue.hour(currentHour + 12).format(format));
        }
      }
    };

    var updateTimeScrollPos = React.useCallback(function () {
      var behavior = value ? "smooth" : "auto";
      var isStepsSet = !!steps.filter(function (v) {
        return v > 1;
      }).length;
      cols.forEach(function (col, idx) {
        if (!isStepsSet || isStepsSet && value) {
          var _dayjsValue$col4;

          scrollToTime(col, timeArr.includes(col) ? (_dayjsValue$col4 = dayjsValue[col]) === null || _dayjsValue$col4 === void 0 ? void 0 : _dayjsValue$col4.call(dayjsValue) : dayjsValue.format("a"), idx, behavior);
        } else {
          var _getColList;

          scrollToTime(col, (_getColList = getColList(col)) === null || _getColList === void 0 ? void 0 : _getColList[0], idx, behavior);
        }
      });
    }, [cols, scrollToTime, dayjsValue, value, steps, getColList]);
    React.useEffect(function () {
      updateTimeScrollPos();
    });
    var isCurrent = React.useCallback(function (col, colItem) {
      var _dayjsValue$col5;

      var colVal;

      if (col === EPickerCols.meridiem) {
        var currentMeridiem = dayjsValue.format("a");
        return currentMeridiem === colItem;
      }

      colVal = (_dayjsValue$col5 = dayjsValue[col]) === null || _dayjsValue$col5 === void 0 ? void 0 : _dayjsValue$col5.call(dayjsValue);

      if (col === EPickerCols.hour && /[h]{1}/.test(format)) {
        colVal %= 12;
      }

      return colVal === Number(colItem);
    }, [format, dayjsValue]);

    function renderScrollers() {
      return cols.map(function (col, idx) {
        return /* @__PURE__ */React__default["default"].createElement("ul", {
          key: "".concat(col, "_").concat(idx),
          ref: function ref(el) {
            return colsRef.current[idx] = el;
          },
          className: "".concat(panelClassName, "-body-scroll"),
          onWheel: debounce_1(function (e) {
            return handleScroll(col, idx, e);
          }, 50)
        }, getColList(col).map(function (el) {
          var _classNames;

          return /* @__PURE__ */React__default["default"].createElement("li", {
            key: el,
            className: classNames$1("".concat(panelClassName, "-body-scroll-item"), (_classNames = {}, _defineProperty$2(_classNames, "".concat(classPrefix, "-is-disabled"), !timeItemCanUsed(col, el)), _defineProperty$2(_classNames, "".concat(classPrefix, "-is-current"), isCurrent(col, el)), _classNames)),
            onClick: function onClick() {
              return handleTimeItemClick(col, el);
            }
          }, timeArr.includes(col) ? el : TEXT_CONFIG[el]);
        }));
      });
    }

    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(panelClassName, "-body")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(panelClassName, "-body-active-mask"),
      ref: maskRef
    }, cols.map(function (col, idx) {
      return /* @__PURE__ */React__default["default"].createElement("div", {
        key: "".concat(col, "_").concat(idx)
      });
    })), renderScrollers());
  };

  function ownKeys$7(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$7(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$7(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$7(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var TimePickerPanel$1 = function TimePickerPanel(props) {
    var _props$value = props.value,
        value = _props$value === void 0 ? [] : _props$value,
        onChange = props.onChange,
        isFooterDisplay = props.isFooterDisplay,
        handleConfirmClick = props.handleConfirmClick,
        _props$steps = props.steps,
        steps = _props$steps === void 0 ? DEFAULT_STEPS : _props$steps,
        _props$format = props.format,
        format = _props$format === void 0 ? DEFAULT_FORMAT : _props$format;
    var TEXT_CONFIG = useTimePickerTextConfig();

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _ref = value || [],
        _ref2 = _slicedToArray(_ref, 2),
        startTime = _ref2[0],
        endTime = _ref2[1];

    var panelClassName = "".concat(classPrefix, "-time-picker__panel");

    var handlePanelValueChange = function handlePanelValueChange(value2, index) {
      if (index === 0) {
        onChange([value2, endTime || value2]);
      } else {
        var calStartTime = startTime || dayjs().hour(0).minute(0).second(0).format(format);
        onChange([calStartTime, value2]);
      }
    };

    var defaultValue = React.useMemo(function () {
      if (value && value.length === 0) {
        return [dayjs().format(format), dayjs().format(format)];
      }

      return value;
    }, [value, format]);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(panelClassName, "".concat(panelClassName, "-section"))
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(panelClassName, "-section-body")
    }, /* @__PURE__ */React__default["default"].createElement(SinglePanel, _objectSpread$7(_objectSpread$7({}, props), {}, {
      steps: steps,
      format: format,
      value: startTime,
      onChange: function onChange(v) {
        return handlePanelValueChange(v, 0);
      }
    })), /* @__PURE__ */React__default["default"].createElement(SinglePanel, _objectSpread$7(_objectSpread$7({}, props), {}, {
      steps: steps,
      format: format,
      value: endTime,
      onChange: function onChange(v) {
        return handlePanelValueChange(v, 1);
      }
    }))), isFooterDisplay ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(panelClassName, "-section-footer")
    }, /* @__PURE__ */React__default["default"].createElement(Button, {
      theme: "primary",
      variant: "base",
      onClick: function onClick() {
        handleConfirmClick(defaultValue);
      }
    }, TEXT_CONFIG.confirm)) : null);
  };

  var preposFormat = /^(a|A)\s+?[h]{1,2}(:[m]{1,2}(:[s]{1,2})?)?$/;
  var postposFormat = /^[h]{1,2}(:[m]{1,2}(:[s]{1,2})?)?(\s+(a|A))?$/;
  var secondRegExp = /[hH]{1,2}:m{1,2}:s{1,2}/;
  var minRegExp = /[hH]{1,2}:m{1,2}/;

  var TimePickerInputItems = function TimePickerInputItems(props) {
    var allowInput = props.allowInput,
        format = props.format,
        disabled = props.disabled,
        value = props.value,
        _onBlur = props.onBlur,
        onChange = props.onChange,
        _onFocus = props.onFocus,
        _onInput = props.onInput;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var inputItemClass = "".concat(classPrefix, "-time-picker__input");
    var itemClasses = classNames$1("".concat(inputItemClass, "-item"), _defineProperty$2({}, "".concat(inputItemClass, "-item-disabled"), disabled));
    var inputClass = "".concat(inputItemClass, "-item-input");
    var isRangePicker = Array.isArray(value) && value.length > 1;

    var _ref = _toConsumableArray(value),
        startTime = _ref[0],
        endTime = _ref[1];

    var _useState = React.useState(void 0),
        _useState2 = _slicedToArray(_useState, 2),
        formatedValue = _useState2[0],
        changeFormatedValue = _useState2[1];

    React.useEffect(function () {
      if (!startTime) return;
      var dayjsValue = dayjs(startTime, format);
      var hour = /[h]{1}/.test(format) ? dayjsValue.hour() % 12 : dayjsValue.hour();
      var minute = dayjsValue.minute();
      var second = dayjsValue.second();
      changeFormatedValue(function (preVal) {
        return [{
          hour: padStart_1(String(hour), 2, "0"),
          minute: padStart_1(String(minute), 2, "0"),
          second: padStart_1(String(second), 2, "0"),
          meridiem: dayjsValue.format("a")
        }, preVal === null || preVal === void 0 ? void 0 : preVal[1]];
      });
    }, [startTime, format]);
    React.useEffect(function () {
      if (!endTime) return;
      var dayjsValue = dayjs(endTime, format);
      var hour = /[h]{1}/.test(format) ? dayjsValue.hour() % 12 : dayjsValue.hour();
      var minute = dayjsValue.minute();
      var second = dayjsValue.second();
      changeFormatedValue(function (preVal) {
        return [preVal[0], {
          hour: padStart_1(String(hour), 2, "0"),
          minute: padStart_1(String(minute), 2, "0"),
          second: padStart_1(String(second), 2, "0"),
          meridiem: dayjsValue.format("a")
        }];
      });
    }, [endTime, format]);
    var handleInputChange = React.useCallback(function (type, result, index) {
      if (!isRangePicker) {
        var _currentDayjsValue$ty;

        var currentDayjsValue = dayjs(startTime, format);
        onChange((_currentDayjsValue$ty = currentDayjsValue[type]) === null || _currentDayjsValue$ty === void 0 ? void 0 : _currentDayjsValue$ty.call(currentDayjsValue, result).format(format));
      } else {
        var _currentDayjsValue;

        if (index === 0) {
          var _dayjs$type, _dayjs;

          _currentDayjsValue = (_dayjs$type = (_dayjs = dayjs(startTime, format))[type]) === null || _dayjs$type === void 0 ? void 0 : _dayjs$type.call(_dayjs, result).format(format);
          onChange([_currentDayjsValue, endTime]);
        } else {
          var _dayjs$type2, _dayjs2;

          _currentDayjsValue = (_dayjs$type2 = (_dayjs2 = dayjs(endTime, format))[type]) === null || _dayjs$type2 === void 0 ? void 0 : _dayjs$type2.call(_dayjs2, result).format(format);
          onChange([startTime, _currentDayjsValue]);
        }
      }
    }, [format, onChange, startTime, isRangePicker, endTime]);
    var handleInputKeydown = React.useCallback(function (e, type, index) {
      if (!allowInput) return;
      var up = KeyboardDirection.up,
          down = KeyboardDirection.down,
          left = KeyboardDirection.left,
          right = KeyboardDirection.right;
      var which = e.which;

      if ([up, down].includes(which)) {
        var _formatedValue$index;

        if (type === EPickerCols.meridiem) return;
        var timeValue = formatedValue === null || formatedValue === void 0 ? void 0 : (_formatedValue$index = formatedValue[index]) === null || _formatedValue$index === void 0 ? void 0 : _formatedValue$index[type];
        var current = timeValue ? Number(timeValue) : 0;
        var operate = which === up ? -1 : 1;
        var result = current + operate;

        if (type === EPickerCols.hour) {
          var maxHour = /[h]{1}/.test(format) ? 11 : 23;

          if (result > maxHour) {
            result = 0;
          } else if (result < 0) {
            result = maxHour;
          }
        } else if (result > 59) {
          result = 1;
        } else if (result < 0) {
          result = 59;
        }

        handleInputChange(type, result, index);
      } else if ([left, right].includes(which)) {
        var _e$target;

        var parentNode = (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.parentNode;
        var focus = which === left ? parentNode.previousSibling : parentNode.nextSibling;

        if (focus) {
          var _focus$querySelector;

          var input = (_focus$querySelector = focus.querySelector) === null || _focus$querySelector === void 0 ? void 0 : _focus$querySelector.call(focus, "input");
          if (input !== null && input !== void 0 && input.focus) input.focus();
        }
      }
    }, [allowInput, format, formatedValue, handleInputChange]);
    var TEXT_CONFIG = useTimePickerTextConfig();

    function renderMeridiemItem(text) {
      return /* @__PURE__ */React__default["default"].createElement("span", {
        className: itemClasses
      }, /* @__PURE__ */React__default["default"].createElement("input", {
        readOnly: true,
        disabled: !allowInput,
        value: TEXT_CONFIG[text] || "",
        onKeyDown: function onKeyDown(e) {
          return handleInputKeydown(e, EPickerCols.meridiem);
        },
        className: classNames$1(inputClass, "".concat(inputClass, "-meridiem"))
      }));
    }

    function renderTimeItem(inputValue, type, showColon, index) {
      var propsValue = isRangePicker ? value : value[0];
      return /* @__PURE__ */React__default["default"].createElement("span", {
        className: itemClasses
      }, showColon ? ":" : null, /* @__PURE__ */React__default["default"].createElement("input", {
        value: inputValue || "",
        className: inputClass,
        disabled: !allowInput,
        onKeyDown: function onKeyDown(e) {
          return handleInputKeydown(e, type, index);
        },
        onInput: function onInput(e) {
          return _onInput({
            e: e,
            input: inputValue,
            value: propsValue
          });
        },
        onChange: function onChange(e) {
          var _e$target2;

          return handleInputChange(type, e === null || e === void 0 ? void 0 : (_e$target2 = e.target) === null || _e$target2 === void 0 ? void 0 : _e$target2.value);
        },
        onBlur: function onBlur(e) {
          return _onBlur({
            e: e,
            trigger: type,
            input: inputValue,
            value: propsValue
          });
        },
        onFocus: function onFocus(e) {
          return _onFocus({
            e: e,
            trigger: type,
            input: inputValue,
            value: propsValue
          });
        }
      }));
    }

    function renderItems(itemValue, index) {
      return /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, preposFormat.test(format) && renderMeridiemItem(itemValue === null || itemValue === void 0 ? void 0 : itemValue.meridiem), renderTimeItem(itemValue === null || itemValue === void 0 ? void 0 : itemValue.hour, EPickerCols.hour, false, index), minRegExp.test(format) ? renderTimeItem(itemValue === null || itemValue === void 0 ? void 0 : itemValue.minute, EPickerCols.minute, true, index) : null, secondRegExp.test(format) ? renderTimeItem(itemValue === null || itemValue === void 0 ? void 0 : itemValue.second, EPickerCols.second, true, index) : null, postposFormat.test(format) && renderMeridiemItem(itemValue === null || itemValue === void 0 ? void 0 : itemValue.meridiem));
    }

    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: inputItemClass
    }, isRangePicker ? /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, renderItems(formatedValue === null || formatedValue === void 0 ? void 0 : formatedValue[0], 0), " - ", renderItems(formatedValue === null || formatedValue === void 0 ? void 0 : formatedValue[1], 1)) : renderItems(formatedValue === null || formatedValue === void 0 ? void 0 : formatedValue[0], 0));
  };

  var TimeRangePicker = function TimeRangePicker(props) {
    var TEXT_CONFIG = useTimePickerTextConfig();

    var _useDefaultValue = useDefaultValue$1(props),
        allowInput = _useDefaultValue.allowInput,
        clearable = _useDefaultValue.clearable,
        disabled = _useDefaultValue.disabled,
        _useDefaultValue$form = _useDefaultValue.format,
        format = _useDefaultValue$form === void 0 ? "HH:mm:ss" : _useDefaultValue$form,
        _useDefaultValue$hide = _useDefaultValue.hideDisabledTime,
        hideDisabledTime = _useDefaultValue$hide === void 0 ? true : _useDefaultValue$hide,
        _useDefaultValue$plac = _useDefaultValue.placeholder,
        placeholder = _useDefaultValue$plac === void 0 ? TEXT_CONFIG.placeholder : _useDefaultValue$plac,
        _useDefaultValue$size = _useDefaultValue.size,
        size = _useDefaultValue$size === void 0 ? "medium" : _useDefaultValue$size,
        _useDefaultValue$step = _useDefaultValue.steps,
        steps = _useDefaultValue$step === void 0 ? [1, 1, 1] : _useDefaultValue$step,
        value = _useDefaultValue.value,
        _useDefaultValue$onBl = _useDefaultValue.onBlur,
        onBlur = _useDefaultValue$onBl === void 0 ? noop : _useDefaultValue$onBl,
        onChange = _useDefaultValue.onChange,
        _useDefaultValue$onFo = _useDefaultValue.onFocus,
        onFocus = _useDefaultValue$onFo === void 0 ? noop : _useDefaultValue$onFo,
        _useDefaultValue$onIn = _useDefaultValue.onInput,
        onInput = _useDefaultValue$onIn === void 0 ? noop : _useDefaultValue$onIn,
        style = _useDefaultValue.style,
        className = _useDefaultValue.className;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var name = "".concat(classPrefix, "-time-picker");

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        isPanelShowed = _useState2[0],
        setPanelShow = _useState2[1];

    var inputClasses = classNames$1("".concat(name, "__group"), _defineProperty$2({}, "".concat(classPrefix, "-is-focused"), isPanelShowed));

    var handleShowPopup = function handleShowPopup(visible) {
      setPanelShow(visible);
    };

    var handleClear = function handleClear(context) {
      var e = context.e;
      e.stopPropagation();
      onChange(null);
    };

    return /* @__PURE__ */React__default["default"].createElement(Popup, {
      content: /* @__PURE__ */React__default["default"].createElement(TimePickerPanel$1, {
        steps: steps,
        format: format,
        hideDisabledTime: hideDisabledTime,
        isFooterDisplay: true,
        value: value,
        onChange: onChange,
        handleConfirmClick: function handleConfirmClick(value2) {
          onChange(value2);
          setPanelShow(false);
        }
      }),
      disabled: disabled,
      placement: "bottom-left",
      visible: isPanelShowed,
      onVisibleChange: handleShowPopup,
      trigger: "click",
      expandAnimation: true
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(name, className),
      style: style
    }, /* @__PURE__ */React__default["default"].createElement(Input, {
      size: size,
      readonly: true,
      clearable: clearable,
      className: inputClasses,
      value: value ? " " : void 0,
      onClear: handleClear,
      disabled: disabled,
      placeholder: !value ? placeholder : void 0,
      suffixIcon: /* @__PURE__ */React__default["default"].createElement(TimeIcon, null)
    }), value ? /* @__PURE__ */React__default["default"].createElement(TimePickerInputItems, {
      disabled: disabled,
      format: format,
      placeholder: placeholder,
      allowInput: allowInput,
      value: value,
      onBlur: onBlur,
      onFocus: onFocus,
      onInput: onInput,
      onChange: onChange
    }) : null));
  };

  TimeRangePicker.displayName = "TimeRangePicker";

  function ownKeys$6(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$6(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$6(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$6(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var TimePickerPanel = function TimePickerPanel(props) {
    var isFooterDisplay = props.isFooterDisplay,
        onChange = props.onChange,
        _props$format = props.format,
        format = _props$format === void 0 ? DEFAULT_FORMAT : _props$format,
        _props$steps = props.steps,
        steps = _props$steps === void 0 ? DEFAULT_STEPS : _props$steps,
        handleConfirmClick = props.handleConfirmClick,
        value = props.value;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var TEXT_CONFIG = useTimePickerTextConfig();
    var panelClassName = "".concat(classPrefix, "-time-picker__panel");
    var showNowTimeBtn = !!steps.filter(function (v) {
      return v > 1;
    }).length;
    var defaultValue = React.useMemo(function () {
      var isStepsSet = !!steps.filter(function (v) {
        return v > 1;
      }).length;

      if (value) {
        return dayjs(value, format);
      }

      if (isStepsSet) {
        return dayjs().hour(0).minute(0).second(0);
      }

      return dayjs();
    }, [value, format, steps]);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: panelClassName
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(panelClassName, "-section-body")
    }, /* @__PURE__ */React__default["default"].createElement(SinglePanel, _objectSpread$6(_objectSpread$6({}, props), {}, {
      format: format,
      steps: steps,
      value: value
    }))), isFooterDisplay ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(panelClassName, "-section-footer")
    }, /* @__PURE__ */React__default["default"].createElement(Button, {
      theme: "primary",
      variant: "base",
      onClick: function onClick() {
        handleConfirmClick(defaultValue);
      }
    }, TEXT_CONFIG.confirm), !showNowTimeBtn ? /* @__PURE__ */React__default["default"].createElement(Button, {
      theme: "primary",
      variant: "text",
      onClick: function onClick() {
        return onChange(dayjs().format(format));
      }
    }, TEXT_CONFIG.nowtime) : null) : null);
  };

  dayjs.extend(customParseFormat);
  var TimePicker$1 = forwardRefWithStatics(function (props, ref) {
    var _classNames;

    var TEXT_CONFIG = useTimePickerTextConfig();

    var _useDefaultValue = useDefaultValue$1(props),
        allowInput = _useDefaultValue.allowInput,
        className = _useDefaultValue.className,
        clearable = _useDefaultValue.clearable,
        disabled = _useDefaultValue.disabled,
        _useDefaultValue$form = _useDefaultValue.format,
        format = _useDefaultValue$form === void 0 ? DEFAULT_FORMAT : _useDefaultValue$form,
        _useDefaultValue$hide = _useDefaultValue.hideDisabledTime,
        hideDisabledTime = _useDefaultValue$hide === void 0 ? true : _useDefaultValue$hide,
        _useDefaultValue$plac = _useDefaultValue.placeholder,
        placeholder = _useDefaultValue$plac === void 0 ? TEXT_CONFIG.placeholder : _useDefaultValue$plac,
        style = _useDefaultValue.style,
        _useDefaultValue$size = _useDefaultValue.size,
        size = _useDefaultValue$size === void 0 ? "medium" : _useDefaultValue$size,
        _useDefaultValue$step = _useDefaultValue.steps,
        steps = _useDefaultValue$step === void 0 ? DEFAULT_STEPS : _useDefaultValue$step,
        value = _useDefaultValue.value,
        disableTime = _useDefaultValue.disableTime,
        _useDefaultValue$onBl = _useDefaultValue.onBlur,
        onBlur = _useDefaultValue$onBl === void 0 ? noop : _useDefaultValue$onBl,
        onChange = _useDefaultValue.onChange,
        _useDefaultValue$onCl = _useDefaultValue.onClose,
        onClose = _useDefaultValue$onCl === void 0 ? noop : _useDefaultValue$onCl,
        _useDefaultValue$onFo = _useDefaultValue.onFocus,
        onFocus = _useDefaultValue$onFo === void 0 ? noop : _useDefaultValue$onFo,
        _useDefaultValue$onIn = _useDefaultValue.onInput,
        onInput = _useDefaultValue$onIn === void 0 ? noop : _useDefaultValue$onIn,
        _useDefaultValue$onOp = _useDefaultValue.onOpen,
        onOpen = _useDefaultValue$onOp === void 0 ? noop : _useDefaultValue$onOp;

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        isPanelShowed = _useState2[0],
        setPanelShow = _useState2[1];

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var name = "".concat(classPrefix, "-time-picker");
    var inputClasses = classNames$1("".concat(name, "__group"), (_classNames = {}, _defineProperty$2(_classNames, "".concat(classPrefix, "-is-focused"), isPanelShowed), _defineProperty$2(_classNames, "".concat(classPrefix, "-input--focused"), isPanelShowed), _classNames));

    var handleShowPopup = function handleShowPopup(visible, context) {
      setPanelShow(visible);
      visible ? onOpen(context) : onClose(context);
    };

    var handleClear = function handleClear(context) {
      var e = context.e;
      e.stopPropagation();
      onChange(null);
    };

    return /* @__PURE__ */React__default["default"].createElement(Popup, {
      content: /* @__PURE__ */React__default["default"].createElement(TimePickerPanel, {
        steps: steps,
        format: format,
        disableTime: disableTime,
        hideDisabledTime: hideDisabledTime,
        isFooterDisplay: true,
        onChange: onChange,
        handleConfirmClick: function handleConfirmClick(value2) {
          onChange(dayjs(value2).format(format));
          setPanelShow(false);
        },
        value: value
      }),
      disabled: disabled,
      visible: isPanelShowed,
      onVisibleChange: handleShowPopup,
      overlayClassName: classNames$1("".concat(name, "__panel-container")),
      placement: "bottom-left",
      trigger: "click",
      expandAnimation: true
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(name, className),
      ref: ref,
      style: style
    }, /* @__PURE__ */React__default["default"].createElement(Input, {
      readonly: true,
      disabled: disabled,
      size: size,
      clearable: clearable,
      value: value ? " " : void 0,
      onClear: handleClear,
      placeholder: !value ? placeholder : void 0,
      className: inputClasses,
      suffixIcon: /* @__PURE__ */React__default["default"].createElement(TimeIcon, null)
    }), value ? /* @__PURE__ */React__default["default"].createElement(TimePickerInputItems, {
      disabled: disabled,
      format: format,
      allowInput: allowInput,
      value: [value],
      onBlur: onBlur,
      onFocus: onFocus,
      onInput: onInput,
      onChange: onChange
    }) : null));
  }, {
    displayName: "TimePicker",
    TimeRangePicker: TimeRangePicker
  });

  var TimePicker = TimePicker$1;

  var baseGetTag = _baseGetTag,
      isObjectLike = isObjectLike_1;
  /** `Object#toString` result references. */

  var dateTag = '[object Date]';
  /**
   * The base implementation of `_.isDate` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
   */

  function baseIsDate$1(value) {
    return isObjectLike(value) && baseGetTag(value) == dateTag;
  }

  var _baseIsDate = baseIsDate$1;

  var baseIsDate = _baseIsDate,
      baseUnary = _baseUnary,
      nodeUtil = _nodeUtil.exports;
  /* Node.js helper references. */

  var nodeIsDate = nodeUtil && nodeUtil.isDate;
  /**
   * Checks if `value` is classified as a `Date` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
   * @example
   *
   * _.isDate(new Date);
   * // => true
   *
   * _.isDate('Mon April 23 2012');
   * // => false
   */

  var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
  var isDate_1 = isDate;

  var isBetween$2 = {exports: {}};

  (function (module, exports) {
    !function (e, t) {
      module.exports = t() ;
    }(commonjsGlobal, function () {

      return function (e, t, i) {
        t.prototype.isBetween = function (e, t, s, f) {
          var n = i(e),
              o = i(t),
              r = "(" === (f = f || "()")[0],
              u = ")" === f[1];
          return (r ? this.isAfter(n, s) : !this.isBefore(n, s)) && (u ? this.isBefore(o, s) : !this.isAfter(o, s)) || (r ? this.isBefore(n, s) : !this.isAfter(n, s)) && (u ? this.isAfter(o, s) : !this.isBefore(o, s));
        };
      };
    });
  })(isBetween$2);

  var isBetween$1 = isBetween$2.exports;

  var CalendarPresets = function CalendarPresets(props) {
    var presets = props.presets,
        onClickRange = props.onClickRange;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-date-picker__presets")
    }, /* @__PURE__ */React__default["default"].createElement("ul", null, presets && Object.keys(presets).map(function (key) {
      return /* @__PURE__ */React__default["default"].createElement("li", {
        key: key
      }, /* @__PURE__ */React__default["default"].createElement(Button, {
        variant: "text",
        onClick: function onClick() {
          return onClickRange(presets[key]);
        }
      }, key));
    })));
  };

  CalendarPresets.displayName = "CalendarPresets";

  var useDatePickerLocalConfig = function useDatePickerLocalConfig() {
    var _useLocaleReceiver = useLocaleReceiver("datePicker"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
        local = _useLocaleReceiver2[0],
        t = _useLocaleReceiver2[1];

    return {
      rangeSeparator: t(local.rangeSeparator),
      yearAriaLabel: t(local.yearAriaLabel),
      monthAriaLabel: t(local.monthAriaLabel),
      nextYear: t(local.nextYear),
      preYear: t(local.preYear),
      nextMonth: t(local.nextMonth),
      preMonth: t(local.preMonth),
      preDecade: t(local.preDecade),
      nextDecade: t(local.nextDecade),
      now: t(local.now)
    };
  };

  var DatePickerHeader = function DatePickerHeader(props) {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var type = props.type,
        year = props.year,
        month = props.month,
        onBtnClick = props.onBtnClick,
        onTypeChange = props.onTypeChange;
    var startYear = parseInt((year / 10).toString(), 10) * 10;

    var _useDatePickerLocalCo = useDatePickerLocalConfig(),
        now = _useDatePickerLocalCo.now,
        rangeSeparator = _useDatePickerLocalCo.rangeSeparator,
        yearAriaLabel = _useDatePickerLocalCo.yearAriaLabel,
        monthAriaLabel = _useDatePickerLocalCo.monthAriaLabel,
        preMonth = _useDatePickerLocalCo.preMonth,
        preYear = _useDatePickerLocalCo.preYear,
        nextMonth = _useDatePickerLocalCo.nextMonth,
        nextYear = _useDatePickerLocalCo.nextYear,
        preDecade = _useDatePickerLocalCo.preDecade,
        nextDecade = _useDatePickerLocalCo.nextDecade;

    var preLabel;
    var nextLabel;

    if (type === "year") {
      preLabel = preDecade;
      nextLabel = nextDecade;
    } else if (type === "date") {
      preLabel = preMonth;
      nextLabel = nextMonth;
    } else {
      preLabel = preYear;
      nextLabel = nextYear;
    }

    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-date-picker__header")
    }, /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-date-picker__header-title")
    }, type === "year" && /* @__PURE__ */React__default["default"].createElement("div", null, /* @__PURE__ */React__default["default"].createElement("span", null, startYear), rangeSeparator, /* @__PURE__ */React__default["default"].createElement("span", null, startYear + 9)), type !== "year" && /* @__PURE__ */React__default["default"].createElement(Button, {
      variant: "text",
      size: "small",
      onClick: function onClick() {
        return onTypeChange("year");
      },
      className: "".concat(classPrefix, "-date-picker__header-btn")
    }, "".concat(year, " ").concat(yearAriaLabel)), type === "date" && /* @__PURE__ */React__default["default"].createElement(Button, {
      className: "".concat(classPrefix, "-date-picker__header-btn"),
      variant: "text",
      size: "small",
      onClick: function onClick() {
        return onTypeChange("month");
      }
    }, "".concat(month === 12 ? 1 : month + 1, " ").concat(monthAriaLabel))), /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-date-picker__header-controller")
    }, /* @__PURE__ */React__default["default"].createElement(Button, {
      title: preLabel,
      variant: "text",
      onClick: function onClick() {
        return onBtnClick(-1);
      },
      icon: /* @__PURE__ */React__default["default"].createElement(ChevronLeftIcon, null),
      className: "".concat(classPrefix, "-date-picker__header-controller__btn")
    }), /* @__PURE__ */React__default["default"].createElement(Button, {
      title: now,
      variant: "text",
      onClick: function onClick() {
        return onBtnClick(0);
      },
      icon: /* @__PURE__ */React__default["default"].createElement(RoundIcon, null),
      className: "".concat(classPrefix, "-date-picker__header-controller__btn ").concat(classPrefix, "-date-picker__header-controller__btn--now")
    }), /* @__PURE__ */React__default["default"].createElement(Button, {
      title: nextLabel,
      variant: "text",
      onClick: function onClick() {
        return onBtnClick(1);
      },
      icon: /* @__PURE__ */React__default["default"].createElement(ChevronRightIcon, null),
      className: "".concat(classPrefix, "-date-picker__header-controller__btn")
    })));
  };

  DatePickerHeader.displayName = "DatePickerHeader";

  var DatePickerCell = function DatePickerCell(props) {
    var _classNames;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var text = props.text,
        value = props.value,
        active = props.active,
        highlight = props.highlight,
        disabled = props.disabled,
        startOfRange = props.startOfRange,
        endOfRange = props.endOfRange,
        additional = props.additional,
        now = props.now,
        firstDayOfMonth = props.firstDayOfMonth,
        lastDayOfMonth = props.lastDayOfMonth,
        onClick = props.onClick,
        onMouseEnter = props.onMouseEnter;
    var cellClass = classNames$1("".concat(classPrefix, "-date-picker__cell"), (_classNames = {}, _defineProperty$2(_classNames, "".concat(classPrefix, "-date-picker__cell--now"), now), _defineProperty$2(_classNames, "".concat(classPrefix, "-date-picker__cell--active"), active), _defineProperty$2(_classNames, "".concat(classPrefix, "-date-picker__cell--disabled"), disabled), _defineProperty$2(_classNames, "".concat(classPrefix, "-date-picker__cell--highlight"), highlight), _defineProperty$2(_classNames, "".concat(classPrefix, "-date-picker__cell--active-start"), startOfRange), _defineProperty$2(_classNames, "".concat(classPrefix, "-date-picker__cell--active-end"), endOfRange), _defineProperty$2(_classNames, "".concat(classPrefix, "-date-picker__cell--additional"), additional), _defineProperty$2(_classNames, "".concat(classPrefix, "-date-picker__cell--first-day-of-month"), firstDayOfMonth), _defineProperty$2(_classNames, "".concat(classPrefix, "-date-picker__cell--last-day-of-month"), lastDayOfMonth), _classNames));

    function handleClick() {
      !disabled && onClick(value);
    }

    function handleMouseEnter() {
      onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter(value);
    }

    return /* @__PURE__ */React__default["default"].createElement("td", {
      className: cellClass
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-date-picker__cell-wrapper"),
      onClick: handleClick,
      onMouseEnter: handleMouseEnter
    }, /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-date-picker__cell-text")
    }, text)));
  };

  DatePickerCell.displayName = "DatePickerCell";

  function ownKeys$5(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$5(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$5(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$5(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var DatePickerTable = function DatePickerTable(props) {
    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var type = props.type,
        data = props.data,
        onCellClick = props.onCellClick,
        onCellMouseEnter = props.onCellMouseEnter,
        firstDayOfWeek = props.firstDayOfWeek;

    var _useLocaleReceiver = useLocaleReceiver("datePicker"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
        local = _useLocaleReceiver2[0],
        t = _useLocaleReceiver2[1];

    var weekdays = t(local.weekdays);
    var weekArr = [];
    var wi = firstDayOfWeek - 1;
    var len = weekdays.length;

    while (weekArr.length < len) {
      weekArr.push(weekdays[wi]);
      wi = (wi + len + 1) % len;
    }

    var panelClass = "".concat(classPrefix, "-date-picker--").concat(type);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: panelClass
    }, /* @__PURE__ */React__default["default"].createElement("table", null, type === "date" && /* @__PURE__ */React__default["default"].createElement("thead", null, /* @__PURE__ */React__default["default"].createElement("tr", null, weekArr.map(function (value, i) {
      return /* @__PURE__ */React__default["default"].createElement("th", {
        key: i
      }, value);
    }))), /* @__PURE__ */React__default["default"].createElement("tbody", null, data.map(function (row, i) {
      return /* @__PURE__ */React__default["default"].createElement("tr", {
        key: i
      }, row.map(function (col, j) {
        return /* @__PURE__ */React__default["default"].createElement(DatePickerCell, _objectSpread$5(_objectSpread$5({}, col), {}, {
          key: j,
          onClick: onCellClick,
          onMouseEnter: onCellMouseEnter
        }));
      }));
    }))));
  };

  DatePickerTable.displayName = "DatePickerTable";
  DatePickerTable.defaultProps = {
    type: "day"
  };

  var baseSlice = _baseSlice,
      isIterateeCall = _isIterateeCall,
      toInteger = toInteger_1;
  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeCeil = Math.ceil,
      nativeMax = Math.max;
  /**
   * Creates an array of elements split into groups the length of `size`.
   * If `array` can't be split evenly, the final chunk will be the remaining
   * elements.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Array
   * @param {Array} array The array to process.
   * @param {number} [size=1] The length of each chunk
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {Array} Returns the new array of chunks.
   * @example
   *
   * _.chunk(['a', 'b', 'c', 'd'], 2);
   * // => [['a', 'b'], ['c', 'd']]
   *
   * _.chunk(['a', 'b', 'c', 'd'], 3);
   * // => [['a', 'b', 'c'], ['d']]
   */

  function chunk(array, size, guard) {
    if (guard ? isIterateeCall(array, size, guard) : size === undefined) {
      size = 1;
    } else {
      size = nativeMax(toInteger(size), 0);
    }

    var length = array == null ? 0 : array.length;

    if (!length || size < 1) {
      return [];
    }

    var index = 0,
        resIndex = 0,
        result = Array(nativeCeil(length / size));

    while (index < length) {
      result[resIndex++] = baseSlice(array, index, index += size);
    }

    return result;
  }

  var chunk_1 = chunk;

  function firstUpperCase(str) {
    if (!str) return str;
    return str[0].toUpperCase().concat(str.substring(1, str.length));
  }

  function getFirstDayOfMonth(_ref3) {
    var year = _ref3.year,
        month = _ref3.month;
    return new Date(year, month, 1);
  }

  function getDaysInMonth(_ref4) {
    var year = _ref4.year,
        month = _ref4.month;
    return new Date(year, month + 1, 0).getDate();
  }

  function getLastDayOfMonth(_ref5) {
    var year = _ref5.year,
        month = _ref5.month;
    return new Date(year, month, getDaysInMonth({
      year: year,
      month: month
    }));
  }

  function isSameYear(date1, date2) {
    return date1.getFullYear() === date2.getFullYear();
  }

  function isSameMonth(date1, date2) {
    return isSameYear(date1, date2) && date1.getMonth() === date2.getMonth();
  }

  function isSameDate(date1, date2) {
    return isSameMonth(date1, date2) && date1.getDate() === date2.getDate();
  }

  function isBetween(value, _ref6) {
    var start = _ref6.start,
        end = _ref6.end;
    var date = new Date(value.getFullYear(), value.getMonth(), value.getDate());
    var startTime = new Date(start.getFullYear(), start.getMonth(), start.getDate());
    var endTime = new Date(end.getFullYear(), end.getMonth(), end.getDate());
    return startTime <= date && endTime >= date;
  }

  function compareAsc(date1, date2) {
    var d1 = date1.getTime();
    var d2 = date2.getTime();
    if (d1 < d2) return -1;
    if (d1 > d2) return 1;
    return 0;
  }

  function isSame(date1, date2) {
    var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "date";
    var func = {
      isSameYear: isSameYear,
      isSameMonth: isSameMonth,
      isSameDate: isSameDate
    };
    return func["isSame".concat(firstUpperCase(type))](date1, date2);
  }
  function outOfRanges(d, min, max) {
    return min && compareAsc(d, min) === -1 || max && compareAsc(d, max) === 1;
  }
  function getToday() {
    var now = new Date();
    return new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0);
  }
  function getDateObj(date) {
    if (!(date instanceof Date)) {
      throw new Error("date must be Date object");
    }

    return {
      year: date.getFullYear(),
      month: date.getMonth(),
      date: date.getDate(),
      hours: date.getHours(),
      minutes: date.getMinutes(),
      seconds: date.getSeconds(),
      meridiem: date.getHours() > 11 ? "PM" : "AM"
    };
  }
  function setDateTime(d, hour, min, sec) {
    var _getDateObj = getDateObj(d),
        year = _getDateObj.year,
        month = _getDateObj.month,
        date = _getDateObj.date;

    return new Date(year, month, date, hour, min, sec, 0);
  }
  function subtractMonth(date, num) {
    var day = date.getDate();
    var newDate = new Date(date);
    var monthNum = num;

    while (monthNum--) {
      newDate.setDate(0);
    }

    newDate.setDate(day);
    return newDate;
  }
  function addMonth(date, num) {
    var monthNum = num;
    if (num < 0) monthNum = 0;
    var newDate = new Date(date);
    newDate.setMonth(date.getMonth() + monthNum);
    return newDate;
  }
  function getWeeks(_ref7, _ref8) {
    var year = _ref7.year,
        month = _ref7.month;
    var firstDayOfWeek = _ref8.firstDayOfWeek,
        _ref8$disableDate = _ref8.disableDate,
        disableDate = _ref8$disableDate === void 0 ? function () {
      return false;
    } : _ref8$disableDate,
        minDate = _ref8.minDate,
        maxDate = _ref8.maxDate;
    var prependDay = getFirstDayOfMonth({
      year: year,
      month: month
    });
    var appendDay = getLastDayOfMonth({
      year: year,
      month: month
    });
    var maxDays = getDaysInMonth({
      year: year,
      month: month
    });
    var daysArr = [];
    var today = getToday();

    for (var i = 1; i <= maxDays; i++) {
      var currentDay = new Date(year, month, i);
      daysArr.push({
        text: i,
        active: false,
        value: currentDay,
        disabled: disableDate(currentDay) || outOfRanges(currentDay, minDate, maxDate),
        now: isSame(today, currentDay),
        firstDayOfMonth: i === 1,
        lastDayOfMonth: i === maxDays,
        type: "current-month"
      });
    }

    if (prependDay.getDay() !== firstDayOfWeek - 1) {
      prependDay.setDate(0);
      var FLAG = true;

      while (FLAG) {
        daysArr.unshift({
          text: prependDay.getDate().toString(),
          active: false,
          value: new Date(prependDay),
          disabled: disableDate(prependDay) || outOfRanges(prependDay, minDate, maxDate),
          additional: true,
          type: "prev-month"
        });
        prependDay.setDate(prependDay.getDate() - 1);
        if (prependDay.getDay() === Math.abs(firstDayOfWeek + 6) % 7) break;
      }
    }

    var LEN = 42;

    while (daysArr.length < LEN) {
      appendDay.setDate(appendDay.getDate() + 1);
      daysArr.push({
        text: appendDay.getDate(),
        active: false,
        value: new Date(appendDay),
        disabled: disableDate(appendDay) || outOfRanges(appendDay, minDate, maxDate),
        additional: true,
        type: "next-month"
      });
    }

    return chunk_1(daysArr, 7);
  }
  function getYears(year, _ref9) {
    var _ref9$disableDate = _ref9.disableDate,
        disableDate = _ref9$disableDate === void 0 ? function () {
      return false;
    } : _ref9$disableDate,
        minDate = _ref9.minDate,
        maxDate = _ref9.maxDate;
    var startYear = parseInt((year / 10).toString(), 10) * 10;
    var endYear = startYear + 9;
    var yearArr = [];
    var today = getToday();

    for (var i = startYear; i <= endYear; i++) {
      var date = new Date(i, 1);
      var disabledMonth = 0;
      var outOfRangeMonth = 0;

      for (var j = 0; j < 12; j++) {
        var d = new Date(i, j, j === 11 ? 31 : 1);
        if (typeof disableDate === "function" && disableDate(d)) disabledMonth += 1;
        if (outOfRanges(d, minDate, maxDate)) outOfRangeMonth += 1;
      }

      yearArr.push({
        value: date,
        now: isSame(date, today, "year"),
        disabled: disabledMonth === 12 || outOfRangeMonth === 12,
        active: false,
        text: "".concat(date.getFullYear())
      });
    }

    return chunk_1(yearArr, 4);
  }
  function getMonths(year, _ref10) {
    var _ref10$disableDate = _ref10.disableDate,
        disableDate = _ref10$disableDate === void 0 ? function () {
      return false;
    } : _ref10$disableDate,
        minDate = _ref10.minDate,
        maxDate = _ref10.maxDate,
        _ref10$monthText = _ref10.monthText,
        monthText = _ref10$monthText === void 0 ? "" : _ref10$monthText;
    var monthArr = [];
    var today = getToday();

    for (var i = 0; i <= 11; i++) {
      var date = new Date(year, i);
      var disabledDay = 0;
      var outOfRangeDay = 0;
      var daysInMonth = getDaysInMonth({
        year: year,
        month: i
      });

      for (var j = 1; j <= daysInMonth; j++) {
        var d = new Date(year, i, j);
        if (disableDate(d)) disabledDay += 1;
        if (outOfRanges(d, minDate, maxDate)) outOfRangeDay += 1;
      }

      monthArr.push({
        value: date,
        now: isSame(date, today, "month"),
        disabled: disabledDay === daysInMonth || outOfRangeDay === daysInMonth,
        active: false,
        text: "".concat(date.getMonth() + 1, " ").concat(monthText)
      });
    }

    return chunk_1(monthArr, 4);
  }
  function flagActive(data, _ref11) {
    var args = _extends({}, _ref11);

    var start = args.start,
        end = args.end,
        _args$type = args.type,
        type = _args$type === void 0 ? "date" : _args$type;

    if (!end) {
      return data.map(function (row) {
        return row.map(function (item) {
          Object.assign(item, {
            active: isSame(item.value, start, type)
          });
          return item;
        });
      });
    }

    return data.map(function (row) {
      return row.map(function (item) {
        var date = item.value;
        var isStart = isSame(start, date, type);
        var isEnd = isSame(end, date, type);
        Object.assign(item, {
          active: isStart || isEnd,
          highlight: isBetween(date, {
            start: start,
            end: end
          }),
          startOfRange: isStart,
          endOfRange: isEnd
        });
        return item;
      });
    });
  }

  var TODAY$1 = getToday();

  var DatePanel = function DatePanel(props) {
    var _useLocaleReceiver = useLocaleReceiver("datePicker"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
        local = _useLocaleReceiver2[0],
        t = _useLocaleReceiver2[1];

    var monthAriaLabel = t(local.monthAriaLabel);

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var value = props.value,
        mode = props.mode,
        minDate = props.minDate,
        maxDate = props.maxDate,
        firstDayOfWeek = props.firstDayOfWeek,
        disableDate = props.disableDate,
        onChange = props.onChange;

    var _useState = React.useState(value.getFullYear()),
        _useState2 = _slicedToArray(_useState, 2),
        year = _useState2[0],
        setYear = _useState2[1];

    var _useState3 = React.useState(value.getMonth()),
        _useState4 = _slicedToArray(_useState3, 2),
        month = _useState4[0],
        setMonth = _useState4[1];

    var _useState5 = React.useState(mode),
        _useState6 = _slicedToArray(_useState5, 2),
        type = _useState6[0],
        setType = _useState6[1];

    React.useEffect(function () {
      setType(mode);
    }, [mode]);
    React.useEffect(function () {
      setYear(value.getFullYear());
      setMonth(value.getMonth());
    }, [value]);

    function clickHeader(flag) {
      var monthCount = 0;
      var next = null;

      switch (type) {
        case "date":
          monthCount = 1;
          break;

        case "month":
          monthCount = 12;
          break;

        case "year":
          monthCount = 120;
      }

      var current = new Date(year, month);

      switch (flag) {
        case 1:
          next = addMonth(current, monthCount);
          break;

        case -1:
          next = subtractMonth(current, monthCount);
          break;

        case 0:
          next = new Date();
          break;
      }

      setYear(next.getFullYear());
      setMonth(next.getMonth());
    }

    var tableData = React.useMemo(function () {
      var data;
      var options = {
        disableDate: disableDate,
        minDate: minDate,
        maxDate: maxDate,
        firstDayOfWeek: firstDayOfWeek,
        monthText: monthAriaLabel
      };

      switch (type) {
        case "date":
          data = getWeeks({
            year: year,
            month: month
          }, options);
          break;

        case "month":
          data = getMonths(year, options);
          break;

        case "year":
          data = getYears(year, options);
          break;
      }

      var start = type === "date" || type === mode ? value : new Date(year, month);
      return flagActive(data, {
        start: start,
        type: type
      });
    }, [year, month, type, value, mode, disableDate, minDate, maxDate, firstDayOfWeek, monthAriaLabel]);

    function getClickHandler(date) {
      if (type === "date") {
        onChange === null || onChange === void 0 ? void 0 : onChange(date);
      } else if (type === "month") {
        if (mode === "month") {
          onChange === null || onChange === void 0 ? void 0 : onChange(date);
        } else {
          setType("date");
          setYear(date.getFullYear());
          setMonth(date.getMonth());
        }
      } else if (type === "year") {
        if (mode === "year") {
          onChange === null || onChange === void 0 ? void 0 : onChange(date);
        } else {
          setType("month");
          setYear(date.getFullYear());
        }
      }
    }

    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-date-picker__panel")
    }, /* @__PURE__ */React__default["default"].createElement(DatePickerHeader, {
      year: year,
      month: month,
      type: type,
      onBtnClick: clickHeader,
      onTypeChange: setType
    }), /* @__PURE__ */React__default["default"].createElement(DatePickerTable, {
      type: type,
      firstDayOfWeek: firstDayOfWeek,
      data: tableData,
      onCellClick: getClickHandler,
      onCellMouseEnter: noop
    }));
  };

  DatePanel.displayName = "DatePanel";
  DatePanel.defaultProps = {
    value: TODAY$1,
    mode: "date"
  };

  var TODAY = getToday();
  var LEFT = "left";
  var RIGHT = "right";

  var DateRangePanel = function DateRangePanel(props) {
    var _useLocaleReceiver = useLocaleReceiver("datePicker"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
        local = _useLocaleReceiver2[0],
        t = _useLocaleReceiver2[1];

    var monthAriaLabel = t(local.monthAriaLabel);

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var value = props.value,
        mode = props.mode,
        minDate = props.minDate,
        maxDate = props.maxDate,
        firstDayOfWeek = props.firstDayOfWeek,
        disableDate = props.disableDate,
        onChange = props.onChange;
    var data = getLeftAndRightDataFromValue(value);

    var _useState = React.useState(data.leftYear),
        _useState2 = _slicedToArray(_useState, 2),
        leftYear = _useState2[0],
        setLeftYear = _useState2[1];

    var _useState3 = React.useState(data.leftMonth),
        _useState4 = _slicedToArray(_useState3, 2),
        leftMonth = _useState4[0],
        setLeftMonth = _useState4[1];

    var _useState5 = React.useState(data.rightYear),
        _useState6 = _slicedToArray(_useState5, 2),
        rightYear = _useState6[0],
        setRightYear = _useState6[1];

    var _useState7 = React.useState(data.rightMonth),
        _useState8 = _slicedToArray(_useState7, 2),
        rightMonth = _useState8[0],
        setRightMonth = _useState8[1];

    var _useState9 = React.useState(mode),
        _useState10 = _slicedToArray(_useState9, 2),
        leftType = _useState10[0],
        setLeftType = _useState10[1];

    var _useState11 = React.useState(mode),
        _useState12 = _slicedToArray(_useState11, 2),
        rightType = _useState12[0],
        setRightType = _useState12[1];

    var _useState13 = React.useState(data.startValue),
        _useState14 = _slicedToArray(_useState13, 2),
        startValue = _useState14[0],
        setStartValue = _useState14[1];

    var _useState15 = React.useState(data.endValue),
        _useState16 = _slicedToArray(_useState15, 2),
        endValue = _useState16[0],
        setEndValue = _useState16[1];

    var _useState17 = React.useState(true),
        _useState18 = _slicedToArray(_useState17, 2),
        isFirstClick = _useState18[0],
        setIsFirstClick = _useState18[1];

    var _useState19 = React.useState(TODAY),
        _useState20 = _slicedToArray(_useState19, 2),
        firstClickValue = _useState20[0],
        setFirstClickValue = _useState20[1];

    React.useEffect(function () {
      var panelData = getLeftAndRightDataFromValue(value);
      var leftYear2 = panelData.leftYear,
          leftMonth2 = panelData.leftMonth,
          rightMonth2 = panelData.rightMonth,
          rightYear2 = panelData.rightYear,
          startValue2 = panelData.startValue,
          endValue2 = panelData.endValue;
      setStartValue(startValue2);
      setEndValue(endValue2);
      setLeftYear(leftYear2);
      setLeftMonth(leftMonth2);
      setRightYear(rightYear2);
      setRightMonth(rightMonth2);
    }, [value]);
    React.useEffect(function () {
      setLeftType(mode);
      setRightType(mode);
    }, [mode]);

    function getLeftAndRightDataFromValue(value2) {
      var _value = _slicedToArray(value2, 2),
          _value$ = _value[0],
          startValue2 = _value$ === void 0 ? TODAY : _value$,
          _value$2 = _value[1],
          endValue2 = _value$2 === void 0 ? TODAY : _value$2;

      var leftYear2 = startValue2.getFullYear();
      var leftMonth2 = startValue2.getMonth();
      var rightMonth2 = endValue2.getMonth();
      var rightYear2 = endValue2.getFullYear();

      if (mode === "date" && isSame(startValue2, endValue2, "month")) {
        var next = addMonth(endValue2, 1);
        rightMonth2 = addMonth(endValue2, 1).getMonth();
        rightYear2 = next.getFullYear();
      }

      if (mode === "month" && isSame(startValue2, endValue2, "year")) {
        rightYear2 = leftYear2 + 1;
      }

      if (mode === "year" && isSame(startValue2, endValue2, "year")) {
        rightYear2 = leftYear2 + 10;
      }

      return {
        leftYear: leftYear2,
        leftMonth: leftMonth2,
        rightMonth: rightMonth2,
        rightYear: rightYear2,
        startValue: startValue2,
        endValue: endValue2
      };
    }

    function clickHeader(flag, direction) {
      var year = direction === LEFT ? leftYear : rightYear;
      var month = direction === LEFT ? leftMonth : rightMonth;
      var type = direction === LEFT ? leftType : rightType;
      var monthCount;
      var next;

      switch (type) {
        case "date":
          monthCount = 1;
          break;

        case "month":
          monthCount = 12;
          break;

        case "year":
          monthCount = 120;
      }

      var current = new Date(year, month);

      if (flag === 1) {
        next = addMonth(current, monthCount);
      } else if (flag === -1) {
        next = subtractMonth(current, monthCount);
      } else {
        next = new Date();
      }

      direction === LEFT ? setLeftYear(next.getFullYear()) : setRightYear(next.getFullYear());
      direction === LEFT ? setLeftMonth(next.getMonth()) : setRightMonth(next.getMonth());
    }

    function getClickHandler(direction) {
      var type = direction === LEFT ? leftType : rightType;
      if (type === "date") return function (date) {
        return clickDate(date);
      };
      if (type === "month") return function (date) {
        return clickMonth(date, direction);
      };
      if (type === "year") return function (date) {
        return clickYear(date, direction);
      };
    }

    function clickDate(date) {
      if (isFirstClick) {
        setStartValue(date);
        setEndValue(date);
        setIsFirstClick(false);
        setFirstClickValue(date);
      } else {
        if (dayjs(firstClickValue).isBefore(dayjs(date), "day")) {
          setEndValue(date);
        } else {
          setEndValue(firstClickValue);
          setStartValue(date);
        }

        onChange === null || onChange === void 0 ? void 0 : onChange([setDateTime(startValue, 0, 0, 0), setDateTime(endValue, 23, 59, 59)]);
        setIsFirstClick(true);
      }
    }

    function clickYear(date, direction) {
      if (mode === "year") {
        if (isFirstClick) {
          setStartValue(date);
          setIsFirstClick(false);
          setFirstClickValue(date);
        } else {
          onChange === null || onChange === void 0 ? void 0 : onChange([startValue, endValue]);
          setIsFirstClick(true);
        }
      } else {
        direction === LEFT ? setLeftType("month") : setRightType("month");
        direction === LEFT ? setLeftYear(date.getFullYear()) : setRightYear(date.getFullYear());
      }
    }

    function clickMonth(date, direction) {
      if (mode === "month") {
        if (isFirstClick) {
          setStartValue(date);
          setIsFirstClick(false);
          setFirstClickValue(date);
        } else {
          if (endValue < startValue) {
            setEndValue(startValue);
          }

          onChange === null || onChange === void 0 ? void 0 : onChange([startValue, endValue]);
          setIsFirstClick(true);
        }
      } else {
        direction === LEFT ? setLeftType("date") : setRightType("date");
        direction === LEFT ? setLeftYear(date.getFullYear()) : setRightYear(date.getFullYear());
        direction === LEFT ? setLeftMonth(date.getMonth()) : setRightMonth(date.getMonth());
      }
    }

    function onMouseEnter(date) {
      if (isFirstClick) return;

      if (firstClickValue.getTime() > date.getTime()) {
        setStartValue(date);
        setEndValue(firstClickValue);
      } else {
        setStartValue(firstClickValue);
        setEndValue(date);
      }
    }

    var getData = React.useCallback(function (_ref) {
      var year = _ref.year,
          month = _ref.month,
          type = _ref.type,
          start = _ref.start,
          end = _ref.end;
      var data2;
      var options = {
        disableDate: disableDate,
        minDate: minDate,
        maxDate: maxDate,
        firstDayOfWeek: firstDayOfWeek,
        monthText: monthAriaLabel
      };

      switch (type) {
        case "date":
          data2 = getWeeks({
            year: year,
            month: month
          }, options);
          break;

        case "month":
          data2 = getMonths(year, options);
          break;

        case "year":
          data2 = getYears(year, options);
          break;
      }

      return flagActive(data2, {
        start: start,
        end: end,
        type: type
      });
    }, [disableDate, minDate, maxDate, firstDayOfWeek, monthAriaLabel]);
    var leftData = React.useMemo(function () {
      return getData({
        year: leftYear,
        month: leftMonth,
        type: leftType,
        start: startValue,
        end: endValue
      });
    }, [leftYear, leftMonth, leftType, startValue, endValue, getData]);
    var rightData = React.useMemo(function () {
      return getData({
        year: rightYear,
        month: rightMonth,
        type: rightType,
        start: startValue,
        end: endValue
      });
    }, [rightYear, rightMonth, rightType, startValue, endValue, getData]);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-date-picker__panels")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-date-picker__panel")
    }, /* @__PURE__ */React__default["default"].createElement(DatePickerHeader, {
      year: leftYear,
      month: leftMonth,
      type: leftType,
      onBtnClick: function onBtnClick(flag) {
        return clickHeader(flag, LEFT);
      },
      onTypeChange: setLeftType
    }), /* @__PURE__ */React__default["default"].createElement(DatePickerTable, {
      type: leftType,
      firstDayOfWeek: firstDayOfWeek,
      data: leftData,
      onCellClick: getClickHandler(LEFT),
      onCellMouseEnter: onMouseEnter
    })), /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-date-picker__panel")
    }, /* @__PURE__ */React__default["default"].createElement(DatePickerHeader, {
      year: rightYear,
      month: rightMonth,
      type: rightType,
      onBtnClick: function onBtnClick(flag) {
        return clickHeader(flag, RIGHT);
      },
      onTypeChange: setRightType
    }), /* @__PURE__ */React__default["default"].createElement(DatePickerTable, {
      type: rightType,
      firstDayOfWeek: firstDayOfWeek,
      data: rightData,
      onCellClick: getClickHandler(RIGHT),
      onCellMouseEnter: onMouseEnter
    })));
  };

  DateRangePanel.displayName = "DateRangePanel";
  DateRangePanel.defaultProps = {
    value: [TODAY, TODAY],
    mode: "date"
  };

  function ownKeys$4(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$4(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$4(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$4(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  dayjs.extend(isBetween$1);
  var TIME_FORMAT = "HH:mm:ss";

  var DatePicker$1 = function DatePicker(props) {
    var className = props.className,
        style = props.style,
        allowInput = props.allowInput,
        clearable = props.clearable,
        disabled = props.disabled,
        disableDate = props.disableDate,
        enableTimePicker = props.enableTimePicker,
        format = props.format,
        inputProps = props.inputProps,
        mode = props.mode,
        popupProps = props.popupProps,
        prefixIcon = props.prefixIcon,
        presets = props.presets,
        range = props.range,
        size = props.size,
        suffixIcon = props.suffixIcon,
        value = props.value,
        defaultValue = props.defaultValue,
        firstDayOfWeek = props.firstDayOfWeek,
        onChange = props.onChange;

    var _useLocaleReceiver = useLocaleReceiver("datePicker"),
        _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
        local = _useLocaleReceiver2[0],
        t = _useLocaleReceiver2[1];

    var selectTimeText = t(local.selectTime);
    var selectDateText = t(local.selectDate);
    var confirmText = t(local.confirm);
    var rangeSeparatorText = t(local.rangeSeparator);
    var placeholder = t(local.placeholder[mode]);

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var CLASSNAMES = useCommonClassName();
    var datePickerRef = React.useRef(null);
    var dropdownPopupRef = React.useRef(null);
    var inputRef = React.useRef(null);

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        popupShow = _useState2[0],
        setPopupShow = _useState2[1];

    var _useState3 = React.useState(false),
        _useState4 = _slicedToArray(_useState3, 2),
        timePanelShow = _useState4[0],
        setTimePanelShow = _useState4[1];

    var _useState5 = React.useState(""),
        _useState6 = _slicedToArray(_useState5, 2),
        timeValue = _useState6[0],
        setTimeValue = _useState6[1];

    var _useState7 = React.useState([]),
        _useState8 = _slicedToArray(_useState7, 2),
        timeRangeValue = _useState8[0],
        setTimeRangeValue = _useState8[1];

    var _useState9 = React.useState(new Date()),
        _useState10 = _slicedToArray(_useState9, 2),
        start = _useState10[0],
        setStart = _useState10[1];

    var _useState11 = React.useState(new Date()),
        _useState12 = _slicedToArray(_useState11, 2),
        end = _useState12[0],
        setEnd = _useState12[1];

    var _useState13 = React.useState(""),
        _useState14 = _slicedToArray(_useState13, 2),
        formattedValue = _useState14[0],
        setFormattedValue = _useState14[1];

    var _useState15 = React.useState([]),
        _useState16 = _slicedToArray(_useState15, 2),
        selectedDates = _useState16[0],
        setSelectedDates = _useState16[1];

    var isControlled = typeof value !== "undefined";

    function isValidDate(date) {
      if (isArray_1(date) && isDate_1(new Date(date[0])) && isDate_1(new Date(date[1]))) return true;
      if (isString_1(date) && isDate_1(new Date(date))) return true;
      return false;
    }

    function initDatePicker() {
      var val = value || defaultValue;

      if (val && isValidDate(val)) {
        var startVal = range ? new Date(val[0]) : new Date(val);
        var endVal = range ? new Date(val[1]) : new Date(val);
        setStart(startVal);
        setEnd(endVal);
        setTimeValue(dayjs(startVal).format(TIME_FORMAT));
        setTimeRangeValue([dayjs(startVal).format(TIME_FORMAT), dayjs(endVal).format(TIME_FORMAT)]);
        setSelectedDates(range ? [val[0], val[1]] : [val]);
      }
    }

    useClickOutside([datePickerRef, dropdownPopupRef], function () {
      close();
    });
    React.useEffect(function () {
      initDatePicker();
    }, []);
    React.useEffect(function () {
      updateFormatValue();
    }, [selectedDates, value]);

    function updateFormatValue() {
      var dates = selectedDates;

      if (isControlled) {
        if (Array.isArray(value)) {
          dates = value.map(function (d) {
            return d ? new Date(d) : new Date();
          });
        } else {
          dates = value ? [new Date(value)] : [];
        }
      }

      var selectedFmtDates = dates.map(function (d) {
        return formatDate(d);
      });
      var pickerMode = mode;
      if (range) pickerMode = "range";
      var nextValue = "";

      switch (pickerMode) {
        case "date":
        case "month":
        case "year":
          dates[0] && setStart(new Date(dates[0]));
          nextValue = selectedFmtDates.join("");
          break;

        case "range":
          if (selectedFmtDates.length > 1) {
            setStart(new Date(dates[0]));
            setEnd(new Date(dates[1]));
            nextValue = [selectedFmtDates[0], selectedFmtDates[1]].join(rangeSeparatorText);
          }

          break;
      }

      setFormattedValue(nextValue);
    }

    function showPopup() {
      if (disabled) return;
      setPopupShow(true);
    }

    function formatDate(date) {
      var dateFormat = format || "";
      var arrTime = ["H", "h", "m", "s"];
      var hasTime = arrTime.some(function (f) {
        return String(dateFormat).includes(f);
      });

      if (enableTimePicker && !hasTime) {
        dateFormat = [dateFormat, TIME_FORMAT].join(" ");
      }

      var d1 = new Date(date);
      return dayjs(d1).format(dateFormat);
    }

    function close() {
      if (disabled) return;
      setPopupShow(false);
      setTimePanelShow(false);
    }

    function handleClear(_ref) {
      var e = _ref.e;
      e.stopPropagation();
      close();

      if (!disabled) {
        setStart(new Date());
        setEnd(new Date());
        setSelectedDates([]);
        setFormattedValue("");
        setTimeValue("00:00:00");
        setTimeRangeValue(["00:00:00", "00:00:00"]);
        submitInput([], true);
      }
    }

    function submitInput(selectedDates2) {
      var triggerChange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var pickerMode = range ? "range" : mode;

      switch (pickerMode) {
        case "date":
        case "month":
        case "year":
          triggerChange && (onChange === null || onChange === void 0 ? void 0 : onChange(selectedDates2[0]));
          break;

        case "range":
          triggerChange && (onChange === null || onChange === void 0 ? void 0 : onChange(selectedDates2));
          break;
      }
    }

    function clickRange(value2) {
      var nextDates = [];

      if (Array.isArray(value2)) {
        nextDates.push.apply(nextDates, [dayjs(value2[0]).toDate(), dayjs(value2[1]).toDate()]);
        setStart(nextDates[0]);
        setEnd(nextDates[1]);
      } else {
        nextDates.push(dayjs(value2).toDate());
        setStart(nextDates[0]);
        setEnd(nextDates[0]);
      }

      setSelectedDates(nextDates);
      clickedApply(!enableTimePicker, nextDates);
    }

    function clickedApply() {
      var closePicker = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      var nextDates = arguments.length > 1 ? arguments[1] : undefined;
      var dates = nextDates || selectedDates;
      submitInput(dates.map(function (d) {
        return formatDate(d);
      }), true);
      closePicker && close();
    }

    function toggleTime() {
      setTimeValue(dayjs(start).format(TIME_FORMAT));
      setTimeRangeValue([dayjs(start).format(TIME_FORMAT), dayjs(end).format(TIME_FORMAT)]);
      setTimePanelShow(!timePanelShow);
    }

    function handleTimePick(value2) {
      if (Array.isArray(value2)) {
        var _value = _slicedToArray(value2, 2),
            startTime = _value[0],
            endTime = _value[1];

        var _startTime$split = startTime.split(":"),
            _startTime$split2 = _slicedToArray(_startTime$split, 3),
            startHour = _startTime$split2[0],
            startMinute = _startTime$split2[1],
            startSecond = _startTime$split2[2];

        var startDate = new Date(start);
        startDate.setHours(startHour);
        startDate.setMinutes(startMinute);
        startDate.setSeconds(startSecond);

        var _endTime$split = endTime.split(":"),
            _endTime$split2 = _slicedToArray(_endTime$split, 3),
            endHour = _endTime$split2[0],
            endMinute = _endTime$split2[1],
            endSecond = _endTime$split2[2];

        var endDate = new Date(end);
        endDate.setHours(endHour);
        endDate.setMinutes(endMinute);
        endDate.setSeconds(endSecond);
        setTimeRangeValue(value2);
        clickRange([startDate, endDate]);
      } else {
        var _value2$split = value2.split(":"),
            _value2$split2 = _slicedToArray(_value2$split, 3),
            hour = _value2$split2[0],
            minute = _value2$split2[1],
            second = _value2$split2[2];

        var _startDate = new Date(start);

        _startDate.setHours(hour);

        _startDate.setMinutes(minute);

        _startDate.setSeconds(second);

        setTimeValue(value2);
        dateClick(_startDate);
      }
    }

    function dateClick(value2) {
      var pickerMode = mode;
      if (range) pickerMode = "range";

      switch (pickerMode) {
        case "year":
        case "month":
        case "date":
          {
            if (value2 instanceof Date) {
              if (!isControlled) {
                setStart(value2);
                setEnd(value2);
              }

              setSelectedDates([value2]);
              clickedApply(!enableTimePicker, [value2]);
            }

            break;
          }

        case "range":
          {
            if (Array.isArray(value2)) {
              if (!isControlled) {
                setStart(value2[0]);
                setEnd(value2[1]);
              }

              setSelectedDates(value2);
              clickedApply(!enableTimePicker, value2);
            }

            break;
          }
      }
    }

    function isEnabled(value2) {
      if (!disableDate) return true;
      var isEnabled2 = true;

      if (typeof disableDate === "function") {
        return !disableDate(value2);
      }

      if (Array.isArray(disableDate)) {
        var isIncludes = false;
        var formatedDisabledDate = disableDate.map(function (item) {
          return dayjs(item, format);
        });
        formatedDisabledDate.forEach(function (item) {
          if (item.isSame(dayjs(value2))) {
            isIncludes = true;
          }
        });
        return !isIncludes;
      }

      var from = disableDate.from,
          to = disableDate.to,
          before = disableDate.before,
          after = disableDate.after;

      if (from && to) {
        var compareMin = dayjs(new Date(from));
        var compareMax = dayjs(new Date(to));
        return !dayjs(value2).isBetween(compareMin, compareMax, mode, "[]");
      }

      var min = before ? new Date(before) : null;
      var max = after ? new Date(after) : null;

      if (max && min) {
        var _compareMin = dayjs(new Date(min));

        var _compareMax = dayjs(new Date(max));

        isEnabled2 = dayjs(value2).isBetween(_compareMin, _compareMax, mode, "[]");
      } else if (min) {
        var _compareMin2 = dayjs(new Date(min));

        isEnabled2 = !dayjs(value2).isBefore(_compareMin2, mode);
      } else if (max) {
        var _compareMax2 = dayjs(new Date(max));

        isEnabled2 = !dayjs(value2).isAfter(_compareMax2, mode);
      }

      return isEnabled2;
    }

    function renderContent() {
      var _classNames;

      var pickerStyles = classNames$1("".concat(classPrefix, "-date-picker__container"), (_classNames = {}, _defineProperty$2(_classNames, "".concat(classPrefix, "-date-picker--open"), popupShow), _defineProperty$2(_classNames, "".concat(classPrefix, "-date-picker--range"), range), _classNames));
      var panelProps = {
        mode: mode,
        firstDayOfWeek: firstDayOfWeek === void 0 ? 1 : firstDayOfWeek,
        onChange: dateClick,
        disableDate: function disableDate(d) {
          return !isEnabled(d);
        },
        minDate: isObject_1(disableDate) && "before" in disableDate ? new Date(disableDate.before) : null,
        maxDate: isObject_1(disableDate) && "after" in disableDate ? new Date(disableDate.after) : null
      };
      var panelComponent = range ? /* @__PURE__ */React__default["default"].createElement(DateRangePanel, _objectSpread$4(_objectSpread$4({}, panelProps), {}, {
        value: [start, end]
      })) : /* @__PURE__ */React__default["default"].createElement(DatePanel, _objectSpread$4(_objectSpread$4({}, panelProps), {}, {
        value: start
      }));
      var timepickerComponent = range ? /* @__PURE__ */React__default["default"].createElement(TimePickerPanel$1, {
        value: timeRangeValue,
        onChange: handleTimePick
      }) : /* @__PURE__ */React__default["default"].createElement(TimePickerPanel, {
        value: timeValue,
        onChange: handleTimePick
      });
      return /* @__PURE__ */React__default["default"].createElement("div", {
        ref: dropdownPopupRef,
        className: pickerStyles
      }, enableTimePicker && timePanelShow && /* @__PURE__ */React__default["default"].createElement("div", null, timepickerComponent), !timePanelShow && panelComponent, (!!presets || enableTimePicker) && /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-date-picker__footer")
      }, /* @__PURE__ */React__default["default"].createElement(CalendarPresets, {
        presets: presets,
        onClickRange: clickRange
      }), enableTimePicker && /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-date-picker--apply")
      }, enableTimePicker && /* @__PURE__ */React__default["default"].createElement(Button, {
        theme: "primary",
        variant: "text",
        onClick: toggleTime
      }, timePanelShow ? selectDateText : selectTimeText), /* @__PURE__ */React__default["default"].createElement(Button, {
        theme: "primary",
        onClick: function onClick() {
          return clickedApply(true);
        }
      }, confirmText))));
    }

    var triggerClassName = classNames$1("".concat(classPrefix, "-form-controls"), _defineProperty$2({}, CLASSNAMES.STATUS.active, popupShow));
    var defaultSuffixIcon = enableTimePicker ? /* @__PURE__ */React__default["default"].createElement(TimeIcon, null) : /* @__PURE__ */React__default["default"].createElement(CalendarIcon, null);
    var datePickerClassName = classNames$1("".concat(classPrefix, "-date-picker"), className, CLASSNAMES.SIZE[size], _defineProperty$2({}, "".concat(classPrefix, "-date-picker--month-picker"), mode === "year" || mode === "month"));
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: datePickerClassName,
      ref: datePickerRef,
      style: style
    }, /* @__PURE__ */React__default["default"].createElement(Popup, _objectSpread$4({
      trigger: "context-menu",
      placement: "bottom-left",
      visible: popupShow,
      content: renderContent(),
      overlayClassName: "".concat(classPrefix, "-date-picker"),
      className: "".concat(classPrefix, "-date-picker__popup-reference"),
      expandAnimation: true,
      destroyOnClose: true
    }, popupProps), /* @__PURE__ */React__default["default"].createElement("div", {
      className: triggerClassName,
      onClick: showPopup
    }, /* @__PURE__ */React__default["default"].createElement(Input, _objectSpread$4({
      ref: inputRef,
      size: size,
      value: formattedValue,
      disabled: disabled,
      clearable: clearable,
      placeholder: placeholder,
      readonly: !allowInput,
      onClear: handleClear,
      prefixIcon: prefixIcon,
      suffixIcon: suffixIcon || defaultSuffixIcon
    }, inputProps)))));
  };

  DatePicker$1.displayName = "DatePicker";
  DatePicker$1.defaultProps = {
    format: "YYYY-MM-DD",
    mode: "month",
    placeholder: "\u8BF7\u9009\u62E9",
    size: "medium"
  };

  var DatePicker = DatePicker$1;

  var SwiperItem = function SwiperItem(props) {
    var children = props.children,
        className = props.className;
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: className
    }, children);
  };

  SwiperItem.displayName = "SwiperItem";

  function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var Swiper$1 = function Swiper(props) {
    var _props$autoplay = props.autoplay,
        autoplay = _props$autoplay === void 0 ? true : _props$autoplay,
        current = props.current,
        _props$defaultCurrent = props.defaultCurrent,
        defaultCurrent = _props$defaultCurrent === void 0 ? 0 : _props$defaultCurrent,
        _props$direction = props.direction,
        direction = _props$direction === void 0 ? "horizontal" : _props$direction,
        _props$duration = props.duration,
        duration = _props$duration === void 0 ? 300 : _props$duration,
        _props$interval = props.interval,
        interval = _props$interval === void 0 ? 5e3 : _props$interval,
        _props$onChange = props.onChange,
        onChange = _props$onChange === void 0 ? noop : _props$onChange,
        className = props.className,
        children = props.children;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useState = React.useState(defaultCurrent),
        _useState2 = _slicedToArray(_useState, 2),
        currentIndex = _useState2[0],
        setCurrentIndex = _useState2[1];

    var _useState3 = React.useState(true),
        _useState4 = _slicedToArray(_useState3, 2),
        animation = _useState4[0],
        setAnimation = _useState4[1];

    var swiperTimer = React.useRef(null);
    var isHovering = React.useRef(false);
    var wrapperRef = React.useRef(null);
    var childrenList = React.useMemo(function () {
      return React__default["default"].Children.toArray(children).filter(function (child) {
        return child.type.displayName === SwiperItem.displayName;
      });
    }, [children]);
    var childrenLength = childrenList.length;
    var swiperItemList = childrenList.map(function (child, index) {
      return /*#__PURE__*/React__default["default"].cloneElement(child, _objectSpread$3({
        value: index
      }, child.props));
    });

    if (childrenLength > 0) {
      var firstEle = swiperItemList[0];
      swiperItemList.push( /*#__PURE__*/React__default["default"].cloneElement(firstEle, _objectSpread$3(_objectSpread$3({}, firstEle.props), {}, {
        key: "".concat(firstEle.key, "-cloned")
      })));
    }

    var swiperItemLength = swiperItemList.length;
    var swiperTo = React.useCallback(function (index, context) {
      onChange(index % childrenLength, context);
      setAnimation(true);
      setCurrentIndex(index);
    }, [childrenLength, onChange]);
    var setTimer = React.useCallback(function () {
      if (autoplay && interval > 0) {
        swiperTimer.current = setTimeout(function () {
          swiperTo(currentIndex + 1, {
            source: "autoplay"
          });
        }, currentIndex === 0 ? interval - (duration + 50) : interval);
      }
    }, [autoplay, currentIndex, duration, interval, swiperTo]);
    var clearTimer = React.useCallback(function () {
      if (swiperTimer.current) {
        clearTimeout(swiperTimer.current);
        swiperTimer.current = null;
      }
    }, []);
    React.useEffect(function () {
      if (current !== void 0) {
        swiperTo(current % childrenLength, {
          source: ""
        });
      }
    }, [current, childrenLength, swiperTo]);
    React.useEffect(function () {
      if (!isHovering.current) {
        clearTimer();
        setTimer();
      }
    }, [clearTimer, setTimer]);
    React.useEffect(function () {
      setTimeout(function () {
        setAnimation(false);

        if (currentIndex + 1 >= swiperItemLength) {
          setCurrentIndex(0);
        }
      }, duration + 50);
    }, [currentIndex, swiperItemLength, duration, direction]);

    var onMouseEnter = function onMouseEnter() {
      isHovering.current = true;
      clearTimer();
    };

    var onMouseLeave = function onMouseLeave() {
      isHovering.current = false;
      setTimer();
    };

    var wrapperStyle = {};

    if (direction === "vertical") {
      wrapperStyle = {
        height: "".concat(swiperItemLength * 100, "%"),
        top: "-".concat(currentIndex * 100, "%"),
        transition: animation ? "top ".concat(duration / 1e3, "s") : ""
      };
    } else {
      wrapperStyle = {
        width: "".concat(swiperItemLength * 100, "%"),
        left: "-".concat(currentIndex * 100, "%"),
        transition: animation ? "left ".concat(duration / 1e3, "s") : ""
      };
    }

    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-swiper"), className),
      onMouseEnter: onMouseEnter,
      onMouseLeave: onMouseLeave
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-swiper__content")
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      ref: wrapperRef,
      className: "".concat(classPrefix, "-swiper__swiper-wrap--").concat(direction),
      style: wrapperStyle
    }, swiperItemList)), /* @__PURE__ */React__default["default"].createElement("ul", {
      className: "".concat(classPrefix, "-swiper__trigger-wrap")
    }, childrenList.map(function (_, i) {
      return /* @__PURE__ */React__default["default"].createElement("li", {
        key: i,
        className: i === currentIndex % childrenLength ? "".concat(classPrefix, "-swiper__trigger--active") : "",
        onClick: function onClick() {
          return swiperTo(i, {
            source: "touch"
          });
        }
      });
    })));
  };

  Swiper$1.SwiperItem = SwiperItem;
  Swiper$1.displayName = "Swiper";

  var Swiper = Swiper$1;

  var Comment$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var actions = props.actions,
        author = props.author,
        avatar = props.avatar,
        content = props.content,
        datetime = props.datetime,
        reply = props.reply,
        quote = props.quote,
        className = props.className,
        _props$style = props.style,
        style = _props$style === void 0 ? {} : _props$style;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var avatarElement = avatar ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-comment__avatar")
    }, typeof avatar === "string" ? /* @__PURE__ */React__default["default"].createElement("img", {
      src: avatar,
      alt: "",
      className: "".concat(classPrefix, "-comment__avatar-image")
    }) : avatar) : null;
    var authorDatetimeContent = (author || datetime) && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-comment__author")
    }, author && /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-comment__name")
    }, author), datetime && /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-comment__time")
    }, datetime));
    var quoteElement = quote ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-comment__quote")
    }, quote) : null;
    var actionsElement = actions && actions.length ? /* @__PURE__ */React__default["default"].createElement("ul", {
      className: "".concat(classPrefix, "-comment__actions")
    }, actions.map(function (action, index) {
      return /* @__PURE__ */React__default["default"].createElement("li", {
        key: "action-".concat(index)
      }, action);
    })) : null;
    var contentElement = /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-comment__content")
    }, authorDatetimeContent, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-comment__detail")
    }, content), quoteElement, actionsElement);
    var replyElement = reply ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1("".concat(classPrefix, "-comment__reply"))
    }, reply) : null;
    return /* @__PURE__ */React__default["default"].createElement("div", {
      ref: ref,
      style: style,
      className: classNames$1(className, ["".concat(classPrefix, "-comment")])
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-comment__inner")
    }, avatarElement, contentElement), replyElement);
  });
  Comment$1.displayName = "Comment";

  var Comment = Comment$1;

  var TransferList = function TransferList(props) {
    var className = props.className,
        style = props.style,
        data = props.data,
        _props$search = props.search,
        search = _props$search === void 0 ? false : _props$search,
        _props$checked = props.checked,
        checked = _props$checked === void 0 ? [] : _props$checked,
        empty = props.empty,
        title = props.title,
        footer = props.footer,
        content = props.content,
        onCheckbox = props.onCheckbox,
        onSearch = props.onSearch,
        _props$disabled = props.disabled,
        disabled = _props$disabled === void 0 ? false : _props$disabled,
        pagination = props.pagination,
        transferItem = props.transferItem;
    var notDisabledData = data.filter(function (item) {
      return !item.disabled;
    });

    var _useState = React.useState(1),
        _useState2 = _slicedToArray(_useState, 2),
        currentPage = _useState2[0],
        setCurrentPage = _useState2[1];

    var _useMemo = React.useMemo(function () {
      var aciveLen = checked.length;
      var notLen = notDisabledData.length;
      return [aciveLen && aciveLen < notLen, aciveLen && aciveLen === notLen];
    }, [checked, notDisabledData]),
        _useMemo2 = _slicedToArray(_useMemo, 2),
        indeterminate = _useMemo2[0],
        allChecked = _useMemo2[1];

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var CLASSPREFIX = "".concat(classPrefix, "-transfer__list");

    var handleCheckbox = function handleCheckbox(vals) {
      if (isFunction_1(onCheckbox)) onCheckbox(vals);
    };

    var handleAllCheckbox = function handleAllCheckbox(checked2) {
      if (isFunction_1(onCheckbox)) onCheckbox(checked2 ? notDisabledData.map(function (item) {
        return item.value;
      }) : []);
    };

    var HeaderCmp = function HeaderCmp() {
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(CLASSPREFIX, "-header")
      }, /* @__PURE__ */React__default["default"].createElement("div", null, /* @__PURE__ */React__default["default"].createElement(Checkbox, {
        indeterminate: indeterminate,
        checked: allChecked,
        disabled: disabled,
        onChange: handleAllCheckbox
      }), /* @__PURE__ */React__default["default"].createElement("span", null, checked.length, " / ", data.length, " \u9879")), /* @__PURE__ */React__default["default"].createElement("span", null, title));
    };

    var SearchCmp = function SearchCmp() {
      return search ? /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-transfer__search-wrapper")
      }, /* @__PURE__ */React__default["default"].createElement(Input, {
        placeholder: "\u8BF7\u8F93\u5165\u5173\u952E\u8BCD\u641C\u7D22",
        suffixIcon: /* @__PURE__ */React__default["default"].createElement(SearchIcon, null),
        onChange: onSearch
      })) : null;
    };

    var viewData = React.useMemo(function () {
      if (!isEmpty_1(pagination)) {
        var pageSize = pagination.pageSize || 10;
        var start = (currentPage - 1) * pageSize;
        return data.slice(start, start + pageSize);
      }

      return data;
    }, [currentPage, data, pagination]);

    var EmptyCmp = function EmptyCmp() {
      return isString_1(empty) ? /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-transfer__empty")
      }, /* @__PURE__ */React__default["default"].createElement("span", null, empty || "\u6682\u65E0\u6570\u636E")) : empty;
    };

    var contentCmp = function contentCmp() {
      if (typeof content === "function") {
        return content({
          data: viewData
        });
      }

      return /* @__PURE__ */React__default["default"].createElement(Checkbox.Group, {
        value: checked,
        onChange: handleCheckbox,
        disabled: disabled
      }, viewData.map(function (item, index) {
        return /* @__PURE__ */React__default["default"].createElement(Checkbox, {
          key: item.value,
          value: item.value,
          disabled: item.disabled,
          className: "".concat(CLASSPREFIX, "-item")
        }, /* @__PURE__ */React__default["default"].createElement("span", null, typeof transferItem === "function" ? transferItem({
          data: item,
          index: index,
          type: "source"
        }) : item.label));
      }));
    };

    var BodyCmp = function BodyCmp() {
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: classNames$1("".concat(CLASSPREFIX, "-body"), _defineProperty$2({}, "".concat(CLASSPREFIX, "--with-search"), search))
      }, SearchCmp(), /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(CLASSPREFIX, "-content narrow-scrollbar")
      }, viewData.length ? contentCmp() : EmptyCmp()));
    };

    var PaginationCmp = function PaginationCmp() {
      var handleCurrentPagination = function handleCurrentPagination(current) {
        setCurrentPage(current);

        if (isFunction_1(pagination.onPageChange)) {
          pagination.onPageChange(current);
        }
      };

      return pagination ? /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(CLASSPREFIX, "-pagination")
      }, /* @__PURE__ */React__default["default"].createElement(Pagination, {
        size: "small",
        theme: "simple",
        pageSizeOptions: [],
        total: data.length,
        totalContent: false,
        onCurrentChange: handleCurrentPagination,
        pageSize: pagination.pageSize
      })) : null;
    };

    var footerCmp = function footerCmp() {
      return !isEmpty_1(footer) ? /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-transfer__footer")
      }, footer) : null;
    };

    return /* @__PURE__ */React__default["default"].createElement("div", {
      style: style,
      className: classNames$1(CLASSPREFIX, className)
    }, HeaderCmp(), BodyCmp(), PaginationCmp(), footerCmp());
  };

  var getDefaultValue = function getDefaultValue(value, defaultValue) {
    if (isEmpty_1(value)) {
      return Array.isArray(defaultValue) ? defaultValue : [defaultValue, defaultValue];
    }

    if (Array.isArray(value)) return value;
    return [defaultValue, defaultValue];
  };
  var getJSX = function getJSX(value) {
    if (isString_1(value)) return value;
    if (isFunction_1(value)) return value();
    if ( /*#__PURE__*/React__default["default"].isValidElement(value)) return value;
    return value;
  };

  function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var Transfer$1 = function Transfer(props) {
    var _classnames;

    var _props$data = props.data,
        data = _props$data === void 0 ? [] : _props$data,
        _props$search = props.search,
        search = _props$search === void 0 ? false : _props$search,
        checked = props.checked,
        _props$defaultChecked = props.defaultChecked,
        defaultChecked = _props$defaultChecked === void 0 ? [] : _props$defaultChecked,
        onCheckedChange = props.onCheckedChange,
        value = props.value,
        _props$defaultValue = props.defaultValue,
        defaultValue = _props$defaultValue === void 0 ? [] : _props$defaultValue,
        onChange = props.onChange,
        empty = props.empty,
        _props$disabled = props.disabled,
        disabled = _props$disabled === void 0 ? false : _props$disabled,
        pagination = props.pagination,
        title = props.title,
        operation = props.operation,
        footer = props.footer,
        transferItem = props.transferItem,
        content = props.content;

    var _useState = React.useState(function () {
      return {
        source: data.filter(function (item) {
          return !defaultValue.includes(item.value);
        }),
        target: data.filter(function (item) {
          return defaultValue.includes(item.value);
        })
      };
    }),
        _useState2 = _slicedToArray(_useState, 2),
        state = _useState2[0],
        setState = _useState2[1];

    var _useState3 = React.useState(function () {
      return {
        source: state.source.filter(function (item) {
          return !item.disabled && defaultChecked.includes(item.value);
        }).map(function (item) {
          return item.value;
        }),
        target: state.target.filter(function (item) {
          return !item.disabled && defaultChecked.includes(item.value);
        }).map(function (item) {
          return item.value;
        })
      };
    }),
        _useState4 = _slicedToArray(_useState3, 2),
        checkeds = _useState4[0],
        setCheckeds = _useState4[1];

    var _useState5 = React.useState({
      source: "",
      target: ""
    }),
        _useState6 = _slicedToArray(_useState5, 2),
        searchState = _useState6[0],
        setSearchState = _useState6[1];

    var isTargetControled = ("value" in props);
    var isCheckedControled = ("checked" in props);

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var transferClassName = "".concat(classPrefix, "-transfer");

    var _useMemo = React.useMemo(function () {
      var source = state.source,
          target = state.target;
      var searchSource = searchState.source,
          searchTarget = searchState.target;
      return [source.filter(function (item) {
        return !searchSource || item.label.indexOf(searchState.source) > -1;
      }), target.filter(function (item) {
        return !searchTarget || item.label.indexOf(searchState.target) > -1;
      })];
    }, [searchState, state]),
        _useMemo2 = _slicedToArray(_useMemo, 2),
        sourceData = _useMemo2[0],
        targetData = _useMemo2[1];

    var _getDefaultValue$map = getDefaultValue(empty, "\u6682\u65E0\u6570\u636E").map(function (item) {
      return getJSX(item);
    }),
        _getDefaultValue$map2 = _slicedToArray(_getDefaultValue$map, 2),
        SourceEmptyCmp = _getDefaultValue$map2[0],
        TargetEmptyCmp = _getDefaultValue$map2[1];

    var _getDefaultValue = getDefaultValue(disabled, false),
        _getDefaultValue2 = _slicedToArray(_getDefaultValue, 2),
        sourceDisable = _getDefaultValue2[0],
        targetDisable = _getDefaultValue2[1];

    var _getDefaultValue3 = getDefaultValue(pagination),
        _getDefaultValue4 = _slicedToArray(_getDefaultValue3, 2),
        sourcePagonation = _getDefaultValue4[0],
        targetPagonation = _getDefaultValue4[1];

    var _getDefaultValue$map3 = getDefaultValue(title).map(function (item) {
      return getJSX(item);
    }),
        _getDefaultValue$map4 = _slicedToArray(_getDefaultValue$map3, 2),
        sourceTitle = _getDefaultValue$map4[0],
        targetTitle = _getDefaultValue$map4[1];

    var _getDefaultValue$map5 = getDefaultValue(operation, [function () {
      return /* @__PURE__ */React__default["default"].createElement(ChevronRightIcon, null);
    }, function () {
      return /* @__PURE__ */React__default["default"].createElement(ChevronLeftIcon, null);
    }]).map(function (item) {
      return getJSX(item);
    }),
        _getDefaultValue$map6 = _slicedToArray(_getDefaultValue$map5, 2),
        leftOperation = _getDefaultValue$map6[0],
        rightOperation = _getDefaultValue$map6[1];

    var _getDefaultValue$map7 = getDefaultValue(footer).map(function (item) {
      return getJSX(item);
    }),
        _getDefaultValue$map8 = _slicedToArray(_getDefaultValue$map7, 2),
        sourceFooter = _getDefaultValue$map8[0],
        targetFooter = _getDefaultValue$map8[1];

    var _getDefaultValue5 = getDefaultValue(transferItem),
        _getDefaultValue6 = _slicedToArray(_getDefaultValue5, 2),
        sourceTransferItem = _getDefaultValue6[0],
        targetTransferItem = _getDefaultValue6[1];

    var _getDefaultValue7 = getDefaultValue(content),
        _getDefaultValue8 = _slicedToArray(_getDefaultValue7, 2),
        sourceContent = _getDefaultValue8[0],
        targetContent = _getDefaultValue8[1];

    var transfromSource = function transfromSource() {
      var source = state.source,
          target = state.target;
      var sourceCheckeds = source.filter(function (item) {
        return checkeds.source.includes(item.value);
      });
      var newSoure = difference_1(source, sourceCheckeds);
      var newTarget = [].concat(_toConsumableArray(target), _toConsumableArray(sourceCheckeds));

      if (isTargetControled) {
        onChange === null || onChange === void 0 ? void 0 : onChange(newTarget.map(function (t) {
          return t.value;
        }), {
          type: "source",
          movedValue: sourceCheckeds.map(function (s) {
            return s.value;
          })
        });
      } else {
        setState(_objectSpread$2(_objectSpread$2({}, state), {}, {
          source: newSoure,
          target: _toConsumableArray(newTarget)
        }));
        setCheckeds(_objectSpread$2(_objectSpread$2({}, checkeds), {}, {
          source: []
        }));
      }
    };

    var transfromTarget = function transfromTarget() {
      var source = state.source,
          target = state.target;
      var targetCheckeds = target.filter(function (item) {
        return checkeds.target.includes(item.value);
      });
      var newTarget = difference_1(target, targetCheckeds);

      if (isTargetControled) {
        onChange === null || onChange === void 0 ? void 0 : onChange(newTarget.map(function (t) {
          return t.value;
        }), {
          type: "target",
          movedValue: targetCheckeds.map(function (s) {
            return s.value;
          })
        });
      } else {
        setState(_objectSpread$2(_objectSpread$2({}, state), {}, {
          source: [].concat(_toConsumableArray(source), _toConsumableArray(targetCheckeds)),
          target: newTarget
        }));
        setCheckeds(_objectSpread$2(_objectSpread$2({}, checkeds), {}, {
          target: []
        }));
      }
    };

    var OperationsCmp = function OperationsCmp() {
      var isSourceDisabled = sourceDisable || !checkeds.source.length;
      var isTargetDisabled = targetDisable || !checkeds.target.length;
      return /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(transferClassName, "__operations")
      }, /* @__PURE__ */React__default["default"].createElement(Button, {
        key: isSourceDisabled ? "right-outline" : "right-base",
        variant: isSourceDisabled ? "outline" : "base",
        disabled: isSourceDisabled,
        onClick: transfromSource
      }, leftOperation), /* @__PURE__ */React__default["default"].createElement(Button, {
        key: isSourceDisabled ? "left-outline" : "left-base",
        variant: isTargetDisabled ? "outline" : "base",
        disabled: isTargetDisabled,
        onClick: transfromTarget
      }, rightOperation));
    };

    var handleCheckChange = function handleCheckChange(value2, type) {
      var sourceChecked = checkeds.source,
          targetChecked = checkeds.target;
      var inverseMap = {
        source: "target",
        target: "source"
      };
      isCheckedControled ? onCheckedChange === null || onCheckedChange === void 0 ? void 0 : onCheckedChange({
        type: type,
        checked: value2.concat(checkeds[inverseMap[type]]),
        sourceChecked: sourceChecked,
        targetChecked: targetChecked
      }) : setCheckeds(_objectSpread$2(_objectSpread$2({}, checkeds), {}, _defineProperty$2({}, type, value2)));
    };

    React.useEffect(function () {
      if (isTargetControled && Array.isArray(value)) {
        var newTarget = data.filter(function (item) {
          return value.includes(item.value);
        });
        var newSource = difference_1(data, newTarget);
        setState({
          source: _toConsumableArray(newSource),
          target: _toConsumableArray(newTarget)
        });
        setCheckeds({
          source: [],
          target: []
        });
      }
    }, [value, data, isTargetControled]);
    React.useEffect(function () {
      var source = state.source,
          target = state.target;

      if (isCheckedControled && Array.isArray(checked)) {
        var newSourceChecked = source.filter(function (item) {
          return !item.disabled && checked.includes(item.value);
        }).map(function (item) {
          return item.value;
        });
        var newTargetChecked = target.filter(function (item) {
          return !item.disabled && checked.includes(item.value);
        }).map(function (item) {
          return item.value;
        });
        setCheckeds({
          source: newSourceChecked,
          target: newTargetChecked
        });
      }
    }, [checked, state, isCheckedControled]);
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: classNames$1(transferClassName, (_classnames = {}, _defineProperty$2(_classnames, "".concat(transferClassName, "__search"), search), _defineProperty$2(_classnames, "".concat(transferClassName, "__pagination"), pagination), _defineProperty$2(_classnames, "".concat(transferClassName, "__footer"), footer), _classnames))
    }, /* @__PURE__ */React__default["default"].createElement(TransferList, {
      className: "".concat(transferClassName, "__list-source"),
      data: sourceData,
      search: search,
      checked: checkeds.source,
      empty: SourceEmptyCmp,
      disabled: sourceDisable,
      pagination: sourcePagonation,
      title: sourceTitle,
      footer: sourceFooter,
      transferItem: sourceTransferItem,
      content: sourceContent,
      onCheckbox: function onCheckbox(value2) {
        return handleCheckChange(value2, "source");
      },
      onSearch: function onSearch(val) {
        return setSearchState(_objectSpread$2(_objectSpread$2({}, searchState), {}, {
          source: val
        }));
      }
    }), OperationsCmp(), /* @__PURE__ */React__default["default"].createElement(TransferList, {
      className: "".concat(transferClassName, "__list-target"),
      data: targetData,
      search: search,
      checked: checkeds.target,
      empty: TargetEmptyCmp,
      disabled: targetDisable,
      pagination: targetPagonation,
      title: targetTitle,
      footer: targetFooter,
      transferItem: targetTransferItem,
      content: targetContent,
      onCheckbox: function onCheckbox(value2) {
        return handleCheckChange(value2, "target");
      },
      onSearch: function onSearch(val) {
        return setSearchState(_objectSpread$2(_objectSpread$2({}, searchState), {}, {
          target: val
        }));
      }
    }));
  };

  Transfer$1.displayName = "Transfer";

  var Transfer = Transfer$1;

  // refs, but then host hooks / components could not opt out of renders.
  // This could've been exported to its own module, but the current build doesn't
  // seem to work with module imports and I had no more time to spend on this...

  function useResolvedElement(subscriber, refOrElement) {
    var callbackRefElement = React.useRef(null);
    var lastReportRef = React.useRef(null);
    var cleanupRef = React.useRef();
    var callSubscriber = React.useCallback(function () {
      var element = null;

      if (callbackRefElement.current) {
        element = callbackRefElement.current;
      } else if (refOrElement) {
        if (refOrElement instanceof HTMLElement) {
          element = refOrElement;
        } else {
          element = refOrElement.current;
        }
      }

      if (lastReportRef.current && lastReportRef.current.element === element && lastReportRef.current.reporter === callSubscriber) {
        return;
      }

      if (cleanupRef.current) {
        cleanupRef.current(); // Making sure the cleanup is not called accidentally multiple times.

        cleanupRef.current = null;
      }

      lastReportRef.current = {
        reporter: callSubscriber,
        element: element
      }; // Only calling the subscriber, if there's an actual element to report.

      if (element) {
        cleanupRef.current = subscriber(element);
      }
    }, [refOrElement, subscriber]); // On each render, we check whether a ref changed, or if we got a new raw
    // element.

    React.useEffect(function () {
      // With this we're *technically* supporting cases where ref objects' current value changes, but only if there's a
      // render accompanying that change as well.
      // To guarantee we always have the right element, one must use the ref callback provided instead, but we support
      // RefObjects to make the hook API more convenient in certain cases.
      callSubscriber();
    }, [callSubscriber]);
    return React.useCallback(function (element) {
      callbackRefElement.current = element;
      callSubscriber();
    }, [callSubscriber]);
  } // We're only using the first element of the size sequences, until future versions of the spec solidify on how
  // exactly it'll be used for fragments in multi-column scenarios:
  // From the spec:
  // > The box size properties are exposed as FrozenArray in order to support elements that have multiple fragments,
  // > which occur in multi-column scenarios. However the current definitions of content rect and border box do not
  // > mention how those boxes are affected by multi-column layout. In this spec, there will only be a single
  // > ResizeObserverSize returned in the FrozenArray, which will correspond to the dimensions of the first column.
  // > A future version of this spec will extend the returned FrozenArray to contain the per-fragment size information.
  // (https://drafts.csswg.org/resize-observer/#resize-observer-entry-interface)
  //
  // Also, testing these new box options revealed that in both Chrome and FF everything is returned in the callback,
  // regardless of the "box" option.
  // The spec states the following on this:
  // > This does not have any impact on which box dimensions are returned to the defined callback when the event
  // > is fired, it solely defines which box the author wishes to observe layout changes on.
  // (https://drafts.csswg.org/resize-observer/#resize-observer-interface)
  // I'm not exactly clear on what this means, especially when you consider a later section stating the following:
  // > This section is non-normative. An author may desire to observe more than one CSS box.
  // > In this case, author will need to use multiple ResizeObservers.
  // (https://drafts.csswg.org/resize-observer/#resize-observer-interface)
  // Which is clearly not how current browser implementations behave, and seems to contradict the previous quote.
  // For this reason I decided to only return the requested size,
  // even though it seems we have access to results for all box types.
  // This also means that we get to keep the current api, being able to return a simple { width, height } pair,
  // regardless of box option.


  var extractSize = function extractSize(entry, boxProp, sizeType) {
    if (!entry[boxProp]) {
      if (boxProp === "contentBoxSize") {
        // The dimensions in `contentBoxSize` and `contentRect` are equivalent according to the spec.
        // See the 6th step in the description for the RO algorithm:
        // https://drafts.csswg.org/resize-observer/#create-and-populate-resizeobserverentry-h
        // > Set this.contentRect to logical this.contentBoxSize given target and observedBox of "content-box".
        // In real browser implementations of course these objects differ, but the width/height values should be equivalent.
        return entry.contentRect[sizeType === "inlineSize" ? "width" : "height"];
      }

      return undefined;
    } // A couple bytes smaller than calling Array.isArray() and just as effective here.


    return entry[boxProp][0] ? entry[boxProp][0][sizeType] : // TS complains about this, because the RO entry type follows the spec and does not reflect Firefox's current
    // behaviour of returning objects instead of arrays for `borderBoxSize` and `contentBoxSize`.
    // @ts-ignore
    entry[boxProp][sizeType];
  };

  function useResizeObserver(opts) {
    if (opts === void 0) {
      opts = {};
    } // Saving the callback as a ref. With this, I don't need to put onResize in the
    // effect dep array, and just passing in an anonymous function without memoising
    // will not reinstantiate the hook's ResizeObserver.


    var onResize = opts.onResize;
    var onResizeRef = React.useRef(undefined);
    onResizeRef.current = onResize;
    var round = opts.round || Math.round; // Using a single instance throughout the hook's lifetime

    var resizeObserverRef = React.useRef();

    var _useState = React.useState({
      width: undefined,
      height: undefined
    }),
        size = _useState[0],
        setSize = _useState[1]; // In certain edge cases the RO might want to report a size change just after
    // the component unmounted.


    var didUnmount = React.useRef(false);
    React.useEffect(function () {
      return function () {
        didUnmount.current = true;
      };
    }, []); // Using a ref to track the previous width / height to avoid unnecessary renders.

    var previous = React.useRef({
      width: undefined,
      height: undefined
    }); // This block is kinda like a useEffect, only it's called whenever a new
    // element could be resolved based on the ref option. It also has a cleanup
    // function.

    var refCallback = useResolvedElement(React.useCallback(function (element) {
      // We only use a single Resize Observer instance, and we're instantiating it on demand, only once there's something to observe.
      // This instance is also recreated when the `box` option changes, so that a new observation is fired if there was a previously observed element with a different box option.
      if (!resizeObserverRef.current || resizeObserverRef.current.box !== opts.box || resizeObserverRef.current.round !== round) {
        resizeObserverRef.current = {
          box: opts.box,
          round: round,
          instance: new ResizeObserver(function (entries) {
            var entry = entries[0];
            var boxProp = opts.box === "border-box" ? "borderBoxSize" : opts.box === "device-pixel-content-box" ? "devicePixelContentBoxSize" : "contentBoxSize";
            var reportedWidth = extractSize(entry, boxProp, "inlineSize");
            var reportedHeight = extractSize(entry, boxProp, "blockSize");
            var newWidth = reportedWidth ? round(reportedWidth) : undefined;
            var newHeight = reportedHeight ? round(reportedHeight) : undefined;

            if (previous.current.width !== newWidth || previous.current.height !== newHeight) {
              var newSize = {
                width: newWidth,
                height: newHeight
              };
              previous.current.width = newWidth;
              previous.current.height = newHeight;

              if (onResizeRef.current) {
                onResizeRef.current(newSize);
              } else {
                if (!didUnmount.current) {
                  setSize(newSize);
                }
              }
            }
          })
        };
      }

      resizeObserverRef.current.instance.observe(element, {
        box: opts.box
      });
      return function () {
        if (resizeObserverRef.current) {
          resizeObserverRef.current.instance.unobserve(element);
        }
      };
    }, [opts.box, round]), opts.ref);
    return React.useMemo(function () {
      return {
        ref: refCallback,
        width: size.width,
        height: size.height
      };
    }, [refCallback, size ? size.width : null, size ? size.height : null]);
  }

  var AvatarContext = /*#__PURE__*/React__default["default"].createContext("default");
  var AvatarContextProvider = function AvatarContextProvider(_ref) {
    var children = _ref.children,
        size = _ref.size;
    return /* @__PURE__ */React__default["default"].createElement(AvatarContext.Consumer, null, function (inputSize) {
      return /* @__PURE__ */React__default["default"].createElement(AvatarContext.Provider, {
        value: size || inputSize
      }, children);
    });
  };

  var _excluded$1 = ["className", "cascading", "collapseAvatar", "max", "placement", "popupProps", "size", "children"];

  function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var Group = function Group(props) {
    var _classNames;

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var preClass = "".concat(classPrefix, "-avatar");

    var className = props.className,
        _props$cascading = props.cascading,
        cascading = _props$cascading === void 0 ? "right-up" : _props$cascading,
        collapseAvatar = props.collapseAvatar,
        max = props.max,
        placement = props.placement,
        popupProps = props.popupProps,
        _props$size = props.size,
        size = _props$size === void 0 ? "medium" : _props$size,
        children = props.children,
        avatarGroupProps = _objectWithoutProperties$1(props, _excluded$1);

    var childrenList = React__default["default"].Children.toArray(children);
    var allChildrenList;

    if (childrenList.length > 0) {
      allChildrenList = childrenList.map(function (child, index) {
        return /*#__PURE__*/React__default["default"].cloneElement(child, _objectSpread$1({
          key: "avatar-group-item-".concat(index)
        }, child.props));
      });
    }

    var groupClass = classNames$1("".concat(preClass, "-group"), className, (_classNames = {}, _defineProperty$2(_classNames, "".concat(preClass, "--offset-right"), cascading === "right-up"), _defineProperty$2(_classNames, "".concat(preClass, "--offset-left"), cascading === "left-up"), _classNames));
    var childrenCount = childrenList.length;

    if (max && childrenCount > max) {
      var showList = allChildrenList.slice(0, max);
      var hiddenList = allChildrenList.slice(max, childrenCount);
      var popupNum = "+".concat(childrenCount - max);

      var popupMergeProps = _objectSpread$1(_objectSpread$1({}, popupProps), {}, {
        placement: placement
      });

      var popupNodes = popupProps ? /* @__PURE__ */React__default["default"].createElement(Popup$1, _objectSpread$1({}, popupMergeProps), collapseAvatar ? /* @__PURE__ */React__default["default"].createElement(Avatar$1, {
        size: size
      }, collapseAvatar) : /* @__PURE__ */React__default["default"].createElement(Avatar$1, {
        size: size
      }, popupNum)) : /* @__PURE__ */React__default["default"].createElement(Popup$1, {
        key: "avatar-popup-key",
        placement: placement,
        content: hiddenList,
        trigger: "hover",
        showArrow: true
      }, collapseAvatar ? /* @__PURE__ */React__default["default"].createElement(Avatar$1, {
        size: size
      }, collapseAvatar) : /* @__PURE__ */React__default["default"].createElement(Avatar$1, {
        size: size
      }, popupNum));
      showList.push(popupNodes);
      return /* @__PURE__ */React__default["default"].createElement(AvatarContextProvider, {
        size: size
      }, /* @__PURE__ */React__default["default"].createElement("div", {
        className: groupClass
      }, showList));
    }

    return /* @__PURE__ */React__default["default"].createElement(AvatarContextProvider, {
      size: size
    }, /* @__PURE__ */React__default["default"].createElement("div", _objectSpread$1({
      className: groupClass
    }, avatarGroupProps), allChildrenList));
  };

  var _excluded = ["alt", "hideOnLoadFailed", "icon", "image", "shape", "size", "onError", "children", "style", "className"];

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var Avatar$1 = forwardRefWithStatics(function (props, ref) {
    var _classNames;

    var alt = props.alt,
        _props$hideOnLoadFail = props.hideOnLoadFailed,
        hideOnLoadFailed = _props$hideOnLoadFail === void 0 ? false : _props$hideOnLoadFail,
        icon = props.icon,
        image = props.image,
        _props$shape = props.shape,
        shape = _props$shape === void 0 ? "circle" : _props$shape,
        _props$size = props.size,
        avatarSize = _props$size === void 0 ? "default" : _props$size,
        onError = props.onError,
        children = props.children,
        style = props.style,
        className = props.className,
        avatarProps = _objectWithoutProperties$1(props, _excluded);

    var groupSize = React.useContext(AvatarContext);

    var _useConfig = useConfig$1(),
        classPrefix = _useConfig.classPrefix;

    var _useState = React.useState(1),
        _useState2 = _slicedToArray(_useState, 2),
        scale = _useState2[0],
        setScale = _useState2[1];

    var _useState3 = React.useState(true),
        _useState4 = _slicedToArray(_useState3, 2),
        isImgExist = _useState4[0],
        setIsImgExist = _useState4[1];

    var avatarRef = React.useRef(null);
    var avatarChildrenRef = React.useRef(null);
    var size = avatarSize === "default" ? groupSize : avatarSize;
    var gap = 4;

    var handleScale = function handleScale() {
      if (!avatarChildrenRef.current || !avatarRef.current) {
        return;
      }

      var childrenWidth = avatarChildrenRef.current.offsetWidth;
      var avatarWidth = avatarRef.current.offsetWidth;

      if (childrenWidth !== 0 && avatarWidth !== 0) {
        if (gap * 2 < avatarWidth) {
          setScale(avatarWidth - gap * 2 < childrenWidth ? (avatarWidth - gap * 2) / childrenWidth : 1);
        }
      }
    };

    var _useResizeObserver = useResizeObserver({
      onResize: handleScale
    }),
        observerRef = _useResizeObserver.ref;

    var handleImgLoadError = function handleImgLoadError() {
      onError && onError();
      !hideOnLoadFailed && setIsImgExist(false);
    };

    React.useEffect(function () {
      setIsImgExist(true);
      setScale(1);
    }, [props.image]);
    React.useEffect(function () {
      handleScale();
    }, []);

    var _useCommonClassName = useCommonClassName(),
        SIZE = _useCommonClassName.SIZE;

    var numSizeStyle = size && !SIZE[size] ? {
      width: size,
      height: size,
      fontSize: "".concat(Number.parseInt(size, 10) / 2, "px")
    } : {};
    var imageStyle = size && !SIZE[size] ? {
      width: size,
      height: size
    } : {};
    var preClass = "".concat(classPrefix, "-avatar");
    var avatarClass = classNames$1(preClass, className, (_classNames = {}, _defineProperty$2(_classNames, SIZE[size], !!SIZE[size]), _defineProperty$2(_classNames, "".concat(preClass, "--").concat(shape), !!shape), _defineProperty$2(_classNames, "".concat(preClass, "-icon"), !!icon), _classNames));
    var content;

    if (image && isImgExist) {
      content = /* @__PURE__ */React__default["default"].createElement("img", {
        src: image,
        alt: alt,
        style: imageStyle,
        onError: handleImgLoadError
      });
    } else if (icon) {
      content = icon;
    } else {
      var childrenStyle = {
        transform: "scale(".concat(scale, ")")
      };
      content = /* @__PURE__ */React__default["default"].createElement("span", {
        ref: composeRefs(ref, avatarChildrenRef, observerRef),
        style: childrenStyle
      }, children);
    }

    return /* @__PURE__ */React__default["default"].createElement("div", _objectSpread({
      ref: composeRefs(ref, avatarRef),
      className: avatarClass,
      style: _objectSpread(_objectSpread({}, numSizeStyle), style)
    }, avatarProps), content);
  }, {
    Group: Group
  });
  Avatar$1.displayName = "Avatar";

  var Avatar = Avatar$1;

  exports.Addon = Addon;
  exports.Affix = Affix;
  exports.Alert = Alert;
  exports.Anchor = Anchor;
  exports.Avatar = Avatar;
  exports.Badge = Badge;
  exports.Breadcrumb = Breadcrumb;
  exports.Button = Button;
  exports.Calendar = Calendar;
  exports.Cascader = Cascader;
  exports.Checkbox = Checkbox;
  exports.Col = Col;
  exports.Comment = Comment;
  exports.ConfigContext = ConfigContext$1;
  exports.ConfigProvider = ConfigProvider;
  exports.DatePicker = DatePicker;
  exports.Dialog = Dialog;
  exports.DialogPlugin = DialogPlugin;
  exports.Divider = Divider;
  exports.Drawer = Drawer;
  exports.Dropdown = Dropdown;
  exports.Form = Form;
  exports.Input = Input;
  exports.InputNumber = InputNumber;
  exports.Layout = Layout;
  exports.List = List;
  exports.Loading = Loading;
  exports.LoadingPlugin = LoadingPlugin;
  exports.Menu = Menu;
  exports.Message = Message;
  exports.MessagePlugin = MessagePlugin;
  exports.Notification = Notification;
  exports.NotificationPlugin = NotificationPlugin;
  exports.Pagination = Pagination;
  exports.PopConfirm = PopConfirm;
  exports.Popup = Popup;
  exports.Progress = Progress;
  exports.Radio = Radio;
  exports.Row = Row;
  exports.Select = Select;
  exports.SimpleTable = SimpleTable;
  exports.Slider = Slider;
  exports.Steps = Steps;
  exports.Swiper = Swiper;
  exports.Switch = Switch;
  exports.Table = Table;
  exports.Tabs = Tabs;
  exports.Tag = Tag;
  exports.Textarea = Textarea;
  exports.TimePicker = TimePicker;
  exports.Tooltip = Tooltip;
  exports.Transfer = Transfer;
  exports.Tree = Tree;
  exports.TreeSelect = TreeSelect;
  exports.Upload = Upload;
  exports.dialog = dialog;
  exports.loading = loading;
  exports.message = message;
  exports.notification = notification;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=tdesign.js.map
