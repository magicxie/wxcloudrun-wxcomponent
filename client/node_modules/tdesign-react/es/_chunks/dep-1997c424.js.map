{"version":3,"file":"dep-1997c424.js","sources":["../../node_modules/lodash/_isFlattenable.js","../../node_modules/lodash/_baseFlatten.js"],"sourcesContent":["var Symbol = require('./_Symbol'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray');\n\n/** Built-in value references. */\nvar spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;\n\n/**\n * Checks if `value` is a flattenable `arguments` object or array.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n */\nfunction isFlattenable(value) {\n  return isArray(value) || isArguments(value) ||\n    !!(spreadableSymbol && value && value[spreadableSymbol]);\n}\n\nmodule.exports = isFlattenable;\n","var arrayPush = require('./_arrayPush'),\n    isFlattenable = require('./_isFlattenable');\n\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n      length = array.length;\n\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n\n  while (++index < length) {\n    var value = array[index];\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseFlatten;\n"],"names":["Symbol","require$$0","isArguments","require$$1","isArray","require$$2","spreadableSymbol","isConcatSpreadable","undefined","isFlattenable","value","_isFlattenable","arrayPush","baseFlatten","array","depth","predicate","isStrict","result","index","length","_baseFlatten"],"mappings":";;;;;;;;;;;;;AAAA,IAAIA,OAAM,GAAGC,SAAb;AAAA,IACIC,WAAW,GAAGC,aADlB;AAAA,IAEIC,OAAO,GAAGC,SAFd;AAIA;;AACA,IAAIC,gBAAgB,GAAGN,OAAM,GAAGA,OAAM,CAACO,kBAAV,GAA+BC,SAA5D;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,eAAT,CAAuBC,KAAvB,EAA8B;AAC5B,SAAON,OAAO,CAACM,KAAD,CAAP,IAAkBR,WAAW,CAACQ,KAAD,CAA7B,IACL,CAAC,EAAEJ,gBAAgB,IAAII,KAApB,IAA6BA,KAAK,CAACJ,gBAAD,CAApC,CADH;AAED;;IAEDK,cAAc,GAAGF;;ACnBjB,IAAIG,SAAS,GAAGX,UAAhB;AAAA,IACIQ,aAAa,GAAGN,cADpB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASU,WAAT,CAAqBC,KAArB,EAA4BC,KAA5B,EAAmCC,SAAnC,EAA8CC,QAA9C,EAAwDC,MAAxD,EAAgE;AAC9D,MAAIC,KAAK,GAAG,CAAC,CAAb;AAAA,MACIC,MAAM,GAAGN,KAAK,CAACM,MADnB;AAGAJ,EAAAA,SAAS,KAAKA,SAAS,GAAGP,aAAjB,CAAT;AACAS,EAAAA,MAAM,KAAKA,MAAM,GAAG,EAAd,CAAN;;AAEA,SAAO,EAAEC,KAAF,GAAUC,MAAjB,EAAyB;AACvB,QAAIV,KAAK,GAAGI,KAAK,CAACK,KAAD,CAAjB;;AACA,QAAIJ,KAAK,GAAG,CAAR,IAAaC,SAAS,CAACN,KAAD,CAA1B,EAAmC;AACjC,UAAIK,KAAK,GAAG,CAAZ,EAAe;;AAEbF,QAAAA,WAAW,CAACH,KAAD,EAAQK,KAAK,GAAG,CAAhB,EAAmBC,SAAnB,EAA8BC,QAA9B,EAAwCC,MAAxC,CAAX;AACD,OAHD,MAGO;AACLN,QAAAA,SAAS,CAACM,MAAD,EAASR,KAAT,CAAT;AACD;AACF,KAPD,MAOO,IAAI,CAACO,QAAL,EAAe;AACpBC,MAAAA,MAAM,CAACA,MAAM,CAACE,MAAR,CAAN,GAAwBV,KAAxB;AACD;AACF;;AACD,SAAOQ,MAAP;AACD;;IAEDG,YAAc,GAAGR;;;;"}