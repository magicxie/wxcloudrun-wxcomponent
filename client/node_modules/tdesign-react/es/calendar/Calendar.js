/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _toConsumableArray } from '../_chunks/dep-124f91c5.js';
import { _ as _slicedToArray } from '../_chunks/dep-93971e86.js';
import { _ as _defineProperty } from '../_chunks/dep-9332bbea.js';
import React, { forwardRef, useState, useCallback, useMemo, useEffect, useLayoutEffect } from 'react';
import dayjs from 'dayjs';
import { useLocaleReceiver } from '../locale/LocalReceiver.js';
import { Button } from '../button/index.js';
import { Select } from '../select/index.js';
import { Radio } from '../radio/index.js';
import noop from '../_util/noop.js';
import useConfig from '../_util/useConfig.js';
import { createDateList, createMonthList } from './_util.js';
import CheckTag from '../tag/CheckTag.js';
import '../_chunks/dep-beac373a.js';
import '../config-provider/index.js';
import '../config-provider/ConfigProvider.js';
import '../_chunks/dep-27d690ce.js';
import '../config-provider/ConfigContext.js';
import '../locale/zh_CN.js';
import '../button/Button.js';
import 'classnames';
import '../_util/useRipple.js';
import '../_util/setStyle.js';
import '../loading/index.js';
import '../loading/loading.js';
import '../_util/dom.js';
import 'raf';
import '../_chunks/dep-3853103d.js';
import '../_chunks/dep-ab1e2688.js';
import '../_chunks/dep-aa2bff1b.js';
import '../_chunks/dep-156c830d.js';
import '../_chunks/dep-897ce04d.js';
import '../_chunks/dep-2eff142e.js';
import '../_chunks/dep-312619d6.js';
import '../_util/easing.js';
import '../common/Portal.js';
import 'react-dom';
import '../loading/gradient.js';
import './style/css.js';
import '../loading/type.js';
import '../loading/plugin.js';
import '../button/type.js';
import '../select/base/Select.js';
import 'tdesign-icons-react';
import '../_chunks/dep-25536592.js';
import '../_chunks/dep-a764e3bd.js';
import '../_chunks/dep-d098d908.js';
import '../_chunks/dep-ae2e9ece.js';
import '../_chunks/dep-a0400c35.js';
import '../_chunks/dep-95c9ff5b.js';
import '../_chunks/dep-5ace74d6.js';
import '../_chunks/dep-8309e373.js';
import '../_chunks/dep-0de37580.js';
import '../_chunks/dep-44c00646.js';
import 'lodash';
import '../_util/composeRefs.js';
import '../_util/useDefaultValue.js';
import '../_util/useDefault.js';
import '../_util/forwardRefWithStatics.js';
import 'hoist-non-react-statics';
import '../select/util/helper.js';
import '../select/base/OptionGroup.js';
import '../select/base/Option.js';
import '../_chunks/dep-d2535fd6.js';
import '../common/FakeArrow.js';
import '../input/index.js';
import '../input/Input.js';
import '../input/InputGroup.js';
import '../input/type.js';
import '../popup/index.js';
import '../popup/Popup.js';
import 'react-transition-group';
import 'react-popper';
import '../_util/usePrevious.js';
import '../popup/Portal.js';
import '../popup/hooks/useTriggerProps.js';
import '../_util/useClickOutside.js';
import '../popup/hooks/usePopupCssTransition.js';
import '../popup/type.js';
import '../tag/index.js';
import '../tag/Tag.js';
import '../tag/type.js';
import '../select/base/PopupContent.js';
import '../select/type.js';
import '../_chunks/dep-6cc10247.js';
import '../common/Check.js';
import '../_util/helper.js';
import '../_chunks/dep-93bd2d05.js';
import '../_chunks/dep-304ab091.js';
import '../_chunks/dep-ea69dcf8.js';
import '../_util/useCommonClassName.js';
import '../radio/type.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var getDefaultControllerConfigData = function getDefaultControllerConfigData() {
  var visible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  return {
    visible: visible,
    disabled: false,
    mode: {
      visible: true,
      radioGroupProps: {}
    },
    year: {
      visible: true,
      selectProps: {
        popupProps: {
          overlayStyle: {
            width: "110px"
          }
        }
      }
    },
    month: {
      visible: true,
      selectProps: {
        popupProps: {
          overlayStyle: {
            width: "90px"
          }
        }
      }
    },
    weekend: {
      visible: true,
      showWeekendButtonProps: {},
      hideWeekendButtonProps: {}
    },
    current: {
      visible: true,
      currentDayButtonProps: {},
      currentMonthButtonProps: {}
    }
  };
};

var blockName = "calendar";
var controlSectionSize = "medium";
var minYear = 1970;
var Calendar = /*#__PURE__*/forwardRef(function (props, ref) {
  var _props$className = props.className,
      className = _props$className === void 0 ? "" : _props$className,
      _props$style = props.style,
      style = _props$style === void 0 ? {} : _props$style,
      _props$mode = props.mode,
      modeFromProps = _props$mode === void 0 ? "month" : _props$mode,
      _props$value = props.value,
      valueFromProps = _props$value === void 0 ? null : _props$value,
      _props$firstDayOfWeek = props.firstDayOfWeek,
      firstDayOfWeek = _props$firstDayOfWeek === void 0 ? 1 : _props$firstDayOfWeek,
      _props$format = props.format,
      format = _props$format === void 0 ? "YYYY-MM-DD" : _props$format,
      _props$range = props.range,
      range = _props$range === void 0 ? null : _props$range,
      _props$head = props.head,
      head = _props$head === void 0 ? null : _props$head,
      _props$cell = props.cell,
      cell = _props$cell === void 0 ? null : _props$cell,
      _props$cellAppend = props.cellAppend,
      cellAppend = _props$cellAppend === void 0 ? null : _props$cellAppend,
      _props$week = props.week,
      week = _props$week === void 0 ? null : _props$week,
      _props$theme = props.theme,
      theme = _props$theme === void 0 ? "full" : _props$theme,
      controllerConfig = props.controllerConfig,
      _props$isShowWeekendD = props.isShowWeekendDefault,
      isShowWeekendDefault = _props$isShowWeekendD === void 0 ? true : _props$isShowWeekendD,
      _props$preventCellCon = props.preventCellContextmenu,
      preventCellContextmenu = _props$preventCellCon === void 0 ? false : _props$preventCellCon,
      _props$onControllerCh = props.onControllerChange,
      onControllerChange = _props$onControllerCh === void 0 ? noop : _props$onControllerCh,
      _props$onCellClick = props.onCellClick,
      onCellClick = _props$onCellClick === void 0 ? noop : _props$onCellClick,
      _props$onCellDoubleCl = props.onCellDoubleClick,
      onCellDoubleClick = _props$onCellDoubleCl === void 0 ? noop : _props$onCellDoubleCl,
      _props$onCellRightCli = props.onCellRightClick,
      onCellRightClick = _props$onCellRightCli === void 0 ? noop : _props$onCellRightCli,
      _props$onMonthChange = props.onMonthChange,
      onMonthChange = _props$onMonthChange === void 0 ? noop : _props$onMonthChange,
      _props$fillWithZero = props.fillWithZero,
      fillWithZero = _props$fillWithZero === void 0 ? false : _props$fillWithZero;
  var controllerConfigData = typeof controllerConfig === "boolean" ? getDefaultControllerConfigData(controllerConfig) : _objectSpread(_objectSpread({}, getDefaultControllerConfigData()), controllerConfig);
  var visible = controllerConfigData.visible,
      disabled = controllerConfigData.disabled,
      modeFromConfig = controllerConfigData.mode,
      yearFromConfig = controllerConfigData.year,
      monthFromConfig = controllerConfigData.month,
      weekend = controllerConfigData.weekend,
      current = controllerConfigData.current;
  var _modeFromConfig$visib = modeFromConfig.visible,
      visibleForMode = _modeFromConfig$visib === void 0 ? true : _modeFromConfig$visib,
      _modeFromConfig$radio = modeFromConfig.radioGroupProps,
      radioGroupPropsForMode = _modeFromConfig$radio === void 0 ? {} : _modeFromConfig$radio;
  var _yearFromConfig$visib = yearFromConfig.visible,
      visibleForYear = _yearFromConfig$visib === void 0 ? true : _yearFromConfig$visib,
      _yearFromConfig$selec = yearFromConfig.selectProps,
      selectPropsForYear = _yearFromConfig$selec === void 0 ? {} : _yearFromConfig$selec;
  var _monthFromConfig$visi = monthFromConfig.visible,
      visibleForMonth = _monthFromConfig$visi === void 0 ? true : _monthFromConfig$visi,
      _monthFromConfig$sele = monthFromConfig.selectProps,
      selectPropsForMonth = _monthFromConfig$sele === void 0 ? {} : _monthFromConfig$sele;
  var _weekend$visible = weekend.visible,
      visibleForWeekendToggle = _weekend$visible === void 0 ? true : _weekend$visible,
      _weekend$showWeekendB = weekend.showWeekendButtonProps,
      showWeekendButtonProps = _weekend$showWeekendB === void 0 ? {} : _weekend$showWeekendB,
      _weekend$hideWeekendB = weekend.hideWeekendButtonProps,
      hideWeekendButtonProps = _weekend$hideWeekendB === void 0 ? {} : _weekend$hideWeekendB;
  var _current$visible = current.visible,
      visibleForCurrent = _current$visible === void 0 ? true : _current$visible,
      _current$currentDayBu = current.currentDayButtonProps,
      currentDayButtonProps = _current$currentDayBu === void 0 ? {} : _current$currentDayBu,
      _current$currentMonth = current.currentMonthButtonProps,
      currentMonthButtonProps = _current$currentMonth === void 0 ? {} : _current$currentMonth;

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var _useState = useState("month"),
      _useState2 = _slicedToArray(_useState, 2),
      mode = _useState2[0],
      setMode = _useState2[1];

  var _useState3 = useState(dayjs(valueFromProps || dayjs().format("YYYY-MM-DD"))),
      _useState4 = _slicedToArray(_useState3, 2),
      value = _useState4[0],
      setValue = _useState4[1];

  var _useState5 = useState(value.year()),
      _useState6 = _slicedToArray(_useState5, 2),
      year = _useState6[0],
      setYearState = _useState6[1];

  var _useState7 = useState(parseInt(value.format("M"), 10)),
      _useState8 = _slicedToArray(_useState7, 2),
      month = _useState8[0],
      setMonthState = _useState8[1];

  var _useState9 = useState(isShowWeekendDefault),
      _useState10 = _slicedToArray(_useState9, 2),
      isShowWeekend = _useState10[0],
      setIsShowWeekend = _useState10[1];

  var _useLocaleReceiver = useLocaleReceiver("calendar"),
      _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
      local = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];

  var setMonth = useCallback(function (newMonth) {
    setMonthState(newMonth);
    onMonthChange({
      month: String(newMonth),
      year: String(year)
    });
  }, [onMonthChange, year]);

  var setYear = function setYear(newYear) {
    setYearState(newYear);
  };

  var weekLabelList = t(local.week).split(",");
  var colHeaderList = useMemo(function () {
    if (mode === "year") return [];
    var weekTextArr = Array.isArray(week) && week.length >= 7 ? week : _toConsumableArray(weekLabelList);
    var list = [];

    for (var i = firstDayOfWeek; i <= 7; i++) {
      if (!isShowWeekend && i > 5) {
        break;
      }

      list.push({
        day: i,
        text: weekTextArr[i - 1]
      });
    }

    if (firstDayOfWeek > 1) {
      for (var _i = 1; _i < firstDayOfWeek; _i++) {
        if (!isShowWeekend && _i > 5) {
          break;
        }

        list.push({
          day: _i,
          text: weekTextArr[_i - 1]
        });
      }
    }

    return list;
  }, [mode, firstDayOfWeek, isShowWeekend, week, weekLabelList]);
  var rangeFromTo = useMemo(function () {
    if (!range || range.length < 2) {
      return null;
    }

    var _range = _slicedToArray(range, 2),
        v1 = _range[0],
        v2 = _range[1];

    if (dayjs(v1).isBefore(dayjs(v2))) {
      return {
        from: v1,
        to: v2
      };
    }

    return {
      from: v2,
      to: v1
    };
  }, [range]);
  var controllerOptions = useMemo(function () {
    var dayJsFilterDate = dayjs("".concat(year, "-").concat(month));
    var re = {
      filterDate: dayJsFilterDate.toDate(),
      formattedFilterDate: dayJsFilterDate.format(format),
      mode: mode,
      isShowWeekend: isShowWeekend
    };
    return re;
  }, [isShowWeekend, mode, year, month, format]);

  var _useMemo = useMemo(function () {
    var isRangeValid = rangeFromTo && rangeFromTo.from && rangeFromTo.to;

    var checkMonthSelectorDisabled = function checkMonthSelectorDisabled(yearIn, monthIn) {
      if (isRangeValid) {
        var beginYear = dayjs(rangeFromTo.from).year();
        var endYear = dayjs(rangeFromTo.to).year();

        if (yearIn === beginYear) {
          var beginMon = parseInt(dayjs(rangeFromTo.from).format("M"), 10);
          return monthIn < beginMon;
        }

        if (yearIn === endYear) {
          var endMon = parseInt(dayjs(rangeFromTo.to).format("M"), 10);
          return monthIn > endMon;
        }
      }

      return false;
    };

    var yearList = [];
    var monthList2 = [];
    var yearBegin = isRangeValid ? dayjs(rangeFromTo.from).year() : Math.max(minYear, year - 10);
    var yearEnd = isRangeValid ? dayjs(rangeFromTo.to).year() : Math.max(minYear, year + 10);

    for (var i = yearBegin; i <= yearEnd; i++) {
      yearList.push({
        value: i,
        disabled: checkMonthSelectorDisabled(i, month)
      });
    }

    for (var _i2 = 1; _i2 <= 12; _i2++) {
      monthList2.push({
        value: _i2,
        disabled: checkMonthSelectorDisabled(year, _i2)
      });
    }

    return [yearList, monthList2];
  }, [rangeFromTo, year, month]),
      _useMemo2 = _slicedToArray(_useMemo, 2),
      yearSelectList = _useMemo2[0],
      monthSelectList = _useMemo2[1];

  var dateList = useMemo(function () {
    return createDateList(year, month, firstDayOfWeek, value, format);
  }, [year, month, firstDayOfWeek, format, value]);
  var monthList = useMemo(function () {
    return createMonthList(year, value, format);
  }, [year, value, format]);
  var prefixCls = useCallback(function () {
    var className2 = "";

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    args.forEach(function (item, index) {
      if (item && index > 0) className2 = className2.concat(" ");

      if (item instanceof Array) {
        var _item = _slicedToArray(item, 3),
            block = _item[0],
            element = _item[1],
            modifier = _item[2];

        className2 = className2.concat(classPrefix, "-", block);
        if (element) className2 = className2.concat("__", element);
        if (modifier) className2 = className2.concat("--", modifier);
      } else if (typeof item === "string") {
        className2 = className2.concat(classPrefix, "-", item);
      }
    });
    return className2;
  }, [classPrefix]);
  var createCalendarCell = useCallback(function (cellData) {
    return _objectSpread(_objectSpread({}, cellData), controllerOptions);
  }, [controllerOptions]);
  var toCurrent = useCallback(function () {
    var valueIn = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var now = dayjs(valueIn).isValid() ? dayjs(valueIn) : dayjs(dayjs().format("YYYY-MM-DD"));
    setValue(now);
    setYear(now.year());
    setMonth(parseInt(now.format("M"), 10));
  }, [setMonth]);
  React.useImperativeHandle(ref, function () {
    return {
      toCurrent: toCurrent
    };
  }, [toCurrent]);
  var execCellEvent = useCallback(function (event, calendarCell, handleFunc) {
    if (handleFunc && typeof handleFunc === "function") {
      handleFunc({
        cell: createCalendarCell(calendarCell),
        e: event
      });
    }
  }, [createCalendarCell]);
  var clickCell = useCallback(function (event, calendarCell) {
    setValue(dayjs(calendarCell.formattedDate));
    execCellEvent(event, calendarCell, onCellClick);
  }, [onCellClick, execCellEvent]);
  var doubleClickCell = useCallback(function (event, calendarCell) {
    execCellEvent(event, calendarCell, onCellDoubleClick);
  }, [onCellDoubleClick, execCellEvent]);
  var rightClickCell = useCallback(function (event, calendarCell) {
    if (preventCellContextmenu) event.preventDefault();
    execCellEvent(event, calendarCell, onCellRightClick);
  }, [onCellRightClick, execCellEvent, preventCellContextmenu]);
  useEffect(function () {
    toCurrent(valueFromProps);
  }, [valueFromProps, toCurrent]);
  useEffect(function () {
    setMode(modeFromProps);
  }, [modeFromProps]);
  useEffect(function () {
    setIsShowWeekend(isShowWeekendDefault);
  }, [isShowWeekendDefault]);
  useLayoutEffect(function () {
    onControllerChange(controllerOptions);
  }, [onControllerChange, controllerOptions]);
  var monthLabelList = t(local.cellMonth).split(",");

  var getMonthCN = function getMonthCN(month2) {
    return monthLabelList[month2];
  };

  var fix0 = function fix0(num) {
    var _ref;

    var fillZero = num < 10 && ((_ref = fillWithZero !== null && fillWithZero !== void 0 ? fillWithZero : local.fillWithZero) !== null && _ref !== void 0 ? _ref : true);
    return fillZero ? "0".concat(num) : num;
  };

  return /* @__PURE__ */React.createElement("div", {
    className: prefixCls(blockName, [blockName, "", theme]).concat(" ", className),
    style: style
  }, visible && /* @__PURE__ */React.createElement("div", {
    className: prefixCls([blockName, "control"])
  }, /* @__PURE__ */React.createElement("div", {
    className: prefixCls([blockName, "title"])
  }, function () {
    if (head && typeof head === "function") return head(controllerOptions);
    if (head && typeof head !== "function") return head;
  }()), /* @__PURE__ */React.createElement("div", {
    className: prefixCls([blockName, "control-section"])
  }, /* @__PURE__ */React.createElement("div", {
    className: prefixCls([blockName, "control-section-cell"])
  }, visibleForYear && /* @__PURE__ */React.createElement(Select, _objectSpread({
    size: controlSectionSize,
    disabled: disabled,
    value: year,
    options: yearSelectList.map(function (item) {
      return {
        label: t(local.yearSelection, {
          year: item.value
        }),
        value: item.value,
        disabled: item.disabled
      };
    }),
    onChange: function onChange(selectYear) {
      return setYear(selectYear);
    }
  }, selectPropsForYear))), /* @__PURE__ */React.createElement("div", {
    className: prefixCls([blockName, "control-section-cell"])
  }, visibleForMonth && mode === "month" && /* @__PURE__ */React.createElement(Select, _objectSpread({
    size: controlSectionSize,
    disabled: disabled,
    value: month,
    options: monthSelectList.map(function (item) {
      return {
        label: t(local.monthSelection, {
          month: item.value
        }),
        value: item.value,
        disabled: item.disabled
      };
    }),
    onChange: function onChange(selectMonth) {
      return setMonth(selectMonth);
    }
  }, selectPropsForMonth)))), /* @__PURE__ */React.createElement("div", {
    className: prefixCls([blockName, "control-section"]),
    style: {
      height: "auto"
    }
  }, visibleForMode && /* @__PURE__ */React.createElement(Radio.Group, _objectSpread({
    variant: "default-filled",
    size: controlSectionSize,
    value: mode,
    disabled: disabled,
    onChange: function onChange(value2) {
      return setMode(value2);
    }
  }, radioGroupPropsForMode), /* @__PURE__ */React.createElement(Radio.Button, {
    value: "month"
  }, t(local.monthRadio)), /* @__PURE__ */React.createElement(Radio.Button, {
    value: "year"
  }, t(local.yearRadio)))), mode === "month" && theme === "full" && visibleForWeekendToggle && /* @__PURE__ */React.createElement("div", {
    className: prefixCls([blockName, "control-section"])
  }, /* @__PURE__ */React.createElement(CheckTag, _objectSpread({
    className: "t-calendar__control-tag",
    theme: isShowWeekend ? "default" : "primary",
    size: controlSectionSize,
    disabled: disabled,
    onClick: function onClick() {
      setIsShowWeekend(!isShowWeekend);
    }
  }, isShowWeekend ? hideWeekendButtonProps : showWeekendButtonProps), "".concat(isShowWeekend ? t(local.hideWeekend) : t(local.showWeekend)))), theme === "full" && visibleForCurrent && /* @__PURE__ */React.createElement("div", {
    className: prefixCls([blockName, "control-section"])
  }, /* @__PURE__ */React.createElement(Button, _objectSpread({
    size: controlSectionSize,
    disabled: disabled,
    onClick: toCurrent
  }, mode === "year" ? currentMonthButtonProps : currentDayButtonProps), mode === "year" ? t(local.thisMonth) : t(local.today)))), /* @__PURE__ */React.createElement("div", {
    className: prefixCls([blockName, "panel"], [blockName, "panel--".concat(mode)])
  }, /* @__PURE__ */React.createElement("table", {
    className: prefixCls([blockName, "table"])
  }, colHeaderList.length > 0 && /* @__PURE__ */React.createElement("thead", {
    className: prefixCls([blockName, "table-head"])
  }, /* @__PURE__ */React.createElement("tr", {
    className: prefixCls([blockName, "table-head-row"])
  }, colHeaderList.map(function (item) {
    return /* @__PURE__ */React.createElement("th", {
      key: item.day,
      className: prefixCls([blockName, "table-head-cell"])
    }, week && typeof week === "function" ? week({
      day: item.day
    }) : item.text);
  }))), mode === "month" && /* @__PURE__ */React.createElement("tbody", {
    className: prefixCls([blockName, "table-body"])
  }, dateList.map(function (dateRow, dateRowIndex) {
    return /* @__PURE__ */React.createElement("tr", {
      key: String(dateRowIndex),
      className: prefixCls([blockName, "table-body-row"])
    }, dateRow.map(function (dateCell, dateCellIndex) {
      if (!isShowWeekend && [6, 7].indexOf(dateCell.day) >= 0) return null;
      var isNow = dateCell.formattedDate === dayjs().format("YYYY-MM-DD");
      return /* @__PURE__ */React.createElement("td", {
        key: String(dateCellIndex),
        className: prefixCls([blockName, "table-body-cell"], dateCell.belongTo !== 0 && "is-disabled", dateCell.isCurrent && "is-checked", isNow && "is-now"),
        onClick: function onClick(event) {
          return clickCell(event, dateCell);
        },
        onDoubleClick: function onDoubleClick(event) {
          return doubleClickCell(event, dateCell);
        },
        onContextMenu: function onContextMenu(event) {
          return rightClickCell(event, dateCell);
        }
      }, function () {
        if (cell && typeof cell === "function") return cell(createCalendarCell(dateCell));
        if (cell && typeof cell !== "function") return cell;
        return /* @__PURE__ */React.createElement("div", {
          className: prefixCls([blockName, "table-body-cell-display"])
        }, fix0(dateCell.date.getDate()));
      }(), function () {
        var celAppend;
        if (cellAppend && typeof cellAppend === "function") celAppend = cellAppend(createCalendarCell(dateCell));
        if (cellAppend && typeof cellAppend !== "function") celAppend = cellAppend;
        return cellAppend && /* @__PURE__ */React.createElement("div", {
          className: prefixCls([blockName, "table-body-cell-content"])
        }, celAppend);
      }());
    }));
  })), mode === "year" && /* @__PURE__ */React.createElement("tbody", {
    className: prefixCls([blockName, "table-body"])
  }, monthList.map(function (monthRow, monthRowIndex) {
    return /* @__PURE__ */React.createElement("tr", {
      key: String(monthRowIndex),
      className: prefixCls([blockName, "table-body-row"])
    }, monthRow.map(function (monthCell, monthCellIndex) {
      var isNow = new Date().getMonth() === monthCell.date.getMonth();
      return /* @__PURE__ */React.createElement("td", {
        key: String(monthCellIndex),
        className: prefixCls([blockName, "table-body-cell"], [monthCell.isCurrent && "is-checked"], [isNow && "calendar__table-body-cell--now"]),
        onClick: function onClick(event) {
          return clickCell(event, monthCell);
        },
        onDoubleClick: function onDoubleClick(event) {
          return doubleClickCell(event, monthCell);
        },
        onContextMenu: function onContextMenu(event) {
          return rightClickCell(event, monthCell);
        }
      }, function () {
        if (cell && typeof cell === "function") return cell(monthCell);
        if (cell && typeof cell !== "function") return cell;
        var monthCellIndex2 = monthCell.date.getMonth();
        var monthText = theme === "full" ? getMonthCN(monthCellIndex2) : t(local.monthSelection, {
          month: (monthCellIndex2 + 1).toString()
        });
        return /* @__PURE__ */React.createElement("div", {
          className: prefixCls([blockName, "table-body-cell-value"])
        }, monthText);
      }(), function () {
        if (cellAppend && typeof cellAppend === "function") {
          return cellAppend(monthCell);
        }

        if (cellAppend && typeof cellAppend !== "function") return cellAppend;
        return /* @__PURE__ */React.createElement("div", {
          className: prefixCls([blockName, "table-body-cell-content"])
        });
      }());
    }));
  })))));
});

export { Calendar as default };
//# sourceMappingURL=Calendar.js.map
