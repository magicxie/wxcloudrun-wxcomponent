/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-9332bbea.js';
import { _ as _slicedToArray } from '../_chunks/dep-93971e86.js';
import React, { useRef, useState, useEffect } from 'react';
import { i as isObject_1 } from '../_chunks/dep-a764e3bd.js';
import { c as commonjsGlobal } from '../_chunks/dep-ab1e2688.js';
import { _ as _baseGetTag } from '../_chunks/dep-aa2bff1b.js';
import { i as isObjectLike_1 } from '../_chunks/dep-312619d6.js';
import { _ as _baseUnary } from '../_chunks/dep-55e3e3e3.js';
import { _ as _nodeUtil } from '../_chunks/dep-7daf07a9.js';
import { i as isArray_1 } from '../_chunks/dep-897ce04d.js';
import { i as isString_1 } from '../_chunks/dep-3853103d.js';
import dayjs from 'dayjs';
import classNames from 'classnames';
import { TimeIcon, CalendarIcon } from 'tdesign-icons-react';
import { useLocaleReceiver } from '../locale/LocalReceiver.js';
import useConfig from '../_util/useConfig.js';
import useCommonClassName from '../_util/useCommonClassName.js';
import useClickOutside from '../_util/useClickOutside.js';
import { Popup } from '../popup/index.js';
import { Input } from '../input/index.js';
import { Button } from '../button/index.js';
import CalendarPresets from './base/CalendarPresets.js';
import DatePanel from './panel/Date.js';
import DateRangePanel from './panel/DateRange.js';
import TimePickerPanel$1 from '../time-picker/panel/TimePickerPanel.js';
import TimePickerPanel from '../time-picker/panel/TimePickerRangePanel.js';
import '../_chunks/dep-beac373a.js';
import '../_chunks/dep-156c830d.js';
import '../_chunks/dep-2eff142e.js';
import '../config-provider/index.js';
import '../config-provider/ConfigProvider.js';
import '../_chunks/dep-27d690ce.js';
import '../config-provider/ConfigContext.js';
import '../locale/zh_CN.js';
import '../popup/Popup.js';
import 'react-transition-group';
import 'react-popper';
import '../_util/useDefault.js';
import '../_util/noop.js';
import '../_util/composeRefs.js';
import '../_util/usePrevious.js';
import '../popup/Portal.js';
import 'react-dom';
import '../popup/hooks/useTriggerProps.js';
import '../popup/hooks/usePopupCssTransition.js';
import './style/css.js';
import '../popup/type.js';
import '../input/Input.js';
import '../_chunks/dep-25536592.js';
import '../_chunks/dep-d098d908.js';
import '../_util/forwardRefWithStatics.js';
import 'hoist-non-react-statics';
import '../input/InputGroup.js';
import '../_util/useDefaultValue.js';
import '../input/type.js';
import '../button/Button.js';
import '../_util/useRipple.js';
import '../_util/setStyle.js';
import '../loading/index.js';
import '../loading/loading.js';
import '../_util/dom.js';
import 'raf';
import '../_util/easing.js';
import '../common/Portal.js';
import '../loading/gradient.js';
import '../loading/type.js';
import '../loading/plugin.js';
import '../button/type.js';
import './base/Header.js';
import './base/Table.js';
import './base/Cell.js';
import './utils.js';
import '../_chunks/dep-ab9c749e.js';
import '../_chunks/dep-ea69dcf8.js';
import '../_chunks/dep-6bae5139.js';
import '../_chunks/dep-0de37580.js';
import '../_chunks/dep-b8263a1c.js';
import '../_chunks/dep-8309e373.js';
import '../_chunks/dep-14692160.js';
import '../_chunks/dep-f88db21e.js';
import '../_chunks/dep-028895a6.js';
import '../_chunks/dep-cac5f189.js';
import '../_chunks/dep-95c9ff5b.js';
import '../time-picker/panel/SinglePanel.js';
import '../_chunks/dep-9e88086c.js';
import '../_chunks/dep-8dc257e5.js';
import '../_chunks/dep-44c00646.js';
import '../_chunks/dep-304ab091.js';
import '../_chunks/dep-8bccb9b0.js';
import '../time-picker/interfaces.js';
import '../time-picker/consts.js';

var baseGetTag = _baseGetTag,
    isObjectLike = isObjectLike_1;
/** `Object#toString` result references. */

var dateTag = '[object Date]';
/**
 * The base implementation of `_.isDate` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
 */

function baseIsDate$1(value) {
  return isObjectLike(value) && baseGetTag(value) == dateTag;
}

var _baseIsDate = baseIsDate$1;

var baseIsDate = _baseIsDate,
    baseUnary = _baseUnary,
    nodeUtil = _nodeUtil.exports;
/* Node.js helper references. */

var nodeIsDate = nodeUtil && nodeUtil.isDate;
/**
 * Checks if `value` is classified as a `Date` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
 * @example
 *
 * _.isDate(new Date);
 * // => true
 *
 * _.isDate('Mon April 23 2012');
 * // => false
 */

var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
var isDate_1 = isDate;

var isBetween$1 = {exports: {}};

(function (module, exports) {
  !function (e, t) {
    "object" == 'object' && "undefined" != 'object' ? module.exports = t() : "function" == typeof undefined && undefined.amd ? undefined(t) : e.dayjs_plugin_isBetween = t();
  }(commonjsGlobal, function () {
    "use strict";

    return function (e, t, i) {
      t.prototype.isBetween = function (e, t, s, f) {
        var n = i(e),
            o = i(t),
            r = "(" === (f = f || "()")[0],
            u = ")" === f[1];
        return (r ? this.isAfter(n, s) : !this.isBefore(n, s)) && (u ? this.isBefore(o, s) : !this.isAfter(o, s)) || (r ? this.isBefore(n, s) : !this.isAfter(n, s)) && (u ? this.isAfter(o, s) : !this.isBefore(o, s));
      };
    };
  });
})(isBetween$1, isBetween$1.exports);

var isBetween = isBetween$1.exports;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
dayjs.extend(isBetween);
var TIME_FORMAT = "HH:mm:ss";

var DatePicker = function DatePicker(props) {
  var className = props.className,
      style = props.style,
      allowInput = props.allowInput,
      clearable = props.clearable,
      disabled = props.disabled,
      disableDate = props.disableDate,
      enableTimePicker = props.enableTimePicker,
      format = props.format,
      inputProps = props.inputProps,
      mode = props.mode,
      popupProps = props.popupProps,
      prefixIcon = props.prefixIcon,
      presets = props.presets,
      range = props.range,
      size = props.size,
      suffixIcon = props.suffixIcon,
      value = props.value,
      defaultValue = props.defaultValue,
      firstDayOfWeek = props.firstDayOfWeek,
      onChange = props.onChange;

  var _useLocaleReceiver = useLocaleReceiver("datePicker"),
      _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
      local = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];

  var selectTimeText = t(local.selectTime);
  var selectDateText = t(local.selectDate);
  var confirmText = t(local.confirm);
  var rangeSeparatorText = t(local.rangeSeparator);
  var placeholder = t(local.placeholder[mode]);

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var CLASSNAMES = useCommonClassName();
  var datePickerRef = useRef(null);
  var dropdownPopupRef = useRef(null);
  var inputRef = useRef(null);

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      popupShow = _useState2[0],
      setPopupShow = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      timePanelShow = _useState4[0],
      setTimePanelShow = _useState4[1];

  var _useState5 = useState(""),
      _useState6 = _slicedToArray(_useState5, 2),
      timeValue = _useState6[0],
      setTimeValue = _useState6[1];

  var _useState7 = useState([]),
      _useState8 = _slicedToArray(_useState7, 2),
      timeRangeValue = _useState8[0],
      setTimeRangeValue = _useState8[1];

  var _useState9 = useState(new Date()),
      _useState10 = _slicedToArray(_useState9, 2),
      start = _useState10[0],
      setStart = _useState10[1];

  var _useState11 = useState(new Date()),
      _useState12 = _slicedToArray(_useState11, 2),
      end = _useState12[0],
      setEnd = _useState12[1];

  var _useState13 = useState(""),
      _useState14 = _slicedToArray(_useState13, 2),
      formattedValue = _useState14[0],
      setFormattedValue = _useState14[1];

  var _useState15 = useState([]),
      _useState16 = _slicedToArray(_useState15, 2),
      selectedDates = _useState16[0],
      setSelectedDates = _useState16[1];

  var isControlled = typeof value !== "undefined";

  function isValidDate(date) {
    if (isArray_1(date) && isDate_1(new Date(date[0])) && isDate_1(new Date(date[1]))) return true;
    if (isString_1(date) && isDate_1(new Date(date))) return true;
    return false;
  }

  function initDatePicker() {
    var val = value || defaultValue;

    if (val && isValidDate(val)) {
      var startVal = range ? new Date(val[0]) : new Date(val);
      var endVal = range ? new Date(val[1]) : new Date(val);
      setStart(startVal);
      setEnd(endVal);
      setTimeValue(dayjs(startVal).format(TIME_FORMAT));
      setTimeRangeValue([dayjs(startVal).format(TIME_FORMAT), dayjs(endVal).format(TIME_FORMAT)]);
      setSelectedDates(range ? [val[0], val[1]] : [val]);
    }
  }

  useClickOutside([datePickerRef, dropdownPopupRef], function () {
    close();
  });
  useEffect(function () {
    initDatePicker();
  }, []);
  useEffect(function () {
    updateFormatValue();
  }, [selectedDates, value]);

  function updateFormatValue() {
    var dates = selectedDates;

    if (isControlled) {
      if (Array.isArray(value)) {
        dates = value.map(function (d) {
          return d ? new Date(d) : new Date();
        });
      } else {
        dates = value ? [new Date(value)] : [];
      }
    }

    var selectedFmtDates = dates.map(function (d) {
      return formatDate(d);
    });
    var pickerMode = mode;
    if (range) pickerMode = "range";
    var nextValue = "";

    switch (pickerMode) {
      case "date":
      case "month":
      case "year":
        dates[0] && setStart(new Date(dates[0]));
        nextValue = selectedFmtDates.join("");
        break;

      case "range":
        if (selectedFmtDates.length > 1) {
          setStart(new Date(dates[0]));
          setEnd(new Date(dates[1]));
          nextValue = [selectedFmtDates[0], selectedFmtDates[1]].join(rangeSeparatorText);
        }

        break;
    }

    setFormattedValue(nextValue);
  }

  function showPopup() {
    if (disabled) return;
    setPopupShow(true);
  }

  function formatDate(date) {
    var dateFormat = format || "";
    var arrTime = ["H", "h", "m", "s"];
    var hasTime = arrTime.some(function (f) {
      return String(dateFormat).includes(f);
    });

    if (enableTimePicker && !hasTime) {
      dateFormat = [dateFormat, TIME_FORMAT].join(" ");
    }

    var d1 = new Date(date);
    return dayjs(d1).format(dateFormat);
  }

  function close() {
    if (disabled) return;
    setPopupShow(false);
    setTimePanelShow(false);
  }

  function handleClear(_ref) {
    var e = _ref.e;
    e.stopPropagation();
    close();

    if (!disabled) {
      setStart(new Date());
      setEnd(new Date());
      setSelectedDates([]);
      setFormattedValue("");
      setTimeValue("00:00:00");
      setTimeRangeValue(["00:00:00", "00:00:00"]);
      submitInput([], true);
    }
  }

  function submitInput(selectedDates2) {
    var triggerChange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var pickerMode = range ? "range" : mode;

    switch (pickerMode) {
      case "date":
      case "month":
      case "year":
        triggerChange && (onChange === null || onChange === void 0 ? void 0 : onChange(selectedDates2[0]));
        break;

      case "range":
        triggerChange && (onChange === null || onChange === void 0 ? void 0 : onChange(selectedDates2));
        break;
    }
  }

  function clickRange(value2) {
    var nextDates = [];

    if (Array.isArray(value2)) {
      nextDates.push.apply(nextDates, [dayjs(value2[0]).toDate(), dayjs(value2[1]).toDate()]);
      setStart(nextDates[0]);
      setEnd(nextDates[1]);
    } else {
      nextDates.push(dayjs(value2).toDate());
      setStart(nextDates[0]);
      setEnd(nextDates[0]);
    }

    setSelectedDates(nextDates);
    clickedApply(!enableTimePicker, nextDates);
  }

  function clickedApply() {
    var closePicker = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    var nextDates = arguments.length > 1 ? arguments[1] : undefined;
    var dates = nextDates || selectedDates;
    submitInput(dates.map(function (d) {
      return formatDate(d);
    }), true);
    closePicker && close();
  }

  function toggleTime() {
    setTimeValue(dayjs(start).format(TIME_FORMAT));
    setTimeRangeValue([dayjs(start).format(TIME_FORMAT), dayjs(end).format(TIME_FORMAT)]);
    setTimePanelShow(!timePanelShow);
  }

  function handleTimePick(value2) {
    if (Array.isArray(value2)) {
      var _value = _slicedToArray(value2, 2),
          startTime = _value[0],
          endTime = _value[1];

      var _startTime$split = startTime.split(":"),
          _startTime$split2 = _slicedToArray(_startTime$split, 3),
          startHour = _startTime$split2[0],
          startMinute = _startTime$split2[1],
          startSecond = _startTime$split2[2];

      var startDate = new Date(start);
      startDate.setHours(startHour);
      startDate.setMinutes(startMinute);
      startDate.setSeconds(startSecond);

      var _endTime$split = endTime.split(":"),
          _endTime$split2 = _slicedToArray(_endTime$split, 3),
          endHour = _endTime$split2[0],
          endMinute = _endTime$split2[1],
          endSecond = _endTime$split2[2];

      var endDate = new Date(end);
      endDate.setHours(endHour);
      endDate.setMinutes(endMinute);
      endDate.setSeconds(endSecond);
      setTimeRangeValue(value2);
      clickRange([startDate, endDate]);
    } else {
      var _value2$split = value2.split(":"),
          _value2$split2 = _slicedToArray(_value2$split, 3),
          hour = _value2$split2[0],
          minute = _value2$split2[1],
          second = _value2$split2[2];

      var _startDate = new Date(start);

      _startDate.setHours(hour);

      _startDate.setMinutes(minute);

      _startDate.setSeconds(second);

      setTimeValue(value2);
      dateClick(_startDate);
    }
  }

  function dateClick(value2) {
    var pickerMode = mode;
    if (range) pickerMode = "range";

    switch (pickerMode) {
      case "year":
      case "month":
      case "date":
        {
          if (value2 instanceof Date) {
            if (!isControlled) {
              setStart(value2);
              setEnd(value2);
            }

            setSelectedDates([value2]);
            clickedApply(!enableTimePicker, [value2]);
          }

          break;
        }

      case "range":
        {
          if (Array.isArray(value2)) {
            if (!isControlled) {
              setStart(value2[0]);
              setEnd(value2[1]);
            }

            setSelectedDates(value2);
            clickedApply(!enableTimePicker, value2);
          }

          break;
        }
    }
  }

  function isEnabled(value2) {
    if (!disableDate) return true;
    var isEnabled2 = true;

    if (typeof disableDate === "function") {
      return !disableDate(value2);
    }

    if (Array.isArray(disableDate)) {
      var isIncludes = false;
      var formatedDisabledDate = disableDate.map(function (item) {
        return dayjs(item, format);
      });
      formatedDisabledDate.forEach(function (item) {
        if (item.isSame(dayjs(value2))) {
          isIncludes = true;
        }
      });
      return !isIncludes;
    }

    var from = disableDate.from,
        to = disableDate.to,
        before = disableDate.before,
        after = disableDate.after;

    if (from && to) {
      var compareMin = dayjs(new Date(from));
      var compareMax = dayjs(new Date(to));
      return !dayjs(value2).isBetween(compareMin, compareMax, mode, "[]");
    }

    var min = before ? new Date(before) : null;
    var max = after ? new Date(after) : null;

    if (max && min) {
      var _compareMin = dayjs(new Date(min));

      var _compareMax = dayjs(new Date(max));

      isEnabled2 = dayjs(value2).isBetween(_compareMin, _compareMax, mode, "[]");
    } else if (min) {
      var _compareMin2 = dayjs(new Date(min));

      isEnabled2 = !dayjs(value2).isBefore(_compareMin2, mode);
    } else if (max) {
      var _compareMax2 = dayjs(new Date(max));

      isEnabled2 = !dayjs(value2).isAfter(_compareMax2, mode);
    }

    return isEnabled2;
  }

  function renderContent() {
    var _classNames;

    var pickerStyles = classNames("".concat(classPrefix, "-date-picker__container"), (_classNames = {}, _defineProperty(_classNames, "".concat(classPrefix, "-date-picker--open"), popupShow), _defineProperty(_classNames, "".concat(classPrefix, "-date-picker--range"), range), _classNames));
    var panelProps = {
      mode: mode,
      firstDayOfWeek: firstDayOfWeek === void 0 ? 1 : firstDayOfWeek,
      onChange: dateClick,
      disableDate: function disableDate(d) {
        return !isEnabled(d);
      },
      minDate: isObject_1(disableDate) && "before" in disableDate ? new Date(disableDate.before) : null,
      maxDate: isObject_1(disableDate) && "after" in disableDate ? new Date(disableDate.after) : null
    };
    var panelComponent = range ? /* @__PURE__ */React.createElement(DateRangePanel, _objectSpread(_objectSpread({}, panelProps), {}, {
      value: [start, end]
    })) : /* @__PURE__ */React.createElement(DatePanel, _objectSpread(_objectSpread({}, panelProps), {}, {
      value: start
    }));
    var timepickerComponent = range ? /* @__PURE__ */React.createElement(TimePickerPanel, {
      value: timeRangeValue,
      onChange: handleTimePick
    }) : /* @__PURE__ */React.createElement(TimePickerPanel$1, {
      value: timeValue,
      onChange: handleTimePick
    });
    return /* @__PURE__ */React.createElement("div", {
      ref: dropdownPopupRef,
      className: pickerStyles
    }, enableTimePicker && timePanelShow && /* @__PURE__ */React.createElement("div", null, timepickerComponent), !timePanelShow && panelComponent, (!!presets || enableTimePicker) && /* @__PURE__ */React.createElement("div", {
      className: "".concat(classPrefix, "-date-picker__footer")
    }, /* @__PURE__ */React.createElement(CalendarPresets, {
      presets: presets,
      onClickRange: clickRange
    }), enableTimePicker && /* @__PURE__ */React.createElement("div", {
      className: "".concat(classPrefix, "-date-picker--apply")
    }, enableTimePicker && /* @__PURE__ */React.createElement(Button, {
      theme: "primary",
      variant: "text",
      onClick: toggleTime
    }, timePanelShow ? selectDateText : selectTimeText), /* @__PURE__ */React.createElement(Button, {
      theme: "primary",
      onClick: function onClick() {
        return clickedApply(true);
      }
    }, confirmText))));
  }

  var triggerClassName = classNames("".concat(classPrefix, "-form-controls"), _defineProperty({}, CLASSNAMES.STATUS.active, popupShow));
  var defaultSuffixIcon = enableTimePicker ? /* @__PURE__ */React.createElement(TimeIcon, null) : /* @__PURE__ */React.createElement(CalendarIcon, null);
  var datePickerClassName = classNames("".concat(classPrefix, "-date-picker"), className, CLASSNAMES.SIZE[size], _defineProperty({}, "".concat(classPrefix, "-date-picker--month-picker"), mode === "year" || mode === "month"));
  return /* @__PURE__ */React.createElement("div", {
    className: datePickerClassName,
    ref: datePickerRef,
    style: style
  }, /* @__PURE__ */React.createElement(Popup, _objectSpread({
    trigger: "context-menu",
    placement: "bottom-left",
    visible: popupShow,
    content: renderContent(),
    overlayClassName: "".concat(classPrefix, "-date-picker"),
    className: "".concat(classPrefix, "-date-picker__popup-reference"),
    expandAnimation: true,
    destroyOnClose: true
  }, popupProps), /* @__PURE__ */React.createElement("div", {
    className: triggerClassName,
    onClick: showPopup
  }, /* @__PURE__ */React.createElement(Input, _objectSpread({
    ref: inputRef,
    size: size,
    value: formattedValue,
    disabled: disabled,
    clearable: clearable,
    placeholder: placeholder,
    readonly: !allowInput,
    onClear: handleClear,
    prefixIcon: prefixIcon,
    suffixIcon: suffixIcon || defaultSuffixIcon
  }, inputProps)))));
};

DatePicker.displayName = "DatePicker";
DatePicker.defaultProps = {
  format: "YYYY-MM-DD",
  mode: "month",
  placeholder: "\u8BF7\u9009\u62E9",
  size: "medium"
};

export { DatePicker as default };
//# sourceMappingURL=DatePicker.js.map
