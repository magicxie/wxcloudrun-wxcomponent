/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-9332bbea.js';
import React, { useRef, useLayoutEffect, useEffect } from 'react';
import { CSSTransition } from 'react-transition-group';
import classNames from 'classnames';
import Portal from '../common/Portal.js';
import noop from '../_util/noop.js';
import '../_chunks/dep-93971e86.js';
import '../_chunks/dep-beac373a.js';
import '../_chunks/dep-156c830d.js';
import 'react-dom';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var KeyCode = /* @__PURE__ */function (KeyCode2) {
  KeyCode2[KeyCode2["ESC"] = 27] = "ESC";
  return KeyCode2;
}(KeyCode || {});

var transitionTime = 300;
var mousePosition;

var getClickPosition = function getClickPosition(e) {
  mousePosition = {
    x: e.clientX,
    y: e.clientY
  };
  setTimeout(function () {
    mousePosition = null;
  }, 100);
};

if (typeof window !== "undefined" && window.document && window.document.documentElement) {
  document.documentElement.addEventListener("click", getClickPosition, true);
}

var RenderDialog = function RenderDialog(props) {
  var prefixCls = props.prefixCls,
      getContainer = props.getContainer,
      visible = props.visible,
      mode = props.mode,
      zIndex = props.zIndex,
      showOverlay = props.showOverlay,
      _props$onEscKeydown = props.onEscKeydown,
      onEscKeydown = _props$onEscKeydown === void 0 ? noop : _props$onEscKeydown,
      _props$onClosed = props.onClosed,
      onClosed = _props$onClosed === void 0 ? noop : _props$onClosed,
      _props$onClose = props.onClose,
      onClose = _props$onClose === void 0 ? noop : _props$onClose,
      _props$onCloseBtnClic = props.onCloseBtnClick,
      onCloseBtnClick = _props$onCloseBtnClic === void 0 ? noop : _props$onCloseBtnClic,
      _props$onOverlayClick = props.onOverlayClick,
      onOverlayClick = _props$onOverlayClick === void 0 ? noop : _props$onOverlayClick,
      preventScrollThrough = props.preventScrollThrough,
      closeBtn = props.closeBtn;
  var wrap = useRef();
  var dialog = useRef();
  var maskRef = useRef();
  var bodyOverflow = useRef(document.body.style.overflow);
  var bodyCssTextRef = useRef(document.body.style.cssText);
  var isModal = mode === "modal";
  var canDraggable = props.draggable && mode === "modeless";
  useLayoutEffect(function () {
    if (visible) {
      if (isModal && bodyOverflow.current !== "hidden" && preventScrollThrough) {
        var scrollWidth = window.innerWidth - document.body.offsetWidth;

        if (bodyCssTextRef.current === "") {
          var bodyCssText = "overflow: hidden;";

          if (scrollWidth > 0) {
            bodyCssText += "position: relative;width: calc(100% - ".concat(scrollWidth, "px);");
          }

          document.body.style.cssText = bodyCssText;
        } else {
          if (scrollWidth > 0) {
            document.body.style.width = "calc(100% - ".concat(scrollWidth, "px)");
            document.body.style.position = "relative";
          }

          document.body.style.overflow = "hidden";
        }
      }

      if (wrap.current) {
        wrap.current.focus();
      }
    } else if (isModal) {
      document.body.style.cssText = bodyCssTextRef.current;
    }
  }, [preventScrollThrough, getContainer, visible, mode, isModal]);
  useEffect(function () {
    if (visible) {
      if (mousePosition && dialog.current) {
        dialog.current.style.transformOrigin = "".concat(mousePosition.x - dialog.current.offsetLeft, "px ").concat(mousePosition.y - dialog.current.offsetTop, "px");
      }
    }
  }, [visible]);

  var onAnimateLeave = function onAnimateLeave() {
    if (wrap.current) {
      wrap.current.style.display = "none";
    }

    if (isModal && preventScrollThrough) {
      isModal && (document.body.style.overflow = bodyOverflow.current);
    }

    if (!isModal) {
      var style = dialog.current.style;
      style.left = "50%";
      style.top = "50%";
    }

    onClosed && onClosed();
  };

  var onMaskClick = function onMaskClick(e) {
    if (e.target === e.currentTarget) {
      onOverlayClick({
        e: e
      });
      onClose({
        e: e,
        trigger: "overlay"
      });
    }
  };

  var handleCloseBtnClick = function handleCloseBtnClick(e) {
    onCloseBtnClick({
      e: e
    });
    onClose({
      e: e,
      trigger: "close-btn"
    });
  };

  var handleKeyDown = function handleKeyDown(e) {
    if (+e.code === 27
    /* ESC */
    || e.keyCode === 27
    /* ESC */
    ) {
      e.stopPropagation();
      onEscKeydown({
        e: e
      });
      onClose({
        e: e,
        trigger: "esc"
      });
    }
  };

  var renderDialog = function renderDialog(classNames$1) {
    var dest = {};

    if (props.width !== void 0) {
      dest.width = props.width;
    }

    var footer = props.footer ? /* @__PURE__ */React.createElement("div", {
      className: "".concat(prefixCls, "__footer")
    }, props.footer) : null;
    var header = /* @__PURE__ */React.createElement("div", {
      className: "".concat(prefixCls, "__header")
    }, props.header);
    var body = /* @__PURE__ */React.createElement("div", {
      className: "".concat(prefixCls, "__body")
    }, props.body || props.children);
    var closer = closeBtn && /* @__PURE__ */React.createElement("span", {
      onClick: handleCloseBtnClick,
      className: "".concat(prefixCls, "__close")
    }, closeBtn);

    var style = _objectSpread(_objectSpread({}, dest), props.style);

    var dialogOffset = {
      x: 0,
      y: 0
    };

    var onDialogMove = function onDialogMove(e) {
      var _dialog$current = dialog.current,
          style2 = _dialog$current.style,
          offsetWidth = _dialog$current.offsetWidth,
          offsetHeight = _dialog$current.offsetHeight,
          clientHeight = _dialog$current.clientHeight,
          clientWidth = _dialog$current.clientWidth;
      var halfHeight = clientHeight / 2;
      var halfWidth = clientWidth / 2;
      var diffX = e.clientX - dialogOffset.x;
      var diffY = e.clientY - dialogOffset.y;

      if (diffX < halfWidth) {
        diffX = halfWidth;
      }

      if (diffX > window.innerWidth - offsetWidth + halfWidth) {
        diffX = window.innerWidth - offsetWidth + halfWidth;
      }

      if (diffY < halfHeight) {
        diffY = halfHeight;
      }

      if (diffY > window.innerHeight - offsetHeight + halfHeight) {
        diffY = window.innerHeight - offsetHeight + halfHeight;
      }

      style2.left = "".concat(diffX, "px");
      style2.top = "".concat(diffY, "px");
    };

    var onDialogMoveEnd = function onDialogMoveEnd() {
      dialog.current.style.cursor = "default";
      document.removeEventListener("mousemove", onDialogMove);
      document.removeEventListener("mouseup", onDialogMoveEnd);
    };

    var onDialogMoveStart = function onDialogMoveStart(e) {
      if (canDraggable) {
        var _dialog$current2 = dialog.current,
            offsetLeft = _dialog$current2.offsetLeft,
            offsetTop = _dialog$current2.offsetTop;
        dialog.current.style.cursor = "move";
        var diffX = e.clientX - offsetLeft;
        var diffY = e.clientY - offsetTop;
        dialogOffset = {
          x: diffX,
          y: diffY
        };
        document.addEventListener("mousemove", onDialogMove);
        document.addEventListener("mouseup", onDialogMoveEnd);
      }
    };

    var dialogElement = /* @__PURE__ */React.createElement("div", {
      ref: dialog,
      style: style,
      className: classNames("".concat(prefixCls), "".concat(prefixCls, "--default"), classNames$1),
      onMouseDown: onDialogMoveStart
    }, closer, header, body, footer);
    return /* @__PURE__ */React.createElement(CSSTransition, {
      key: "dialog",
      "in": props.visible,
      appear: true,
      mountOnEnter: true,
      unmountOnExit: props.destroyOnClose,
      timeout: transitionTime,
      classNames: "".concat(prefixCls, "-zoom"),
      onEntered: props.onOpened,
      onExited: onAnimateLeave,
      nodeRef: dialog
    }, dialogElement);
  };

  var renderMask = function renderMask() {
    var maskElement;

    if (showOverlay) {
      maskElement = /* @__PURE__ */React.createElement(CSSTransition, {
        "in": visible,
        appear: true,
        timeout: transitionTime,
        classNames: "".concat(prefixCls, "-dialog-fade"),
        mountOnEnter: true,
        unmountOnExit: true,
        key: "mask",
        nodeRef: maskRef
      }, /* @__PURE__ */React.createElement("div", {
        key: "mask",
        onClick: onMaskClick,
        className: "".concat(prefixCls, "__mask")
      }));
    }

    return maskElement;
  };

  var render = function render() {
    var style = {};

    if (visible) {
      style.display = "block";
    }

    var wrapStyle = _objectSpread(_objectSpread({}, style), {}, {
      zIndex: zIndex
    });

    var dialogBody = renderDialog("".concat(props.placement ? "".concat(prefixCls, "--").concat(props.placement) : ""));
    var wrapClass = classNames(props.className, "".concat(prefixCls, "__ctx"), "".concat(prefixCls, "__ctx--fixed"));
    var dialog2 = /* @__PURE__ */React.createElement("div", {
      ref: wrap,
      className: wrapClass,
      style: wrapStyle,
      onKeyDown: handleKeyDown
    }, mode === "modal" && renderMask(), dialogBody);
    var dom = null;

    if (visible || wrap.current) {
      if (getContainer === false) {
        dom = dialog2;
      } else {
        dom = /* @__PURE__ */React.createElement(Portal, {
          getContainer: getContainer
        }, dialog2);
      }
    }

    return dom;
  };

  return render();
};

export { RenderDialog as default };
//# sourceMappingURL=RenderDialog.js.map
