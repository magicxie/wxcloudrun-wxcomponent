/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _toConsumableArray } from '../_chunks/dep-124f91c5.js';
import { _ as _slicedToArray } from '../_chunks/dep-93971e86.js';
import React, { useState } from 'react';
import classNames from 'classnames';
import useConfig from '../_util/useConfig.js';
import DropdownItem from './DropdownItem.js';
import '../_chunks/dep-beac373a.js';
import '../config-provider/ConfigContext.js';
import '../locale/zh_CN.js';
import '../_chunks/dep-9332bbea.js';
import 'tdesign-icons-react';
import '../_util/useRipple.js';
import '../_util/setStyle.js';
import '../_util/helper.js';
import '../_chunks/dep-27d690ce.js';
import '../_chunks/dep-93bd2d05.js';
import '../_chunks/dep-ab1e2688.js';
import '../_chunks/dep-44c00646.js';
import '../_chunks/dep-aa2bff1b.js';
import '../_chunks/dep-156c830d.js';
import '../_chunks/dep-897ce04d.js';
import '../_chunks/dep-2eff142e.js';
import '../_chunks/dep-95c9ff5b.js';
import '../_chunks/dep-312619d6.js';
import '../_chunks/dep-304ab091.js';
import '../_chunks/dep-ea69dcf8.js';
import '../divider/index.js';
import '../divider/Divider.js';
import './style/css.js';
import '../divider/type.js';

var DropdownMenu = function DropdownMenu(props) {
  var _props$options = props.options,
      options = _props$options === void 0 ? [] : _props$options,
      _props$maxHeight = props.maxHeight,
      maxHeight = _props$maxHeight === void 0 ? 300 : _props$maxHeight,
      _props$maxColumnWidth = props.maxColumnWidth,
      maxColumnWidth = _props$maxColumnWidth === void 0 ? 100 : _props$maxColumnWidth,
      _props$minColumnWidth = props.minColumnWidth,
      minColumnWidth = _props$minColumnWidth === void 0 ? 10 : _props$minColumnWidth;

  var _useState = useState(""),
      _useState2 = _slicedToArray(_useState, 2),
      path = _useState2[0],
      setPath = _useState2[1];

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var dropdownMenuClass = "".concat(classPrefix, "-dropdown__menu");

  var isActive = function isActive(item, pathPrefix) {
    var excludeSelf = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    var itemPath = "".concat(pathPrefix, "/").concat(item.value);

    if (excludeSelf && path === itemPath) {
      return false;
    }

    return path.indexOf(itemPath) === 0;
  };

  var handleHoverItem = function handleHoverItem(path2) {
    setPath(path2);
  };

  var handleItemClick = function handleItemClick(data, context, idx) {
    var _options$idx, _options$idx$onClick;

    (_options$idx = options[idx]) === null || _options$idx === void 0 ? void 0 : (_options$idx$onClick = _options$idx.onClick) === null || _options$idx$onClick === void 0 ? void 0 : _options$idx$onClick.call(_options$idx, data, context);
    props.onClick(data, context);
  };

  var renderDropdownColumn = function renderDropdownColumn(children, showSubmenu, pathPrefix) {
    var menuClass = ["".concat(dropdownMenuClass, "-column"), "narrow-scrollbar", {
      submenu__visible: showSubmenu
    }];
    return /* @__PURE__ */React.createElement("div", {
      key: "/".concat(pathPrefix),
      className: classNames(menuClass),
      style: {
        maxHeight: "".concat(maxHeight, "px")
      }
    }, children.map(function (item, idx) {
      return /* @__PURE__ */React.createElement(DropdownItem, {
        key: idx,
        disabled: item.disabled,
        active: isActive(item, pathPrefix) || item.active,
        value: item.value,
        content: item.content,
        divider: item.divider,
        hasChildren: item.children && item.children.length > 0,
        path: "".concat(pathPrefix, "/").concat(item.value),
        maxColumnWidth: maxColumnWidth,
        minColumnWidth: minColumnWidth,
        onClick: function onClick(data, context) {
          return handleItemClick(data, context, idx);
        },
        onHover: handleHoverItem
      });
    }));
  };

  var dropdownItems = function dropdownItems(options2) {
    var _activeItem$children;

    var pathPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
    var columns = [];
    var activeItem = options2.find(function (item) {
      return isActive(item, pathPrefix, false);
    });
    columns.push(renderDropdownColumn(options2, !!activeItem, pathPrefix));

    if (activeItem !== null && activeItem !== void 0 && (_activeItem$children = activeItem.children) !== null && _activeItem$children !== void 0 && _activeItem$children.length) {
      columns.push.apply(columns, _toConsumableArray(dropdownItems(activeItem.children, "".concat(pathPrefix, "/").concat(activeItem.value))));
    }

    return columns;
  };

  var renderDropdownItems = dropdownItems(options);
  return /* @__PURE__ */React.createElement("div", {
    className: dropdownMenuClass
  }, renderDropdownItems);
};

export { DropdownMenu as default };
//# sourceMappingURL=DropdownMenu.js.map
