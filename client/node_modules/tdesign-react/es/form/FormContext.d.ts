import React from 'react';
import { TdFormProps } from './type';
declare const FormContext: React.Context<{
    labelWidth?: TdFormProps['labelWidth'];
    statusIcon?: TdFormProps['statusIcon'];
    labelAlign: TdFormProps['labelAlign'];
    layout: TdFormProps['layout'];
    size: TdFormProps['size'];
    colon: TdFormProps['colon'];
    requiredMark: TdFormProps['requiredMark'];
    scrollToFirstError: TdFormProps['scrollToFirstError'];
    showErrorMessage: TdFormProps['showErrorMessage'];
    resetType: TdFormProps['resetType'];
    rules: TdFormProps['rules'];
    formItemsRef: React.RefObject<Array<React.RefObject<HTMLElement>>>;
    onFormItemValueChange: (changedValue: Record<string, unknown>) => void;
}>;
export declare const useFormContext: () => {
    labelWidth?: TdFormProps['labelWidth'];
    statusIcon?: TdFormProps['statusIcon'];
    labelAlign: TdFormProps['labelAlign'];
    layout: TdFormProps['layout'];
    size: TdFormProps['size'];
    colon: TdFormProps['colon'];
    requiredMark: TdFormProps['requiredMark'];
    scrollToFirstError: TdFormProps['scrollToFirstError'];
    showErrorMessage: TdFormProps['showErrorMessage'];
    resetType: TdFormProps['resetType'];
    rules: TdFormProps['rules'];
    formItemsRef: React.RefObject<Array<React.RefObject<HTMLElement>>>;
    onFormItemValueChange: (changedValue: Record<string, unknown>) => void;
};
export default FormContext;
