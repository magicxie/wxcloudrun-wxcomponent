/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-9332bbea.js';
import { _ as _slicedToArray } from '../_chunks/dep-93971e86.js';
import React, { useState, useEffect, useMemo } from 'react';
import classNames from 'classnames';
import { addClass, removeClass } from '../_util/dom.js';
import useConfig from '../_util/useConfig.js';
import Portal from '../common/Portal.js';
import GradientLoading from './gradient.js';
import '../_chunks/dep-beac373a.js';
import 'raf';
import '../_chunks/dep-3853103d.js';
import '../_chunks/dep-ab1e2688.js';
import '../_chunks/dep-aa2bff1b.js';
import '../_chunks/dep-156c830d.js';
import '../_chunks/dep-897ce04d.js';
import '../_chunks/dep-2eff142e.js';
import '../_chunks/dep-312619d6.js';
import '../_util/easing.js';
import '../config-provider/ConfigContext.js';
import '../locale/zh_CN.js';
import 'react-dom';

var Loading = function Loading(props) {
  var attach = props.attach,
      _props$indicator = props.indicator,
      indicator = _props$indicator === void 0 ? true : _props$indicator,
      text = props.text,
      _props$loading = props.loading,
      loading = _props$loading === void 0 ? true : _props$loading,
      _props$size = props.size,
      size = _props$size === void 0 ? "medium" : _props$size,
      delay = props.delay,
      fullscreen = props.fullscreen,
      _props$preventScrollT = props.preventScrollThrough,
      preventScrollThrough = _props$preventScrollT === void 0 ? true : _props$preventScrollT,
      _props$showOverlay = props.showOverlay,
      showOverlay = _props$showOverlay === void 0 ? true : _props$showOverlay,
      content = props.content,
      _props$children = props.children,
      children = _props$children === void 0 ? content : _props$children,
      _props$inheritColor = props.inheritColor,
      inheritColor = _props$inheritColor === void 0 ? false : _props$inheritColor,
      zIndex = props.zIndex,
      className = props.className;

  var _useState = useState(delay ? false : loading),
      _useState2 = _slicedToArray(_useState, 2),
      showLoading = _useState2[0],
      setShowLoading = _useState2[1];

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var name = "".concat(classPrefix, "-loading");
  var centerClass = "".concat(classPrefix, "-loading--center");
  var inheritColorClass = "".concat(classPrefix, "-loading--inherit-color");
  var fullClass = "".concat(classPrefix, "-loading--full");
  var fullscreenClass = "".concat(classPrefix, "-loading__fullscreen");
  var lockClass = "".concat(classPrefix, "-loading--lock");
  var overlayClass = "".concat(classPrefix, "-loading__overlay");
  var relativeClass = "".concat(classPrefix, "-loading__parent");
  var textClass = "".concat(classPrefix, "-loading__text");
  useEffect(function () {
    var timer;

    if (delay && loading) {
      timer = setTimeout(function () {
        setShowLoading(loading);
      }, delay);
    } else {
      setShowLoading(loading);
    }

    return function () {
      clearTimeout(timer);
    };
  }, [delay, loading]);
  var calcStyles = useMemo(function () {
    var styles = {};

    if (zIndex !== void 0) {
      styles.zIndex = zIndex;
    }

    if (!["small", "medium", "large"].includes(size)) {
      styles["font-size"] = size;
    }

    return styles;
  }, [size, zIndex]);
  var sizeMap = {
    large: "".concat(classPrefix, "-size-l"),
    small: "".concat(classPrefix, "-size-s"),
    medium: "".concat(classPrefix, "-size-m")
  };
  var baseClasses = classNames(centerClass, sizeMap[size], _defineProperty({}, inheritColorClass, inheritColor), className);

  if (preventScrollThrough && fullscreen) {
    if (loading) {
      addClass(document.body, lockClass);
    } else {
      removeClass(document.body, lockClass);
    }
  }

  var commonContent = function commonContent() {
    var renderIndicator = /* @__PURE__ */React.createElement(GradientLoading, null);

    if (indicator && typeof indicator !== "boolean") {
      renderIndicator = indicator;
    }

    return /* @__PURE__ */React.createElement(React.Fragment, null, indicator ? renderIndicator : null, text ? /* @__PURE__ */React.createElement("div", {
      className: textClass
    }, text) : null);
  };

  if (fullscreen) {
    return loading ? /* @__PURE__ */React.createElement("div", {
      className: classNames(name, fullscreenClass, centerClass, overlayClass),
      style: calcStyles
    }, /* @__PURE__ */React.createElement("div", {
      className: baseClasses
    }, commonContent())) : null;
  }

  if (children) {
    return /* @__PURE__ */React.createElement("div", {
      className: relativeClass
    }, children, showLoading ? /* @__PURE__ */React.createElement("div", {
      className: classNames(name, baseClasses, fullClass, _defineProperty({}, overlayClass, showOverlay)),
      style: calcStyles
    }, commonContent()) : null);
  }

  if (attach) {
    return /* @__PURE__ */React.createElement(Portal, {
      getContainer: attach
    }, /* @__PURE__ */React.createElement("div", {
      className: classNames(name, baseClasses, fullClass, _defineProperty({}, overlayClass, showOverlay)),
      style: calcStyles
    }, commonContent()));
  }

  return /* @__PURE__ */React.createElement("div", {
    className: classNames(name, baseClasses),
    style: calcStyles
  }, commonContent());
};

export { Loading as default };
//# sourceMappingURL=loading.js.map
