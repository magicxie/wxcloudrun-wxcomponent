{"version":3,"file":"LocalReceiver.js","sources":["../../src/locale/LocalReceiver.ts"],"sourcesContent":["import React from 'react';\nimport { Locale } from './type';\nimport { ConfigContext } from '../config-provider';\n\nimport type { Config } from '../config-provider';\n\nexport interface Placement {\n  [propName: string]: string | number;\n}\n\nexport function useLocaleReceiver<T extends keyof Config['locale']>(\n  componentName: T,\n  defaultLocale?: Locale[T] | Function,\n) {\n  const { locale: tdLocale } = React.useContext(ConfigContext);\n\n  // @TODO: Check type of { pattern }\n  function transformLocale(pattern: Config['locale'][T], placement?: Placement): string | Array<string> {\n    const REGX = /\\{\\s*([\\w-]+)\\s*\\}/g;\n\n    if (typeof pattern === 'string') {\n      if (!placement || !REGX.test(pattern)) return pattern;\n      const translated = pattern.replace(REGX, (_, key) => {\n        if (placement) return String(placement[key]);\n        return '';\n      });\n      return translated;\n    }\n    if (Array.isArray(pattern)) {\n      return pattern.map((p, index) => {\n        const translated = p.replace(REGX, (_: string, key: string) => {\n          if (placement) return String(placement[index][key]);\n          return '';\n        });\n        return translated;\n      });\n    }\n    if (typeof pattern === 'function') {\n      return pattern(placement);\n    }\n    return '';\n  }\n\n  /** @TypeA => 确保此参数是属于 tdLocale[componentName] 下的子属性 */\n  const componentLocale = React.useMemo<Config['locale'][T] | Function>(() => {\n    const locale = defaultLocale || {};\n    const connectLocaleByName = tdLocale[componentName];\n\n    const localeFromContext = componentName && tdLocale ? connectLocaleByName : {};\n\n    return {\n      ...(typeof locale === 'function' ? (locale as Function)() : locale),\n      ...((localeFromContext || {}) as typeof connectLocaleByName),\n    };\n  }, [componentName, defaultLocale, tdLocale]);\n\n  return [componentLocale, transformLocale] as [Config['locale'][T], Function];\n}\n"],"names":["useLocaleReceiver","componentName","defaultLocale","React","useContext","ConfigContext","tdLocale","locale","transformLocale","pattern","placement","REGX","test","translated","replace","_","key","String","Array","isArray","map","p","index","componentLocale","useMemo","connectLocaleByName","localeFromContext"],"mappings":";;;;;;;;;;;;;;;;;AAEO,SAASA,iBAAT,CAA2BC,aAA3B,EAA0CC,aAA1C,EAAyD;AAC9D,0BAA6BC,KAAK,CAACC,UAAN,CAAiBC,aAAjB,CAA7B;AAAA,MAAgBC,QAAhB,qBAAQC,MAAR;;AACA,WAASC,eAAT,CAAyBC,OAAzB,EAAkCC,SAAlC,EAA6C;AAC3C,QAAMC,IAAI,GAAG,qBAAb;;AACA,QAAI,OAAOF,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,UAAI,CAACC,SAAD,IAAc,CAACC,IAAI,CAACC,IAAL,CAAUH,OAAV,CAAnB,EACE,OAAOA,OAAP;AACF,UAAMI,UAAU,GAAGJ,OAAO,CAACK,OAAR,CAAgBH,IAAhB,EAAsB,UAACI,CAAD,EAAIC,GAAJ,EAAY;AACnD,YAAIN,SAAJ,EACE,OAAOO,MAAM,CAACP,SAAS,CAACM,GAAD,CAAV,CAAb;AACF,eAAO,EAAP;AACD,OAJkB,CAAnB;AAKA,aAAOH,UAAP;AACD;;AACD,QAAIK,KAAK,CAACC,OAAN,CAAcV,OAAd,CAAJ,EAA4B;AAC1B,aAAOA,OAAO,CAACW,GAAR,CAAY,UAACC,CAAD,EAAIC,KAAJ,EAAc;AAC/B,YAAMT,UAAU,GAAGQ,CAAC,CAACP,OAAF,CAAUH,IAAV,EAAgB,UAACI,CAAD,EAAIC,GAAJ,EAAY;AAC7C,cAAIN,SAAJ,EACE,OAAOO,MAAM,CAACP,SAAS,CAACY,KAAD,CAAT,CAAiBN,GAAjB,CAAD,CAAb;AACF,iBAAO,EAAP;AACD,SAJkB,CAAnB;AAKA,eAAOH,UAAP;AACD,OAPM,CAAP;AAQD;;AACD,QAAI,OAAOJ,OAAP,KAAmB,UAAvB,EAAmC;AACjC,aAAOA,OAAO,CAACC,SAAD,CAAd;AACD;;AACD,WAAO,EAAP;AACD;;AACD,MAAMa,eAAe,GAAGpB,KAAK,CAACqB,OAAN,CAAc,YAAM;AAC1C,QAAMjB,MAAM,GAAGL,aAAa,IAAI,EAAhC;AACA,QAAMuB,mBAAmB,GAAGnB,QAAQ,CAACL,aAAD,CAApC;AACA,QAAMyB,iBAAiB,GAAGzB,aAAa,IAAIK,QAAjB,GAA4BmB,mBAA5B,GAAkD,EAA5E;AACA,2CACK,OAAOlB,MAAP,KAAkB,UAAlB,GAA+BA,MAAM,EAArC,GAA0CA,MAD/C,GAEKmB,iBAAiB,IAAI,EAF1B;AAID,GARuB,EAQrB,CAACzB,aAAD,EAAgBC,aAAhB,EAA+BI,QAA/B,CARqB,CAAxB;AASA,SAAO,CAACiB,eAAD,EAAkBf,eAAlB,CAAP;AACD;;;;"}