/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-9332bbea.js';
import React, { forwardRef } from 'react';
import classNames from 'classnames';
import { CheckCircleFilledIcon, CloseCircleFilledIcon, ErrorCircleFilledIcon, CheckCircleIcon, CloseCircleIcon, ErrorCircleIcon } from 'tdesign-icons-react';
import useConfig from '../_util/useConfig.js';
import getBackgroundColor from '../_util/linearGradient.js';
import '../config-provider/ConfigContext.js';
import '../locale/zh_CN.js';
import '../_chunks/dep-27d690ce.js';

var Progress = /*#__PURE__*/forwardRef(function (props, ref) {
  var _props$theme = props.theme,
      theme = _props$theme === void 0 ? "line" : _props$theme,
      _props$percentage = props.percentage,
      percentage = _props$percentage === void 0 ? 0 : _props$percentage,
      _props$label = props.label,
      label = _props$label === void 0 ? true : _props$label,
      _props$color = props.color,
      color = _props$color === void 0 ? "" : _props$color,
      _props$trackColor = props.trackColor,
      trackColor = _props$trackColor === void 0 ? "#f5f5f5" : _props$trackColor,
      strokeWidth = props.strokeWidth,
      _props$size = props.size,
      size = _props$size === void 0 ? "medium" : _props$size,
      className = props.className;
  var status = props.status;

  if (!status && percentage >= 100) {
    status = "success";
  }

  var iconMap = {
    success: CheckCircleFilledIcon,
    error: CloseCircleFilledIcon,
    warning: ErrorCircleFilledIcon
  };

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var getInfoContent = function getInfoContent() {
    if (!label) {
      return "";
    }

    var info;

    if (typeof label === "boolean") {
      info = /* @__PURE__ */React.createElement("div", {
        className: "".concat(classPrefix, "-progress__info")
      }, "".concat(percentage, "%"));

      if (["success", "error", "warning"].includes(status)) {
        var Icon = iconMap[status];
        info = /* @__PURE__ */React.createElement("div", {
          className: "".concat(classPrefix, "-progress__info")
        }, /* @__PURE__ */React.createElement(Icon, {
          className: "".concat(classPrefix, "-progress__icon")
        }));
      }
    } else {
      info = /* @__PURE__ */React.createElement("div", {
        className: "".concat(classPrefix, "-progress__info")
      }, label);
    }

    return info;
  };

  var statusClassName = "".concat(classPrefix, "-progress--status--").concat(status);
  var progressDom;

  if (theme === "circle") {
    iconMap = {
      success: CheckCircleIcon,
      error: CloseCircleIcon,
      warning: ErrorCircleIcon
    };

    var getDiameter = function getDiameter() {
      var diameter2 = 112;

      if (!size) {
        return diameter2;
      }

      switch (size) {
        default:
          diameter2 = Number(size);
          break;

        case "small":
          diameter2 = 72;
          break;

        case "medium":
          diameter2 = 112;
          break;

        case "large":
          diameter2 = 160;
          break;
      }

      return diameter2;
    };

    var getCircleStokeWidth = function getCircleStokeWidth() {
      if (!strokeWidth) {
        if (size === "small") {
          return 4;
        }
      }

      if (typeof strokeWidth !== "number" || Number.isNaN(strokeWidth)) {
        return 6;
      }

      return strokeWidth;
    };

    var circleStokeWidth = getCircleStokeWidth();
    var diameter = getDiameter();
    var radius = diameter / 2;
    var innerRadius = radius - circleStokeWidth;
    var perimeter = Math.PI * 2 * radius;
    var percent = percentage / 100;
    var strokeDasharray = "".concat(perimeter * percent, "  ").concat(perimeter * (1 - percent));
    var fontSizeRatio = innerRadius * 0.27;
    var circleBoxStyle = {
      width: diameter,
      height: diameter,
      fontSize: 4 + fontSizeRatio
    };
    var circlePathStyle = {
      stroke: color,
      strokeLinecap: circleStokeWidth < 30 ? "round" : "buff"
    };
    var circleCenterInViewBox = radius + circleStokeWidth / 2;
    progressDom = /* @__PURE__ */React.createElement("div", {
      ref: ref,
      className: classNames("".concat(classPrefix, "-progress--circle"), _defineProperty({}, "".concat(statusClassName), status)),
      style: circleBoxStyle
    }, getInfoContent(), /* @__PURE__ */React.createElement("svg", {
      width: diameter,
      height: diameter,
      viewBox: "0 0 ".concat(diameter + circleStokeWidth, " ").concat(diameter + circleStokeWidth)
    }, /* @__PURE__ */React.createElement("circle", {
      cx: circleCenterInViewBox,
      cy: circleCenterInViewBox,
      r: radius,
      strokeWidth: circleStokeWidth,
      stroke: trackColor,
      fill: "none"
    }), /* @__PURE__ */React.createElement("circle", {
      cx: circleCenterInViewBox,
      cy: circleCenterInViewBox,
      r: radius,
      strokeWidth: circleStokeWidth,
      fill: "none",
      transform: "matrix(0,-1,1,0,0,".concat(diameter + circleStokeWidth, ")"),
      strokeDasharray: strokeDasharray,
      className: "".concat(classPrefix, "-progress__circle-inner"),
      style: circlePathStyle
    })));
    return /* @__PURE__ */React.createElement("div", {
      className: className
    }, progressDom);
  }

  var getHeight = function getHeight() {
    if (strokeWidth) {
      return typeof strokeWidth === "string" ? strokeWidth : "".concat(strokeWidth, "px");
    }
  };

  var trackStyle = {
    height: getHeight(),
    backgroundColor: trackColor,
    borderRadius: getHeight()
  };
  var barStyle = {
    width: "".concat(percentage, "%"),
    background: getBackgroundColor(color),
    borderRadius: getHeight()
  };

  if (theme === "plump") {
    var _classNames2;

    var PLUMP_SEPERATE = 10;
    progressDom = /* @__PURE__ */React.createElement("div", {
      ref: ref,
      className: classNames("".concat(classPrefix, "-progress__bar"), "".concat(classPrefix, "-progress--plump"), (_classNames2 = {}, _defineProperty(_classNames2, "".concat(statusClassName), status), _defineProperty(_classNames2, "".concat(classPrefix, "-progress--over-ten"), percentage > PLUMP_SEPERATE), _defineProperty(_classNames2, "".concat(classPrefix, "-progress--under-ten"), percentage <= PLUMP_SEPERATE), _classNames2)),
      style: trackStyle
    }, /* @__PURE__ */React.createElement("div", {
      className: "".concat(classPrefix, "-progress__inner"),
      style: barStyle
    }, label && /* @__PURE__ */React.createElement("div", {
      className: "".concat(classPrefix, "-progress__info"),
      style: percentage > 10 ? {
        color: "#fff"
      } : {
        right: "-2.5em"
      }
    }, "".concat(percentage, "%"))));
  } else {
    progressDom = /* @__PURE__ */React.createElement("div", {
      ref: ref,
      className: classNames("".concat(classPrefix, "-progress--thin"), _defineProperty({}, "".concat(statusClassName), status))
    }, /* @__PURE__ */React.createElement("div", {
      className: "".concat(classPrefix, "-progress__bar"),
      style: trackStyle
    }, /* @__PURE__ */React.createElement("div", {
      className: "".concat(classPrefix, "-progress__inner"),
      style: barStyle
    })), getInfoContent());
  }

  return /* @__PURE__ */React.createElement("div", {
    className: className
  }, progressDom);
});
Progress.displayName = "Progress";

export { Progress as default };
//# sourceMappingURL=Progress.js.map
