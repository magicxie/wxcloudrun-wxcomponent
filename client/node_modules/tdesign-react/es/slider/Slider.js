/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-9332bbea.js';
import { _ as _typeof } from '../_chunks/dep-156c830d.js';
import { _ as _slicedToArray } from '../_chunks/dep-93971e86.js';
import React, { forwardRef, useRef, useMemo } from 'react';
import classNames from 'classnames';
import useConfig from '../_util/useConfig.js';
import useDefault from '../_util/useDefault.js';
import { numberToPencent } from './utils/handleNumber.js';
import InputNumber from '../input-number/InputNumber.js';
import SliderHandleButton from './SliderHandleButton.js';
import { accAdd } from '../_util/number.js';
import '../_chunks/dep-beac373a.js';
import '../config-provider/ConfigContext.js';
import '../locale/zh_CN.js';
import '../_util/noop.js';
import '../_chunks/dep-27d690ce.js';
import '../_util/useCommonClassName.js';
import '../_util/useUpdateEffect.js';
import '../input-number/StepHandler.js';
import 'tdesign-icons-react';
import '../button/index.js';
import '../button/Button.js';
import '../_util/useRipple.js';
import '../_util/setStyle.js';
import '../loading/index.js';
import '../loading/loading.js';
import '../_util/dom.js';
import 'raf';
import '../_chunks/dep-3853103d.js';
import '../_chunks/dep-ab1e2688.js';
import '../_chunks/dep-aa2bff1b.js';
import '../_chunks/dep-897ce04d.js';
import '../_chunks/dep-2eff142e.js';
import '../_chunks/dep-312619d6.js';
import '../_util/easing.js';
import '../common/Portal.js';
import 'react-dom';
import '../loading/gradient.js';
import './style/css.js';
import '../loading/type.js';
import '../loading/plugin.js';
import '../button/type.js';
import '../input-number/utils/numberUtils.js';
import '../input/index.js';
import '../input/Input.js';
import '../_chunks/dep-25536592.js';
import '../_chunks/dep-a764e3bd.js';
import '../_chunks/dep-d098d908.js';
import '../_util/forwardRefWithStatics.js';
import 'hoist-non-react-statics';
import '../input/InputGroup.js';
import '../_util/useDefaultValue.js';
import '../input/type.js';
import '../tooltip/Tooltip.js';
import '../popup/index.js';
import '../popup/Popup.js';
import 'react-transition-group';
import 'react-popper';
import '../_util/composeRefs.js';
import '../_util/usePrevious.js';
import '../popup/Portal.js';
import '../popup/hooks/useTriggerProps.js';
import '../_util/useClickOutside.js';
import '../popup/hooks/usePopupCssTransition.js';
import '../popup/type.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var LEFT_NODE = 0;
var RIGHT_NODE = 1;
var Slider = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _classNames, _style;

  var disabled = _ref.disabled,
      _ref$inputNumberProps = _ref.inputNumberProps,
      inputNumberProps = _ref$inputNumberProps === void 0 ? true : _ref$inputNumberProps,
      label = _ref.label,
      _ref$layout = _ref.layout,
      layout = _ref$layout === void 0 ? "horizontal" : _ref$layout,
      marks = _ref.marks,
      _ref$max = _ref.max,
      max = _ref$max === void 0 ? 100 : _ref$max,
      _ref$min = _ref.min,
      min = _ref$min === void 0 ? 0 : _ref$min,
      range = _ref.range,
      _ref$step = _ref.step,
      step = _ref$step === void 0 ? 1 : _ref$step,
      tooltipProps = _ref.tooltipProps,
      propsValue = _ref.value,
      defaultValue = _ref.defaultValue,
      onChange = _ref.onChange,
      className = _ref.className,
      style = _ref.style;

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var sliderRef = useRef();

  var _useDefault = useDefault(propsValue, defaultValue, onChange),
      _useDefault2 = _slicedToArray(_useDefault, 2),
      value = _useDefault2[0],
      setValue = _useDefault2[1];

  var isVertical = layout === "vertical";
  var renderVaule = Array.isArray(value) ? value : [min, value];
  var start = (renderVaule[LEFT_NODE] - min) / (max - min);
  var width = (renderVaule[RIGHT_NODE] - renderVaule[LEFT_NODE]) / (max - min);
  var end = start + width;
  var dots = useMemo(function () {
    if (Array.isArray(marks)) {
      if (marks.find(function (mark) {
        return typeof mark !== "number";
      })) {
        console.warn('The props "marks" only support number!');
        return [];
      }

      return marks.map(function (mark) {
        return {
          value: mark,
          position: (mark - min) / max,
          label: mark
        };
      });
    }

    if (marks && _typeof(marks) === "object") {
      var result = [];

      for (var key in marks) {
        var numberKey = Number(key);

        if (typeof numberKey !== "number" || !numberKey) {
          console.warn('The props "marks" key only support number!');
        } else {
          result.push({
            value: numberKey,
            label: marks[numberKey],
            position: (numberKey - min) / max
          });
        }
      }

      return result;
    }

    return [];
  }, [max, min, marks]);
  var allDots = useMemo(function () {
    var result = [];

    for (var i = min; i <= max; i = accAdd(i, step)) {
      result.push({
        value: i,
        position: (i - min) / (max - min)
      });
    }

    return result;
  }, [max, min, step]);
  var startDirection = isVertical ? "bottom" : "left";
  var stepDirection = isVertical ? "top" : "left";
  var sizeKey = isVertical ? "height" : "width";
  var renderDots = isVertical ? dots.map(function (item) {
    return _objectSpread(_objectSpread({}, item), {}, {
      position: 1 - item.position
    });
  }) : dots;

  var handleInputChange = function handleInputChange(newValue, nodeIndex) {
    var safeValue = Number(newValue.toFixed(32));
    var resultValue = Math.max(Math.min(max, safeValue), min);
    if (nodeIndex === LEFT_NODE && safeValue > value[RIGHT_NODE]) resultValue = value[RIGHT_NODE];
    if (nodeIndex === RIGHT_NODE && safeValue < value[LEFT_NODE]) resultValue = value[LEFT_NODE];

    if (Array.isArray(value)) {
      var arrValue = value.slice();
      arrValue[nodeIndex] = resultValue;
      setValue(arrValue);
    } else {
      setValue(resultValue);
    }
  };

  var createInput = function createInput(nodeIndex) {
    var inputProps = _typeof(inputNumberProps) === "object" ? inputNumberProps : {};
    var currentValue = renderVaule[nodeIndex];
    return /* @__PURE__ */React.createElement(InputNumber, _objectSpread({
      theme: "normal",
      value: currentValue,
      onChange: function onChange(value2) {
        return handleInputChange(Number(value2), nodeIndex);
      },
      className: classNames("".concat(classPrefix, "-slider-input"), {
        "is-vertical": isVertical
      }),
      disabled: disabled
    }, inputProps));
  };

  var nearbyValueChange = function nearbyValueChange(value2) {
    var buttonBias = Math.abs(value2 - renderVaule[LEFT_NODE]) > Math.abs(value2 - renderVaule[RIGHT_NODE]) ? RIGHT_NODE : LEFT_NODE;
    handleInputChange(value2, buttonBias);
  };

  var setPosition = function setPosition(position, nodeIndex) {
    var index = 0;
    var minDistance = 1;

    for (var i = 0; i < allDots.length; i++) {
      var diff = Math.abs(allDots[i].position - position);

      if (minDistance > diff) {
        index = i;
        minDistance = diff;
      }
    }

    var value2 = allDots[index].value;

    if (nodeIndex === void 0 && range) {
      nearbyValueChange(value2);
    } else {
      handleInputChange(value2, nodeIndex);
    }
  };

  var onSliderChange = function onSliderChange(event, nodeIndex) {
    var clientKey = isVertical ? "clientY" : "clientX";
    var sliderPositionInfo = sliderRef.current.getBoundingClientRect();
    var sliderOffset = sliderPositionInfo[startDirection];
    var position = (event[clientKey] - sliderOffset) / sliderPositionInfo[sizeKey] * (isVertical ? -1 : 1);
    setPosition(position, nodeIndex);
  };

  var handleClickMarks = function handleClickMarks(event, value2) {
    event.stopPropagation();
    nearbyValueChange(value2);
  };

  var createHandleButton = function createHandleButton(nodeIndex, style2) {
    var currentValue = renderVaule[nodeIndex];
    var tipLabel = typeof label === "string" ? label.replace(/\$\{value\}/g, currentValue.toString()) : label;
    if (tipLabel === true || !tipLabel) tipLabel = currentValue;
    return /* @__PURE__ */React.createElement(SliderHandleButton, {
      toolTipProps: _objectSpread({
        disabled: label === false,
        content: tipLabel
      }, tooltipProps),
      classPrefix: classPrefix,
      style: style2,
      onChange: function onChange(e) {
        return onSliderChange(e, nodeIndex);
      }
    });
  };

  return /* @__PURE__ */React.createElement("div", {
    style: _objectSpread({}, style),
    className: classNames("".concat(classPrefix, "-slider__container"), {
      "is-vertical": isVertical
    }),
    ref: ref
  }, /* @__PURE__ */React.createElement("div", {
    ref: sliderRef,
    className: classNames(className, "".concat(classPrefix, "-slider"), (_classNames = {}, _defineProperty(_classNames, "".concat(classPrefix, "-is-disabled"), disabled), _defineProperty(_classNames, "".concat(classPrefix, "-slider--vertical"), isVertical), _defineProperty(_classNames, "".concat(classPrefix, "-slider--with-input"), inputNumberProps), _classNames)),
    onClick: onSliderChange
  }, /* @__PURE__ */React.createElement("div", {
    className: classNames("".concat(classPrefix, "-slider__rail"))
  }, /* @__PURE__ */React.createElement("div", {
    style: (_style = {}, _defineProperty(_style, startDirection, numberToPencent(start)), _defineProperty(_style, sizeKey, numberToPencent(width)), _style),
    className: classNames("".concat(classPrefix, "-slider__track"))
  }), range ? createHandleButton(LEFT_NODE, _defineProperty({}, startDirection, numberToPencent(start))) : null, createHandleButton(RIGHT_NODE, _defineProperty({}, startDirection, numberToPencent(end))), /* @__PURE__ */React.createElement("div", {
    className: classNames("".concat(classPrefix, "-slider__step"))
  }, renderDots.map(function (_ref2) {
    var position = _ref2.position,
        value2 = _ref2.value;
    return /* @__PURE__ */React.createElement("div", {
      key: value2,
      style: _defineProperty({}, stepDirection, numberToPencent(position)),
      className: classNames("".concat(classPrefix, "-slider__stop"))
    });
  })), /* @__PURE__ */React.createElement("div", {
    className: classNames("".concat(classPrefix, "-slider__mark"))
  }, renderDots.map(function (_ref3) {
    var position = _ref3.position,
        value2 = _ref3.value,
        label2 = _ref3.label;
    return /* @__PURE__ */React.createElement("div", {
      key: value2,
      onClick: function onClick(event) {
        return handleClickMarks(event, value2);
      },
      style: _defineProperty({}, stepDirection, numberToPencent(position)),
      className: classNames("".concat(classPrefix, "-slider__mark-text"))
    }, label2);
  })))), inputNumberProps ? /* @__PURE__ */React.createElement("div", {
    className: classNames("".concat(classPrefix, "-slider__input-container"), {
      "is-vertical": isVertical
    })
  }, range && createInput(LEFT_NODE), createInput(RIGHT_NODE)) : null);
});
Slider.displayName = "Slider";

export { Slider as default };
//# sourceMappingURL=Slider.js.map
