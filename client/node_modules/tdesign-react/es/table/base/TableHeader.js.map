{"version":3,"file":"TableHeader.js","sources":["../../../src/table/base/TableHeader.tsx"],"sourcesContent":["import React, { isValidElement } from 'react';\nimport isFunction from 'lodash/isFunction';\nimport { BaseTableCol, DataType } from '../type';\nimport TableCell, { CellProps } from './TableCell';\nimport { Styles } from '../../common';\n\ninterface TableHeaderProps<D extends DataType> {\n  columns: (BaseTableCol<D> & { style?: Styles })[];\n}\n\nconst TableHeader = <D extends DataType>(props: TableHeaderProps<D>) => {\n  const { columns } = props;\n  const columnsDepth = getNodeDepth(columns);\n  const trsColumns = getTrsColumns(columns, columnsDepth);\n\n  function getTrsColumns(nodes, columnsDepth, currentDepth = 1, trsColumns = []): CellProps<D>[][] {\n    let trsColumnsNew = trsColumns;\n    nodes.forEach((item) => {\n      const { children, ...rest } = item;\n      if (item.children) {\n        trsColumnsNew = getTrsColumns(children, columnsDepth, currentDepth + 1, trsColumnsNew);\n      }\n      const trIndex = currentDepth - 1;\n      const currentTr = trsColumns[trIndex];\n      const { rowSpan, colSpan } = getRowSpanAndColSpan({ node: item, columnsDepth, currentDepth });\n      const tdIndex = !currentTr ? 0 : currentTr.length;\n      const currentTd = { colKey: `tr-${trIndex}_td-${tdIndex}`, ...rest, rowSpan, colSpan };\n      if (!currentTr) {\n        trsColumnsNew[trIndex] = [currentTd];\n      } else {\n        trsColumnsNew[trIndex] = [...currentTr, currentTd];\n      }\n    });\n    return trsColumnsNew;\n  }\n\n  function getRowSpanAndColSpan({ node, columnsDepth, currentDepth }) {\n    let rowSpan = 1;\n    let colSpan = 1;\n    if (node.children) {\n      rowSpan = 1;\n      colSpan = getLeafNodeCount(node.children);\n    } else {\n      rowSpan = columnsDepth - currentDepth + 1;\n      colSpan = 1;\n    }\n    return {\n      rowSpan,\n      colSpan,\n    };\n  }\n\n  function getNodeDepth(nodes, currentDepth = 1, depth = 1) {\n    let depthNew = depth;\n    let currentDepthNew = currentDepth;\n    nodes?.forEach(({ children }) => {\n      if (children) {\n        currentDepthNew += 1;\n        if (currentDepthNew > depthNew) {\n          depthNew = currentDepthNew;\n        }\n        depthNew = getNodeDepth(children, currentDepthNew, depthNew);\n      }\n    });\n    return depthNew;\n  }\n\n  function getLeafNodeCount(nodes, count = 0) {\n    let countNew = count;\n    nodes.forEach(({ children }) => {\n      if (children) {\n        countNew = getLeafNodeCount(children, countNew);\n      } else {\n        countNew += 1;\n      }\n    });\n    return countNew;\n  }\n\n  function getCustomRender({ title, render }) {\n    if (typeof title === 'string' || isValidElement(title)) {\n      return () => title;\n    }\n    if (isFunction(title)) {\n      return title;\n    }\n    if (isFunction(render)) {\n      return render;\n    }\n    return () => null;\n  }\n\n  /**\n   * 行的第一列td css设置borderWidth为0（其余列默认为1），上一行第一列存在跨行时，需补回该borderWidth为1\n   */\n  function getIsFirstChildTdSetBorderWidth({ trsColumns, rowIndex, colIndex }) {\n    if (colIndex === 0 && rowIndex > 0) {\n      const preRowColumns = trsColumns[rowIndex - 1];\n      if (preRowColumns[0].rowSpan > 1) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  return (\n    <thead>\n      {trsColumns.map((trsColumnsItem: CellProps<D>[], rowIndex) => (\n        <tr key={rowIndex}>\n          {trsColumnsItem.map((column: CellProps<D>, colIndex) => {\n            const { title, colKey, rowSpan, colSpan, render, ...rest } = column;\n            const customRender = getCustomRender({ title, render });\n            const isFirstChildTdSetBorderWidth = getIsFirstChildTdSetBorderWidth({ trsColumns, rowIndex, colIndex });\n\n            return (\n              <TableCell\n                type=\"title\"\n                key={colKey}\n                colKey={colKey}\n                colIndex={colIndex}\n                customRender={customRender}\n                rowSpan={rowSpan}\n                colSpan={colSpan}\n                isFirstChildTdSetBorderWidth={isFirstChildTdSetBorderWidth}\n                {...rest}\n              ></TableCell>\n            );\n          })}\n        </tr>\n      ))}\n    </thead>\n  );\n};\n\nexport default TableHeader;\n"],"names":["TableHeader","props","columns","columnsDepth","getNodeDepth","trsColumns","getTrsColumns","nodes","columnsDepth2","currentDepth","trsColumns2","trsColumnsNew","forEach","item","children","rest","trIndex","currentTr","getRowSpanAndColSpan","node","rowSpan","colSpan","tdIndex","length","currentTd","colKey","getLeafNodeCount","depth","depthNew","currentDepthNew","count","countNew","getCustomRender","title","render","isValidElement","isFunction","getIsFirstChildTdSetBorderWidth","rowIndex","colIndex","preRowColumns","React","createElement","map","trsColumnsItem","key","column","customRender","isFirstChildTdSetBorderWidth","TableCell","type"],"mappings":"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"}