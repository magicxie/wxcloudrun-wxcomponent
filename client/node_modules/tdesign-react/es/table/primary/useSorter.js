/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _toConsumableArray } from '../../_chunks/dep-124f91c5.js';
import { _ as _defineProperty } from '../../_chunks/dep-9332bbea.js';
import { _ as _slicedToArray } from '../../_chunks/dep-93971e86.js';
import React, { useContext, useState, useMemo, useEffect } from 'react';
import { g as get_1 } from '../../_chunks/dep-ae2e9ece.js';
import '../../config-provider/index.js';
import SorterButton, { SortTypeEnum } from './SorterButton.js';
import ConfigContext from '../../config-provider/ConfigContext.js';
import '../../_chunks/dep-beac373a.js';
import '../../_chunks/dep-ab1e2688.js';
import '../../_chunks/dep-a0400c35.js';
import '../../_chunks/dep-897ce04d.js';
import '../../_chunks/dep-2eff142e.js';
import '../../_chunks/dep-156c830d.js';
import '../../_chunks/dep-95c9ff5b.js';
import '../../_chunks/dep-aa2bff1b.js';
import '../../_chunks/dep-312619d6.js';
import '../../_chunks/dep-5ace74d6.js';
import '../../_chunks/dep-25536592.js';
import '../../_chunks/dep-a764e3bd.js';
import '../../_chunks/dep-d098d908.js';
import '../../_chunks/dep-8309e373.js';
import '../../_chunks/dep-0de37580.js';
import '../../_chunks/dep-44c00646.js';
import '../../config-provider/ConfigProvider.js';
import '../../_chunks/dep-27d690ce.js';
import '../../locale/zh_CN.js';
import 'classnames';
import 'tdesign-icons-react';
import '../../tooltip/index.js';
import '../../tooltip/Tooltip.js';
import '../../popup/index.js';
import '../../popup/Popup.js';
import 'react-transition-group';
import 'react-popper';
import '../../_util/useDefault.js';
import '../../_util/noop.js';
import '../../_util/useConfig.js';
import '../../_util/composeRefs.js';
import '../../_util/usePrevious.js';
import '../../popup/Portal.js';
import 'react-dom';
import '../../popup/hooks/useTriggerProps.js';
import '../../_util/useClickOutside.js';
import '../../popup/hooks/usePopupCssTransition.js';
import './style/css.js';
import '../../popup/type.js';
import '../../tooltip/type.js';

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function useSorter(props) {
  var _useContext = useContext(ConfigContext),
      classPrefix = _useContext.classPrefix;

  var columns = props.columns,
      sort = props.sort,
      defaultSort = props.defaultSort,
      multipleSort = props.multipleSort,
      onSortChange = props.onSortChange,
      data = props.data;
  var isControlled = typeof sort !== "undefined";

  var _useState = useState(defaultSort || []),
      _useState2 = _slicedToArray(_useState, 2),
      innerSort = _useState2[0],
      setInnerSort = _useState2[1];

  var sorts = getSorts(innerSort, columns);
  var transformedSorterColumns = columns.map(function (column) {
    var _sorts$find;

    var title = column.title,
        sorter = column.sorter,
        sortType = column.sortType,
        colKey = column.colKey;

    if (!sorter || !SortTypeEnum[sortType]) {
      return column;
    }

    var singleSort = (_sorts$find = sorts.find) === null || _sorts$find === void 0 ? void 0 : _sorts$find.call(sorts, function (sortItem) {
      return (sortItem === null || sortItem === void 0 ? void 0 : sortItem.sortBy) === colKey;
    });

    var titleNew = function titleNew() {
      return /* @__PURE__ */React.createElement("div", {
        className: "".concat(classPrefix, "-table__cell--sortable")
      }, /* @__PURE__ */React.createElement("div", {
        className: "".concat(classPrefix, "-table__cell--title")
      }, /* @__PURE__ */React.createElement("div", null, title), /* @__PURE__ */React.createElement(SorterButton, {
        column: column,
        singleSort: singleSort,
        onChange: onChangeSortButton
      })));
    };

    return _objectSpread(_objectSpread({}, column), {}, {
      title: titleNew
    });
  });
  var transformedSorterData = useMemo(function () {
    if (isControlled) {
      return data;
    }

    return _toConsumableArray(data).sort(comparer(sorts));
  }, [data, sorts, isControlled]);

  function getSorts(innerSort2, columns2) {
    var _validSorts;

    var validSorts = [];
    var sortColumns = columns2.filter(function (_ref) {
      var sorter = _ref.sorter;
      return !!sorter;
    });
    var colKeySorterMap = {};
    sortColumns.forEach(function (_ref2) {
      var colKey = _ref2.colKey,
          sorter = _ref2.sorter;
      colKeySorterMap[colKey] = sorter;
    });
    var sortColKeys = sortColumns.map(function (_ref3) {
      var colKey = _ref3.colKey;
      return colKey;
    });

    if (Array.isArray(innerSort2)) {
      validSorts = innerSort2.filter(function (sortItem) {
        return sortColKeys.includes(sortItem === null || sortItem === void 0 ? void 0 : sortItem.sortBy);
      });
    } else if (sortColKeys.includes(innerSort2 === null || innerSort2 === void 0 ? void 0 : innerSort2.sortBy)) {
      validSorts = [innerSort2];
    }

    var validSortsWithSorter = (_validSorts = validSorts) === null || _validSorts === void 0 ? void 0 : _validSorts.map(function (sortItem) {
      return _objectSpread(_objectSpread({}, sortItem), {}, {
        sorter: colKeySorterMap[sortItem.sortBy]
      });
    });
    return validSortsWithSorter;
  }

  function onChangeSortButton(activeSort, activeSortType, activeColumn) {
    var sortOptions = {
      currentDataSource: transformedSorterData,
      col: activeColumn
    };
    var activeColKey = activeColumn.colKey;

    if (multipleSort) {
      var sortsNew = [];

      if (activeSort) {
        if (activeSortType === SortTypeEnum.all) {
          sortsNew = sorts.filter(function (sortItem) {
            return sortItem !== activeSort;
          }).map(function (_ref4) {
            var sortBy = _ref4.sortBy,
                descending = _ref4.descending;
            return {
              sortBy: sortBy,
              descending: descending
            };
          });
        } else {
          sortsNew = sorts.map(function (sortItem) {
            return {
              sortBy: sortItem.sortBy,
              descending: sortItem === activeSort ? activeSortType === SortTypeEnum.desc : sortItem.descending
            };
          });
        }
      } else {
        var sortInfo = {
          sortBy: activeColKey,
          descending: activeSortType === SortTypeEnum.desc
        };

        if (sorts.length) {
          sortsNew = [].concat(_toConsumableArray(sorts.map(function (_ref5) {
            var sortBy = _ref5.sortBy,
                descending = _ref5.descending;
            return {
              sortBy: sortBy,
              descending: descending
            };
          })), [sortInfo]);
        } else {
          sortsNew = [sortInfo];
        }
      }

      setInnerSort(sortsNew);
      onSortChange(sortsNew, sortOptions);
    } else {
      var sortNew;

      if (activeSort) {
        if (activeSortType !== SortTypeEnum.all) {
          sortNew = {
            sortBy: activeSort.sortBy,
            descending: activeSortType === SortTypeEnum.desc
          };
        }
      } else {
        sortNew = {
          sortBy: activeColKey,
          descending: activeSortType === SortTypeEnum.desc
        };
      }

      setInnerSort(sortNew);
      onSortChange(sortNew, sortOptions);
    }
  }

  useEffect(function () {
    if (isControlled) {
      setInnerSort(sort);
    }
  }, [sort, isControlled]);
  return [transformedSorterColumns, transformedSorterData];
}

function comparer(sorts) {
  return function (a, b) {
    var _iterator = _createForOfIteratorHelper(sorts),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var _step$value = _step.value,
            sortBy = _step$value.sortBy,
            descending = _step$value.descending,
            sorter = _step$value.sorter;
        var firstValue = get_1(a, sortBy);
        var secondValue = get_1(b, sortBy);
        var isAsc = typeof sorter === "function" ? sorter(a, b) < 0 : firstValue < secondValue;
        var isDesc = typeof sorter === "function" ? sorter(a, b) > 0 : firstValue > secondValue;

        if (isAsc || isDesc) {
          if (!descending) return isAsc ? -1 : 1;
          if (descending) return isDesc ? -1 : 1;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return 0;
  };
}

export { useSorter as default };
//# sourceMappingURL=useSorter.js.map
