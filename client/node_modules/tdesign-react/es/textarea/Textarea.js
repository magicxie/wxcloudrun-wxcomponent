/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-9332bbea.js';
import { _ as _typeof } from '../_chunks/dep-156c830d.js';
import { _ as _slicedToArray } from '../_chunks/dep-93971e86.js';
import { _ as _objectWithoutProperties } from '../_chunks/dep-27d690ce.js';
import React, { forwardRef, useState, useMemo } from 'react';
import classNames from 'classnames';
import useConfig from '../_util/useConfig.js';
import noop from '../_util/noop.js';
import useDefault from '../_util/useDefault.js';
import { getCharacterLength } from '../_util/helper.js';
import '../_chunks/dep-beac373a.js';
import '../config-provider/ConfigContext.js';
import '../locale/zh_CN.js';
import '../_chunks/dep-93bd2d05.js';
import '../_chunks/dep-ab1e2688.js';
import '../_chunks/dep-44c00646.js';
import '../_chunks/dep-aa2bff1b.js';
import '../_chunks/dep-897ce04d.js';
import '../_chunks/dep-2eff142e.js';
import '../_chunks/dep-95c9ff5b.js';
import '../_chunks/dep-312619d6.js';
import '../_chunks/dep-304ab091.js';
import '../_chunks/dep-ea69dcf8.js';

var _excluded = ["disabled", "maxlength", "maxcharacter", "className", "readonly", "autofocus", "defaultValue", "style", "onKeydown", "onKeypress", "onKeyup", "autosize"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var Textarea = /*#__PURE__*/forwardRef(function (props, ref) {
  var _classNames;

  var disabled = props.disabled,
      maxlength = props.maxlength,
      maxcharacter = props.maxcharacter,
      className = props.className,
      readonly = props.readonly,
      autofocus = props.autofocus,
      defaultValue = props.defaultValue,
      style = props.style,
      _props$onKeydown = props.onKeydown,
      onKeydown = _props$onKeydown === void 0 ? noop : _props$onKeydown,
      _props$onKeypress = props.onKeypress,
      onKeypress = _props$onKeypress === void 0 ? noop : _props$onKeypress,
      _props$onKeyup = props.onKeyup,
      onKeyup = _props$onKeyup === void 0 ? noop : _props$onKeyup,
      _props$autosize = props.autosize,
      autosize = _props$autosize === void 0 ? false : _props$autosize,
      otherProps = _objectWithoutProperties(props, _excluded);

  var _useDefault = useDefault(props.value, defaultValue, props.onChange),
      _useDefault2 = _slicedToArray(_useDefault, 2),
      _useDefault2$ = _useDefault2[0],
      value = _useDefault2$ === void 0 ? "" : _useDefault2$,
      setValue = _useDefault2[1];

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isFocused = _useState2[0],
      setIsFocused = _useState2[1];

  var hasMaxcharacter = typeof maxcharacter !== "undefined";
  var currentLength = useMemo(function () {
    return value ? String(value).length : 0;
  }, [value]);
  var characterLength = useMemo(function () {
    var characterInfo = getCharacterLength(String(value), maxcharacter);
    if (_typeof(characterInfo) === "object") return characterInfo.length;
    return characterInfo;
  }, [value, maxcharacter]);

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var textareaPropsNames = Object.keys(otherProps).filter(function (key) {
    return !/^on[A-Z]/.test(key);
  });
  var textareaProps = textareaPropsNames.reduce(function (textareaProps2, key) {
    return Object.assign(textareaProps2, _defineProperty({}, key, props[key]));
  }, {});
  var eventPropsNames = Object.keys(otherProps).filter(function (key) {
    return /^on[A-Z]/.test(key);
  });
  var eventProps = eventPropsNames.reduce(function (eventProps2, key) {
    Object.assign(eventProps2, _defineProperty({}, key, function (e) {
      if (disabled) return;
      if (key === "onFocus") setIsFocused(true);
      if (key === "onBlur") setIsFocused(false);
      props[key](e.currentTarget.value, {
        e: e
      });
    }));
    return eventProps2;
  }, {});
  var textareaClassNames = classNames(className, "".concat(classPrefix, "-textarea__inner"), (_classNames = {}, _defineProperty(_classNames, "".concat(classPrefix, "-is-disabled"), disabled), _defineProperty(_classNames, "".concat(classPrefix, "-is-focused"), isFocused), _defineProperty(_classNames, "".concat(classPrefix, "-resize-none"), _typeof(autosize) === "object"), _classNames));

  function inputValueChangeHandle(e) {
    var target = e.target;
    var val = target.value;

    if (maxcharacter && maxcharacter >= 0) {
      var stringInfo = getCharacterLength(val, maxcharacter);
      val = _typeof(stringInfo) === "object" && stringInfo.characters;
    }

    setValue(val, {
      e: e
    });
  }

  return /* @__PURE__ */React.createElement("div", {
    ref: ref,
    style: style,
    className: classNames(className, "".concat(classPrefix, "-textarea"))
  }, /* @__PURE__ */React.createElement("textarea", _objectSpread(_objectSpread(_objectSpread({}, textareaProps), eventProps), {}, {
    value: value,
    style: {
      height: autosize ? null : "auto"
    },
    className: textareaClassNames,
    readOnly: readonly,
    autoFocus: autofocus,
    disabled: disabled,
    maxLength: maxlength,
    onChange: inputValueChangeHandle,
    onKeyDown: function onKeyDown(e) {
      return onKeydown(e.currentTarget.value, {
        e: e
      });
    },
    onKeyPress: function onKeyPress(e) {
      return onKeypress(e.currentTarget.value, {
        e: e
      });
    },
    onKeyUp: function onKeyUp(e) {
      return onKeyup(e.currentTarget.value, {
        e: e
      });
    }
  })), hasMaxcharacter ? /* @__PURE__ */React.createElement("span", {
    className: "".concat(classPrefix, "-textarea__limit")
  }, "".concat(characterLength, "/").concat(maxcharacter)) : null, !hasMaxcharacter && maxlength ? /* @__PURE__ */React.createElement("span", {
    className: "".concat(classPrefix, "-textarea__limit")
  }, "".concat(currentLength, "/").concat(maxlength)) : null);
});
Textarea.displayName = "Textarea";

export { Textarea as default };
//# sourceMappingURL=Textarea.js.map
