{"version":3,"file":"tree-store.js","sources":["../../../../src/_common/js/tree/tree-store.ts"],"sourcesContent":["import difference from 'lodash/difference';\nimport camelCase from 'lodash/camelCase';\nimport isPlainObject from 'lodash/isPlainObject';\nimport { TreeNode } from './tree-node';\nimport {\n  TreeNodeValue,\n  TypeIdMap,\n  TypeTimer,\n  TypeTargetNode,\n  TypeTreeNodeData,\n  TypeTreeStoreOptions,\n  TypeTreeFilter,\n  TypeTreeFilterOptions,\n  TypeRelatedNodesOptions,\n  TypeTreeEventState,\n} from './types';\n\n// 构建一个树的数据模型\n// 基本设计思想：写入时更新，减少读取消耗，以减少未来实现虚拟滚动所需的计算量\n// 任何一次数据写入，会触发相应节点的状态更新\nexport class TreeStore {\n  // 根节点集合\n  public children: TreeNode[];\n\n  // 所有节点集合\n  public nodes: TreeNode[];\n\n  // 所有节点映射\n  public nodeMap: Map<TreeNodeValue, TreeNode>;\n\n  // 配置选项\n  public config: TypeTreeStoreOptions;\n\n  // 活动节点集合\n  public activedMap: TypeIdMap;\n\n  // 数据被更新的节点集合\n  public updatedMap: TypeIdMap;\n\n  // 选中节点集合\n  public checkedMap: TypeIdMap;\n\n  // 展开节点的集合\n  public expandedMap: TypeIdMap;\n\n  // 符合过滤条件的节点的集合\n  public filterMap: TypeIdMap;\n\n  // 数据更新计时器\n  public updateTimer: TypeTimer;\n\n  // 识别是否需要重排\n  public shouldReflow: boolean;\n\n  // 树节点过滤器\n  public prevFilter: TypeTreeFilter;\n\n  public constructor(options: TypeTreeStoreOptions) {\n    const config: TypeTreeStoreOptions = {\n      prefix: 't',\n      keys: {},\n      expandAll: false,\n      expandLevel: 0,\n      expandMutex: false,\n      expandParent: false,\n      activable: false,\n      activeMultiple: false,\n      checkable: false,\n      checkStrictly: false,\n      disabled: false,\n      load: null,\n      lazy: false,\n      valueMode: 'onlyLeaf',\n      filter: null,\n      onLoad: null,\n      onReflow: null,\n      onUpdate: null,\n      ...options,\n    };\n    this.config = config;\n    this.nodes = [];\n    this.children = [];\n    this.nodeMap = new Map();\n    this.activedMap = new Map();\n    this.expandedMap = new Map();\n    this.checkedMap = new Map();\n    this.updatedMap = new Map();\n    this.filterMap = new Map();\n    this.prevFilter = null;\n    // 这个计时器确保频繁的 update 事件被归纳为1次完整数据更新后的触发\n    this.updateTimer = null;\n    // 在子节点增删改查时，将此属性设置为 true，来触发视图更新\n    this.shouldReflow = false;\n  }\n\n  // 配置选项\n  public setConfig(options: TypeTreeStoreOptions) {\n    let hasChanged = false;\n    Object.keys(options).forEach((key) => {\n      const val = options[key];\n      if (val !== this.config[key]) {\n        hasChanged = true;\n        this.config[key] = val;\n      }\n    });\n    if (hasChanged) {\n      // 在 td-tree 的 render 方法中调用 setConfig\n      // 这样减少了 watch 属性\n      // 仅在属性变更后刷新状态\n      // 这样可以避免触发渲染死循环\n      this.refreshState();\n    }\n  }\n\n  // 获取根孩子节点列表\n  public getChildren() {\n    return this.children;\n  }\n\n  // 获取节点对象\n  public getNode(item: TypeTargetNode): TreeNode {\n    let node = null;\n    if (typeof item === 'string' || typeof item === 'number') {\n      node = this.nodeMap.get(item);\n    } else if (item instanceof TreeNode) {\n      node = this.nodeMap.get(item.value);\n    }\n    return node;\n  }\n\n  // 获取节点在总节点列表中的位置\n  public getIndex(node: TreeNode): number {\n    return this.nodes.indexOf(node);\n  }\n\n  // 获取指定节点的父节点\n  public getParent(value: TypeTargetNode): TreeNode {\n    let parent = null;\n    const node = this.getNode(value);\n    if (node) {\n      parent = node.getParent();\n    }\n    return parent;\n  }\n\n  // 获取指定节点的所有父节点\n  public getParents(value: TypeTargetNode): TreeNode[] {\n    const node = this.getNode(value);\n    let parents: TreeNode[] = [];\n    if (node) {\n      parents = node.getParents();\n    }\n    return parents;\n  }\n\n  // 获取指定节点在其所在 children 中的位置\n  public getNodeIndex(value: TypeTargetNode): number {\n    const node = this.getNode(value);\n    let index = -1;\n    if (node) {\n      index = node.getIndex();\n    }\n    return index;\n  }\n\n  // 获取所有符合条件的节点\n  public getNodes(\n    item?: TypeTargetNode,\n    options?: TypeTreeFilterOptions,\n  ): TreeNode[] {\n    let nodes: TreeNode[] = [];\n    let val: TreeNodeValue = '';\n    if (typeof item === 'string' || typeof item === 'number') {\n      val = item;\n    } else if (item instanceof TreeNode) {\n      val = item.value;\n    }\n    if (!val) {\n      nodes = this.nodes.slice(0);\n    } else {\n      const node = this.getNode(val);\n      if (node) {\n        nodes = node.walk();\n      }\n    }\n\n    if (options) {\n      const conf: TypeTreeFilterOptions = {\n        filter: null,\n        level: Infinity,\n        ...options,\n      };\n      if (typeof conf.level === 'number' && conf.level !== Infinity) {\n        nodes = nodes.filter((node) => node.level <= conf.level);\n      }\n      if (typeof conf.filter === 'function') {\n        nodes = nodes.filter((node) => {\n          const nodeModel = node.getModel();\n          return conf.filter(nodeModel);\n        });\n      }\n      if (isPlainObject(conf.props)) {\n        nodes = nodes.filter((node) => {\n          const result = Object.keys(conf.props).every((key) => {\n            const propEqual = node[key] === conf.props[key];\n            return propEqual;\n          });\n          return result;\n        });\n      }\n    }\n    return nodes;\n  }\n\n  // 给树添加节点数据\n  public append(list: TypeTreeNodeData[]): void {\n    list.forEach((item) => {\n      const node = new TreeNode(this, item);\n      this.children.push(node);\n    });\n    this.reflow();\n  }\n\n  // 重新加载数据\n  public reload(list: TypeTreeNodeData[]): void {\n    this.expandedMap.clear();\n    this.checkedMap.clear();\n    this.activedMap.clear();\n    this.filterMap.clear();\n    this.removeAll();\n    this.append(list);\n  }\n\n  // 解析节点数据，适配多种节点类型\n  public parseNodeData(\n    para: TreeNodeValue | TreeNode | TypeTreeNodeData,\n    item: TypeTreeNodeData | TypeTreeNodeData[] | TreeNode,\n  ) {\n    let value: TreeNodeValue = '';\n    let node = null;\n    let data = null;\n\n    if (typeof para === 'string' || typeof para === 'number') {\n      value = para;\n      data = item;\n      node = this.getNode(value);\n    } else if (para instanceof TreeNode) {\n      node = para;\n      data = item;\n    } else {\n      data = para;\n    }\n    const spec = {\n      node,\n      data,\n    };\n    return spec;\n  }\n\n  /**\n   * 向指定节点追加节点或者数据\n   * 支持下列使用方式\n   * item: 节点数据, TreeNode: 节点实例, value: 节点值(ID)\n   * appendNodes(item)\n   * appendNodes(TreeNode)\n   * appendNodes(value, item)\n   * appendNodes(value, TreeNode)\n   * appendNodes(TreeNode, item)\n   * appendNodes(TreeNode, TreeNode)\n   */\n  public appendNodes(\n    para?: TypeTargetNode | TypeTreeNodeData,\n    item?: TypeTreeNodeData | TreeNode,\n  ): void {\n    const spec = this.parseNodeData(para, item);\n    if (spec.data) {\n      if (!spec.node) {\n        // 在根节点插入\n        if (spec.data instanceof TreeNode) {\n          spec.data.appendTo(this);\n        } else if (Array.isArray(spec.data)) {\n          this.append(spec.data);\n        } else {\n          this.append([spec.data]);\n        }\n      } else {\n        // 插入到目标节点之下\n        if (spec.data instanceof TreeNode) {\n          spec.data.appendTo(this, spec.node);\n        } else if (Array.isArray(spec.data)) {\n          spec.node.append(spec.data);\n        } else {\n          spec.node.append([spec.data]);\n        }\n        spec.node.updateRelated();\n      }\n    }\n  }\n\n  // 在目标节点之前插入节点\n  public insertBefore(value: TypeTargetNode, item: TypeTreeNodeData): void {\n    const node = this.getNode(value);\n    if (node) {\n      node.insertBefore(item);\n    }\n  }\n\n  // 在目标节点之后插入节点\n  public insertAfter(value: TypeTargetNode, item: TypeTreeNodeData): void {\n    const node = this.getNode(value);\n    if (node) {\n      node.insertAfter(item);\n    }\n  }\n\n  // 更新树结构\n  // 清空 nodes 数组，然后遍历所有根节点重新插入 node\n  public refreshNodes(): void {\n    const { children, nodes } = this;\n    nodes.length = 0;\n    children.forEach((node) => {\n      const list = node.walk();\n      Array.prototype.push.apply(nodes, list);\n    });\n  }\n\n  // 更新所有树节点状态\n  public refreshState(): void {\n    const { nodes } = this;\n    nodes.forEach((node) => {\n      node.update();\n      node.updateChecked();\n    });\n  }\n\n  // 节点重排\n  // 应该仅在树节点增删改查时调用\n  public reflow(node?: TreeNode): void {\n    this.shouldReflow = true;\n    this.updated(node);\n  }\n\n  // 触发更新事件\n  // 节点属性变更时调用\n  public updated(node?: TreeNode): void {\n    if (node?.value) {\n      this.updatedMap.set(node.value, true);\n    }\n    if (this.updateTimer) return;\n    this.updateTimer = +setTimeout(() => {\n      clearTimeout(this.updateTimer);\n      this.updateTimer = null;\n\n      // 检查节点是否需要回流，重排数组\n      if (this.shouldReflow) {\n        this.refreshNodes();\n        this.emit('reflow');\n      }\n\n      // 检查节点是否有被过滤，锁定路径节点\n      // 在此之前要遍历节点生成一个经过排序的节点数组\n      // 以便于优化锁定检查算法\n      this.lockFilterPathNodes();\n\n      const updatedList = Array.from(this.updatedMap.keys());\n      if (updatedList.length > 0) {\n        // 统计需要更新状态的节点，派发更新事件\n        const updatedNodes = updatedList.map((value) => this.getNode(value));\n        this.emit('update', {\n          nodes: updatedNodes,\n          map: this.updatedMap,\n        });\n      } else if (this.shouldReflow) {\n        // 单纯的回流不需要更新节点状态\n        // 但需要触发更新事件\n        this.emit('update', {\n          nodes: [],\n          map: this.updatedMap,\n        });\n      }\n\n      // 每次回流检查完毕，还原检查状态\n      this.shouldReflow = false;\n      this.updatedMap.clear();\n    });\n  }\n\n  // 获取激活节点集合\n  public getActived(map?: TypeIdMap): TreeNodeValue[] {\n    const activedMap = map || this.activedMap;\n    return Array.from(activedMap.keys());\n  }\n\n  // 获取指定范围的高亮节点\n  public getActivedNodes(item?: TypeTargetNode): TreeNode[] {\n    let nodes = this.getNodes(item);\n    nodes = nodes.filter((node) => node.isActived());\n    return nodes;\n  }\n\n  // 替换激活态\n  public replaceActived(list: TreeNodeValue[]): void {\n    this.resetActived();\n    this.setActived(list);\n  }\n\n  // 设置激活态\n  public setActived(actived: TreeNodeValue[]): void {\n    const { activeMultiple } = this.config;\n    const list = actived.slice(0);\n    if (!activeMultiple) {\n      list.length = 1;\n    }\n    list.forEach((val) => {\n      this.activedMap.set(val, true);\n      const node = this.getNode(val);\n      if (node) {\n        node.update();\n      }\n    });\n  }\n\n  // 重置激活态\n  public resetActived(): void {\n    const actived = this.getActived();\n    this.activedMap.clear();\n    const relatedNodes = this.getRelatedNodes(actived);\n    relatedNodes.forEach((node) => {\n      node.update();\n    });\n  }\n\n  // 获取展开节点集合\n  public getExpanded(map?: TypeIdMap): TreeNodeValue[] {\n    const expandedMap = map || this.expandedMap;\n    return Array.from(expandedMap.keys());\n  }\n\n  // 替换展开节点\n  public replaceExpanded(list: TreeNodeValue[]): void {\n    const expanded = this.getExpanded();\n    const added = difference(list, expanded);\n    const removed = difference(expanded, list);\n    this.setExpandedDirectly(removed, false);\n    this.updateExpanded(removed);\n    this.setExpanded(added);\n  }\n\n  // 批量设置展开节点\n  public setExpanded(list: TreeNodeValue[]): void {\n    this.setExpandedDirectly(list);\n    this.updateExpanded(list);\n  }\n\n  // 直接设置展开节点数据，不更新节点状态\n  public setExpandedDirectly(list: TreeNodeValue[], expanded = true): void {\n    list.forEach((val) => {\n      if (expanded) {\n        this.expandedMap.set(val, true);\n        const node = this.getNode(val);\n        if (node) {\n          node.afterExpanded();\n        }\n      } else {\n        this.expandedMap.delete(val);\n      }\n    });\n  }\n\n  // 清除所有展开节点\n  public resetExpanded(): void {\n    const expanded = this.getExpanded();\n    this.expandedMap.clear();\n    this.updateExpanded(expanded);\n  }\n\n  // 更新展开节点相关节点的状态\n  public updateExpanded(list: TreeNodeValue[]): void {\n    const relatedNodes = this.getRelatedNodes(list, {\n      withParents: false,\n    });\n    relatedNodes.forEach((node) => {\n      node.update();\n    });\n  }\n\n  // 获取选中态节点 value 数组\n  public getChecked(map?: TypeIdMap): TreeNodeValue[] {\n    const { nodes, config } = this;\n    const { valueMode, checkStrictly } = config;\n    const list: TreeNodeValue[] = [];\n    const checkedMap = map || this.checkedMap;\n    nodes.forEach((node) => {\n      if (node.isChecked(checkedMap)) {\n        if (valueMode === 'parentFirst' && !checkStrictly) {\n          if (!node.parent || !node.parent.isChecked(checkedMap)) {\n            list.push(node.value);\n          }\n        } else if (valueMode === 'onlyLeaf' && !checkStrictly) {\n          if (node.isLeaf()) {\n            list.push(node.value);\n          }\n        } else {\n          list.push(node.value);\n        }\n      }\n    });\n    return list;\n  }\n\n  // 获取指定节点下的选中节点\n  public getCheckedNodes(item?: TypeTargetNode): TreeNode[] {\n    let nodes = this.getNodes(item);\n    nodes = nodes.filter((node) => node.isChecked());\n    return nodes;\n  }\n\n  // 替换选中态列表\n  public replaceChecked(list: TreeNodeValue[]): void {\n    this.resetChecked();\n    this.setChecked(list);\n  }\n\n  // 批量设置选中态\n  public setChecked(list: TreeNodeValue[]): void {\n    const { valueMode, checkStrictly, checkable } = this.config;\n    if (!checkable) return;\n    list.forEach((val: TreeNodeValue) => {\n      const node = this.getNode(val);\n      if (node) {\n        if (valueMode === 'parentFirst' && !checkStrictly) {\n          const childrenNodes = node.walk();\n          childrenNodes.forEach((childNode) => {\n            this.checkedMap.set(childNode.value, true);\n          });\n        } else {\n          this.checkedMap.set(val, true);\n          node.updateChecked();\n        }\n      }\n    });\n    if (!checkStrictly) {\n      const checked = this.getChecked();\n      const relatedNodes = this.getRelatedNodes(checked);\n      relatedNodes.forEach((node) => {\n        node.updateChecked();\n      });\n    }\n  }\n\n  // 清除所有选中节点\n  public resetChecked(): void {\n    const checked = this.getChecked();\n    const relatedNodes = this.getRelatedNodes(checked);\n    this.checkedMap.clear();\n    relatedNodes.forEach((node) => {\n      node.updateChecked();\n    });\n  }\n\n  // 更新全部节点状态\n  public updateAll(): void {\n    const nodes = this.getNodes();\n    nodes.forEach((node) => {\n      node.update();\n    });\n  }\n\n  // 移除指定节点\n  public remove(value?: TypeTargetNode): void {\n    const node = this.getNode(value);\n    if (node) {\n      node.remove();\n    }\n  }\n\n  // 清空所有节点\n  public removeAll(): void {\n    const nodes = this.getNodes();\n    nodes.forEach((node) => {\n      node.remove();\n    });\n  }\n\n  // 获取节点状态变化可能影响的周边节点\n  // 实现最小遍历集合\n  public getRelatedNodes(\n    list: TreeNodeValue[],\n    options?: TypeRelatedNodesOptions,\n  ): TreeNode[] {\n    const conf = {\n      withParents: true,\n      ...options,\n    };\n    const map = new Map();\n    list.forEach((value) => {\n      if (map.get(value)) return;\n      const node = this.getNode(value);\n      if (node) {\n        const parents = node.getParents();\n        const children = node.walk();\n        let related = [];\n        if (conf.withParents) {\n          related = parents.concat(children);\n        } else {\n          related = children;\n        }\n        related.forEach((relatedNode) => {\n          map.set(relatedNode.value, relatedNode);\n        });\n      }\n    });\n    const relatedNodes = Array.from(map.values());\n    return relatedNodes;\n  }\n\n  // 触发绑定的事件\n  public emit(name: string, state?: TypeTreeEventState): void {\n    const config = this.config || {};\n    const methodName = camelCase(`on-${name}`);\n    const method = config[methodName];\n    if (typeof method === 'function') {\n      method(state);\n    }\n  }\n\n  // 锁定过滤节点的路径节点\n  // 使得路径节点展开，可见，且不可操作\n  public lockFilterPathNodes() {\n    const {\n      config,\n      filterMap,\n    } = this;\n\n    // 之前没有设置过过滤器\n    // 当前也没有过滤器\n    // 则无需处理锁定节点\n    if (!config.filter && !this.prevFilter) {\n      return;\n    }\n    this.prevFilter = config.filter;\n\n    const allNodes = this.getNodes();\n    allNodes.forEach((node: TreeNode) => {\n      node.lock(false);\n    });\n    if (allNodes.length === filterMap.size) {\n      // 未经任何过滤，则无需处理锁定节点\n      return;\n    }\n\n    // 构造路径节点map\n    const map = new Map();\n\n    // 全部节点要经过排序，才能使用这个算法\n    // 比起每个过滤节点调用 getParents 方法检查父节点状态\n    // 算法复杂度 O(N*log(N)) => O(N)\n    allNodes.reverse().forEach((item: TreeNode) => {\n      const node = item;\n\n      // 被过滤节点父节点固定为展开状态\n      const parent = node.getParent();\n      if (node.vmIsRest) {\n        if (parent) {\n          parent.expanded = true;\n        }\n        // 被过滤节点固定为展示状态\n        node.visible = true;\n      }\n      if (node.vmIsRest || map.get(node.value)) {\n        if (parent && !parent.vmIsRest) {\n          map.set(parent.value, true);\n        }\n      }\n    });\n\n    // 锁定路径节点展示样式\n    const filterPathValues = Array.from(map.keys());\n    filterPathValues.forEach((value: TreeNodeValue) => {\n      const node = this.getNode(value);\n      if (node) {\n        node.lock(true);\n      }\n    });\n  }\n}\n\nexport default TreeStore;\n"],"names":["TreeStore","options","config","prefix","keys","expandAll","expandLevel","expandMutex","expandParent","activable","activeMultiple","checkable","checkStrictly","disabled","load","lazy","valueMode","filter","onLoad","onReflow","onUpdate","nodes","children","nodeMap","Map","activedMap","expandedMap","checkedMap","updatedMap","filterMap","prevFilter","updateTimer","shouldReflow","hasChanged","Object","forEach","key","val","refreshState","item","node","get","TreeNode","value","indexOf","parent","getNode","getParent","parents","getParents","index","getIndex","slice","walk","conf","level","Infinity","nodeModel","getModel","isPlainObject","props","result","every","propEqual","list","push","reflow","clear","removeAll","append","para","data","spec","parseNodeData","appendTo","Array","isArray","updateRelated","insertBefore","insertAfter","length","prototype","apply","update","updateChecked","updated","set","setTimeout","clearTimeout","refreshNodes","emit","lockFilterPathNodes","updatedList","from","updatedNodes","map","getNodes","isActived","resetActived","setActived","actived","getActived","relatedNodes","getRelatedNodes","expanded","getExpanded","added","difference","removed","setExpandedDirectly","updateExpanded","setExpanded","afterExpanded","withParents","isChecked","isLeaf","resetChecked","setChecked","childrenNodes","childNode","checked","getChecked","remove","related","concat","relatedNode","values","name","state","methodName","camelCase","method","allNodes","lock","size","reverse","vmIsRest","visible","filterPathValues"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAIaA,SAAb;AAaE,qBAAYC,OAAZ,EAAqB;AAAA;;AACnB,QAAMC,MAAM;AACVC,MAAAA,MAAM,EAAE,GADE;AAEVC,MAAAA,IAAI,EAAE,EAFI;AAGVC,MAAAA,SAAS,EAAE,KAHD;AAIVC,MAAAA,WAAW,EAAE,CAJH;AAKVC,MAAAA,WAAW,EAAE,KALH;AAMVC,MAAAA,YAAY,EAAE,KANJ;AAOVC,MAAAA,SAAS,EAAE,KAPD;AAQVC,MAAAA,cAAc,EAAE,KARN;AASVC,MAAAA,SAAS,EAAE,KATD;AAUVC,MAAAA,aAAa,EAAE,KAVL;AAWVC,MAAAA,QAAQ,EAAE,KAXA;AAYVC,MAAAA,IAAI,EAAE,IAZI;AAaVC,MAAAA,IAAI,EAAE,KAbI;AAcVC,MAAAA,SAAS,EAAE,UAdD;AAeVC,MAAAA,MAAM,EAAE,IAfE;AAgBVC,MAAAA,MAAM,EAAE,IAhBE;AAiBVC,MAAAA,QAAQ,EAAE,IAjBA;AAkBVC,MAAAA,QAAQ,EAAE;AAlBA,OAmBPnB,OAnBO,CAAZ;;AAqBA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKmB,KAAL,GAAa,EAAb;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,OAAL,kBAA+B,IAAIC,GAAJ,EAA/B;AACA,SAAKC,UAAL,kBAAkC,IAAID,GAAJ,EAAlC;AACA,SAAKE,WAAL,kBAAmC,IAAIF,GAAJ,EAAnC;AACA,SAAKG,UAAL,kBAAkC,IAAIH,GAAJ,EAAlC;AACA,SAAKI,UAAL,kBAAkC,IAAIJ,GAAJ,EAAlC;AACA,SAAKK,SAAL,kBAAiC,IAAIL,GAAJ,EAAjC;AACA,SAAKM,UAAL,GAAkB,IAAlB;AACA,SAAKC,WAAL,GAAmB,IAAnB;AACA,SAAKC,YAAL,GAAoB,KAApB;AACD;;AA/CH;AAAA;AAAA,WAgDE,mBAAU/B,OAAV,EAAmB;AAAA;;AACjB,UAAIgC,UAAU,GAAG,KAAjB;AACAC,MAAAA,MAAM,CAAC9B,IAAP,CAAYH,OAAZ,EAAqBkC,OAArB,CAA6B,UAACC,GAAD,EAAS;AACpC,YAAMC,GAAG,GAAGpC,OAAO,CAACmC,GAAD,CAAnB;;AACA,YAAIC,GAAG,KAAK,KAAI,CAACnC,MAAL,CAAYkC,GAAZ,CAAZ,EAA8B;AAC5BH,UAAAA,UAAU,GAAG,IAAb;AACA,UAAA,KAAI,CAAC/B,MAAL,CAAYkC,GAAZ,IAAmBC,GAAnB;AACD;AACF,OAND;;AAOA,UAAIJ,UAAJ,EAAgB;AACd,aAAKK,YAAL;AACD;AACF;AA5DH;AAAA;AAAA,WA6DE,uBAAc;AACZ,aAAO,KAAKhB,QAAZ;AACD;AA/DH;AAAA;AAAA,WAgEE,iBAAQiB,IAAR,EAAc;AACZ,UAAIC,IAAI,GAAG,IAAX;;AACA,UAAI,OAAOD,IAAP,KAAgB,QAAhB,IAA4B,OAAOA,IAAP,KAAgB,QAAhD,EAA0D;AACxDC,QAAAA,IAAI,GAAG,KAAKjB,OAAL,CAAakB,GAAb,CAAiBF,IAAjB,CAAP;AACD,OAFD,MAEO,IAAIA,IAAI,YAAYG,QAApB,EAA8B;AACnCF,QAAAA,IAAI,GAAG,KAAKjB,OAAL,CAAakB,GAAb,CAAiBF,IAAI,CAACI,KAAtB,CAAP;AACD;;AACD,aAAOH,IAAP;AACD;AAxEH;AAAA;AAAA,WAyEE,kBAASA,IAAT,EAAe;AACb,aAAO,KAAKnB,KAAL,CAAWuB,OAAX,CAAmBJ,IAAnB,CAAP;AACD;AA3EH;AAAA;AAAA,WA4EE,mBAAUG,KAAV,EAAiB;AACf,UAAIE,MAAM,GAAG,IAAb;AACA,UAAML,IAAI,GAAG,KAAKM,OAAL,CAAaH,KAAb,CAAb;;AACA,UAAIH,IAAJ,EAAU;AACRK,QAAAA,MAAM,GAAGL,IAAI,CAACO,SAAL,EAAT;AACD;;AACD,aAAOF,MAAP;AACD;AAnFH;AAAA;AAAA,WAoFE,oBAAWF,KAAX,EAAkB;AAChB,UAAMH,IAAI,GAAG,KAAKM,OAAL,CAAaH,KAAb,CAAb;AACA,UAAIK,OAAO,GAAG,EAAd;;AACA,UAAIR,IAAJ,EAAU;AACRQ,QAAAA,OAAO,GAAGR,IAAI,CAACS,UAAL,EAAV;AACD;;AACD,aAAOD,OAAP;AACD;AA3FH;AAAA;AAAA,WA4FE,sBAAaL,KAAb,EAAoB;AAClB,UAAMH,IAAI,GAAG,KAAKM,OAAL,CAAaH,KAAb,CAAb;AACA,UAAIO,KAAK,GAAG,CAAC,CAAb;;AACA,UAAIV,IAAJ,EAAU;AACRU,QAAAA,KAAK,GAAGV,IAAI,CAACW,QAAL,EAAR;AACD;;AACD,aAAOD,KAAP;AACD;AAnGH;AAAA;AAAA,WAoGE,kBAASX,IAAT,EAAetC,OAAf,EAAwB;AACtB,UAAIoB,KAAK,GAAG,EAAZ;AACA,UAAIgB,GAAG,GAAG,EAAV;;AACA,UAAI,OAAOE,IAAP,KAAgB,QAAhB,IAA4B,OAAOA,IAAP,KAAgB,QAAhD,EAA0D;AACxDF,QAAAA,GAAG,GAAGE,IAAN;AACD,OAFD,MAEO,IAAIA,IAAI,YAAYG,QAApB,EAA8B;AACnCL,QAAAA,GAAG,GAAGE,IAAI,CAACI,KAAX;AACD;;AACD,UAAI,CAACN,GAAL,EAAU;AACRhB,QAAAA,KAAK,GAAG,KAAKA,KAAL,CAAW+B,KAAX,CAAiB,CAAjB,CAAR;AACD,OAFD,MAEO;AACL,YAAMZ,IAAI,GAAG,KAAKM,OAAL,CAAaT,GAAb,CAAb;;AACA,YAAIG,IAAJ,EAAU;AACRnB,UAAAA,KAAK,GAAGmB,IAAI,CAACa,IAAL,EAAR;AACD;AACF;;AACD,UAAIpD,OAAJ,EAAa;AACX,YAAMqD,IAAI;AACRrC,UAAAA,MAAM,EAAE,IADA;AAERsC,UAAAA,KAAK,EAAEC;AAFC,WAGLvD,OAHK,CAAV;;AAKA,YAAI,OAAOqD,IAAI,CAACC,KAAZ,KAAsB,QAAtB,IAAkCD,IAAI,CAACC,KAAL,KAAeC,QAArD,EAA+D;AAC7DnC,UAAAA,KAAK,GAAGA,KAAK,CAACJ,MAAN,CAAa,UAACuB,IAAD;AAAA,mBAAUA,IAAI,CAACe,KAAL,IAAcD,IAAI,CAACC,KAA7B;AAAA,WAAb,CAAR;AACD;;AACD,YAAI,OAAOD,IAAI,CAACrC,MAAZ,KAAuB,UAA3B,EAAuC;AACrCI,UAAAA,KAAK,GAAGA,KAAK,CAACJ,MAAN,CAAa,UAACuB,IAAD,EAAU;AAC7B,gBAAMiB,SAAS,GAAGjB,IAAI,CAACkB,QAAL,EAAlB;AACA,mBAAOJ,IAAI,CAACrC,MAAL,CAAYwC,SAAZ,CAAP;AACD,WAHO,CAAR;AAID;;AACD,YAAIE,eAAa,CAACL,IAAI,CAACM,KAAN,CAAjB,EAA+B;AAC7BvC,UAAAA,KAAK,GAAGA,KAAK,CAACJ,MAAN,CAAa,UAACuB,IAAD,EAAU;AAC7B,gBAAMqB,MAAM,GAAG3B,MAAM,CAAC9B,IAAP,CAAYkD,IAAI,CAACM,KAAjB,EAAwBE,KAAxB,CAA8B,UAAC1B,GAAD,EAAS;AACpD,kBAAM2B,SAAS,GAAGvB,IAAI,CAACJ,GAAD,CAAJ,KAAckB,IAAI,CAACM,KAAL,CAAWxB,GAAX,CAAhC;AACA,qBAAO2B,SAAP;AACD,aAHc,CAAf;AAIA,mBAAOF,MAAP;AACD,WANO,CAAR;AAOD;AACF;;AACD,aAAOxC,KAAP;AACD;AA9IH;AAAA;AAAA,WA+IE,gBAAO2C,IAAP,EAAa;AAAA;;AACXA,MAAAA,IAAI,CAAC7B,OAAL,CAAa,UAACI,IAAD,EAAU;AACrB,YAAMC,IAAI,GAAG,IAAIE,QAAJ,CAAa,MAAb,EAAmBH,IAAnB,CAAb;;AACA,QAAA,MAAI,CAACjB,QAAL,CAAc2C,IAAd,CAAmBzB,IAAnB;AACD,OAHD;AAIA,WAAK0B,MAAL;AACD;AArJH;AAAA;AAAA,WAsJE,gBAAOF,IAAP,EAAa;AACX,WAAKtC,WAAL,CAAiByC,KAAjB;AACA,WAAKxC,UAAL,CAAgBwC,KAAhB;AACA,WAAK1C,UAAL,CAAgB0C,KAAhB;AACA,WAAKtC,SAAL,CAAesC,KAAf;AACA,WAAKC,SAAL;AACA,WAAKC,MAAL,CAAYL,IAAZ;AACD;AA7JH;AAAA;AAAA,WA8JE,uBAAcM,IAAd,EAAoB/B,IAApB,EAA0B;AACxB,UAAII,KAAK,GAAG,EAAZ;AACA,UAAIH,IAAI,GAAG,IAAX;AACA,UAAI+B,IAAI,GAAG,IAAX;;AACA,UAAI,OAAOD,IAAP,KAAgB,QAAhB,IAA4B,OAAOA,IAAP,KAAgB,QAAhD,EAA0D;AACxD3B,QAAAA,KAAK,GAAG2B,IAAR;AACAC,QAAAA,IAAI,GAAGhC,IAAP;AACAC,QAAAA,IAAI,GAAG,KAAKM,OAAL,CAAaH,KAAb,CAAP;AACD,OAJD,MAIO,IAAI2B,IAAI,YAAY5B,QAApB,EAA8B;AACnCF,QAAAA,IAAI,GAAG8B,IAAP;AACAC,QAAAA,IAAI,GAAGhC,IAAP;AACD,OAHM,MAGA;AACLgC,QAAAA,IAAI,GAAGD,IAAP;AACD;;AACD,UAAME,IAAI,GAAG;AACXhC,QAAAA,IAAI,EAAJA,IADW;AAEX+B,QAAAA,IAAI,EAAJA;AAFW,OAAb;AAIA,aAAOC,IAAP;AACD;AAjLH;AAAA;AAAA,WAkLE,qBAAYF,IAAZ,EAAkB/B,IAAlB,EAAwB;AACtB,UAAMiC,IAAI,GAAG,KAAKC,aAAL,CAAmBH,IAAnB,EAAyB/B,IAAzB,CAAb;;AACA,UAAIiC,IAAI,CAACD,IAAT,EAAe;AACb,YAAI,CAACC,IAAI,CAAChC,IAAV,EAAgB;AACd,cAAIgC,IAAI,CAACD,IAAL,YAAqB7B,QAAzB,EAAmC;AACjC8B,YAAAA,IAAI,CAACD,IAAL,CAAUG,QAAV,CAAmB,IAAnB;AACD,WAFD,MAEO,IAAIC,KAAK,CAACC,OAAN,CAAcJ,IAAI,CAACD,IAAnB,CAAJ,EAA8B;AACnC,iBAAKF,MAAL,CAAYG,IAAI,CAACD,IAAjB;AACD,WAFM,MAEA;AACL,iBAAKF,MAAL,CAAY,CAACG,IAAI,CAACD,IAAN,CAAZ;AACD;AACF,SARD,MAQO;AACL,cAAIC,IAAI,CAACD,IAAL,YAAqB7B,QAAzB,EAAmC;AACjC8B,YAAAA,IAAI,CAACD,IAAL,CAAUG,QAAV,CAAmB,IAAnB,EAAyBF,IAAI,CAAChC,IAA9B;AACD,WAFD,MAEO,IAAImC,KAAK,CAACC,OAAN,CAAcJ,IAAI,CAACD,IAAnB,CAAJ,EAA8B;AACnCC,YAAAA,IAAI,CAAChC,IAAL,CAAU6B,MAAV,CAAiBG,IAAI,CAACD,IAAtB;AACD,WAFM,MAEA;AACLC,YAAAA,IAAI,CAAChC,IAAL,CAAU6B,MAAV,CAAiB,CAACG,IAAI,CAACD,IAAN,CAAjB;AACD;;AACDC,UAAAA,IAAI,CAAChC,IAAL,CAAUqC,aAAV;AACD;AACF;AACF;AAxMH;AAAA;AAAA,WAyME,sBAAalC,KAAb,EAAoBJ,IAApB,EAA0B;AACxB,UAAMC,IAAI,GAAG,KAAKM,OAAL,CAAaH,KAAb,CAAb;;AACA,UAAIH,IAAJ,EAAU;AACRA,QAAAA,IAAI,CAACsC,YAAL,CAAkBvC,IAAlB;AACD;AACF;AA9MH;AAAA;AAAA,WA+ME,qBAAYI,KAAZ,EAAmBJ,IAAnB,EAAyB;AACvB,UAAMC,IAAI,GAAG,KAAKM,OAAL,CAAaH,KAAb,CAAb;;AACA,UAAIH,IAAJ,EAAU;AACRA,QAAAA,IAAI,CAACuC,WAAL,CAAiBxC,IAAjB;AACD;AACF;AApNH;AAAA;AAAA,WAqNE,wBAAe;AACb,UAAQjB,QAAR,GAA4B,IAA5B,CAAQA,QAAR;AAAA,UAAkBD,KAAlB,GAA4B,IAA5B,CAAkBA,KAAlB;AACAA,MAAAA,KAAK,CAAC2D,MAAN,GAAe,CAAf;AACA1D,MAAAA,QAAQ,CAACa,OAAT,CAAiB,UAACK,IAAD,EAAU;AACzB,YAAMwB,IAAI,GAAGxB,IAAI,CAACa,IAAL,EAAb;AACAsB,QAAAA,KAAK,CAACM,SAAN,CAAgBhB,IAAhB,CAAqBiB,KAArB,CAA2B7D,KAA3B,EAAkC2C,IAAlC;AACD,OAHD;AAID;AA5NH;AAAA;AAAA,WA6NE,wBAAe;AACb,UAAQ3C,KAAR,GAAkB,IAAlB,CAAQA,KAAR;AACAA,MAAAA,KAAK,CAACc,OAAN,CAAc,UAACK,IAAD,EAAU;AACtBA,QAAAA,IAAI,CAAC2C,MAAL;AACA3C,QAAAA,IAAI,CAAC4C,aAAL;AACD,OAHD;AAID;AAnOH;AAAA;AAAA,WAoOE,gBAAO5C,IAAP,EAAa;AACX,WAAKR,YAAL,GAAoB,IAApB;AACA,WAAKqD,OAAL,CAAa7C,IAAb;AACD;AAvOH;AAAA;AAAA,WAwOE,iBAAQA,IAAR,EAAc;AAAA;;AACZ,UAAIA,IAAJ,aAAIA,IAAJ,eAAIA,IAAI,CAAEG,KAAV,EAAiB;AACf,aAAKf,UAAL,CAAgB0D,GAAhB,CAAoB9C,IAAI,CAACG,KAAzB,EAAgC,IAAhC;AACD;;AACD,UAAI,KAAKZ,WAAT,EACE;AACF,WAAKA,WAAL,GAAmB,CAACwD,UAAU,CAAC,YAAM;AACnCC,QAAAA,YAAY,CAAC,MAAI,CAACzD,WAAN,CAAZ;AACA,QAAA,MAAI,CAACA,WAAL,GAAmB,IAAnB;;AACA,YAAI,MAAI,CAACC,YAAT,EAAuB;AACrB,UAAA,MAAI,CAACyD,YAAL;;AACA,UAAA,MAAI,CAACC,IAAL,CAAU,QAAV;AACD;;AACD,QAAA,MAAI,CAACC,mBAAL;;AACA,YAAMC,WAAW,GAAGjB,KAAK,CAACkB,IAAN,CAAW,MAAI,CAACjE,UAAL,CAAgBxB,IAAhB,EAAX,CAApB;;AACA,YAAIwF,WAAW,CAACZ,MAAZ,GAAqB,CAAzB,EAA4B;AAC1B,cAAMc,YAAY,GAAGF,WAAW,CAACG,GAAZ,CAAgB,UAACpD,KAAD;AAAA,mBAAW,MAAI,CAACG,OAAL,CAAaH,KAAb,CAAX;AAAA,WAAhB,CAArB;;AACA,UAAA,MAAI,CAAC+C,IAAL,CAAU,QAAV,EAAoB;AAClBrE,YAAAA,KAAK,EAAEyE,YADW;AAElBC,YAAAA,GAAG,EAAE,MAAI,CAACnE;AAFQ,WAApB;AAID,SAND,MAMO,IAAI,MAAI,CAACI,YAAT,EAAuB;AAC5B,UAAA,MAAI,CAAC0D,IAAL,CAAU,QAAV,EAAoB;AAClBrE,YAAAA,KAAK,EAAE,EADW;AAElB0E,YAAAA,GAAG,EAAE,MAAI,CAACnE;AAFQ,WAApB;AAID;;AACD,QAAA,MAAI,CAACI,YAAL,GAAoB,KAApB;;AACA,QAAA,MAAI,CAACJ,UAAL,CAAgBuC,KAAhB;AACD,OAvB6B,CAA9B;AAwBD;AAtQH;AAAA;AAAA,WAuQE,oBAAW4B,GAAX,EAAgB;AACd,UAAMtE,UAAU,GAAGsE,GAAG,IAAI,KAAKtE,UAA/B;AACA,aAAOkD,KAAK,CAACkB,IAAN,CAAWpE,UAAU,CAACrB,IAAX,EAAX,CAAP;AACD;AA1QH;AAAA;AAAA,WA2QE,yBAAgBmC,IAAhB,EAAsB;AACpB,UAAIlB,KAAK,GAAG,KAAK2E,QAAL,CAAczD,IAAd,CAAZ;AACAlB,MAAAA,KAAK,GAAGA,KAAK,CAACJ,MAAN,CAAa,UAACuB,IAAD;AAAA,eAAUA,IAAI,CAACyD,SAAL,EAAV;AAAA,OAAb,CAAR;AACA,aAAO5E,KAAP;AACD;AA/QH;AAAA;AAAA,WAgRE,wBAAe2C,IAAf,EAAqB;AACnB,WAAKkC,YAAL;AACA,WAAKC,UAAL,CAAgBnC,IAAhB;AACD;AAnRH;AAAA;AAAA,WAoRE,oBAAWoC,OAAX,EAAoB;AAAA;;AAClB,UAAQ1F,cAAR,GAA2B,KAAKR,MAAhC,CAAQQ,cAAR;AACA,UAAMsD,IAAI,GAAGoC,OAAO,CAAChD,KAAR,CAAc,CAAd,CAAb;;AACA,UAAI,CAAC1C,cAAL,EAAqB;AACnBsD,QAAAA,IAAI,CAACgB,MAAL,GAAc,CAAd;AACD;;AACDhB,MAAAA,IAAI,CAAC7B,OAAL,CAAa,UAACE,GAAD,EAAS;AACpB,QAAA,MAAI,CAACZ,UAAL,CAAgB6D,GAAhB,CAAoBjD,GAApB,EAAyB,IAAzB;;AACA,YAAMG,IAAI,GAAG,MAAI,CAACM,OAAL,CAAaT,GAAb,CAAb;;AACA,YAAIG,IAAJ,EAAU;AACRA,UAAAA,IAAI,CAAC2C,MAAL;AACD;AACF,OAND;AAOD;AAjSH;AAAA;AAAA,WAkSE,wBAAe;AACb,UAAMiB,OAAO,GAAG,KAAKC,UAAL,EAAhB;AACA,WAAK5E,UAAL,CAAgB0C,KAAhB;AACA,UAAMmC,YAAY,GAAG,KAAKC,eAAL,CAAqBH,OAArB,CAArB;AACAE,MAAAA,YAAY,CAACnE,OAAb,CAAqB,UAACK,IAAD,EAAU;AAC7BA,QAAAA,IAAI,CAAC2C,MAAL;AACD,OAFD;AAGD;AAzSH;AAAA;AAAA,WA0SE,qBAAYY,GAAZ,EAAiB;AACf,UAAMrE,WAAW,GAAGqE,GAAG,IAAI,KAAKrE,WAAhC;AACA,aAAOiD,KAAK,CAACkB,IAAN,CAAWnE,WAAW,CAACtB,IAAZ,EAAX,CAAP;AACD;AA7SH;AAAA;AAAA,WA8SE,yBAAgB4D,IAAhB,EAAsB;AACpB,UAAMwC,QAAQ,GAAG,KAAKC,WAAL,EAAjB;AACA,UAAMC,KAAK,GAAGC,YAAU,CAAC3C,IAAD,EAAOwC,QAAP,CAAxB;AACA,UAAMI,OAAO,GAAGD,YAAU,CAACH,QAAD,EAAWxC,IAAX,CAA1B;AACA,WAAK6C,mBAAL,CAAyBD,OAAzB,EAAkC,KAAlC;AACA,WAAKE,cAAL,CAAoBF,OAApB;AACA,WAAKG,WAAL,CAAiBL,KAAjB;AACD;AArTH;AAAA;AAAA,WAsTE,qBAAY1C,IAAZ,EAAkB;AAChB,WAAK6C,mBAAL,CAAyB7C,IAAzB;AACA,WAAK8C,cAAL,CAAoB9C,IAApB;AACD;AAzTH;AAAA;AAAA,WA0TE,6BAAoBA,IAApB,EAA2C;AAAA;;AAAA,UAAjBwC,QAAiB,uEAAN,IAAM;AACzCxC,MAAAA,IAAI,CAAC7B,OAAL,CAAa,UAACE,GAAD,EAAS;AACpB,YAAImE,QAAJ,EAAc;AACZ,UAAA,MAAI,CAAC9E,WAAL,CAAiB4D,GAAjB,CAAqBjD,GAArB,EAA0B,IAA1B;;AACA,cAAMG,IAAI,GAAG,MAAI,CAACM,OAAL,CAAaT,GAAb,CAAb;;AACA,cAAIG,IAAJ,EAAU;AACRA,YAAAA,IAAI,CAACwE,aAAL;AACD;AACF,SAND,MAMO;AACL,UAAA,MAAI,CAACtF,WAAL,WAAwBW,GAAxB;AACD;AACF,OAVD;AAWD;AAtUH;AAAA;AAAA,WAuUE,yBAAgB;AACd,UAAMmE,QAAQ,GAAG,KAAKC,WAAL,EAAjB;AACA,WAAK/E,WAAL,CAAiByC,KAAjB;AACA,WAAK2C,cAAL,CAAoBN,QAApB;AACD;AA3UH;AAAA;AAAA,WA4UE,wBAAexC,IAAf,EAAqB;AACnB,UAAMsC,YAAY,GAAG,KAAKC,eAAL,CAAqBvC,IAArB,EAA2B;AAC9CiD,QAAAA,WAAW,EAAE;AADiC,OAA3B,CAArB;AAGAX,MAAAA,YAAY,CAACnE,OAAb,CAAqB,UAACK,IAAD,EAAU;AAC7BA,QAAAA,IAAI,CAAC2C,MAAL;AACD,OAFD;AAGD;AAnVH;AAAA;AAAA,WAoVE,oBAAWY,GAAX,EAAgB;AACd,UAAQ1E,KAAR,GAA0B,IAA1B,CAAQA,KAAR;AAAA,UAAenB,MAAf,GAA0B,IAA1B,CAAeA,MAAf;AACA,UAAQc,SAAR,GAAqCd,MAArC,CAAQc,SAAR;AAAA,UAAmBJ,aAAnB,GAAqCV,MAArC,CAAmBU,aAAnB;AACA,UAAMoD,IAAI,GAAG,EAAb;AACA,UAAMrC,UAAU,GAAGoE,GAAG,IAAI,KAAKpE,UAA/B;AACAN,MAAAA,KAAK,CAACc,OAAN,CAAc,UAACK,IAAD,EAAU;AACtB,YAAIA,IAAI,CAAC0E,SAAL,CAAevF,UAAf,CAAJ,EAAgC;AAC9B,cAAIX,SAAS,KAAK,aAAd,IAA+B,CAACJ,aAApC,EAAmD;AACjD,gBAAI,CAAC4B,IAAI,CAACK,MAAN,IAAgB,CAACL,IAAI,CAACK,MAAL,CAAYqE,SAAZ,CAAsBvF,UAAtB,CAArB,EAAwD;AACtDqC,cAAAA,IAAI,CAACC,IAAL,CAAUzB,IAAI,CAACG,KAAf;AACD;AACF,WAJD,MAIO,IAAI3B,SAAS,KAAK,UAAd,IAA4B,CAACJ,aAAjC,EAAgD;AACrD,gBAAI4B,IAAI,CAAC2E,MAAL,EAAJ,EAAmB;AACjBnD,cAAAA,IAAI,CAACC,IAAL,CAAUzB,IAAI,CAACG,KAAf;AACD;AACF,WAJM,MAIA;AACLqB,YAAAA,IAAI,CAACC,IAAL,CAAUzB,IAAI,CAACG,KAAf;AACD;AACF;AACF,OAdD;AAeA,aAAOqB,IAAP;AACD;AAzWH;AAAA;AAAA,WA0WE,yBAAgBzB,IAAhB,EAAsB;AACpB,UAAIlB,KAAK,GAAG,KAAK2E,QAAL,CAAczD,IAAd,CAAZ;AACAlB,MAAAA,KAAK,GAAGA,KAAK,CAACJ,MAAN,CAAa,UAACuB,IAAD;AAAA,eAAUA,IAAI,CAAC0E,SAAL,EAAV;AAAA,OAAb,CAAR;AACA,aAAO7F,KAAP;AACD;AA9WH;AAAA;AAAA,WA+WE,wBAAe2C,IAAf,EAAqB;AACnB,WAAKoD,YAAL;AACA,WAAKC,UAAL,CAAgBrD,IAAhB;AACD;AAlXH;AAAA;AAAA,WAmXE,oBAAWA,IAAX,EAAiB;AAAA;;AACf,yBAAgD,KAAK9D,MAArD;AAAA,UAAQc,SAAR,gBAAQA,SAAR;AAAA,UAAmBJ,aAAnB,gBAAmBA,aAAnB;AAAA,UAAkCD,SAAlC,gBAAkCA,SAAlC;AACA,UAAI,CAACA,SAAL,EACE;AACFqD,MAAAA,IAAI,CAAC7B,OAAL,CAAa,UAACE,GAAD,EAAS;AACpB,YAAMG,IAAI,GAAG,MAAI,CAACM,OAAL,CAAaT,GAAb,CAAb;;AACA,YAAIG,IAAJ,EAAU;AACR,cAAIxB,SAAS,KAAK,aAAd,IAA+B,CAACJ,aAApC,EAAmD;AACjD,gBAAM0G,aAAa,GAAG9E,IAAI,CAACa,IAAL,EAAtB;AACAiE,YAAAA,aAAa,CAACnF,OAAd,CAAsB,UAACoF,SAAD,EAAe;AACnC,cAAA,MAAI,CAAC5F,UAAL,CAAgB2D,GAAhB,CAAoBiC,SAAS,CAAC5E,KAA9B,EAAqC,IAArC;AACD,aAFD;AAGD,WALD,MAKO;AACL,YAAA,MAAI,CAAChB,UAAL,CAAgB2D,GAAhB,CAAoBjD,GAApB,EAAyB,IAAzB;;AACAG,YAAAA,IAAI,CAAC4C,aAAL;AACD;AACF;AACF,OAbD;;AAcA,UAAI,CAACxE,aAAL,EAAoB;AAClB,YAAM4G,OAAO,GAAG,KAAKC,UAAL,EAAhB;AACA,YAAMnB,YAAY,GAAG,KAAKC,eAAL,CAAqBiB,OAArB,CAArB;AACAlB,QAAAA,YAAY,CAACnE,OAAb,CAAqB,UAACK,IAAD,EAAU;AAC7BA,UAAAA,IAAI,CAAC4C,aAAL;AACD,SAFD;AAGD;AACF;AA5YH;AAAA;AAAA,WA6YE,wBAAe;AACb,UAAMoC,OAAO,GAAG,KAAKC,UAAL,EAAhB;AACA,UAAMnB,YAAY,GAAG,KAAKC,eAAL,CAAqBiB,OAArB,CAArB;AACA,WAAK7F,UAAL,CAAgBwC,KAAhB;AACAmC,MAAAA,YAAY,CAACnE,OAAb,CAAqB,UAACK,IAAD,EAAU;AAC7BA,QAAAA,IAAI,CAAC4C,aAAL;AACD,OAFD;AAGD;AApZH;AAAA;AAAA,WAqZE,qBAAY;AACV,UAAM/D,KAAK,GAAG,KAAK2E,QAAL,EAAd;AACA3E,MAAAA,KAAK,CAACc,OAAN,CAAc,UAACK,IAAD,EAAU;AACtBA,QAAAA,IAAI,CAAC2C,MAAL;AACD,OAFD;AAGD;AA1ZH;AAAA;AAAA,WA2ZE,gBAAOxC,KAAP,EAAc;AACZ,UAAMH,IAAI,GAAG,KAAKM,OAAL,CAAaH,KAAb,CAAb;;AACA,UAAIH,IAAJ,EAAU;AACRA,QAAAA,IAAI,CAACkF,MAAL;AACD;AACF;AAhaH;AAAA;AAAA,WAiaE,qBAAY;AACV,UAAMrG,KAAK,GAAG,KAAK2E,QAAL,EAAd;AACA3E,MAAAA,KAAK,CAACc,OAAN,CAAc,UAACK,IAAD,EAAU;AACtBA,QAAAA,IAAI,CAACkF,MAAL;AACD,OAFD;AAGD;AAtaH;AAAA;AAAA,WAuaE,yBAAgB1D,IAAhB,EAAsB/D,OAAtB,EAA+B;AAAA;;AAC7B,UAAMqD,IAAI;AACR2D,QAAAA,WAAW,EAAE;AADL,SAELhH,OAFK,CAAV;;AAIA,UAAM8F,GAAG,kBAAmB,IAAIvE,GAAJ,EAA5B;AACAwC,MAAAA,IAAI,CAAC7B,OAAL,CAAa,UAACQ,KAAD,EAAW;AACtB,YAAIoD,GAAG,CAACtD,GAAJ,CAAQE,KAAR,CAAJ,EACE;;AACF,YAAMH,IAAI,GAAG,MAAI,CAACM,OAAL,CAAaH,KAAb,CAAb;;AACA,YAAIH,IAAJ,EAAU;AACR,cAAMQ,OAAO,GAAGR,IAAI,CAACS,UAAL,EAAhB;AACA,cAAM3B,QAAQ,GAAGkB,IAAI,CAACa,IAAL,EAAjB;AACA,cAAIsE,OAAO,GAAG,EAAd;;AACA,cAAIrE,IAAI,CAAC2D,WAAT,EAAsB;AACpBU,YAAAA,OAAO,GAAG3E,OAAO,CAAC4E,MAAR,CAAetG,QAAf,CAAV;AACD,WAFD,MAEO;AACLqG,YAAAA,OAAO,GAAGrG,QAAV;AACD;;AACDqG,UAAAA,OAAO,CAACxF,OAAR,CAAgB,UAAC0F,WAAD,EAAiB;AAC/B9B,YAAAA,GAAG,CAACT,GAAJ,CAAQuC,WAAW,CAAClF,KAApB,EAA2BkF,WAA3B;AACD,WAFD;AAGD;AACF,OAjBD;AAkBA,UAAMvB,YAAY,GAAG3B,KAAK,CAACkB,IAAN,CAAWE,GAAG,CAAC+B,MAAJ,EAAX,CAArB;AACA,aAAOxB,YAAP;AACD;AAjcH;AAAA;AAAA,WAkcE,cAAKyB,IAAL,EAAWC,KAAX,EAAkB;AAChB,UAAM9H,MAAM,GAAG,KAAKA,MAAL,IAAe,EAA9B;AACA,UAAM+H,UAAU,GAAGC,WAAS,cAAOH,IAAP,EAA5B;AACA,UAAMI,MAAM,GAAGjI,MAAM,CAAC+H,UAAD,CAArB;;AACA,UAAI,OAAOE,MAAP,KAAkB,UAAtB,EAAkC;AAChCA,QAAAA,MAAM,CAACH,KAAD,CAAN;AACD;AACF;AAzcH;AAAA;AAAA,WA0cE,+BAAsB;AAAA;;AACpB,UACE9H,MADF,GAGI,IAHJ,CACEA,MADF;AAAA,UAEE2B,SAFF,GAGI,IAHJ,CAEEA,SAFF;;AAIA,UAAI,CAAC3B,MAAM,CAACe,MAAR,IAAkB,CAAC,KAAKa,UAA5B,EAAwC;AACtC;AACD;;AACD,WAAKA,UAAL,GAAkB5B,MAAM,CAACe,MAAzB;AACA,UAAMmH,QAAQ,GAAG,KAAKpC,QAAL,EAAjB;AACAoC,MAAAA,QAAQ,CAACjG,OAAT,CAAiB,UAACK,IAAD,EAAU;AACzBA,QAAAA,IAAI,CAAC6F,IAAL,CAAU,KAAV;AACD,OAFD;;AAGA,UAAID,QAAQ,CAACpD,MAAT,KAAoBnD,SAAS,CAACyG,IAAlC,EAAwC;AACtC;AACD;;AACD,UAAMvC,GAAG,kBAAmB,IAAIvE,GAAJ,EAA5B;AACA4G,MAAAA,QAAQ,CAACG,OAAT,GAAmBpG,OAAnB,CAA2B,UAACI,IAAD,EAAU;AACnC,YAAMC,IAAI,GAAGD,IAAb;AACA,YAAMM,MAAM,GAAGL,IAAI,CAACO,SAAL,EAAf;;AACA,YAAIP,IAAI,CAACgG,QAAT,EAAmB;AACjB,cAAI3F,MAAJ,EAAY;AACVA,YAAAA,MAAM,CAAC2D,QAAP,GAAkB,IAAlB;AACD;;AACDhE,UAAAA,IAAI,CAACiG,OAAL,GAAe,IAAf;AACD;;AACD,YAAIjG,IAAI,CAACgG,QAAL,IAAiBzC,GAAG,CAACtD,GAAJ,CAAQD,IAAI,CAACG,KAAb,CAArB,EAA0C;AACxC,cAAIE,MAAM,IAAI,CAACA,MAAM,CAAC2F,QAAtB,EAAgC;AAC9BzC,YAAAA,GAAG,CAACT,GAAJ,CAAQzC,MAAM,CAACF,KAAf,EAAsB,IAAtB;AACD;AACF;AACF,OAdD;AAeA,UAAM+F,gBAAgB,GAAG/D,KAAK,CAACkB,IAAN,CAAWE,GAAG,CAAC3F,IAAJ,EAAX,CAAzB;AACAsI,MAAAA,gBAAgB,CAACvG,OAAjB,CAAyB,UAACQ,KAAD,EAAW;AAClC,YAAMH,IAAI,GAAG,MAAI,CAACM,OAAL,CAAaH,KAAb,CAAb;;AACA,YAAIH,IAAJ,EAAU;AACRA,UAAAA,IAAI,CAAC6F,IAAL,CAAU,IAAV;AACD;AACF,OALD;AAMD;AAjfH;;AAAA;AAAA;;;;"}