/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

import raf from 'raf';
import { i as isString_1 } from '../_chunks/dep-3853103d.js';
import { easeInOutCubic } from './easing.js';
import '../_chunks/dep-ab1e2688.js';
import '../_chunks/dep-aa2bff1b.js';
import '../_chunks/dep-156c830d.js';
import '../_chunks/dep-897ce04d.js';
import '../_chunks/dep-2eff142e.js';
import '../_chunks/dep-312619d6.js';

var isServer = typeof window === "undefined";

var trim = function trim(str) {
  return (str || "").replace(/^[\s\uFEFF]+|[\s\uFEFF]+$/g, "");
};

var on = function () {
  if (!isServer && document.addEventListener) {
    return function (element, event, handler) {
      if (element && event && handler) {
        element.addEventListener(event, handler, false);
      }
    };
  }

  return function (element, event, handler) {
    if (element && event && handler) {
      element.attachEvent("on".concat(event), handler);
    }
  };
}();
var off = function () {
  if (!isServer && document.removeEventListener) {
    return function (element, event, handler) {
      if (element && event) {
        element.removeEventListener(event, handler, false);
      }
    };
  }

  return function (element, event, handler) {
    if (element && event) {
      element.detachEvent("on".concat(event), handler);
    }
  };
}();

function hasClass(el, cls) {
  if (!el || !cls) return false;
  if (cls.indexOf(" ") !== -1) throw new Error("className should not contain space.");

  if (el.classList) {
    return el.classList.contains(cls);
  }

  return " ".concat(el.className, " ").indexOf(" ".concat(cls, " ")) > -1;
}

var addClass = function addClass(el, cls) {
  if (!el) return;
  var curClass = el.className;
  var classes = (cls || "").split(" ");

  for (var i = 0, j = classes.length; i < j; i++) {
    var clsName = classes[i];
    if (!clsName) continue;

    if (el.classList) {
      el.classList.add(clsName);
    } else if (!hasClass(el, clsName)) {
      curClass += " ".concat(clsName);
    }
  }

  if (!el.classList) {
    el.className = curClass;
  }
};
var removeClass = function removeClass(el, cls) {
  if (!el || !cls) return;
  var classes = cls.split(" ");
  var curClass = " ".concat(el.className, " ");

  for (var i = 0, j = classes.length; i < j; i++) {
    var clsName = classes[i];
    if (!clsName) continue;

    if (el.classList) {
      el.classList.remove(clsName);
    } else if (hasClass(el, clsName)) {
      curClass = curClass.replace(" ".concat(clsName, " "), " ");
    }
  }

  if (!el.classList) {
    el.className = trim(curClass);
  }
};
var getScrollContainer = function getScrollContainer() {
  var container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "body";

  if (isString_1(container)) {
    return container ? document.querySelector(container) : window;
  }

  if (typeof container === "function") {
    return container();
  }

  return container;
};

function isWindow(obj) {
  return obj && obj === obj.window;
}

function getScroll(target, isLeft) {
  if (typeof window === "undefined" || !target) {
    return 0;
  }

  var method = isLeft ? "scrollLeft" : "scrollTop";
  var result = 0;

  if (isWindow(target)) {
    result = target[isLeft ? "pageXOffset" : "pageYOffset"];
  } else if (target instanceof Document) {
    result = target.documentElement[method];
  } else if (target) {
    result = target[method];
  }

  return result;
}
function scrollTo(target, opt) {
  var _opt$container = opt.container,
      container = _opt$container === void 0 ? window : _opt$container,
      _opt$duration = opt.duration,
      duration = _opt$duration === void 0 ? 450 : _opt$duration,
      _opt$easing = opt.easing,
      easing = _opt$easing === void 0 ? easeInOutCubic : _opt$easing;
  var scrollTop = getScroll(container);
  var startTime = Date.now();
  return new Promise(function (res) {
    var fnc = function fnc() {
      var timestamp = Date.now();
      var time = timestamp - startTime;
      var nextScrollTop = easing(Math.min(time, duration), scrollTop, target, duration);

      if (isWindow(container)) {
        container.scrollTo(window.pageXOffset, nextScrollTop);
      } else if (container instanceof HTMLDocument || container.constructor.name === "HTMLDocument") {
        container.documentElement.scrollTop = nextScrollTop;
      } else {
        container.scrollTop = nextScrollTop;
      }

      if (time < duration) {
        raf(fnc);
      } else {
        raf(res);
      }
    };

    raf(fnc);
  });
}
var isNodeOverflow = function isNodeOverflow(ele) {
  var _ele$clientWidth = ele.clientWidth,
      clientWidth = _ele$clientWidth === void 0 ? 0 : _ele$clientWidth,
      _ele$scrollWidth = ele.scrollWidth,
      scrollWidth = _ele$scrollWidth === void 0 ? 0 : _ele$scrollWidth;

  if (scrollWidth > clientWidth) {
    return true;
  }

  return false;
};
var getAttach = function getAttach(node) {
  var attachNode = typeof node === "function" ? node() : node;

  if (!attachNode) {
    return document.body;
  }

  if (isString_1(attachNode)) {
    return document.querySelector(attachNode);
  }

  if (attachNode instanceof HTMLElement) {
    return attachNode;
  }

  return document.body;
};

export { addClass, getAttach, getScroll, getScrollContainer, isNodeOverflow, off, on, removeClass, scrollTo };
//# sourceMappingURL=dom.js.map
