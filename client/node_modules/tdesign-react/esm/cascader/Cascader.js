/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-9332bbea.js';
import { _ as _slicedToArray } from '../_chunks/dep-93971e86.js';
import React, { useState, useMemo, useEffect } from 'react';
import { useLocaleReceiver } from '../locale/LocalReceiver.js';
import Panel from './components/Panel.js';
import { Popup } from '../popup/index.js';
import InputContent from './components/InputContent.js';
import useConfig from '../_util/useConfig.js';
import { TreeStore } from '../_common/js/tree/tree-store.js';
import useDefault from '../_util/useDefault.js';
import { getTreeValue } from './utils/helper.js';
import { treeNodesEffect, treeStoreExpendEffect } from './utils/cascader.js';
import '../_chunks/dep-beac373a.js';
import '../config-provider/index.js';
import '../config-provider/ConfigProvider.js';
import '../_chunks/dep-27d690ce.js';
import '../config-provider/ConfigContext.js';
import '../locale/zh_CN.js';
import 'classnames';
import './utils/panel.js';
import '../_chunks/dep-d2535fd6.js';
import '../_chunks/dep-ab1e2688.js';
import '../_chunks/dep-aa2bff1b.js';
import '../_chunks/dep-156c830d.js';
import '../_chunks/dep-312619d6.js';
import './components/Item.js';
import 'tdesign-icons-react';
import '../_util/useCommonClassName.js';
import '../_util/useRipple.js';
import '../_util/setStyle.js';
import './utils/item.js';
import '../_chunks/dep-124f91c5.js';
import '../loading/index.js';
import '../loading/loading.js';
import '../_util/dom.js';
import 'raf';
import '../_chunks/dep-3853103d.js';
import '../_chunks/dep-897ce04d.js';
import '../_chunks/dep-2eff142e.js';
import '../_util/easing.js';
import '../common/Portal.js';
import 'react-dom';
import '../loading/gradient.js';
import '../loading/style/index.js';
import '../loading/type.js';
import '../loading/plugin.js';
import '../tooltip/Tooltip.js';
import '../popup/Popup.js';
import 'react-transition-group';
import 'react-popper';
import '../_util/composeRefs.js';
import '../_util/usePrevious.js';
import '../popup/Portal.js';
import '../popup/hooks/useTriggerProps.js';
import '../_util/useClickOutside.js';
import '../popup/hooks/usePopupCssTransition.js';
import '../_util/noop.js';
import '../popup/style/index.js';
import '../popup/type.js';
import '../_chunks/dep-d44ac8a4.js';
import '../_util/forwardRefWithStatics.js';
import 'hoist-non-react-statics';
import '../common/Check.js';
import '../_util/helper.js';
import '../_chunks/dep-93bd2d05.js';
import '../_chunks/dep-44c00646.js';
import '../_chunks/dep-95c9ff5b.js';
import '../_chunks/dep-304ab091.js';
import '../_chunks/dep-ea69dcf8.js';
import '../_chunks/dep-25536592.js';
import '../_chunks/dep-a764e3bd.js';
import '../_chunks/dep-d098d908.js';
import '../tag/index.js';
import '../tag/Tag.js';
import '../tag/CheckTag.js';
import '../tag/style/index.js';
import '../tag/type.js';
import '../input/index.js';
import '../input/Input.js';
import '../input/InputGroup.js';
import '../_util/useDefaultValue.js';
import '../input/style/index.js';
import '../input/type.js';
import '../common/FakeArrow.js';
import './utils/inputContent.js';
import '../_chunks/dep-a8d92bd9.js';
import '../_chunks/dep-39f90ded.js';
import '../_chunks/dep-14692160.js';
import '../_chunks/dep-55e3e3e3.js';
import '../_chunks/dep-7daf07a9.js';
import '../_chunks/dep-e2a0e7b2.js';
import '../_chunks/dep-5ace74d6.js';
import '../_chunks/dep-8309e373.js';
import '../_chunks/dep-f5f7d3f4.js';
import '../_chunks/dep-b8263a1c.js';
import '../_chunks/dep-c8351fc0.js';
import '../_chunks/dep-121f2926.js';
import '../_chunks/dep-ae2e9ece.js';
import '../_chunks/dep-a0400c35.js';
import '../_chunks/dep-0de37580.js';
import '../_common/js/tree/tree-node-model.js';
import '../_chunks/dep-fcfd7649.js';
import '../_chunks/dep-b12a3761.js';
import '../_chunks/dep-14bd2526.js';
import '../_chunks/dep-66dcd197.js';
import '../_chunks/dep-1997c424.js';
import '../_chunks/dep-f88db21e.js';
import '../_chunks/dep-0ce610a9.js';
import '../_chunks/dep-6615471e.js';
import '../_chunks/dep-444d31ef.js';
import '../_chunks/dep-ee2e5653.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var Cascader = function Cascader(props) {
  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var name = "".concat(classPrefix, "-cascader");
  var className = props.className,
      style = props.style,
      defaultValue = props.defaultValue,
      onChange = props.onChange,
      collapsedItems = props.collapsedItems;

  var _useDefault = useDefault(props.value, defaultValue, onChange),
      _useDefault2 = _slicedToArray(_useDefault, 2),
      value = _useDefault2[0],
      _setValue = _useDefault2[1];

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      visible = _useState2[0],
      setVisible = _useState2[1];

  var _useState3 = useState(null),
      _useState4 = _slicedToArray(_useState3, 2),
      treeStore = _useState4[0],
      setTreeStore = _useState4[1];

  var _useState5 = useState(false),
      _useState6 = _slicedToArray(_useState5, 2),
      filterActive = _useState6[0],
      setFilterActive = _useState6[1];

  var _useState7 = useState(""),
      _useState8 = _slicedToArray(_useState7, 2),
      inputVal = _useState8[0],
      setInputVal = _useState8[1];

  var _useState9 = useState(0),
      _useState10 = _slicedToArray(_useState9, 2),
      inputWidth = _useState10[0],
      setInputWidth = _useState10[1];

  var _useState11 = useState([]),
      _useState12 = _slicedToArray(_useState11, 2),
      treeNodes = _useState12[0],
      setTreeNodes = _useState12[1];

  var _useState13 = useState([]),
      _useState14 = _slicedToArray(_useState13, 2),
      expend = _useState14[0],
      setExpend = _useState14[1];

  var cascaderContext = useMemo(function () {
    var _props$size = props.size,
        size = _props$size === void 0 ? "medium" : _props$size,
        _props$disabled = props.disabled,
        disabled2 = _props$disabled === void 0 ? false : _props$disabled,
        _props$checkStrictly = props.checkStrictly,
        checkStrictly2 = _props$checkStrictly === void 0 ? false : _props$checkStrictly,
        _props$lazy = props.lazy,
        lazy2 = _props$lazy === void 0 ? true : _props$lazy,
        _props$multiple = props.multiple,
        multiple = _props$multiple === void 0 ? false : _props$multiple,
        _props$filterable = props.filterable,
        filterable = _props$filterable === void 0 ? false : _props$filterable,
        _props$clearable = props.clearable,
        clearable = _props$clearable === void 0 ? false : _props$clearable,
        _props$checkProps = props.checkProps,
        checkProps = _props$checkProps === void 0 ? {} : _props$checkProps,
        _props$max = props.max,
        max = _props$max === void 0 ? 0 : _props$max,
        _props$showAllLevels = props.showAllLevels,
        showAllLevels = _props$showAllLevels === void 0 ? true : _props$showAllLevels,
        _props$minCollapsedNu = props.minCollapsedNum,
        minCollapsedNum = _props$minCollapsedNu === void 0 ? false : _props$minCollapsedNu;
    return {
      size: size,
      disabled: disabled2,
      checkStrictly: checkStrictly2,
      lazy: lazy2,
      multiple: multiple,
      filterable: filterable,
      value: value,
      setValue: function setValue(val, source, node) {
        _setValue(val, {
          source: source,
          node: node
        });
      },
      visible: visible,
      setVisible: setVisible,
      treeStore: treeStore,
      checkProps: checkProps,
      clearable: clearable,
      showAllLevels: showAllLevels,
      max: max,
      treeNodes: treeNodes,
      setTreeNodes: setTreeNodes,
      filterActive: filterActive,
      setFilterActive: setFilterActive,
      inputVal: inputVal,
      setInputVal: setInputVal,
      setExpend: setExpend,
      minCollapsedNum: minCollapsedNum,
      inputWidth: inputWidth,
      setInputWidth: setInputWidth
    };
  }, [props, inputVal, value, _setValue, visible, treeStore, treeNodes, filterActive, inputWidth, setInputWidth]);
  var disabled = props.disabled,
      _props$options = props.options,
      options = _props$options === void 0 ? [] : _props$options,
      keys = props.keys,
      _props$checkStrictly2 = props.checkStrictly,
      checkStrictly = _props$checkStrictly2 === void 0 ? false : _props$checkStrictly2,
      _props$lazy2 = props.lazy,
      lazy = _props$lazy2 === void 0 ? true : _props$lazy2,
      load = props.load,
      _props$valueMode = props.valueMode,
      valueMode = _props$valueMode === void 0 ? "onlyLeaf" : _props$valueMode;

  var createStore = function createStore(onLoad) {
    var treeProps = {
      keys: keys || {},
      checkable: true,
      checkStrictly: checkStrictly,
      expandMutex: true,
      expandParent: true,
      disabled: disabled,
      load: load,
      lazy: lazy,
      valueMode: valueMode,
      onLoad: onLoad
    };
    var store = new TreeStore(treeProps);
    store.append(options);
    return store;
  };

  if (!treeStore) {
    var store = createStore(function () {
      setTimeout(function () {
        store.refreshNodes();
        treeNodesEffect(inputVal, store, setTreeNodes);
      }, 0);
    });
    setTreeStore(store);
  }

  useEffect(function () {
    var treeProps = {
      keys: keys || {},
      checkable: true,
      checkStrictly: checkStrictly,
      expandMutex: true,
      expandParent: true,
      disabled: disabled,
      load: load,
      lazy: lazy,
      valueMode: valueMode,
      options: options
    };
    treeStore.setConfig(treeProps);
  }, [checkStrictly, disabled, keys, lazy, load, options, valueMode, treeStore]);
  useEffect(function () {
    if (!treeStore) return;
    treeStoreExpendEffect(treeStore, value, expend);
  }, [treeStore, value, expend]);
  useEffect(function () {
    if (!treeStore) return;
    treeNodesEffect(inputVal, treeStore, setTreeNodes);
  }, [inputVal, treeStore, value]);
  useEffect(function () {
    if (!treeStore) return;
    treeStore.replaceChecked(getTreeValue(value));
  }, [value, treeStore]);
  useEffect(function () {
    if (!filterActive) {
      setInputVal("");
    }
  }, [filterActive]);

  var _useLocaleReceiver = useLocaleReceiver("cascader"),
      _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
      local = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];

  var _props$empty = props.empty,
      empty = _props$empty === void 0 ? t(local.empty) : _props$empty,
      _props$trigger = props.trigger,
      trigger = _props$trigger === void 0 ? "click" : _props$trigger;
  var _props$placeholder = props.placeholder,
      placeholder = _props$placeholder === void 0 ? "\u8BF7\u8F93\u5165" : _props$placeholder,
      onRemove = props.onRemove,
      onBlur = props.onBlur,
      onFocus = props.onFocus;
  return /* @__PURE__ */React.createElement(Popup, _objectSpread(_objectSpread({
    className: "".concat(name, "__popup"),
    placement: "bottom-left",
    visible: visible,
    overlayClassName: "".concat(name, "__dropdown"),
    expandAnimation: true,
    destroyOnClose: true
  }, props === null || props === void 0 ? void 0 : props.popupProps), {}, {
    content: /* @__PURE__ */React.createElement(Panel, {
      cascaderContext: cascaderContext,
      trigger: trigger,
      onChange: onChange,
      empty: empty
    })
  }), /* @__PURE__ */React.createElement(InputContent, {
    collapsedItems: collapsedItems,
    cascaderContext: cascaderContext,
    style: style,
    className: className,
    listeners: {
      onRemove: onRemove,
      onBlur: onBlur,
      onFocus: onFocus,
      onChange: onChange
    },
    placeholder: placeholder
  }), /* @__PURE__ */React.createElement(React.Fragment, null));
};

export { Cascader as default };
//# sourceMappingURL=Cascader.js.map
