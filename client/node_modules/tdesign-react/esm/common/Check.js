/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-9332bbea.js';
import { _ as _slicedToArray } from '../_chunks/dep-93971e86.js';
import { _ as _objectWithoutProperties } from '../_chunks/dep-27d690ce.js';
import React, { forwardRef, useContext } from 'react';
import classNames from 'classnames';
import { omit } from '../_util/helper.js';
import useConfig from '../_util/useConfig.js';
import useDefault from '../_util/useDefault.js';
import '../_chunks/dep-beac373a.js';
import '../_chunks/dep-93bd2d05.js';
import '../_chunks/dep-ab1e2688.js';
import '../_chunks/dep-44c00646.js';
import '../_chunks/dep-aa2bff1b.js';
import '../_chunks/dep-156c830d.js';
import '../_chunks/dep-897ce04d.js';
import '../_chunks/dep-2eff142e.js';
import '../_chunks/dep-95c9ff5b.js';
import '../_chunks/dep-312619d6.js';
import '../_chunks/dep-304ab091.js';
import '../_chunks/dep-ea69dcf8.js';
import '../config-provider/ConfigContext.js';
import '../locale/zh_CN.js';
import '../_util/noop.js';

var _excluded = ["type", "checked", "defaultChecked", "disabled", "name", "value", "onChange", "indeterminate", "children", "label", "className", "style"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var CheckContext = /*#__PURE__*/React.createContext(null);
var Check = /*#__PURE__*/forwardRef(function (_props, ref) {
  var _classNames;

  var context = useContext(CheckContext);
  var props = context ? context.inject(_props) : _props;

  var type = props.type,
      checked = props.checked,
      defaultChecked = props.defaultChecked,
      disabled = props.disabled,
      name = props.name,
      value = props.value,
      onChange = props.onChange,
      indeterminate = props.indeterminate,
      children = props.children,
      label = props.label,
      className = props.className,
      style = props.style,
      htmlProps = _objectWithoutProperties(props, _excluded);

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var _useDefault = useDefault(checked, defaultChecked, onChange),
      _useDefault2 = _slicedToArray(_useDefault, 2),
      internalChecked = _useDefault2[0],
      setInternalChecked = _useDefault2[1];

  var labelClassName = classNames(className, "".concat(classPrefix, "-").concat(type), (_classNames = {}, _defineProperty(_classNames, "".concat(classPrefix, "-is-checked"), internalChecked), _defineProperty(_classNames, "".concat(classPrefix, "-is-disabled"), disabled), _defineProperty(_classNames, "".concat(classPrefix, "-is-indeterminate"), indeterminate), _classNames));
  var input = /* @__PURE__ */React.createElement("input", {
    readOnly: true,
    type: type === "radio-button" ? "radio" : type,
    className: "".concat(classPrefix, "-").concat(type, "__former"),
    checked: internalChecked,
    disabled: disabled,
    name: name,
    value: value,
    onClick: function onClick(e) {
      return e.stopPropagation();
    },
    onChange: function onChange(e) {
      return setInternalChecked(e.currentTarget.checked, {
        e: e
      });
    }
  });
  return /* @__PURE__ */React.createElement("label", _objectSpread({
    ref: ref,
    className: labelClassName,
    style: style
  }, omit(htmlProps, ["checkAll"])), input, /* @__PURE__ */React.createElement("span", {
    className: "".concat(classPrefix, "-").concat(type, "__input")
  }), /* @__PURE__ */React.createElement("span", {
    key: "label",
    className: "".concat(classPrefix, "-").concat(type, "__label")
  }, children || label));
});
Check.displayName = "Check";

export { CheckContext, Check as default };
//# sourceMappingURL=Check.js.map
