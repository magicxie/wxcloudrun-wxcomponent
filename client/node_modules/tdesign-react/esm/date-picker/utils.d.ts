import { DateValue } from './type';
import { Styles } from '../common';
/**
 * next Month
 * @since version V1.0.0
 * @param { Date } date
 * @returns {Date}
 */
export declare const nextMonth: (date: Date) => Date;
/**
 * prev Month
 * @since version V1.0.0
 * @param {Date} date
 * @returns {Date}
 */
export declare const prevMonth: (date: Date) => Date;
/**
 * dateIndexOf
 * @since version V1.0.0
 * @param {Date} date
 * @param {Date[]} arrDates
 * @returns {Number}
 */
export declare function dateIndexOf(date: Date, arrDates: DateValue[]): number;
/**
 * Empty value
 * @since version V1.0.0
 * @param mixedVar
 * @returns {Boolean}
 * @example
 * // example 1: empty(null)
 * // returns 1: true
 * // example 2: empty(undefined)
 * // returns 2: true
 * // example 3: empty([])
 * // returns 3: true
 * // example 4: empty({})
 * // returns 4: true
 * // example 5: empty({'fn' : function () {} })
 * // returns 5: false
 */
export declare function empty(mixedVar: any): mixedVar is undefined | null | false | '' | {};
/**
 * To Dashed from Camel Case
 * @since version V1.0.0
 * @param {String} strCamelCase
 * @returns {string}
 * @example
 * toDash('strCamelCase') === 'str-camel-case'
 */
export declare function toDash(strCamelCase: string): string;
export declare function setStyles(el: HTMLElement | SVGElement, styles: Styles): void;
/**
 * 首字母大写
 * @param {String} str 目标字符串
 * @returns {String}
 */
export declare function firstUpperCase(str: string): string;
/**
 * 比较两个 Date 是否是同一天 或则 同一月 或则 同一年
 * @param {Date} date1 比较的日期
 * @param {Date} date2 比较的日期
 * @param {String} type 比较类型，默认比较到『日』 date|month|year
 * @returns {Boolean}
 */
export declare function isSame(date1: Date, date2: Date, type?: string): boolean;
export declare function outOfRanges(d: Date, min: any, max: any): boolean;
/**
 * @returns {Date} 当天零点的日期对象
 */
export declare function getToday(): Date;
/**
 * 返回日期对象的年、月、日、小时、分钟、秒、12小时制标识
 * @param {Date} date
 * @returns {Object}
 */
export declare function getDateObj(date: Date): {
    year: number;
    month: number;
    date: number;
    hours: number;
    minutes: number;
    seconds: number;
    meridiem: string;
};
/**
 * 设置日期对象的时间部分
 * @param {Date} d 日期
 * @param {Number} hour 小时
 * @param {Number} min 分钟
 * @param {Number} sec 秒
 * @returns {Date} 一个新的date
 */
export declare function setDateTime(d: Date, hour: number, min: number, sec: number): Date;
/**
 * 增加月份
 * @param {Date} date 起始日期
 * @param {Number} num 月份数
 * @returns {Date}
 */
export declare function subtractMonth(date: Date, num: any): Date;
/**
 * 减月份
 * @param {Date} date 起始日期
 * @param {Number} num 月份数
 * @returns {Date}
 */
export declare function addMonth(date: Date, num: number): Date;
export interface OptionsType {
    firstDayOfWeek: number;
    disableDate: Function;
    minDate: Date;
    maxDate: Date;
    monthText?: string;
}
export declare function getWeeks({ year, month }: {
    year: number;
    month: number;
}, { firstDayOfWeek, disableDate, minDate, maxDate }: OptionsType): any[][];
export declare function getYears(year: number, { disableDate, minDate, maxDate }: OptionsType): any[][];
export declare function getMonths(year: number, { disableDate, minDate, maxDate, monthText }: OptionsType): any[][];
interface DateTime {
    active: boolean;
    highlight: boolean;
    startOfRange: boolean;
    endOfRange: boolean;
    value: Date;
}
export declare function flagActive(data: any[], { ...args }: any): DateTime[][];
export {};
