/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _typeof } from '../_chunks/dep-156c830d.js';
import { _ as _defineProperty } from '../_chunks/dep-9332bbea.js';
import { _ as _slicedToArray } from '../_chunks/dep-93971e86.js';
import React, { forwardRef, useState, useRef, useEffect, useImperativeHandle } from 'react';
import classNames from 'classnames';
import '../_chunks/dep-ab1e2688.js';
import { CheckCircleFilledIcon, CloseCircleFilledIcon, ErrorCircleFilledIcon } from 'tdesign-icons-react';
import useConfig from '../_util/useConfig.js';
import { Checkbox } from '../checkbox/index.js';
import { Upload } from '../upload/index.js';
import { Tag } from '../tag/index.js';
import { validate, isValueEmpty } from './formModel.js';
import { useFormContext } from './FormContext.js';
import '../_chunks/dep-beac373a.js';
import '../config-provider/ConfigContext.js';
import '../locale/zh_CN.js';
import '../_chunks/dep-d44ac8a4.js';
import '../_util/forwardRefWithStatics.js';
import 'hoist-non-react-statics';
import '../common/Check.js';
import '../_chunks/dep-27d690ce.js';
import '../_util/helper.js';
import '../_chunks/dep-93bd2d05.js';
import '../_chunks/dep-44c00646.js';
import '../_chunks/dep-aa2bff1b.js';
import '../_chunks/dep-897ce04d.js';
import '../_chunks/dep-2eff142e.js';
import '../_chunks/dep-95c9ff5b.js';
import '../_chunks/dep-312619d6.js';
import '../_chunks/dep-304ab091.js';
import '../_chunks/dep-ea69dcf8.js';
import '../_util/useDefault.js';
import '../_util/noop.js';
import '../_chunks/dep-d2535fd6.js';
import '../checkbox/style/index.js';
import '../checkbox/type.js';
import '../upload/upload.js';
import '../_chunks/dep-124f91c5.js';
import '../_chunks/dep-121f2926.js';
import '../_chunks/dep-a8d92bd9.js';
import '../_chunks/dep-39f90ded.js';
import '../_chunks/dep-14692160.js';
import '../_chunks/dep-55e3e3e3.js';
import '../_chunks/dep-7daf07a9.js';
import '../_chunks/dep-e2a0e7b2.js';
import '../_chunks/dep-5ace74d6.js';
import '../_chunks/dep-25536592.js';
import '../_chunks/dep-a764e3bd.js';
import '../_chunks/dep-d098d908.js';
import '../_chunks/dep-8309e373.js';
import '../_chunks/dep-f5f7d3f4.js';
import '../_chunks/dep-b8263a1c.js';
import '../_chunks/dep-444d31ef.js';
import '../_chunks/dep-a0400c35.js';
import '../_chunks/dep-0de37580.js';
import '../_chunks/dep-0758224e.js';
import '../_chunks/dep-14bd2526.js';
import '../_chunks/dep-f88db21e.js';
import '../_chunks/dep-ae2e9ece.js';
import '../_chunks/dep-0ce610a9.js';
import '../_chunks/dep-8bccb9b0.js';
import '../_chunks/dep-028895a6.js';
import '../_chunks/dep-cac5f189.js';
import '../dialog/index.js';
import '../dialog/Dialog.js';
import '../_chunks/dep-3853103d.js';
import '../locale/LocalReceiver.js';
import '../config-provider/index.js';
import '../config-provider/ConfigProvider.js';
import '../button/index.js';
import '../button/Button.js';
import '../_util/useRipple.js';
import '../_util/setStyle.js';
import '../loading/index.js';
import '../loading/loading.js';
import '../_util/dom.js';
import 'raf';
import '../_util/easing.js';
import '../common/Portal.js';
import 'react-dom';
import '../loading/gradient.js';
import '../loading/style/index.js';
import '../loading/type.js';
import '../loading/plugin.js';
import '../button/style/index.js';
import '../button/type.js';
import '../dialog/RenderDialog.js';
import 'react-transition-group';
import '../_util/useSetState.js';
import '../dialog/style/index.js';
import '../dialog/type.js';
import '../dialog/plugin.js';
import '../upload/dragger.js';
import '../upload/themes/dragger-progress.js';
import '../upload/util.js';
import '../upload/upload-trigger.js';
import '../upload/tips.js';
import '../_common/js/upload/xhr.js';
import '../upload/themes/single-file.js';
import '../upload/themes/image-card.js';
import '../upload/boolean-render.js';
import '../upload/themes/flow-list/index.js';
import '../upload/themes/flow-list/img-list.js';
import '../upload/themes/flow-list/file-list.js';
import '../upload/hooks/useDefaultValue.js';
import '../upload/style/index.js';
import '../upload/type.js';
import '../tag/Tag.js';
import '../tag/CheckTag.js';
import '../tag/style/index.js';
import '../tag/type.js';

/**
 * Checks if `value` is `null` or `undefined`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
 * @example
 *
 * _.isNil(null);
 * // => true
 *
 * _.isNil(void 0);
 * // => true
 *
 * _.isNil(NaN);
 * // => false
 */

function isNil(value) {
  return value == null;
}

var isNil_1 = isNil;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var ValidateStatus = /* @__PURE__ */function (ValidateStatus2) {
  ValidateStatus2["TO_BE_VALIDATED"] = "not";
  ValidateStatus2["SUCCESS"] = "success";
  ValidateStatus2["FAIL"] = "fail";
  return ValidateStatus2;
}(ValidateStatus || {});

var ctrlKeyMap = /* @__PURE__ */new Map();
ctrlKeyMap.set(Checkbox, "checked");
ctrlKeyMap.set(Tag.CheckTag, "checked");
ctrlKeyMap.set(Upload, "file");
var FormItem = /*#__PURE__*/forwardRef(function (props, ref) {
  var _classNames, _classNames2, _classNames3;

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var children = props.children,
      label = props.label,
      name = props.name,
      help = props.help,
      statusIconFromProp = props.statusIcon,
      rulesFromProp = props.rules,
      labelWidth = props.labelWidth,
      labelAlign = props.labelAlign,
      initialData = props.initialData,
      className = props.className,
      formItemStyle = props.style;

  var _useFormContext = useFormContext(),
      colon = _useFormContext.colon,
      requiredMark = _useFormContext.requiredMark,
      layout = _useFormContext.layout,
      labelAlignFromContext = _useFormContext.labelAlign,
      labelWidthFromContext = _useFormContext.labelWidth,
      showErrorMessage = _useFormContext.showErrorMessage,
      resetType = _useFormContext.resetType,
      rulesFromContext = _useFormContext.rules,
      statusIconFromContext = _useFormContext.statusIcon,
      formItemsRef = _useFormContext.formItemsRef,
      onFormItemValueChange = _useFormContext.onFormItemValueChange;

  var _useState = useState([]),
      _useState2 = _slicedToArray(_useState, 2),
      errorList = _useState2[0],
      setErrorList = _useState2[1];

  var _useState3 = useState([]),
      _useState4 = _slicedToArray(_useState3, 2),
      successList = _useState4[0],
      setSuccessList = _useState4[1];

  var _useState5 = useState("not"
  /* TO_BE_VALIDATED */
  ),
      _useState6 = _slicedToArray(_useState5, 2),
      verifyStatus = _useState6[0],
      setVerifyStatus = _useState6[1];

  var _useState7 = useState(false),
      _useState8 = _slicedToArray(_useState7, 2),
      resetValidating = _useState8[0],
      setResetValidating = _useState8[1];

  var _useState9 = useState(false),
      _useState10 = _slicedToArray(_useState9, 2),
      needResetField = _useState10[0],
      setNeedResetField = _useState10[1];

  var _useState11 = useState(initialData),
      _useState12 = _slicedToArray(_useState11, 2),
      formValue = _useState12[0],
      setFormValue = _useState12[1];

  var currentFormItemRef = useRef();
  var innerFormItemsRef = useRef([]);
  var shouldValidate = useRef(null);
  var isMounted = useRef(false);
  var innerRules = rulesFromContext && rulesFromContext[name] || rulesFromProp || [];
  var innerLabelWidth = isNil_1(labelWidth) ? labelWidthFromContext : labelWidth;
  var innerLabelAlign = isNil_1(labelAlign) ? labelAlignFromContext : labelAlign;
  var formItemClass = classNames(className, "".concat(classPrefix, "-form__item"), (_classNames = {}, _defineProperty(_classNames, "".concat(classPrefix, "-form-item__").concat(name), name), _defineProperty(_classNames, "".concat(classPrefix, "-form__item-with-help"), help), _defineProperty(_classNames, "".concat(classPrefix, "-form__item-with-extra"), renderTipsInfo()), _classNames));
  var formItemLabelClass = classNames("".concat(classPrefix, "-form__label"), (_classNames2 = {}, _defineProperty(_classNames2, "".concat(classPrefix, "-form__label--required"), requiredMark && innerRules.filter(function (rule) {
    return rule.required;
  }).length > 0), _defineProperty(_classNames2, "".concat(classPrefix, "-form__label--colon"), colon && label), _defineProperty(_classNames2, "".concat(classPrefix, "-form__label--top"), innerLabelAlign === "top" || !innerLabelWidth), _defineProperty(_classNames2, "".concat(classPrefix, "-form__label--left"), innerLabelAlign === "left" && innerLabelWidth), _defineProperty(_classNames2, "".concat(classPrefix, "-form__label--right"), innerLabelAlign === "right" && innerLabelWidth), _classNames2));
  var contentClasses = classNames("".concat(classPrefix, "-form__controls"), (_classNames3 = {}, _defineProperty(_classNames3, "".concat(classPrefix, "-is-success"), showErrorMessage && verifyStatus === "success"), _defineProperty(_classNames3, "".concat(classPrefix, "-is-warning"), showErrorMessage && errorList.length && errorList[0].type === "warning"), _defineProperty(_classNames3, "".concat(classPrefix, "-is-error"), showErrorMessage && errorList.length && errorList[0].type === "error"), _classNames3));
  var labelStyle = {};
  var contentStyle = {};

  if (innerLabelWidth && innerLabelAlign !== "top") {
    if (typeof innerLabelWidth === "number") {
      labelStyle = {
        width: "".concat(innerLabelWidth, "px")
      };
      contentStyle = {
        marginLeft: layout !== "inline" ? "".concat(innerLabelWidth, "px") : ""
      };
    } else {
      labelStyle = {
        width: innerLabelWidth
      };
      contentStyle = {
        marginLeft: layout !== "inline" ? innerLabelWidth : ""
      };
    }
  }

  function renderTipsInfo() {
    var helpNode = null;
    if (help) helpNode = /* @__PURE__ */React.createElement("div", {
      className: "".concat(classPrefix, "-form__help")
    }, help);

    if (showErrorMessage && errorList.length && errorList[0].message) {
      return /* @__PURE__ */React.createElement("p", {
        className: "".concat(classPrefix, "-input__extra")
      }, errorList[0].message);
    }

    if (successList.length) {
      return /* @__PURE__ */React.createElement("p", {
        className: "".concat(classPrefix, "-input__extra")
      }, successList[0].message);
    }

    return helpNode;
  }

  var renderSuffixIcon = function renderSuffixIcon() {
    if (statusIconFromProp === false) return null;

    var resultIcon = function resultIcon(iconSlot) {
      return /* @__PURE__ */React.createElement("span", {
        className: "".concat(classPrefix, "-form__status")
      }, iconSlot);
    };

    var getDefaultIcon = function getDefaultIcon() {
      var iconMap = {
        success: /* @__PURE__ */React.createElement(CheckCircleFilledIcon, {
          size: "25px"
        }),
        error: /* @__PURE__ */React.createElement(CloseCircleFilledIcon, {
          size: "25px"
        }),
        warning: /* @__PURE__ */React.createElement(ErrorCircleFilledIcon, {
          size: "25px"
        })
      };

      if (verifyStatus === "success"
      /* SUCCESS */
      ) {
        return resultIcon(iconMap[verifyStatus]);
      }

      if (errorList && errorList[0]) {
        var type = errorList[0].type || "error";
        return resultIcon(iconMap[type]);
      }

      return null;
    };

    if ( /*#__PURE__*/React.isValidElement(statusIconFromProp)) {
      return resultIcon( /*#__PURE__*/React.cloneElement(statusIconFromProp, _objectSpread({
        style: {
          color: "unset"
        }
      }, statusIconFromProp.props)));
    }

    if (statusIconFromContext === true) {
      return getDefaultIcon();
    }

    if ( /*#__PURE__*/React.isValidElement(statusIconFromContext)) {
      return resultIcon(statusIconFromProp);
    }

    return null;
  };

  function validate$1(trigger) {
    if (innerFormItemsRef.current.length) {
      return innerFormItemsRef.current.map(function (innerFormItem) {
        return innerFormItem === null || innerFormItem === void 0 ? void 0 : innerFormItem.validate();
      });
    }

    var rules = trigger === "all" ? innerRules : innerRules.filter(function (item) {
      return (item.trigger || "change") === trigger;
    });
    setResetValidating(true);
    return new Promise(function (resolve) {
      validate(formValue, rules).then(function (r) {
        var filterErrorList = r.filter(function (item) {
          return item.result !== true;
        });
        setErrorList(filterErrorList);
        setSuccessList(r.filter(function (item) {
          return item.result === true && item.message && item.type === "success";
        }));
        var nextVerifyStatus = filterErrorList.length && rules.length ? "fail"
        /* FAIL */
        : "success"
        /* SUCCESS */
        ;

        if (!rules.some(function (rule) {
          return rule.required;
        }) && isValueEmpty(formValue) || !rules.length) {
          nextVerifyStatus = "not"
          /* TO_BE_VALIDATED */
          ;
        }

        setVerifyStatus(nextVerifyStatus);
        needResetField && resetHandler();
        setResetValidating(false);
        resolve(_defineProperty({}, name, !filterErrorList.length ? true : r));
      });
    });
  }

  function handleItemBlur() {
    var filterRules = innerRules.filter(function (item) {
      return item.trigger === "blur";
    });
    filterRules.length && validate$1("blur");
  }

  function getEmptyValue() {
    var type = Object.prototype.toString.call(initialData);
    var emptyValue = "";

    if (type === "[object Array]") {
      emptyValue = [];
    }

    if (type === "[object Object]") {
      emptyValue = {};
    }

    return emptyValue;
  }

  function resetField() {
    if (!name) return;

    if (resetType === "empty") {
      setFormValue(getEmptyValue());
    }

    if (resetType === "initial") {
      setFormValue(initialData);
    }

    if (resetValidating) {
      setNeedResetField(true);
    } else {
      resetHandler();
    }
  }

  function resetHandler() {
    shouldValidate.current = false;
    setNeedResetField(false);
    setErrorList([]);
    setSuccessList([]);
    setVerifyStatus("not"
    /* TO_BE_VALIDATED */
    );
  }

  function setField(field) {
    var value = field.value,
        status = field.status;

    if (typeof status !== "undefined") {
      shouldValidate.current = false;
      setErrorList([]);
      setSuccessList([]);
      setNeedResetField(false);
      setVerifyStatus(status);
    }

    if (typeof value !== "undefined") {
      setFormValue(value);
    }
  }

  useEffect(function () {
    if (isMounted.current) {
      if (!name) console.warn("FormItem prop name is required.");
      name && onFormItemValueChange(_defineProperty({}, name, formValue));
    }

    if (!shouldValidate.current || !isMounted.current) {
      isMounted.current = true;
      shouldValidate.current = true;
      return;
    }

    var filterRules = innerRules.filter(function (item) {
      return (item.trigger || "change") === "change";
    });
    filterRules.length && validate$1("change");
  }, [formValue]);
  useEffect(function () {
    formItemsRef.current.push(currentFormItemRef);
  }, []);
  useImperativeHandle(currentFormItemRef, function () {
    return {
      name: name,
      value: formValue,
      setValue: setFormValue,
      setField: setField,
      validate: validate$1,
      resetField: resetField
    };
  });
  return /* @__PURE__ */React.createElement("div", {
    className: formItemClass,
    style: formItemStyle,
    ref: ref
  }, label && /* @__PURE__ */React.createElement("div", {
    className: formItemLabelClass,
    style: labelStyle
  }, /* @__PURE__ */React.createElement("label", {
    htmlFor: props === null || props === void 0 ? void 0 : props["for"]
  }, label)), /* @__PURE__ */React.createElement("div", {
    className: contentClasses,
    style: contentStyle
  }, /* @__PURE__ */React.createElement("div", {
    className: "".concat(classPrefix, "-form__controls-content")
  }, React.Children.map(children, function (child, index) {
    if (!child) return null;

    var onChangeFromProps = function onChangeFromProps() {
      return {};
    };

    var onBlurFromProps = function onBlurFromProps() {
      return {};
    };

    var ctrlKey = "value";

    if ( /*#__PURE__*/React.isValidElement(child)) {
      var _objectSpread2;

      if (child.type === FormItem) {
        return /*#__PURE__*/React.cloneElement(child, {
          ref: function ref(el) {
            if (!el) return;
            innerFormItemsRef.current[index] = el;
          }
        });
      }

      if (typeof child.props.onChange === "function") {
        onChangeFromProps = child.props.onChange;
      }

      if (typeof child.props.onBlur === "function") {
        onBlurFromProps = child.props.onBlur;
      }

      if (_typeof(child.type) === "object") {
        ctrlKey = ctrlKeyMap.get(child.type) || "value";
      }

      return /*#__PURE__*/React.cloneElement(child, _objectSpread(_objectSpread({}, child.props), {}, (_objectSpread2 = {}, _defineProperty(_objectSpread2, ctrlKey, formValue), _defineProperty(_objectSpread2, "onChange", function onChange(value) {
        onChangeFromProps.call(null, value);
        setFormValue(value);
      }), _defineProperty(_objectSpread2, "onBlur", function onBlur(value) {
        onBlurFromProps.call(null, value);
        handleItemBlur();
      }), _objectSpread2)));
    }

    return child;
  }), renderSuffixIcon()), renderTipsInfo()));
});

export { FormItem as default };
//# sourceMappingURL=FormItem.js.map
