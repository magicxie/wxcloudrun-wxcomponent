/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-9332bbea.js';
import { _ as _objectWithoutProperties } from '../_chunks/dep-27d690ce.js';
import React from 'react';
import classNames from 'classnames';
import { i as isObject_1 } from '../_chunks/dep-a764e3bd.js';
import useConfig from '../_util/useConfig.js';
import '../_chunks/dep-156c830d.js';
import '../_chunks/dep-ab1e2688.js';
import '../config-provider/ConfigContext.js';
import '../locale/zh_CN.js';

var _excluded = ["flex", "offset", "order", "pull", "push", "span", "tag", "className", "children", "style"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var calcColPadding = function calcColPadding(gutter, currentSize) {
  var paddingObj = {};

  if (typeof gutter === "number") {
    Object.assign(paddingObj, {
      paddingLeft: "".concat(gutter / 2, "px"),
      paddingRight: "".concat(gutter / 2, "px")
    });
  } else if (Array.isArray(gutter) && gutter.length) {
    if (typeof gutter[0] === "number") {
      Object.assign(paddingObj, {
        paddingLeft: "".concat(gutter[0] / 2, "px"),
        paddingRight: "".concat(gutter[0] / 2, "px")
      });
    }

    if (isObject_1(gutter[0]) && gutter[0][currentSize]) {
      Object.assign(paddingObj, {
        paddingLeft: "".concat(gutter[0][currentSize] / 2, "px"),
        paddingRight: "".concat(gutter[0][currentSize] / 2, "px")
      });
    }
  } else if (isObject_1(gutter) && gutter[currentSize]) {
    Object.assign(paddingObj, {
      paddingLeft: "".concat(gutter[currentSize] / 2, "px"),
      paddingRight: "".concat(gutter[currentSize] / 2, "px")
    });
  }

  return paddingObj;
};

var parseFlex = function parseFlex(flex) {
  if (typeof flex === "number") {
    return "".concat(flex, " ").concat(flex, " auto");
  }

  if (/^\d+(\.\d+)?(px|r?em|%)$/.test(flex)) {
    return "0 0 ".concat(flex);
  }

  return flex;
};

var Col = function Col(props) {
  var _classNames;

  var flex = props.flex,
      offset = props.offset,
      order = props.order,
      pull = props.pull,
      push = props.push,
      span = props.span,
      _props$tag = props.tag,
      tag = _props$tag === void 0 ? "div" : _props$tag,
      className = props.className,
      children = props.children,
      propStyle = props.style,
      otherColProps = _objectWithoutProperties(props, _excluded);

  var rowGutter = otherColProps.gutter,
      rowSize = otherColProps.size;

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var allSizes = ["xs", "sm", "md", "lg", "xl", "xxl"];
  var sizeClasses = allSizes.reduce(function (acc, currSize) {
    var _objectSpread2;

    var sizeProp = props[currSize];
    var sizeObj = {};

    if (typeof sizeProp === "number") {
      sizeObj.span = sizeProp;
    } else if (isObject_1(sizeProp)) {
      sizeObj = sizeProp || {};
    }

    return _objectSpread(_objectSpread({}, acc), {}, (_objectSpread2 = {}, _defineProperty(_objectSpread2, "".concat(classPrefix, "-col-").concat(currSize, "-").concat(sizeObj.span), sizeObj.span !== void 0), _defineProperty(_objectSpread2, "".concat(classPrefix, "-col-").concat(currSize, "-order-").concat(sizeObj.order), parseInt(sizeObj.order, 10) >= 0), _defineProperty(_objectSpread2, "".concat(classPrefix, "-col-").concat(currSize, "-offset-").concat(sizeObj.offset), parseInt(sizeObj.offset, 10) >= 0), _defineProperty(_objectSpread2, "".concat(classPrefix, "-col-").concat(currSize, "-push-").concat(sizeObj.push), parseInt(sizeObj.push, 10) >= 0), _defineProperty(_objectSpread2, "".concat(classPrefix, "-col-").concat(currSize, "-pull-").concat(sizeObj.pull), parseInt(sizeObj.pull, 10) >= 0), _objectSpread2));
  }, {});
  var colClassNames = classNames("".concat(classPrefix, "-col"), className, (_classNames = {}, _defineProperty(_classNames, "".concat(classPrefix, "-col-").concat(span), span !== void 0), _defineProperty(_classNames, "".concat(classPrefix, "-col-offset-").concat(offset), parseInt(offset, 10) >= 0), _defineProperty(_classNames, "".concat(classPrefix, "-col-pull-").concat(pull), parseInt(pull, 10) >= 0), _defineProperty(_classNames, "".concat(classPrefix, "-col-push-").concat(push), parseInt(push, 10) >= 0), _defineProperty(_classNames, "".concat(classPrefix, "-col-order-").concat(order), parseInt(order, 10) >= 0), _classNames), sizeClasses);

  var colStyle = _objectSpread(_objectSpread({}, calcColPadding(rowGutter, rowSize)), propStyle);

  flex && (colStyle.flex = parseFlex(flex));
  return /*#__PURE__*/React.createElement(tag, _objectSpread({
    className: colClassNames,
    style: colStyle
  }, otherColProps), children);
};

Col.displayName = "Col";

export { Col as default };
//# sourceMappingURL=Col.js.map
