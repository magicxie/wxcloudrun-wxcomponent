/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-9332bbea.js';
import { _ as _objectWithoutProperties } from '../_chunks/dep-27d690ce.js';
import React from 'react';
import classNames from 'classnames';
import useConfig from '../_util/useConfig.js';
import '../config-provider/ConfigContext.js';
import '../locale/zh_CN.js';

var _excluded = ["width", "className", "style", "children"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var Aside = function Aside(props) {
  var width = props.width,
      className = props.className,
      style = props.style,
      children = props.children,
      otherAsideProps = _objectWithoutProperties(props, _excluded);

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var asideClassNames = classNames("".concat(classPrefix, "-layout__sider"), className);
  var asideWidth = typeof width === "number" ? "".concat(width, "px") : String(width);

  var asideStyle = _objectSpread({
    width: asideWidth,
    maxWidth: asideWidth,
    minWidth: asideWidth,
    flex: "0 0 ".concat(asideWidth)
  }, style);

  return /* @__PURE__ */React.createElement("aside", _objectSpread({
    className: asideClassNames,
    style: asideStyle
  }, otherAsideProps), children);
};

Aside.defaultProps = {
  width: 232
};
Aside.displayName = "Aside";

export { Aside as default };
//# sourceMappingURL=Aside.js.map
