/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-9332bbea.js';
import React from 'react';
import ReactDOM from 'react-dom';
import Loading from './loading.js';
import '../_chunks/dep-93971e86.js';
import '../_chunks/dep-beac373a.js';
import 'classnames';
import '../_util/dom.js';
import 'raf';
import '../_chunks/dep-3853103d.js';
import '../_chunks/dep-ab1e2688.js';
import '../_chunks/dep-aa2bff1b.js';
import '../_chunks/dep-156c830d.js';
import '../_chunks/dep-897ce04d.js';
import '../_chunks/dep-2eff142e.js';
import '../_chunks/dep-312619d6.js';
import '../_util/easing.js';
import '../_util/useConfig.js';
import '../config-provider/ConfigContext.js';
import '../locale/zh_CN.js';
import '../common/Portal.js';
import './gradient.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function createContainer(attach) {
  if (typeof attach === "string") return document.querySelector(attach);
  if (typeof attach === "function") return attach();
  return document.body;
}

var LoadingPlugin = function LoadingPlugin(options) {
  if (options === false) return {
    hide: function hide() {
      return null;
    }
  };
  var props = typeof options === "boolean" ? {} : options;
  var attach = props.attach;
  var container = createContainer(attach);
  var div = document.createElement("div");
  div.setAttribute("style", "width: 100%; height: 100%; position: absolute; top: 0;");
  var defaultProps = {
    loading: true,
    attach: null,
    fullscreen: !attach,
    showOverlay: !!attach
  };
  ReactDOM.render( /* @__PURE__ */React.createElement(Loading, _objectSpread(_objectSpread(_objectSpread({}, defaultProps), props), {}, {
    attach: null
  })), div);
  container.appendChild(div);
  return {
    hide: function hide() {
      ReactDOM.unmountComponentAtNode(div);
      div.remove();
    }
  };
};
var loading = LoadingPlugin;

export { LoadingPlugin, loading };
//# sourceMappingURL=plugin.js.map
