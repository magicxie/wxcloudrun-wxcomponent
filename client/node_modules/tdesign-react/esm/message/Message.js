/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-9332bbea.js';
import { _ as _slicedToArray } from '../_chunks/dep-93971e86.js';
import React from 'react';
import ReactDOM from 'react-dom';
import classNames from 'classnames';
import noop from '../_util/noop.js';
import { PlacementOffset } from './const.js';
import MessageComponent from './MessageComponent.js';
export { default } from './MessageComponent.js';
import '../_chunks/dep-beac373a.js';
import './MessageClose.js';
import 'tdesign-icons-react';
import './useMessageClass.js';
import '../_util/useConfig.js';
import '../config-provider/ConfigContext.js';
import '../locale/zh_CN.js';
import './MessageIcon.js';
import '../loading/index.js';
import '../loading/loading.js';
import '../_util/dom.js';
import 'raf';
import '../_chunks/dep-3853103d.js';
import '../_chunks/dep-ab1e2688.js';
import '../_chunks/dep-aa2bff1b.js';
import '../_chunks/dep-156c830d.js';
import '../_chunks/dep-897ce04d.js';
import '../_chunks/dep-2eff142e.js';
import '../_chunks/dep-312619d6.js';
import '../_util/easing.js';
import '../common/Portal.js';
import '../loading/gradient.js';
import '../loading/style/index.js';
import '../loading/type.js';
import '../loading/plugin.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var MessageList = [];
var keyIndex = 1;
var globalConfig = {
  zIndex: 5e3,
  duration: 3e3,
  top: 32
};

function createContainer(_ref) {
  var attach = _ref.attach,
      zIndex = _ref.zIndex,
      _ref$placement = _ref.placement,
      placement = _ref$placement === void 0 ? "top" : _ref$placement;
  var mountedDom = document.body;

  if (typeof attach === "string") {
    var result = document.querySelectorAll(attach);

    if (result.length >= 1) {
      mountedDom = result[0];
    }
  } else if (typeof attach === "function") {
    mountedDom = attach();
  }

  var tdMessageListClass = "t-message__list";
  var tdMessagePlacementClass = "t-message-placement--".concat(placement);
  var container = Array.from(mountedDom.querySelectorAll(".".concat(tdMessageListClass, ".").concat(tdMessagePlacementClass)));

  if (container.length < 1) {
    var div = document.createElement("div");
    div.className = classNames(tdMessageListClass, tdMessagePlacementClass);
    div.style.zIndex = String(zIndex || globalConfig.zIndex);
    Object.keys(PlacementOffset[placement]).forEach(function (key) {
      div.style[key] = PlacementOffset[placement][key];
    });

    if (placement.includes("top")) {
      div.style.top = "".concat(globalConfig.top, "px");
    }

    mountedDom.appendChild(div);
    return div;
  }

  return container[0];
}

function renderElement(theme, config) {
  var container = createContainer(config);
  var _config$duration = config.duration,
      duration = _config$duration === void 0 ? globalConfig.duration : _config$duration;
  var content = config.content,
      offset = config.offset,
      _config$onDurationEnd = config.onDurationEnd,
      onDurationEnd = _config$onDurationEnd === void 0 ? noop : _config$onDurationEnd;
  var div = document.createElement("div");
  keyIndex += 1;
  var message2 = {
    close: function close() {
      ReactDOM.unmountComponentAtNode(div);
      div.remove();
    },
    key: keyIndex
  };

  if (duration < 0) {
    duration = 3e3;
  }

  if (duration !== 0) {
    setTimeout(function () {
      message2.close();
      onDurationEnd();
    }, duration);
  }

  var style = {};

  if (Array.isArray(offset) && offset.length === 2) {
    var _offset = _slicedToArray(offset, 2),
        left = _offset[0],
        top = _offset[1];

    style = {
      left: left,
      top: top,
      position: "relative"
    };
  }

  return new Promise(function (resolve) {
    ReactDOM.render( /* @__PURE__ */React.createElement(MessageComponent, _objectSpread({
      theme: theme,
      style: style,
      key: keyIndex
    }, config), content), div);
    container.appendChild(div);
    MessageList.push(message2);
    resolve(message2);
  });
}

function isConfig(content) {
  return Object.prototype.toString.call(content) === "[object Object]" && !!content.content;
}

var messageMethod = function messageMethod(theme, content) {
  var duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : globalConfig.duration;
  var config = {};

  if (isConfig(content)) {
    config = _objectSpread({
      duration: duration
    }, content);
  } else {
    config = {
      content: content,
      duration: duration
    };
  }

  config = _objectSpread(_objectSpread({}, config), {}, {
    zIndex: config.zIndex || globalConfig.zIndex
  });
  return renderElement(theme, config);
};

var MessagePlugin = function MessagePlugin(theme, message2, duration) {
  return messageMethod(theme, message2, duration);
};

MessagePlugin.info = function (content, duration) {
  return messageMethod("info", content, duration);
};

MessagePlugin.error = function (content, duration) {
  return messageMethod("error", content, duration);
};

MessagePlugin.warning = function (content, duration) {
  return messageMethod("warning", content, duration);
};

MessagePlugin.success = function (content, duration) {
  return messageMethod("success", content, duration);
};

MessagePlugin.question = function (content, duration) {
  return messageMethod("question", content, duration);
};

MessagePlugin.loading = function (content, duration) {
  return messageMethod("loading", content, duration);
};

MessagePlugin.close = function (messageInstance) {
  messageInstance.then(function (instance) {
    return instance.close();
  });
};

MessagePlugin.closeAll = function () {
  MessageList.forEach(function (message2) {
    typeof message2.close === "function" && message2.close();
  });
  MessageList = [];
  return;
};

var message = MessagePlugin;

export { MessagePlugin, message };
//# sourceMappingURL=Message.js.map
