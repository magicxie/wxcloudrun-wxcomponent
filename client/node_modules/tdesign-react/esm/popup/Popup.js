/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-9332bbea.js';
import { _ as _slicedToArray } from '../_chunks/dep-93971e86.js';
import React, { forwardRef, useState, useRef, useMemo, isValidElement, cloneElement, useEffect } from 'react';
import { CSSTransition } from 'react-transition-group';
import classNames from 'classnames';
import { usePopper } from 'react-popper';
import useDefault from '../_util/useDefault.js';
import useConfig from '../_util/useConfig.js';
import composeRefs from '../_util/composeRefs.js';
import usePrevious from '../_util/usePrevious.js';
import Portal from './Portal.js';
import useTriggerProps from './hooks/useTriggerProps.js';
import usePopupCssTransition from './hooks/usePopupCssTransition.js';
import '../_chunks/dep-beac373a.js';
import '../_util/noop.js';
import '../config-provider/ConfigContext.js';
import '../locale/zh_CN.js';
import 'react-dom';
import '../_util/useClickOutside.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var placementMap = {
  top: "top",
  "top-left": "top-start",
  "top-right": "top-end",
  bottom: "bottom",
  "bottom-left": "bottom-start",
  "bottom-right": "bottom-end",
  left: "left",
  "left-top": "left-start",
  "left-bottom": "left-end",
  right: "right",
  "right-top": "right-start",
  "right-bottom": "right-end"
};
var Popup = /*#__PURE__*/forwardRef(function (props, ref) {
  var _props$trigger = props.trigger,
      trigger = _props$trigger === void 0 ? "hover" : _props$trigger,
      _props$content = props.content,
      content = _props$content === void 0 ? null : _props$content,
      _props$placement = props.placement,
      placement = _props$placement === void 0 ? "top" : _props$placement,
      _props$attach = props.attach,
      attach = _props$attach === void 0 ? "body" : _props$attach,
      _props$showArrow = props.showArrow,
      showArrow = _props$showArrow === void 0 ? false : _props$showArrow,
      _props$destroyOnClose = props.destroyOnClose,
      destroyOnClose = _props$destroyOnClose === void 0 ? false : _props$destroyOnClose,
      className = props.className,
      style = props.style,
      overlayClassName = props.overlayClassName,
      overlayStyle = props.overlayStyle,
      triggerElement = props.triggerElement,
      _props$children = props.children,
      children = _props$children === void 0 ? triggerElement : _props$children,
      disabled = props.disabled,
      _props$defaultVisible = props.defaultVisible,
      defaultVisible = _props$defaultVisible === void 0 ? false : _props$defaultVisible,
      zIndex = props.zIndex,
      onVisibleChange = props.onVisibleChange,
      expandAnimation = props.expandAnimation;

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var _useDefault = useDefault(props.visible, defaultVisible, onVisibleChange),
      _useDefault2 = _slicedToArray(_useDefault, 2),
      visible = _useDefault2[0],
      setVisible = _useDefault2[1];

  var preVisible = usePrevious(visible);

  var _useState = useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      triggerRef = _useState2[0],
      setTriggerRef = _useState2[1];

  var _useState3 = useState(null),
      _useState4 = _slicedToArray(_useState3, 2),
      overlayRef = _useState4[0],
      setOverlayRef = _useState4[1];

  var contentRef = useRef(null);

  var _useState5 = useState(false),
      _useState6 = _slicedToArray(_useState5, 2),
      firstUpdate = _useState6[0],
      setFirstUpdate = _useState6[1];

  var onPopperFirstUpdate = useMemo(function () {
    return function () {
      setFirstUpdate(true);
    };
  }, []);
  var popperOptions = useMemo(function () {
    var _contentRef$current, _childElement$offsetH, _childElement$offsetW;

    if (!visible) return {
      padding: 0
    };
    var childElement = (_contentRef$current = contentRef.current) === null || _contentRef$current === void 0 ? void 0 : _contentRef$current.firstElementChild;
    var height = (_childElement$offsetH = childElement === null || childElement === void 0 ? void 0 : childElement.offsetHeight) !== null && _childElement$offsetH !== void 0 ? _childElement$offsetH : 0;
    var width = (_childElement$offsetW = childElement === null || childElement === void 0 ? void 0 : childElement.offsetWidth) !== null && _childElement$offsetW !== void 0 ? _childElement$offsetW : 0;
    return {
      padding: {
        top: height,
        left: width,
        right: width,
        bottom: height
      }
    };
  }, [visible, overlayRef]);

  var _usePopper = usePopper(triggerRef, overlayRef, {
    placement: placementMap[placement],
    onFirstUpdate: onPopperFirstUpdate,
    modifiers: [{
      name: "flip",
      options: _objectSpread({}, popperOptions)
    }]
  }),
      styles = _usePopper.styles,
      attributes = _usePopper.attributes,
      update = _usePopper.update;

  var defaultStyles = useMemo(function () {
    if (triggerRef && typeof overlayStyle === "function") return _objectSpread(_objectSpread({}, overlayStyle(triggerRef)), {}, {
      zIndex: zIndex
    });
    return _objectSpread(_objectSpread({}, overlayStyle), {}, {
      zIndex: zIndex
    });
  }, [overlayStyle, zIndex, triggerRef]);
  var overlayVisibleStyle = defaultStyles;
  var triggerNodeTemp = useMemo(function () {
    var _React$Children$toArr = React.Children.toArray(children),
        _React$Children$toArr2 = _slicedToArray(_React$Children$toArr, 1),
        triggerChildNode = _React$Children$toArr2[0];

    if (React.Children.count(children) === 1 && /*#__PURE__*/isValidElement(triggerChildNode)) {
      return triggerChildNode;
    }

    return /* @__PURE__ */React.createElement("span", {
      className: "".concat(classPrefix, "-trigger")
    }, children);
  }, [children, classPrefix]);

  var _useTriggerProps = useTriggerProps({
    current: overlayRef
  }, {
    current: triggerRef
  }, [trigger], visible, setVisible, disabled, triggerNodeTemp),
      _useTriggerProps2 = _slicedToArray(_useTriggerProps, 2),
      triggerProps = _useTriggerProps2[0],
      popupProps = _useTriggerProps2[1];

  var disabledClassName = classNames(_defineProperty({}, "".concat(classPrefix, "-is-disabled"), disabled));
  var triggerNode = /*#__PURE__*/cloneElement(triggerNodeTemp, _objectSpread({
    ref: composeRefs(triggerNodeTemp.ref, setTriggerRef),
    className: classNames(disabledClassName, triggerNodeTemp.props.className)
  }, triggerProps));
  var cssTransitionState = usePopupCssTransition({
    contentRef: contentRef,
    classPrefix: classPrefix,
    expandAnimation: expandAnimation
  });
  useEffect(function () {
    if ((visible || firstUpdate) && update) {
      update();
    }
  }, [visible, preVisible, update, children, firstUpdate]);

  var handlePopupWrapperMouseDown = function handlePopupWrapperMouseDown() {
    var removeUpdate = function removeUpdate() {
      return window.removeEventListener("mousemove", update);
    };

    window.removeEventListener("mouseup", removeUpdate);
    window.addEventListener("mousemove", update);
    window.addEventListener("mouseup", removeUpdate);
  };

  var portal = visible || overlayRef ? /* @__PURE__ */React.createElement(Portal, {
    attach: attach
  }, /* @__PURE__ */React.createElement(CSSTransition, _objectSpread({
    "in": visible,
    appear: true,
    unmountOnExit: destroyOnClose
  }, cssTransitionState.props), /* @__PURE__ */React.createElement("div", _objectSpread(_objectSpread({
    ref: composeRefs(setOverlayRef, ref),
    style: styles.popper,
    className: "".concat(classPrefix, "-popup")
  }, attributes.popper), popupProps), /* @__PURE__ */React.createElement("div", {
    className: classNames("".concat(classPrefix, "-popup__content"), overlayClassName, _defineProperty({}, "".concat(classPrefix, "-popup__content--arrow"), showArrow)),
    style: overlayVisibleStyle,
    ref: contentRef
  }, showArrow ? /* @__PURE__ */React.createElement("div", {
    style: styles.arrow,
    className: "".concat(classPrefix, "-popup__arrow")
  }) : null, content)))) : null;
  return /* @__PURE__ */React.createElement("div", {
    className: classNames("".concat(classPrefix, "-popup__reference"), className),
    onMouseDown: handlePopupWrapperMouseDown,
    style: style
  }, triggerNode, portal);
});
Popup.displayName = "Popup";

export { Popup as default };
//# sourceMappingURL=Popup.js.map
