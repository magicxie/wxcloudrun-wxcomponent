/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-9332bbea.js';
import React, { useContext } from 'react';
import classNames from 'classnames';
import { CheckIcon, CloseIcon } from 'tdesign-icons-react';
import useConfig from '../_util/useConfig.js';
import StepsContext from './StepsContext.js';
import '../config-provider/ConfigContext.js';
import '../locale/zh_CN.js';

function StepItem(props) {
  var _classnames;

  var icon = props.icon,
      title = props.title,
      content = props.content,
      value = props.value,
      children = props.children,
      style = props.style;
  var status = props.status;

  var _useContext = useContext(StepsContext),
      current = _useContext.current,
      theme = _useContext.theme;

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  if (!status) {
    if (value < current) {
      status = "finish";
    } else if (value === current) {
      status = "process";
    } else {
      status = "default";
    }
  }

  var className = classNames((_classnames = {}, _defineProperty(_classnames, "".concat(classPrefix, "-steps-item"), true), _defineProperty(_classnames, "".concat(classPrefix, "-steps-item--wait"), status === "default"), _defineProperty(_classnames, "".concat(classPrefix, "-steps-item--error"), status === "error"), _defineProperty(_classnames, "".concat(classPrefix, "-steps-item--finish"), status === "finish"), _defineProperty(_classnames, "".concat(classPrefix, "-steps-item--process"), status === "process"), _defineProperty(_classnames, props.className, !!props.className), _classnames));
  var valueNum = Number(value);
  var iconEle = null;

  if (icon) {
    iconEle = icon;
  } else if (theme === "default") {
    switch (status) {
      case "error":
        iconEle = /* @__PURE__ */React.createElement("span", {
          className: "".concat(classPrefix, "-steps-item__icon--number")
        }, /* @__PURE__ */React.createElement(CloseIcon, null));
        break;

      case "finish":
        iconEle = /* @__PURE__ */React.createElement("span", {
          className: "".concat(classPrefix, "-steps-item__icon--number")
        }, /* @__PURE__ */React.createElement(CheckIcon, null));
        break;

      case "default":
      case "process":
        iconEle = /* @__PURE__ */React.createElement("span", {
          className: "".concat(classPrefix, "-steps-item__icon--number")
        }, Number.isNaN(valueNum) ? value : valueNum + 1);
        break;
    }
  } else {
    iconEle = null;
  }

  return /* @__PURE__ */React.createElement("div", {
    className: className,
    style: style
  }, /* @__PURE__ */React.createElement("div", {
    className: "".concat(classPrefix, "-steps-item__inner")
  }, /* @__PURE__ */React.createElement("div", {
    className: "".concat(classPrefix, "-steps-item__icon ").concat(status === "finish" ? "".concat(classPrefix, "-steps-item-finish") : "")
  }, iconEle), /* @__PURE__ */React.createElement("div", {
    className: "".concat(classPrefix, "-steps-item__content")
  }, /* @__PURE__ */React.createElement("div", {
    className: "".concat(classPrefix, "-steps-item__title")
  }, title), /* @__PURE__ */React.createElement("div", {
    className: "".concat(classPrefix, "-steps-item__description")
  }, content), children ? /* @__PURE__ */React.createElement("div", {
    className: "".concat(classPrefix, "-steps-item__extra")
  }, children) : null)));
}
StepItem.displayName = "StepItem";

export { StepItem as default };
//# sourceMappingURL=StepItem.js.map
