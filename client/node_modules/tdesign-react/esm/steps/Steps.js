/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-9332bbea.js';
import React, { useRef, useEffect } from 'react';
import classNames from 'classnames';
import useConfig from '../_util/useConfig.js';
import StepItem from './StepItem.js';
import StepsContext from './StepsContext.js';
import '../config-provider/ConfigContext.js';
import '../locale/zh_CN.js';
import 'tdesign-icons-react';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function Steps(props) {
  var _classnames;

  var style = props.style,
      _props$current = props.current,
      current = _props$current === void 0 ? 0 : _props$current,
      _props$layout = props.layout,
      layout = _props$layout === void 0 ? "horizontal" : _props$layout,
      _props$theme = props.theme,
      theme = _props$theme === void 0 ? "default" : _props$theme,
      _props$sequence = props.sequence,
      sequence = _props$sequence === void 0 ? "positive" : _props$sequence,
      children = props.children,
      onChange = props.onChange,
      _props$options = props.options,
      options = _props$options === void 0 ? [] : _props$options;

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var className = classNames((_classnames = {}, _defineProperty(_classnames, "".concat(classPrefix, "-steps"), true), _defineProperty(_classnames, "".concat(classPrefix, "-steps--horizontal"), layout === "horizontal"), _defineProperty(_classnames, "".concat(classPrefix, "-steps--vertical"), layout === "vertical"), _defineProperty(_classnames, "".concat(classPrefix, "-steps--default-anchor"), theme === "default"), _defineProperty(_classnames, "".concat(classPrefix, "-steps--positive"), sequence === "positive"), _defineProperty(_classnames, "".concat(classPrefix, "-steps--reverse"), sequence === "reverse"), _defineProperty(_classnames, "".concat(classPrefix, "-steps--dot-anchor"), theme === "dot"), _defineProperty(_classnames, props.className, !!props.className), _classnames));
  var previousRef = useRef(current);
  useEffect(function () {
    var previous = previousRef.current;

    if (previous !== current && onChange) {
      onChange(current, previous);
    }
  }, [current, onChange]);
  var shouldReserve = sequence === "reverse" && layout === "vertical";
  var childrenList = React.Children.toArray(children);
  var childrenDisplayList = shouldReserve ? childrenList.reverse() : childrenList;
  var optionsDisplayList = shouldReserve ? options.reverse() : options;
  var stepItemList = null;

  if (childrenList.length !== 0) {
    stepItemList = childrenDisplayList.map(function (child, index) {
      return /*#__PURE__*/React.cloneElement(child, _objectSpread({
        value: index
      }, child.props));
    });
  } else {
    stepItemList = optionsDisplayList.map(function (v, index) {
      return /* @__PURE__ */React.createElement(StepItem, _objectSpread(_objectSpread({}, v), {}, {
        value: index,
        key: index
      }));
    });
  }

  return /* @__PURE__ */React.createElement(StepsContext.Provider, {
    value: {
      current: current,
      theme: theme
    }
  }, /* @__PURE__ */React.createElement("div", {
    className: className,
    style: style
  }, stepItemList));
}

Steps.StepItem = StepItem;
Steps.displayName = "Steps";

export { Steps as default };
//# sourceMappingURL=Steps.js.map
