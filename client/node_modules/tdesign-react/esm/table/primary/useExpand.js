/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _toConsumableArray } from '../../_chunks/dep-124f91c5.js';
import { _ as _slicedToArray } from '../../_chunks/dep-93971e86.js';
import React, { useContext, useState, useEffect } from 'react';
import { g as get_1 } from '../../_chunks/dep-ae2e9ece.js';
import '../../config-provider/index.js';
import ExpandButton from './expand-box.js';
import ConfigContext from '../../config-provider/ConfigContext.js';
import '../../_chunks/dep-beac373a.js';
import '../../_chunks/dep-ab1e2688.js';
import '../../_chunks/dep-a0400c35.js';
import '../../_chunks/dep-897ce04d.js';
import '../../_chunks/dep-2eff142e.js';
import '../../_chunks/dep-156c830d.js';
import '../../_chunks/dep-95c9ff5b.js';
import '../../_chunks/dep-aa2bff1b.js';
import '../../_chunks/dep-312619d6.js';
import '../../_chunks/dep-5ace74d6.js';
import '../../_chunks/dep-25536592.js';
import '../../_chunks/dep-a764e3bd.js';
import '../../_chunks/dep-d098d908.js';
import '../../_chunks/dep-8309e373.js';
import '../../_chunks/dep-0de37580.js';
import '../../_chunks/dep-44c00646.js';
import '../../config-provider/ConfigProvider.js';
import '../../_chunks/dep-9332bbea.js';
import '../../_chunks/dep-27d690ce.js';
import '../../locale/zh_CN.js';
import 'tdesign-icons-react';

var expandedColKey = "expanded-icon-cell";

function useExpand(props) {
  var columns = props.columns,
      rowKey = props.rowKey,
      defaultExpandedRowKeys = props.defaultExpandedRowKeys,
      expandedRowKeys = props.expandedRowKeys,
      expandedRow = props.expandedRow,
      onExpandChange = props.onExpandChange,
      _props$expandIcon = props.expandIcon,
      expandIcon = _props$expandIcon === void 0 ? true : _props$expandIcon,
      _props$expandOnRowCli = props.expandOnRowClick,
      expandOnRowClick = _props$expandOnRowCli === void 0 ? false : _props$expandOnRowCli;

  var _useContext = useContext(ConfigContext),
      classPrefix = _useContext.classPrefix;

  var isControlled = typeof expandedRowKeys !== "undefined";

  var _useState = useState(expandedRowKeys || defaultExpandedRowKeys || []),
      _useState2 = _slicedToArray(_useState, 2),
      innerExpandRowKeys = _useState2[0],
      setThisExpandRowKeys = _useState2[1];

  useEffect(function () {
    if (Array.isArray(expandedRowKeys)) {
      setThisExpandRowKeys(_toConsumableArray(expandedRowKeys));
    }
  }, [expandedRowKeys]);

  var transformedExpandColumnsFun = function transformedExpandColumnsFun() {
    return expandedRow ? [{
      colKey: expandedColKey,
      width: 25,
      className: ["".concat(classPrefix, "-table__expandable-icon-cell")],
      cell: function cell(_ref) {
        var row = _ref.row;
        return renderExpandIconCell({
          row: row
        });
      }
    }].concat(_toConsumableArray(columns)) : columns;
  };

  var transformedExpandColumns = transformedExpandColumnsFun();

  function renderExpandIconCell(_ref2) {
    var _ref2$row = _ref2.row,
        row = _ref2$row === void 0 ? {} : _ref2$row;
    var rowKeyValue = get_1(row, rowKey);

    if (!Array.isArray(innerExpandRowKeys)) {
      console.error("ExpandedRowKeys type error");
      return;
    }

    return /* @__PURE__ */React.createElement(ExpandButton, {
      expanded: innerExpandRowKeys === null || innerExpandRowKeys === void 0 ? void 0 : innerExpandRowKeys.includes(rowKeyValue),
      row: row,
      rowKeyValue: rowKeyValue,
      expandIcon: expandIcon,
      expandOnRowClick: expandOnRowClick,
      handleExpandChange: handleExpandChange
    });
  }

  function handleExpandChange(row, rowKeyValue) {
    var innerExpandRowKeysNew;
    var isExpanded = innerExpandRowKeys === null || innerExpandRowKeys === void 0 ? void 0 : innerExpandRowKeys.includes(rowKeyValue);

    if (isExpanded) {
      innerExpandRowKeysNew = innerExpandRowKeys.filter(function (item) {
        return item !== rowKeyValue;
      });
    } else {
      innerExpandRowKeysNew = [].concat(_toConsumableArray(innerExpandRowKeys), [rowKeyValue]);
    }

    if (!isControlled) {
      setThisExpandRowKeys(_toConsumableArray(innerExpandRowKeysNew));
    }

    typeof onExpandChange === "function" && onExpandChange(innerExpandRowKeysNew, {
      expandedRowData: row
    });
  }

  function renderExpandRow(row, index, rowKeyValue) {
    var _innerExpandRowKeys$i;

    return /* @__PURE__ */React.createElement("tr", {
      className: "".concat(classPrefix, "-table__expanded-cell"),
      style: innerExpandRowKeys !== null && innerExpandRowKeys !== void 0 && (_innerExpandRowKeys$i = innerExpandRowKeys.includes) !== null && _innerExpandRowKeys$i !== void 0 && _innerExpandRowKeys$i.call(innerExpandRowKeys, rowKeyValue) ? {} : {
        display: "none"
      }
    }, /* @__PURE__ */React.createElement("td", {
      colSpan: transformedExpandColumns === null || transformedExpandColumns === void 0 ? void 0 : transformedExpandColumns.length
    }, expandedRow && expandedRow({
      row: row,
      index: index
    })));
  }

  return [transformedExpandColumns, handleExpandChange, renderExpandRow];
}

export { useExpand as default };
//# sourceMappingURL=useExpand.js.map
