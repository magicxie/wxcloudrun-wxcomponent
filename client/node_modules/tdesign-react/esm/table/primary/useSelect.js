/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _toConsumableArray } from '../../_chunks/dep-124f91c5.js';
import { _ as _defineProperty } from '../../_chunks/dep-9332bbea.js';
import { _ as _slicedToArray } from '../../_chunks/dep-93971e86.js';
import React, { useContext, useState, useEffect } from 'react';
import classNames from 'classnames';
import { i as isFunction_1 } from '../../_chunks/dep-25536592.js';
import '../../config-provider/index.js';
import { Checkbox } from '../../checkbox/index.js';
import { Radio } from '../../radio/index.js';
import ConfigContext from '../../config-provider/ConfigContext.js';
import '../../_chunks/dep-beac373a.js';
import '../../_chunks/dep-ab1e2688.js';
import '../../_chunks/dep-aa2bff1b.js';
import '../../_chunks/dep-156c830d.js';
import '../../_chunks/dep-a764e3bd.js';
import '../../_chunks/dep-d098d908.js';
import '../../config-provider/ConfigProvider.js';
import '../../_chunks/dep-27d690ce.js';
import '../../locale/zh_CN.js';
import '../../_chunks/dep-d44ac8a4.js';
import '../../_util/forwardRefWithStatics.js';
import 'hoist-non-react-statics';
import '../../common/Check.js';
import '../../_util/helper.js';
import '../../_chunks/dep-93bd2d05.js';
import '../../_chunks/dep-44c00646.js';
import '../../_chunks/dep-897ce04d.js';
import '../../_chunks/dep-2eff142e.js';
import '../../_chunks/dep-95c9ff5b.js';
import '../../_chunks/dep-312619d6.js';
import '../../_chunks/dep-304ab091.js';
import '../../_chunks/dep-ea69dcf8.js';
import '../../_util/useConfig.js';
import '../../_util/useDefault.js';
import '../../_util/noop.js';
import '../../_chunks/dep-d2535fd6.js';
import '../../checkbox/style/index.js';
import '../../checkbox/type.js';
import '../../_chunks/dep-6cc10247.js';
import '../../_util/useCommonClassName.js';
import '../../radio/style/index.js';
import '../../radio/type.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var TypeEnum = {
  single: "single",
  multiple: "multiple"
};
var defaultWidth = 50;

function useSelect(props) {
  var _useContext = useContext(ConfigContext),
      classPrefix = _useContext.classPrefix;

  var columns = props.columns,
      data = props.data,
      rowKey = props.rowKey,
      defaultSelectedRowKeys = props.defaultSelectedRowKeys,
      selectedRowKeys = props.selectedRowKeys,
      onSelectChange = props.onSelectChange;
  var isControlled = !!selectedRowKeys;

  var _useState = useState(defaultSelectedRowKeys || []),
      _useState2 = _slicedToArray(_useState, 2),
      innerSelectedRowKeys = _useState2[0],
      setInnerSelectedRowKeys = _useState2[1];

  var selectColumn = columns.find(function (column) {
    return !!TypeEnum[column.type];
  });
  useEffect(function () {
    if (isControlled) {
      setInnerSelectedRowKeys(selectedRowKeys);
    }
  }, [selectedRowKeys, isControlled]);

  if (!selectColumn) {
    return [columns];
  }

  var disabledFn = getDisableFn({
    selectColumn: selectColumn
  });
  var titleCheckboxProps = getTitleCheckboxProps({
    data: data,
    disabledFn: disabledFn,
    innerSelectedRowKeys: innerSelectedRowKeys,
    selectColumn: selectColumn,
    TypeEnum: TypeEnum
  });
  var transformedColumns = columns.map(function (column) {
    var type = column.type,
        className = column.className,
        width = column.width;

    if (!TypeEnum[type]) {
      return column;
    }

    var title;
    var cell;
    var isMultiple = type === TypeEnum.multiple;

    if (isMultiple) {
      title = function title() {
        var indeterminate = titleCheckboxProps.indeterminate,
            checked = titleCheckboxProps.checked,
            disabled = titleCheckboxProps.disabled;
        return /* @__PURE__ */React.createElement(Checkbox, {
          indeterminate: indeterminate,
          checked: checked,
          disabled: disabled,
          onChange: function onChange(checked2) {
            return onTitleCheckboxChange(checked2);
          }
        });
      };

      cell = function cell(options) {
        var row = options.row;
        var currentRowKeyValue = row[rowKey];
        var checked = innerSelectedRowKeys.includes(currentRowKeyValue);
        var disabled = disabledFn(options);
        return /* @__PURE__ */React.createElement(Checkbox, {
          checked: checked,
          disabled: disabled,
          onChange: function onChange(checked2) {
            return onRowCheckboxChange(currentRowKeyValue, row, checked2);
          }
        });
      };
    } else {
      cell = function cell(options) {
        var row = options.row;
        var currentRowKeyValue = row[rowKey];
        var checked = innerSelectedRowKeys.includes(currentRowKeyValue);
        var disabled = disabledFn(options);
        return /* @__PURE__ */React.createElement(Radio, {
          checked: checked,
          disabled: disabled,
          onChange: function onChange() {
            return onRadioChange(currentRowKeyValue, row);
          }
        });
      };
    }

    return _objectSpread({
      width: width || defaultWidth,
      title: title,
      cell: cell,
      style: {
        padding: "10px 0 10px 24px"
      },
      className: classNames(["".concat(classPrefix, "-table__cell--selectable"), _defineProperty({}, "".concat(className), !!className)])
    }, column);
  });

  function getTitleCheckboxProps(_ref2) {
    var data2 = _ref2.data,
        disabledFn2 = _ref2.disabledFn,
        innerSelectedRowKeys2 = _ref2.innerSelectedRowKeys,
        selectColumn2 = _ref2.selectColumn,
        TypeEnum2 = _ref2.TypeEnum;

    if (selectColumn2.type !== TypeEnum2.multiple) {
      return {
        checked: false,
        indeterminate: false,
        disabled: false
      };
    }

    var _getRowKeysExcludeDis = getRowKeysExcludeDisabledAndIsDisabledAll({
      data: data2,
      disabledFn: disabledFn2,
      innerSelectedRowKeys: innerSelectedRowKeys2
    }),
        rowKeysExcludeDisabled = _getRowKeysExcludeDis.rowKeysExcludeDisabled,
        isDisabledAll = _getRowKeysExcludeDis.isDisabledAll;

    var innerSelectedRowKeysExcludeDisabled = innerSelectedRowKeys2.filter(function (rowKey2) {
      return rowKeysExcludeDisabled.includes(rowKey2);
    });
    var checked = innerSelectedRowKeysExcludeDisabled.length && innerSelectedRowKeysExcludeDisabled.length === rowKeysExcludeDisabled.length;
    var indeterminate = innerSelectedRowKeysExcludeDisabled.length && innerSelectedRowKeysExcludeDisabled.length < rowKeysExcludeDisabled.length;
    return {
      checked: checked,
      indeterminate: indeterminate,
      disabled: isDisabledAll
    };
  }

  function getDisableFn(_ref3) {
    var selectColumn2 = _ref3.selectColumn;
    var disabled = selectColumn2.disabled,
        checkProps = selectColumn2.checkProps;

    var disabledFn2 = function disabledFn2() {
      return false;
    };

    if (disabled && isFunction_1(disabled)) {
      disabledFn2 = disabled;
    } else if (checkProps) {
      if (isFunction_1(checkProps)) {
        disabledFn2 = function disabledFn2(options) {
          var _checkProps;

          return (_checkProps = checkProps(options)) === null || _checkProps === void 0 ? void 0 : _checkProps.disabled;
        };
      } else if (checkProps.disabled) {
        disabledFn2 = function disabledFn2() {
          return checkProps.disabled;
        };
      }
    }

    return disabledFn2;
  }

  function getRowKeysExcludeDisabledAndIsDisabledAll(_ref4) {
    var data2 = _ref4.data,
        disabledFn2 = _ref4.disabledFn,
        innerSelectedRowKeys2 = _ref4.innerSelectedRowKeys;
    var dataSelectedDisabled = [];
    var dataDisabled = [];
    var rowKeysExcludeDisabled = [];
    data2.forEach(function (dataItem, index) {
      var isDisabled = disabledFn2({
        rowIndex: index,
        row: dataItem
      });
      var isChecked = innerSelectedRowKeys2.includes(dataItem[rowKey]);

      if (!isDisabled) {
        rowKeysExcludeDisabled.push(dataItem[rowKey]);
      } else {
        dataDisabled.push(dataItem);
      }

      if (isDisabled && isChecked) {
        dataSelectedDisabled.push(dataItem);
      }
    });
    var isDisabledAll = dataDisabled.length === data2.length;
    return {
      rowKeysExcludeDisabled: rowKeysExcludeDisabled,
      isDisabledAll: isDisabledAll
    };
  }

  function onTitleCheckboxChange(checked) {
    var selectedRowData = [];

    if (checked) {
      data.forEach(function (dataItem, index) {
        var isDisabled = disabledFn({
          rowIndex: index,
          row: dataItem
        });
        var isChecked = innerSelectedRowKeys.includes(dataItem[rowKey]);

        if (!isDisabled || isChecked) {
          selectedRowData.push(dataItem);
        }
      });
    } else {
      data.forEach(function (dataItem, index) {
        var isDisabled = disabledFn({
          rowIndex: index,
          row: dataItem
        });
        var isChecked = innerSelectedRowKeys.includes(dataItem[rowKey]);

        if (isDisabled && isChecked) {
          selectedRowData.push(dataItem);
        }
      });
    }

    var selectedRowKeysNew = selectedRowData.map(function (record) {
      return record[rowKey];
    });

    if (!isControlled) {
      setInnerSelectedRowKeys(selectedRowKeysNew);
    }

    isFunction_1(onSelectChange) && onSelectChange(selectedRowKeysNew, {
      selectedRowData: selectedRowData
    });
  }

  function onRowCheckboxChange(currentRowKeyValue, row, checked) {
    var selectedRowKeysNew = [];

    if (checked) {
      selectedRowKeysNew = [].concat(_toConsumableArray(innerSelectedRowKeys), [currentRowKeyValue]);
    } else {
      selectedRowKeysNew = innerSelectedRowKeys.filter(function (selectRowKey) {
        return selectRowKey !== currentRowKeyValue;
      });
    }

    var selectedRowData = data.filter(function (dataItem) {
      return selectedRowKeysNew.includes(dataItem[rowKey]);
    });

    if (!isControlled) {
      setInnerSelectedRowKeys(selectedRowKeysNew);
    }

    isFunction_1(onSelectChange) && onSelectChange(selectedRowKeysNew, {
      selectedRowData: selectedRowData
    });
  }

  function onRadioChange(currentRowKeyValue, row) {
    var selectedRowKeysNew = [currentRowKeyValue];
    var selectedRowData = [row];

    if (!isControlled) {
      setInnerSelectedRowKeys(selectedRowKeysNew);
    }

    isFunction_1(onSelectChange) && onSelectChange(selectedRowKeysNew, {
      selectedRowData: selectedRowData
    });
  }

  return [transformedColumns];
}

export { useSelect as default };
//# sourceMappingURL=useSelect.js.map
