{"version":3,"file":"useSorter.js","sources":["../../../src/table/primary/useSorter.tsx"],"sourcesContent":["import React, { useContext, useEffect, useMemo, useState } from 'react';\nimport get from 'lodash/get';\nimport { ConfigContext } from '../../config-provider';\nimport { SortInfo, PrimaryTableCol, SortType, DataType, SortOptions, TableSort } from '../type';\nimport SorterButton, { SortTypeEnum } from './SorterButton';\nimport { PrimaryTableProps } from './Table';\n\ninterface ColKeySorterMap {\n  [colKey: string]: PrimaryTableCol['sorter'];\n}\ninterface SortInfoWithSorter extends SortInfo {\n  sorter: PrimaryTableCol['sorter'];\n}\n\n/**\n * 排序hook\n * 1.修改column中的title\n * 2.排序data\n */\nfunction useSorter(props: PrimaryTableProps): [PrimaryTableCol[], DataType[]] {\n  const { classPrefix } = useContext(ConfigContext);\n  const { columns, sort, defaultSort, multipleSort, onSortChange, data } = props;\n  const isControlled = typeof sort !== 'undefined';\n  const [innerSort, setInnerSort] = useState<TableSort>(defaultSort || []);\n  const sorts = getSorts(innerSort, columns);\n\n  // 导出：添加排序图标后columns\n  const transformedSorterColumns = columns.map((column: PrimaryTableCol) => {\n    const { title, sorter, sortType, colKey } = column;\n    if (!sorter || !SortTypeEnum[sortType]) {\n      return column;\n    }\n\n    const singleSort = sorts.find?.((sortItem: SortInfo) => sortItem?.sortBy === colKey);\n    const titleNew = () => (\n      <div className={`${classPrefix}-table__cell--sortable`}>\n        <div className={`${classPrefix}-table__cell--title`}>\n          <div>{title}</div>\n          <SorterButton column={column} singleSort={singleSort} onChange={onChangeSortButton} />\n        </div>\n      </div>\n    );\n\n    return {\n      ...column,\n      title: titleNew,\n    };\n  });\n\n  // 导出：排序后data。受控直接导出、非受控多级排序\n  const transformedSorterData = useMemo<DataType[]>(() => {\n    if (isControlled) {\n      return data;\n    }\n    return [...data].sort(comparer(sorts));\n  }, [data, sorts, isControlled]);\n\n  /**\n   * 格式化sort\n   * 1.PrimaryTableCol的sort改为数组sorts；\n   * 2.依据TdPrimaryTableProps的sort过滤出validSorts\n   * 3.TdPrimaryTableProps的sort添加至validSortItem，用于data排序\n   */\n  function getSorts(innerSort: TableSort, columns: PrimaryTableCol[]): SortInfoWithSorter[] {\n    let validSorts = [];\n    const sortColumns = columns.filter(({ sorter }) => !!sorter);\n    const colKeySorterMap: ColKeySorterMap = {};\n    sortColumns.forEach(({ colKey, sorter }) => {\n      colKeySorterMap[colKey] = sorter;\n    });\n    const sortColKeys = sortColumns.map(({ colKey }) => colKey);\n    if (Array.isArray(innerSort)) {\n      validSorts = innerSort.filter((sortItem: SortInfo) => sortColKeys.includes(sortItem?.sortBy));\n    } else if (sortColKeys.includes(innerSort?.sortBy)) {\n      validSorts = [innerSort];\n    }\n\n    const validSortsWithSorter = validSorts?.map((sortItem: SortInfo) => ({\n      ...sortItem,\n      sorter: colKeySorterMap[sortItem.sortBy],\n    }));\n\n    return validSortsWithSorter;\n  }\n\n  /**\n   * 排序点击回调\n   * 1.设置onSortChange的参数sort（区分单个/多个排序）、sortOptions\n   * 2.触发onSortChange\n   */\n  function onChangeSortButton(activeSort: SortInfo, activeSortType: SortType, activeColumn: PrimaryTableCol) {\n    const sortOptions: SortOptions<DataType> = {\n      currentDataSource: transformedSorterData,\n      col: activeColumn,\n    };\n    const { colKey: activeColKey } = activeColumn;\n    if (multipleSort) {\n      let sortsNew: SortInfo[] = [];\n      if (activeSort) {\n        if (activeSortType === SortTypeEnum.all) {\n          sortsNew = sorts\n            .filter((sortItem) => sortItem !== activeSort)\n            .map(({ sortBy, descending }) => ({ sortBy, descending }));\n        } else {\n          sortsNew = sorts.map((sortItem) => ({\n            sortBy: sortItem.sortBy,\n            descending: sortItem === activeSort ? activeSortType === SortTypeEnum.desc : sortItem.descending,\n          }));\n        }\n      } else {\n        const sortInfo = {\n          sortBy: activeColKey,\n          descending: activeSortType === SortTypeEnum.desc,\n        };\n        if (sorts.length) {\n          sortsNew = [...sorts.map(({ sortBy, descending }) => ({ sortBy, descending })), sortInfo];\n        } else {\n          sortsNew = [sortInfo];\n        }\n      }\n      setInnerSort(sortsNew);\n      onSortChange(sortsNew, sortOptions);\n    } else {\n      let sortNew: SortInfo | undefined;\n      if (activeSort) {\n        if (activeSortType !== SortTypeEnum.all) {\n          sortNew = {\n            sortBy: activeSort.sortBy,\n            descending: activeSortType === SortTypeEnum.desc,\n          };\n        }\n      } else {\n        sortNew = {\n          sortBy: activeColKey,\n          descending: activeSortType === SortTypeEnum.desc,\n        };\n      }\n      setInnerSort(sortNew);\n      onSortChange(sortNew, sortOptions);\n    }\n  }\n\n  useEffect(() => {\n    if (isControlled) {\n      setInnerSort(sort);\n    }\n  }, [sort, isControlled]);\n\n  return [transformedSorterColumns, transformedSorterData];\n}\n\nexport default useSorter;\n\nfunction comparer(sorts: SortInfoWithSorter[]) {\n  return (a: any, b: any) => {\n    for (const { sortBy, descending, sorter } of sorts) {\n      const firstValue = get(a, sortBy);\n      const secondValue = get(b, sortBy);\n      const isAsc = typeof sorter === 'function' ? sorter(a, b) < 0 : firstValue < secondValue;\n      const isDesc = typeof sorter === 'function' ? sorter(a, b) > 0 : firstValue > secondValue;\n      if (isAsc || isDesc) {\n        if (!descending) return isAsc ? -1 : 1;\n        if (descending) return isDesc ? -1 : 1;\n      }\n    }\n    return 0;\n  };\n}\n"],"names":["useSorter","props","useContext","ConfigContext","classPrefix","columns","sort","defaultSort","multipleSort","onSortChange","data","isControlled","useState","innerSort","setInnerSort","sorts","getSorts","transformedSorterColumns","map","column","title","sorter","sortType","colKey","SortTypeEnum","singleSort","find","sortItem","sortBy","titleNew","React","createElement","className","SorterButton","onChange","onChangeSortButton","transformedSorterData","useMemo","comparer","innerSort2","columns2","validSorts","sortColumns","filter","colKeySorterMap","forEach","sortColKeys","Array","isArray","includes","validSortsWithSorter","activeSort","activeSortType","activeColumn","sortOptions","currentDataSource","col","activeColKey","sortsNew","all","descending","desc","sortInfo","length","sortNew","useEffect","a","b","firstValue","get","secondValue","isAsc","isDesc"],"mappings":"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"}