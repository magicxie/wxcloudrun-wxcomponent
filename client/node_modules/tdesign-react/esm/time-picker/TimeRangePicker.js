/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-9332bbea.js';
import { _ as _slicedToArray } from '../_chunks/dep-93971e86.js';
import React, { useState } from 'react';
import classNames from 'classnames';
import { TimeIcon } from 'tdesign-icons-react';
import noop from '../_util/noop.js';
import useDefaultValue from '../_util/useDefaultValue.js';
import useConfig from '../_util/useConfig.js';
import { Popup } from '../popup/index.js';
import { Input } from '../input/index.js';
import TimePickerPanel from './panel/TimePickerRangePanel.js';
import TimePickerInputItems from './InputItems.js';
import { useTimePickerTextConfig } from './consts.js';
import '../_chunks/dep-beac373a.js';
import '../_chunks/dep-27d690ce.js';
import '../_util/useDefault.js';
import '../config-provider/ConfigContext.js';
import '../locale/zh_CN.js';
import '../popup/Popup.js';
import 'react-transition-group';
import 'react-popper';
import '../_util/composeRefs.js';
import '../_util/usePrevious.js';
import '../popup/Portal.js';
import 'react-dom';
import '../popup/hooks/useTriggerProps.js';
import '../_util/useClickOutside.js';
import '../popup/hooks/usePopupCssTransition.js';
import '../popup/style/index.js';
import '../popup/type.js';
import '../input/Input.js';
import '../_chunks/dep-25536592.js';
import '../_chunks/dep-ab1e2688.js';
import '../_chunks/dep-aa2bff1b.js';
import '../_chunks/dep-156c830d.js';
import '../_chunks/dep-a764e3bd.js';
import '../_chunks/dep-d098d908.js';
import '../_util/forwardRefWithStatics.js';
import 'hoist-non-react-statics';
import '../input/InputGroup.js';
import '../input/style/index.js';
import '../input/type.js';
import 'dayjs';
import './panel/SinglePanel.js';
import '../_chunks/dep-9e88086c.js';
import '../_chunks/dep-cac5f189.js';
import '../_chunks/dep-95c9ff5b.js';
import '../_chunks/dep-312619d6.js';
import '../_chunks/dep-8dc257e5.js';
import '../_chunks/dep-44c00646.js';
import '../_chunks/dep-897ce04d.js';
import '../_chunks/dep-2eff142e.js';
import '../_chunks/dep-304ab091.js';
import '../_chunks/dep-ea69dcf8.js';
import '../_chunks/dep-8bccb9b0.js';
import '../_chunks/dep-028895a6.js';
import '../_chunks/dep-6bae5139.js';
import '../_chunks/dep-0de37580.js';
import '../_chunks/dep-b8263a1c.js';
import '../_chunks/dep-8309e373.js';
import '../_chunks/dep-14692160.js';
import '../_chunks/dep-f88db21e.js';
import './interfaces.js';
import '../button/index.js';
import '../button/Button.js';
import '../_util/useRipple.js';
import '../_util/setStyle.js';
import '../loading/index.js';
import '../loading/loading.js';
import '../_util/dom.js';
import 'raf';
import '../_chunks/dep-3853103d.js';
import '../_util/easing.js';
import '../common/Portal.js';
import '../loading/gradient.js';
import '../loading/style/index.js';
import '../loading/type.js';
import '../loading/plugin.js';
import '../button/style/index.js';
import '../button/type.js';
import '../_chunks/dep-124f91c5.js';
import '../locale/LocalReceiver.js';
import '../config-provider/index.js';
import '../config-provider/ConfigProvider.js';

var TimeRangePicker = function TimeRangePicker(props) {
  var TEXT_CONFIG = useTimePickerTextConfig();

  var _useDefaultValue = useDefaultValue(props),
      allowInput = _useDefaultValue.allowInput,
      clearable = _useDefaultValue.clearable,
      disabled = _useDefaultValue.disabled,
      _useDefaultValue$form = _useDefaultValue.format,
      format = _useDefaultValue$form === void 0 ? "HH:mm:ss" : _useDefaultValue$form,
      _useDefaultValue$hide = _useDefaultValue.hideDisabledTime,
      hideDisabledTime = _useDefaultValue$hide === void 0 ? true : _useDefaultValue$hide,
      _useDefaultValue$plac = _useDefaultValue.placeholder,
      placeholder = _useDefaultValue$plac === void 0 ? TEXT_CONFIG.placeholder : _useDefaultValue$plac,
      _useDefaultValue$size = _useDefaultValue.size,
      size = _useDefaultValue$size === void 0 ? "medium" : _useDefaultValue$size,
      _useDefaultValue$step = _useDefaultValue.steps,
      steps = _useDefaultValue$step === void 0 ? [1, 1, 1] : _useDefaultValue$step,
      value = _useDefaultValue.value,
      _useDefaultValue$onBl = _useDefaultValue.onBlur,
      onBlur = _useDefaultValue$onBl === void 0 ? noop : _useDefaultValue$onBl,
      onChange = _useDefaultValue.onChange,
      _useDefaultValue$onFo = _useDefaultValue.onFocus,
      onFocus = _useDefaultValue$onFo === void 0 ? noop : _useDefaultValue$onFo,
      _useDefaultValue$onIn = _useDefaultValue.onInput,
      onInput = _useDefaultValue$onIn === void 0 ? noop : _useDefaultValue$onIn,
      style = _useDefaultValue.style,
      className = _useDefaultValue.className;

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var name = "".concat(classPrefix, "-time-picker");

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isPanelShowed = _useState2[0],
      setPanelShow = _useState2[1];

  var inputClasses = classNames("".concat(name, "__group"), _defineProperty({}, "".concat(classPrefix, "-is-focused"), isPanelShowed));

  var handleShowPopup = function handleShowPopup(visible) {
    setPanelShow(visible);
  };

  var handleClear = function handleClear(context) {
    var e = context.e;
    e.stopPropagation();
    onChange(null);
  };

  return /* @__PURE__ */React.createElement(Popup, {
    content: /* @__PURE__ */React.createElement(TimePickerPanel, {
      steps: steps,
      format: format,
      hideDisabledTime: hideDisabledTime,
      isFooterDisplay: true,
      value: value,
      onChange: onChange,
      handleConfirmClick: function handleConfirmClick(value2) {
        onChange(value2);
        setPanelShow(false);
      }
    }),
    disabled: disabled,
    placement: "bottom-left",
    visible: isPanelShowed,
    onVisibleChange: handleShowPopup,
    trigger: "click",
    expandAnimation: true
  }, /* @__PURE__ */React.createElement("div", {
    className: classNames(name, className),
    style: style
  }, /* @__PURE__ */React.createElement(Input, {
    size: size,
    readonly: true,
    clearable: clearable,
    className: inputClasses,
    value: value ? " " : void 0,
    onClear: handleClear,
    disabled: disabled,
    placeholder: !value ? placeholder : void 0,
    suffixIcon: /* @__PURE__ */React.createElement(TimeIcon, null)
  }), value ? /* @__PURE__ */React.createElement(TimePickerInputItems, {
    disabled: disabled,
    format: format,
    placeholder: placeholder,
    allowInput: allowInput,
    value: value,
    onBlur: onBlur,
    onFocus: onFocus,
    onInput: onInput,
    onChange: onChange
  }) : null));
};

TimeRangePicker.displayName = "TimeRangePicker";

export { TimeRangePicker as default };
//# sourceMappingURL=TimeRangePicker.js.map
