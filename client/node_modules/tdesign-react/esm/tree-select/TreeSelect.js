/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-9332bbea.js';
import { _ as _slicedToArray } from '../_chunks/dep-93971e86.js';
import React, { forwardRef, useRef, useState, useMemo, useCallback, useEffect } from 'react';
import { i as isArray_1 } from '../_chunks/dep-897ce04d.js';
import { i as isEmpty_1 } from '../_chunks/dep-a8d92bd9.js';
import '../_chunks/dep-ab1e2688.js';
import { _ as _baseGetTag } from '../_chunks/dep-aa2bff1b.js';
import { i as isObjectLike_1 } from '../_chunks/dep-312619d6.js';
import { i as isFunction_1 } from '../_chunks/dep-25536592.js';
import { useLocaleReceiver } from '../locale/LocalReceiver.js';
import useConfig from '../_util/useConfig.js';
import useDefault from '../_util/useDefault.js';
import { Popup } from '../popup/index.js';
import { Tree } from '../tree/index.js';
import { TreeStore } from '../_common/js/tree/tree-store.js';
import TreeSelectTags from './TreeSelectTags.js';
import TreeSelectTags$1 from './TreeSelectInput.js';
import TreeSelectSuffix from './TreeSelectSuffix.js';
import useTreeSelectConfig from './useTreeSelectConfig.js';
import '../_chunks/dep-beac373a.js';
import '../_chunks/dep-39f90ded.js';
import '../_chunks/dep-14692160.js';
import '../_chunks/dep-55e3e3e3.js';
import '../_chunks/dep-7daf07a9.js';
import '../_chunks/dep-e2a0e7b2.js';
import '../_chunks/dep-5ace74d6.js';
import '../_chunks/dep-8309e373.js';
import '../_chunks/dep-a764e3bd.js';
import '../_chunks/dep-156c830d.js';
import '../_chunks/dep-d098d908.js';
import '../_chunks/dep-f5f7d3f4.js';
import '../_chunks/dep-2eff142e.js';
import '../_chunks/dep-b8263a1c.js';
import '../config-provider/index.js';
import '../config-provider/ConfigProvider.js';
import '../_chunks/dep-27d690ce.js';
import '../config-provider/ConfigContext.js';
import '../locale/zh_CN.js';
import '../_util/noop.js';
import '../popup/Popup.js';
import 'react-transition-group';
import 'classnames';
import 'react-popper';
import '../_util/composeRefs.js';
import '../_util/usePrevious.js';
import '../popup/Portal.js';
import 'react-dom';
import '../popup/hooks/useTriggerProps.js';
import '../_util/useClickOutside.js';
import '../popup/hooks/usePopupCssTransition.js';
import '../popup/style/index.js';
import '../popup/type.js';
import '../tree/Tree.js';
import '../_util/usePersistFn.js';
import '../tree/useTreeConfig.js';
import '../tree/useControllable.js';
import '../tree/TreeItem.js';
import 'tdesign-icons-react';
import '../loading/index.js';
import '../loading/loading.js';
import '../_util/dom.js';
import 'raf';
import '../_chunks/dep-3853103d.js';
import '../_util/easing.js';
import '../common/Portal.js';
import '../loading/gradient.js';
import '../loading/style/index.js';
import '../loading/type.js';
import '../loading/plugin.js';
import '../_util/useRipple.js';
import '../_util/setStyle.js';
import '../checkbox/index.js';
import '../_chunks/dep-d44ac8a4.js';
import '../_util/forwardRefWithStatics.js';
import 'hoist-non-react-statics';
import '../common/Check.js';
import '../_util/helper.js';
import '../_chunks/dep-93bd2d05.js';
import '../_chunks/dep-44c00646.js';
import '../_chunks/dep-95c9ff5b.js';
import '../_chunks/dep-304ab091.js';
import '../_chunks/dep-ea69dcf8.js';
import '../_chunks/dep-d2535fd6.js';
import '../checkbox/style/index.js';
import '../checkbox/type.js';
import '../tree/useStore.js';
import '../_chunks/dep-4fb1b483.js';
import '../_chunks/dep-0758224e.js';
import '../_chunks/dep-a0400c35.js';
import '../_chunks/dep-0de37580.js';
import '../_chunks/dep-14bd2526.js';
import '../_chunks/dep-f88db21e.js';
import '../_chunks/dep-fcfd7649.js';
import '../_chunks/dep-b12a3761.js';
import '../_chunks/dep-66dcd197.js';
import '../_chunks/dep-1997c424.js';
import '../_chunks/dep-ee2e5653.js';
import '../_util/useUpdateEffect.js';
import '../_chunks/dep-c8351fc0.js';
import '../_chunks/dep-121f2926.js';
import '../_chunks/dep-124f91c5.js';
import '../_chunks/dep-ae2e9ece.js';
import '../_common/js/tree/tree-node-model.js';
import '../_chunks/dep-0ce610a9.js';
import '../_chunks/dep-6615471e.js';
import '../_chunks/dep-444d31ef.js';
import '../tree/type.js';
import '../tag/index.js';
import '../tag/Tag.js';
import '../tag/CheckTag.js';
import '../tag/style/index.js';
import '../tag/type.js';
import '../input/index.js';
import '../input/Input.js';
import '../input/InputGroup.js';
import '../_util/useDefaultValue.js';
import '../input/style/index.js';
import '../input/type.js';
import '../common/FakeArrow.js';
import '../_util/useCommonClassName.js';

var baseGetTag = _baseGetTag,
    isObjectLike = isObjectLike_1;
/** `Object#toString` result references. */

var boolTag = '[object Boolean]';
/**
 * Checks if `value` is classified as a boolean primitive or object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
 * @example
 *
 * _.isBoolean(false);
 * // => true
 *
 * _.isBoolean(null);
 * // => false
 */

function isBoolean(value) {
  return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
}

var isBoolean_1 = isBoolean;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var TreeSelect = /*#__PURE__*/forwardRef(function (props, ref) {
  var treeSelectClassName = props.className,
      treeSelectStyle = props.style,
      disabled = props.disabled,
      multiple = props.multiple,
      prefixIcon = props.prefixIcon,
      valueType = props.valueType,
      loading = props.loading,
      max = props.max,
      treeProps = props.treeProps,
      empty = props.empty,
      data = props.data,
      loadingText = props.loadingText,
      filter = props.filter,
      filterable = props.filterable,
      onClear = props.onClear;

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var popupRef = useRef(null);
  var treeRef = useRef(null);
  var inputRef = useRef(null);

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      visible = _useState2[0],
      setVisible = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      isHover = _useState4[0],
      setIsHover = _useState4[1];

  var _useState5 = useState(false),
      _useState6 = _slicedToArray(_useState5, 2),
      focusing = _useState6[0],
      setFocusing = _useState6[1];

  var _useState7 = useState(""),
      _useState8 = _slicedToArray(_useState7, 2),
      filterText = _useState8[0],
      setFilterText = _useState8[1];

  var _useState9 = useState([]),
      _useState10 = _slicedToArray(_useState9, 2),
      actived = _useState10[0],
      setActived = _useState10[1];

  var _useState11 = useState([]),
      _useState12 = _slicedToArray(_useState11, 2),
      expanded = _useState12[0],
      setExpanded = _useState12[1];

  var _useState13 = useState(null),
      _useState14 = _slicedToArray(_useState13, 2),
      nodeInfo = _useState14[0],
      setNodeInfo = _useState14[1];

  var _useDefault = useDefault(props.value, props.defaultValue, props.onChange),
      _useDefault2 = _slicedToArray(_useDefault, 2),
      value = _useDefault2[0],
      onChange = _useDefault2[1];

  var _useTreeSelectConfig = useTreeSelectConfig(_objectSpread({
    visible: visible
  }, props)),
      selectClassName = _useTreeSelectConfig.selectClassName,
      popupObject = _useTreeSelectConfig.popupObject,
      popupClassName = _useTreeSelectConfig.popupClassName;

  var defaultStore = new TreeStore(_objectSpread({}, treeProps));
  defaultStore.append(data);

  var defaultGetTreeItem = function defaultGetTreeItem(value2) {
    var node = defaultStore.getNode(value2);
    return node === null || node === void 0 ? void 0 : node.getModel();
  };

  var selectedMultiple = useMemo(function () {
    if (multiple && isArray_1(value) && !isEmpty_1(value)) {
      return value;
    }

    return [];
  }, [multiple, value]);
  var selectedSingle = useMemo(function () {
    if (multiple) return "";

    if (typeof value === "undefined") {
      return nodeInfo ? nodeInfo.label : "";
    }

    return nodeInfo ? nodeInfo.label : "".concat(value);
  }, [multiple, value, nodeInfo]);
  var checked = useMemo(function () {
    if (multiple) {
      if (valueType === "object") {
        return isArray_1(value) ? value.map(function (item) {
          return item.value;
        }) : [];
      }

      return isArray_1(value) ? value : [];
    }

    return [];
  }, [multiple, valueType, value]);
  var showLoading = useMemo(function () {
    return loading && !disabled;
  }, [loading, disabled]);
  var showFilter = useMemo(function () {
    if (disabled) {
      return false;
    }

    if (!multiple && selectedSingle && (filterable || isFunction_1(filter))) {
      return visible;
    }

    return filterable || isFunction_1(filter);
  }, [disabled, multiple, selectedSingle, filterable, visible, filter]);
  var multiLimitDisabled = useMemo(function () {
    if (multiple && max && isArray_1(value) && max <= value.length) {
      return true;
    }

    return false;
  }, [multiple, max, value]);
  var realLabel = useMemo(function () {
    if (!isEmpty_1(treeProps) && !isEmpty_1(treeProps.keys)) {
      return treeProps.keys.label || "label";
    }

    return "label";
  }, [treeProps]);
  var realValue = useMemo(function () {
    if (!isEmpty_1(treeProps) && !isEmpty_1(treeProps.keys)) {
      return treeProps.keys.value || "value";
    }

    return "value";
  }, [treeProps]);
  var tagList = useMemo(function () {
    if (nodeInfo && isArray_1(nodeInfo)) {
      return nodeInfo.map(function (node) {
        return node.label;
      });
    }

    return selectedMultiple;
  }, [nodeInfo, selectedMultiple]);
  var filterByText = useCallback(function (node) {
    if (isFunction_1(filter)) {
      var filterValue = filter(filterText, node);

      if (isBoolean_1(filterValue)) {
        return filterValue;
      }
    }

    return node.data[realLabel].indexOf(filterText) >= 0;
  }, [filterText, realLabel, filter]);
  useEffect(function () {
    if (valueType === "object") {
      setActived(isArray_1(value) ? value.map(function (item) {
        return item.value;
      }) : [value.value]);
    } else {
      setActived(isArray_1(value) ? value : [value]);
    }

    changeNodeInfo(value);
  }, [value, valueType]);

  function handleClear(e) {
    e.stopPropagation();
    var defaultValue = multiple ? [] : "";
    onChange === null || onChange === void 0 ? void 0 : onChange(defaultValue, null);
    setActived([]);
    setFilterText("");
    setNodeInfo(null);
    onClear === null || onClear === void 0 ? void 0 : onClear({
      e: e
    });
  }

  function changeNodeInfo(value2) {
    if (!multiple && value2) {
      var _treeRef$current;

      var nodeValue = valueType === "object" ? value2.value : value2;
      var node = ((_treeRef$current = treeRef.current) === null || _treeRef$current === void 0 ? void 0 : _treeRef$current.getItem(nodeValue)) || defaultGetTreeItem(nodeValue);
      node ? setNodeInfo({
        label: node.data[realLabel],
        value: node.data[realValue]
      }) : setNodeInfo(null);
    } else if (multiple && isArray_1(value2)) {
      setNodeInfo(value2.map(function (value3) {
        var _treeRef$current2;

        var nodeValue = valueType === "object" ? value3.value : value3;
        var node = ((_treeRef$current2 = treeRef.current) === null || _treeRef$current2 === void 0 ? void 0 : _treeRef$current2.getItem(nodeValue)) || defaultGetTreeItem(nodeValue);
        return node ? {
          label: node.data[realLabel],
          value: node.data[realValue]
        } : {};
      }));
    } else {
      setNodeInfo(null);
    }
  }

  function treeNodeChange(value2, context) {
    var current = value2;

    if (valueType === "object") {
      current = value2.map(function (nodeValue) {
        var node = treeRef.current.getItem(nodeValue);
        return {
          label: node.data[realLabel],
          value: node.data[realValue]
        };
      });
    }

    onChange === null || onChange === void 0 ? void 0 : onChange(current, context);
  }

  function treeNodeActive(value2, context) {
    if (multiple) return;
    var nodeValue = isEmpty_1(value2) ? "" : value2[0];
    var node = treeRef.current.getItem(nodeValue);
    var current = nodeValue;

    if (valueType === "object" && node) {
      current = {
        label: node.data[realLabel],
        value: node.data[realValue]
      };
    }

    onChange === null || onChange === void 0 ? void 0 : onChange(current, context);
    setFilterText("");
    setVisible(false);
  }

  function treeNodeExpand(value2) {
    setExpanded(value2);
  }

  function popupVisibleChange(visible2) {
    if (focusing && !visible2) {
      setVisible(true);
      return;
    }

    setVisible(visible2);

    if (showFilter && visible2) {
      var _inputRef$current;

      (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();
    }
  }

  var _useLocaleReceiver = useLocaleReceiver("treeSelect"),
      _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
      local = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];

  var emptyText = t(local.empty);
  var loadingTextLabel = t(local.loadingText);
  var treeItem = !loading && /* @__PURE__ */React.createElement(Tree, _objectSpread({
    ref: treeRef,
    value: checked,
    hover: true,
    expandAll: true,
    expandOnClickNode: true,
    data: data,
    activable: !multiple,
    checkable: multiple,
    disabled: disabled || multiLimitDisabled,
    empty: empty || /* @__PURE__ */React.createElement("div", {
      className: "".concat(classPrefix, "-select__empty")
    }, emptyText),
    filter: filterByText,
    actived: actived,
    expanded: expanded,
    activeMultiple: multiple,
    onChange: treeNodeChange,
    onActive: treeNodeActive,
    onExpand: treeNodeExpand
  }, treeProps));
  var loadingTip = showLoading && /* @__PURE__ */React.createElement("p", {
    className: "".concat(classPrefix, "-select__loading-tips")
  }, loadingText || /* @__PURE__ */React.createElement("div", {
    className: "".concat(classPrefix, "-select__empty")
  }, loadingTextLabel));
  return /* @__PURE__ */React.createElement("div", {
    ref: ref,
    className: treeSelectClassName,
    style: treeSelectStyle
  }, /* @__PURE__ */React.createElement(Popup, {
    ref: popupRef,
    className: "".concat(classPrefix, "-select__popup-reference"),
    visible: visible,
    disabled: disabled,
    placement: popupObject.placement,
    trigger: popupObject.trigger,
    overlayStyle: popupObject.overlayStyle,
    overlayClassName: popupClassName,
    onVisibleChange: popupVisibleChange,
    expandAnimation: true,
    destroyOnClose: true,
    content: /* @__PURE__ */React.createElement(React.Fragment, null, loadingTip, treeItem)
  }, /* @__PURE__ */React.createElement("div", {
    style: {
      minHeight: 30
    },
    className: selectClassName,
    onMouseEnter: function onMouseEnter() {
      return setIsHover(true);
    },
    onMouseLeave: function onMouseLeave() {
      return setIsHover(false);
    }
  }, prefixIcon && /* @__PURE__ */React.createElement("span", {
    className: "".concat(classPrefix, "-select__left-icon")
  }, prefixIcon), /* @__PURE__ */React.createElement(TreeSelectTags, _objectSpread({
    tagList: tagList
  }, props)), /* @__PURE__ */React.createElement(TreeSelectTags$1, _objectSpread({
    ref: inputRef,
    visible: visible,
    filterText: filterText,
    selectedSingle: selectedSingle,
    setFocusing: setFocusing,
    setFilterText: setFilterText
  }, props)), /* @__PURE__ */React.createElement(TreeSelectSuffix, _objectSpread({
    visible: visible,
    isHover: isHover,
    showLoading: showLoading,
    handleClear: handleClear
  }, props)))));
});
TreeSelect.displayName = "TreeSelect";
TreeSelect.defaultProps = {
  clearable: false,
  data: [],
  disabled: false,
  empty: "",
  filterable: false,
  loading: false,
  loadingText: "",
  max: 0,
  multiple: false,
  placeholder: "\u8BF7\u8F93\u5165",
  size: "medium",
  valueType: "value",
  minCollapsedNum: 0
};

export { TreeSelect as default };
//# sourceMappingURL=TreeSelect.js.map
