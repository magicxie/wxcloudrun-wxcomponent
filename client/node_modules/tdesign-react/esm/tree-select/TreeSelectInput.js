/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

import React, { forwardRef, useMemo } from 'react';
import { i as isEmpty_1 } from '../_chunks/dep-a8d92bd9.js';
import { i as isString_1 } from '../_chunks/dep-3853103d.js';
import { i as isFunction_1 } from '../_chunks/dep-25536592.js';
import { Input } from '../input/index.js';
import useConfig from '../_util/useConfig.js';
import '../_chunks/dep-ab1e2688.js';
import '../_chunks/dep-39f90ded.js';
import '../_chunks/dep-aa2bff1b.js';
import '../_chunks/dep-156c830d.js';
import '../_chunks/dep-14692160.js';
import '../_chunks/dep-312619d6.js';
import '../_chunks/dep-55e3e3e3.js';
import '../_chunks/dep-7daf07a9.js';
import '../_chunks/dep-e2a0e7b2.js';
import '../_chunks/dep-5ace74d6.js';
import '../_chunks/dep-8309e373.js';
import '../_chunks/dep-a764e3bd.js';
import '../_chunks/dep-d098d908.js';
import '../_chunks/dep-f5f7d3f4.js';
import '../_chunks/dep-897ce04d.js';
import '../_chunks/dep-2eff142e.js';
import '../_chunks/dep-b8263a1c.js';
import '../input/Input.js';
import '../_chunks/dep-9332bbea.js';
import '../_chunks/dep-93971e86.js';
import '../_chunks/dep-beac373a.js';
import '../_chunks/dep-27d690ce.js';
import 'classnames';
import 'tdesign-icons-react';
import '../_util/forwardRefWithStatics.js';
import 'hoist-non-react-statics';
import '../input/InputGroup.js';
import '../config-provider/ConfigContext.js';
import '../locale/zh_CN.js';
import '../_util/useDefaultValue.js';
import '../_util/useDefault.js';
import '../_util/noop.js';
import '../input/style/index.js';
import '../input/type.js';

var TreeSelectTags = /*#__PURE__*/forwardRef(function (props, ref) {
  var selectedSingle = props.selectedSingle,
      visible = props.visible,
      filterText = props.filterText,
      setFilterText = props.setFilterText,
      setFocusing = props.setFocusing,
      placeholder = props.placeholder,
      filter = props.filter,
      filterable = props.filterable,
      multiple = props.multiple,
      disabled = props.disabled,
      size = props.size,
      value = props.value,
      onSearch = props.onSearch,
      onBlur = props.onBlur,
      onFocus = props.onFocus;

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var showFilter = useMemo(function () {
    if (disabled) {
      return false;
    }

    if (!multiple && selectedSingle && (filterable || isFunction_1(filter))) {
      return visible;
    }

    return filterable || isFunction_1(filter);
  }, [disabled, multiple, selectedSingle, filterable, visible, filter]);
  var showPlaceholder = useMemo(function () {
    if (!showFilter && (isString_1(value) && value === "" && !selectedSingle || Array.isArray(value) && isEmpty_1(value) || value === null)) {
      return true;
    }

    return false;
  }, [showFilter, value, selectedSingle]);
  var filterPlaceholder = useMemo(function () {
    if (multiple && Array.isArray(value) && !isEmpty_1(value)) {
      return "";
    }

    if (!multiple && selectedSingle) {
      return selectedSingle;
    }

    return placeholder;
  }, [multiple, value, selectedSingle, placeholder]);

  function handleChange(value2) {
    setFilterText(value2);
    onSearch === null || onSearch === void 0 ? void 0 : onSearch(value2);
  }

  function handleBlur(value2, context) {
    setFocusing(false);
    onBlur === null || onBlur === void 0 ? void 0 : onBlur({
      value: value2,
      e: context.e
    });
  }

  function handleFocus(value2, context) {
    setFocusing(true);
    onFocus === null || onFocus === void 0 ? void 0 : onFocus({
      value: value2,
      e: context.e
    });
  }

  var searchInput = showFilter && /* @__PURE__ */React.createElement(Input, {
    ref: ref,
    value: filterText,
    className: "".concat(classPrefix, "-select__input"),
    size: size,
    disabled: disabled,
    placeholder: filterPlaceholder,
    onChange: handleChange,
    onBlur: handleBlur,
    onFocus: handleFocus
  });
  return /* @__PURE__ */React.createElement(React.Fragment, null, showPlaceholder && /* @__PURE__ */React.createElement("span", {
    className: "".concat(classPrefix, "-select__placeholder")
  }, placeholder), !multiple && !showPlaceholder && !showFilter && /* @__PURE__ */React.createElement("span", {
    className: "".concat(classPrefix, "-select__single")
  }, selectedSingle), searchInput);
});

export { TreeSelectTags as default };
//# sourceMappingURL=TreeSelectInput.js.map
