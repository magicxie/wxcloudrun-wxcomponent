/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { useRef } from 'react';
import '../_chunks/dep-ab1e2688.js';
import { _ as _baseClone } from '../_chunks/dep-4fb1b483.js';
import useUpdateEffect from '../_util/useUpdateEffect.js';
import { TreeStore } from '../_common/js/tree/tree-store.js';
import { usePersistFn } from '../_util/usePersistFn.js';
import '../_chunks/dep-0758224e.js';
import '../_chunks/dep-a0400c35.js';
import '../_chunks/dep-897ce04d.js';
import '../_chunks/dep-2eff142e.js';
import '../_chunks/dep-156c830d.js';
import '../_chunks/dep-95c9ff5b.js';
import '../_chunks/dep-aa2bff1b.js';
import '../_chunks/dep-312619d6.js';
import '../_chunks/dep-5ace74d6.js';
import '../_chunks/dep-25536592.js';
import '../_chunks/dep-a764e3bd.js';
import '../_chunks/dep-d098d908.js';
import '../_chunks/dep-8309e373.js';
import '../_chunks/dep-0de37580.js';
import '../_chunks/dep-44c00646.js';
import '../_chunks/dep-14bd2526.js';
import '../_chunks/dep-f5f7d3f4.js';
import '../_chunks/dep-39f90ded.js';
import '../_chunks/dep-14692160.js';
import '../_chunks/dep-55e3e3e3.js';
import '../_chunks/dep-7daf07a9.js';
import '../_chunks/dep-e2a0e7b2.js';
import '../_chunks/dep-f88db21e.js';
import '../_chunks/dep-b8263a1c.js';
import '../_chunks/dep-fcfd7649.js';
import '../_chunks/dep-b12a3761.js';
import '../_chunks/dep-66dcd197.js';
import '../_chunks/dep-1997c424.js';
import '../_chunks/dep-ee2e5653.js';
import '../_chunks/dep-9332bbea.js';
import '../_chunks/dep-c8351fc0.js';
import '../_chunks/dep-121f2926.js';
import '../_chunks/dep-124f91c5.js';
import '../_chunks/dep-beac373a.js';
import '../_chunks/dep-ae2e9ece.js';
import '../_common/js/tree/tree-node-model.js';
import '../_chunks/dep-0ce610a9.js';
import '../_chunks/dep-6615471e.js';
import '../_chunks/dep-444d31ef.js';
import '../_chunks/dep-93bd2d05.js';
import '../_chunks/dep-304ab091.js';
import '../_chunks/dep-ea69dcf8.js';

var baseClone = _baseClone;
/** Used to compose bitmasks for cloning. */

var CLONE_DEEP_FLAG = 1,
    CLONE_SYMBOLS_FLAG = 4;
/**
 * This method is like `_.clone` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @returns {*} Returns the deep cloned value.
 * @see _.clone
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var deep = _.cloneDeep(objects);
 * console.log(deep[0] === objects[0]);
 * // => false
 */

function cloneDeep(value) {
  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
}

var cloneDeep_1 = cloneDeep;

function useStore(props, refresh) {
  var storeRef = useRef();
  var data = props.data,
      keys = props.keys,
      expandAll = props.expandAll,
      expandParent = props.expandParent,
      expanded = props.expanded,
      expandLevel = props.expandLevel,
      expandMutex = props.expandMutex,
      activable = props.activable,
      activeMultiple = props.activeMultiple,
      actived = props.actived,
      disabled = props.disabled,
      checkable = props.checkable,
      value = props.value,
      checkStrictly = props.checkStrictly,
      load = props.load,
      lazy = props.lazy,
      valueMode = props.valueMode,
      filter = props.filter,
      _onLoad = props.onLoad;
  var handleUpdate = usePersistFn(function () {
    refresh();
  });

  var getExpandedArr = function getExpandedArr(arr, store2) {
    var expandedMap = /* @__PURE__ */new Map();
    arr.forEach(function (val) {
      expandedMap.set(val, true);

      if (expandParent) {
        var node = store2.getNode(val);
        node.getParents().forEach(function (tn) {
          expandedMap.set(tn.value, true);
        });
      }
    });
    return Array.from(expandedMap.keys());
  };

  var createStore = function createStore() {
    var store2 = new TreeStore({
      keys: keys,
      activable: activable,
      activeMultiple: activeMultiple,
      checkable: checkable,
      checkStrictly: checkStrictly,
      expandAll: expandAll,
      expandLevel: expandLevel,
      expandMutex: expandMutex,
      expandParent: expandParent,
      disabled: disabled,
      load: load,
      lazy: lazy,
      valueMode: valueMode,
      filter: filter,
      onLoad: function onLoad(info) {
        var node = info.node;
        _onLoad === null || _onLoad === void 0 ? void 0 : _onLoad({
          node: node.getModel()
        });
      },
      onUpdate: handleUpdate
    });
    var list = cloneDeep_1(data);

    if (!Array.isArray(list)) {
      list = [];
    }

    store2.append(list);
    store2.refreshNodes();

    if (Array.isArray(value)) {
      store2.setChecked(value);
    }

    if (Array.isArray(expanded)) {
      var expandedArr = getExpandedArr(expanded, store2);
      store2.setExpanded(expandedArr);
    }

    if (Array.isArray(actived)) {
      store2.setActived(actived);
    }

    store2.refreshNodes();
    return store2;
  };

  if (!storeRef.current) {
    storeRef.current = createStore();
  }

  var store = storeRef.current;
  useUpdateEffect(function () {
    if (data && Array.isArray(data)) {
      store.removeAll();
      store.append(data);
    }
  }, [data, store]);
  useUpdateEffect(function () {
    store.setConfig({
      keys: keys,
      expandAll: expandAll,
      expandLevel: expandLevel,
      expandMutex: expandMutex,
      expandParent: expandParent,
      activable: activable,
      activeMultiple: activeMultiple,
      disabled: disabled,
      checkable: checkable,
      checkStrictly: checkStrictly,
      load: load,
      lazy: lazy,
      valueMode: valueMode
    });
    store.refreshState();
  }, [activable, activeMultiple, checkStrictly, checkable, disabled, expandAll, expandLevel, expandMutex, expandParent, keys, lazy, load, store, valueMode]);
  useUpdateEffect(function () {
    if (Array.isArray(value)) {
      store.replaceChecked(value);
    }
  }, [store, value]);
  useUpdateEffect(function () {
    if (Array.isArray(expanded)) {
      var expandedArr = getExpandedArr(expanded, store);
      store.replaceExpanded(expandedArr);
    }
  }, [expanded, store]);
  useUpdateEffect(function () {
    if (Array.isArray(actived)) {
      store.replaceActived(actived);
    }
  }, [actived, store]);
  useUpdateEffect(function () {
    store.setConfig({
      filter: filter
    });
    store.updateAll();
  }, [filter, store]);
  return storeRef.current;
}

export { useStore };
//# sourceMappingURL=useStore.js.map
