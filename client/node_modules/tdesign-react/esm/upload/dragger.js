/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _slicedToArray } from '../_chunks/dep-93971e86.js';
import React, { useState } from 'react';
import classNames from 'classnames';
import useConfig from '../_util/useConfig.js';
import DraggerProgress from './themes/dragger-progress.js';
import '../_chunks/dep-beac373a.js';
import '../config-provider/ConfigContext.js';
import '../locale/zh_CN.js';
import 'tdesign-icons-react';
import '../button/index.js';
import '../button/Button.js';
import '../_chunks/dep-9332bbea.js';
import '../_chunks/dep-27d690ce.js';
import '../_util/noop.js';
import '../_util/useRipple.js';
import '../_util/setStyle.js';
import '../loading/index.js';
import '../loading/loading.js';
import '../_util/dom.js';
import 'raf';
import '../_chunks/dep-3853103d.js';
import '../_chunks/dep-ab1e2688.js';
import '../_chunks/dep-aa2bff1b.js';
import '../_chunks/dep-156c830d.js';
import '../_chunks/dep-897ce04d.js';
import '../_chunks/dep-2eff142e.js';
import '../_chunks/dep-312619d6.js';
import '../_util/easing.js';
import '../common/Portal.js';
import 'react-dom';
import '../loading/gradient.js';
import '../loading/style/index.js';
import '../loading/type.js';
import '../loading/plugin.js';
import '../button/style/index.js';
import '../button/type.js';
import './util.js';
import '../_chunks/dep-124f91c5.js';

var Dragger = function Dragger(props) {
  var file = props.file,
      display = props.display,
      _onUpload = props.onUpload,
      onRemove = props.onRemove,
      customDraggerRender = props.customDraggerRender;

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      dragActive = _useState2[0],
      setDragActive = _useState2[1];

  var target = React.useRef();
  var classes = classNames("".concat(classPrefix, "-upload__dragger"), !file ? "".concat(classPrefix, "-upload__dragger-center") : "", (file === null || file === void 0 ? void 0 : file.status) === "fail" ? "".concat(classPrefix, "-upload__dragger-error") : "");
  var defaultDragElement = React.useMemo(function () {
    var unActiveElement = /* @__PURE__ */React.createElement("div", null, /* @__PURE__ */React.createElement("span", {
      className: "".concat(classPrefix, "-upload--highlight")
    }, "\u70B9\u51FB\u4E0A\u4F20"), /* @__PURE__ */React.createElement("span", null, "\xA0\xA0/\xA0\xA0\u62D6\u62FD\u5230\u6B64\u533A\u57DF"));
    var activeElement = /* @__PURE__ */React.createElement("div", null, "\u91CA\u653E\u9F20\u6807");
    return dragActive ? activeElement : unActiveElement;
  }, [classPrefix, dragActive]);
  var dragElement = React.useMemo(function () {
    var content;

    if (file && display !== "custom") {
      content = /* @__PURE__ */React.createElement(DraggerProgress, {
        onRemove: onRemove,
        display: display,
        onTrigger: props.onTrigger,
        file: file,
        onUpload: function onUpload() {
          _onUpload === null || _onUpload === void 0 ? void 0 : _onUpload(file);
        }
      });
    } else {
      content = /* @__PURE__ */React.createElement("div", {
        className: "".concat(classPrefix, "-upload__trigger"),
        onClick: props.onTrigger
      }, (customDraggerRender === null || customDraggerRender === void 0 ? void 0 : customDraggerRender({
        dragActive: dragActive
      })) || defaultDragElement);
    }

    return content;
  }, [classPrefix, defaultDragElement, display, dragActive, file, onRemove, _onUpload, props, customDraggerRender]);

  var handleDrop = function handleDrop(event) {
    var _props$onChange, _props$onDragleave;

    event.preventDefault();
    (_props$onChange = props.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call(props, event.dataTransfer.files);
    (_props$onDragleave = props.onDragleave) === null || _props$onDragleave === void 0 ? void 0 : _props$onDragleave.call(props, event);
    setDragActive(false);
  };

  var handleDragenter = function handleDragenter(event) {
    var _props$onDragenter;

    event.preventDefault();
    (_props$onDragenter = props.onDragenter) === null || _props$onDragenter === void 0 ? void 0 : _props$onDragenter.call(props, event);
    setDragActive(true);
  };

  var handleDragleave = function handleDragleave(event) {
    var _props$onDragleave2;

    if (!target.current) return;
    event.preventDefault();
    (_props$onDragleave2 = props.onDragleave) === null || _props$onDragleave2 === void 0 ? void 0 : _props$onDragleave2.call(props, event);
    setDragActive(false);
  };

  var handleDragover = function handleDragover(event) {
    event.preventDefault();
  };

  return /* @__PURE__ */React.createElement("div", {
    ref: target,
    className: classes,
    onDrop: handleDrop,
    onDragEnter: handleDragenter,
    onDragOver: handleDragover,
    onDragLeave: handleDragleave
  }, dragElement);
};

export { Dragger as default };
//# sourceMappingURL=dragger.js.map
