/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _toConsumableArray } from '../_chunks/dep-124f91c5.js';
import '../_chunks/dep-beac373a.js';

var urlCreator = window.webkitURL || window.URL;
function returnFileSize(number) {
  if (number < 1024) {
    return "".concat(number, " Bytes");
  }

  if (number >= 1024 && number < 1048576) {
    return "".concat((number / 1024).toFixed(1), " KB");
  }

  if (number >= 1048576) {
    return "".concat((number / 1048576).toFixed(1), " MB");
  }
}
function getCurrentDate() {
  var d = new Date();
  var month = d.getMonth() + 1;
  month = month < 10 ? "0".concat(month) : month;
  return "".concat(d.getFullYear(), "-").concat(month, "-").concat(d.getDate(), " ").concat(d.getHours(), ":").concat(d.getMinutes(), ":").concat(d.getSeconds());
}
function abridgeName() {
  var inputName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
  var leftCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;
  var rightcount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 7;
  var name = inputName;
  var leftLength = 0;
  var rightLength = 0;

  for (var i = 0; i < name.length; i++) {
    var w = name[i];
    var isCn = escape(w).indexOf("%u") === 0;

    if (i < leftCount * 2 && leftLength < leftCount) {
      isCn ? leftLength += 1 : leftLength += 2;
    } else if (i > i - rightcount && rightLength < rightcount) {
      isCn ? rightLength += 1 : rightLength += 2;
    }
  }

  return name.replace(new RegExp("^(.{".concat(leftLength, "})(.+)(.{").concat(rightLength, "})$")), "$1\u2026$3");
}
function updateFileList(file, fileList) {
  var nextFileList = _toConsumableArray(fileList);

  var fileIndex = nextFileList.findIndex(function (_ref) {
    var uid = _ref.uid;
    return uid === file.uid;
  });

  if (fileIndex === -1) {
    nextFileList.push(file);
  } else {
    nextFileList[fileIndex] = file;
  }

  return nextFileList;
}
function createFileURL(file) {
  return urlCreator.createObjectURL(file);
}
function finishUpload(state) {
  return ["success", "fail"].includes(state);
}
function isSingleFile() {
  var multiple = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  var theme = arguments.length > 1 ? arguments[1] : undefined;
  return !multiple && ["file", "file-input", "image"].includes(theme);
}

export { abridgeName, createFileURL, finishUpload, getCurrentDate, isSingleFile, returnFileSize, updateFileList };
//# sourceMappingURL=util.js.map
