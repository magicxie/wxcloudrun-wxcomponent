{"version":3,"file":"dep-37f63687.js","sources":["../../node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../../node_modules/@babel/runtime/helpers/esm/createClass.js","../../node_modules/lodash/uniqueId.js","../../src/_common/js/tree/tree-node.ts"],"sourcesContent":["export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","var toString = require('./toString');\n\n/** Used to generate unique IDs. */\nvar idCounter = 0;\n\n/**\n * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {string} [prefix=''] The value to prefix the ID with.\n * @returns {string} Returns the unique ID.\n * @example\n *\n * _.uniqueId('contact_');\n * // => 'contact_104'\n *\n * _.uniqueId();\n * // => '105'\n */\nfunction uniqueId(prefix) {\n  var id = ++idCounter;\n  return toString(prefix) + id;\n}\n\nmodule.exports = uniqueId;\n","import uniqueId from 'lodash/uniqueId';\nimport get from 'lodash/get';\nimport { TreeStore } from './tree-store';\nimport {\n  TreeNodeValue,\n  TreeNodeState,\n  TypeIdMap,\n  TypeTreeItem,\n  TypeSettingOptions,\n  TypeTreeNodeModel,\n  TypeTreeNodeData,\n} from './types';\nimport {\n  createNodeModel,\n  updateNodeModel,\n} from './tree-node-model';\n\nconst { hasOwnProperty } = Object.prototype;\n\nconst defaultStatus = {\n  expandMutex: false,\n  activable: false,\n  checkable: false,\n  disabled: false,\n  draggable: false,\n  loading: false,\n};\n\n// vm 开头为视图属性，不可以外部设置\n// 用于触发视图更新\nexport class TreeNode {\n  // 节点隶属的树实例\n  public tree: TreeStore;\n\n  // 节点 id ，唯一标志\n  public value: string;\n\n  // 节点文本\n  public label: string;\n\n  // 节点数据\n  public data: TypeTreeNodeData;\n\n  // 父节点\n  public parent: TreeNode;\n\n  // 子节点列表\n  public children: TreeNode[] | boolean;\n\n  // 暴露的 treeNodeModel，这个对象的属性和 api 提供给用户使用\n  public model: TypeTreeNodeModel;\n\n  // 是否为叶节点\n  public vmIsLeaf: boolean;\n\n  // 是否为子节点中的第一个\n  public vmIsFirst: boolean;\n\n  // 是否为子节点中的最后\n  public vmIsLast: boolean;\n\n  // 节点是否是经过过滤剩下的\n  public vmIsRest: boolean;\n\n  // 节点是否展示为锁定状态\n  public vmIsLocked: boolean;\n\n  // 节点在视图上实际的展开状态\n  public expanded: boolean;\n\n  // 展开时是否收起同级节点，对子节点生效\n  public expandMutex: boolean;\n\n  // 节点在视图上实际的激活状态\n  public actived: boolean;\n\n  // 是否可激活\n  public activable: boolean;\n\n  // 是否可选中\n  public checkable: boolean;\n\n  // 是否可选中的视图呈现\n  public vmCheckable: boolean;\n\n  // 节点在视图上实际的选中态\n  public checked: boolean;\n\n  // 节点实际是否为半选状态\n  public indeterminate: boolean;\n\n  // 节点是否已禁用\n  public disabled: boolean;\n\n  // 节点是否可拖动\n  public draggable: boolean;\n\n  // 节点是否可视\n  public visible: boolean;\n\n  // 节点在树中的层级\n  public level: number;\n\n  // 节点是否正在加载数据\n  public loading: boolean;\n\n  public constructor(\n    tree: TreeStore,\n    data?: TypeTreeNodeData,\n    parent?: TreeNode,\n  ) {\n    this.data = data;\n    this.tree = tree;\n\n    const config = tree.config || {};\n    const prefix = config.prefix || 't';\n    const keys = get(tree, 'config.keys') || {};\n    const propChildren = keys.children || 'children';\n    const propLabel = keys.label || 'label';\n    const propValue = keys.value || 'value';\n\n    this.model = null;\n    this.children = null;\n    this.vmCheckable = false;\n    this.vmIsLeaf = false;\n    this.vmIsFirst = false;\n    this.vmIsLast = false;\n    this.vmIsRest = true;\n    this.vmIsLocked = false;\n\n    const spec = {\n      ...defaultStatus,\n      actived: false,\n      expanded: false,\n      checked: false,\n      ...data,\n    };\n    const children = spec[propChildren];\n\n    this.set(spec);\n    this.label = spec[propLabel] || '';\n    this.value = spec[propValue] || uniqueId(prefix);\n    this.tree.nodeMap.set(this.value, this);\n\n    if (parent && parent instanceof TreeNode) {\n      this.parent = parent;\n    } else {\n      this.parent = null;\n    }\n\n    // 子节点为 true 的状态逻辑需要放到状态计算之前\n    // 初始化加载逻辑需要依据这个来进行\n    if (children === true) {\n      this.children = children;\n    }\n\n    // 初始化状态计算\n    this.level = 0;\n    this.visible = true;\n\n    this.actived = spec.actived;\n    this.initActived();\n\n    this.expanded = spec.expanded;\n    this.initExpanded();\n\n    this.checked = spec.checked;\n    this.initChecked();\n\n    this.update();\n    tree.reflow(this);\n\n    // 这里的子节点加载逻辑不能放到状态计算之前\n    // 因为子节点状态计算依赖父节点状态\n    if (Array.isArray(children)) {\n      this.append(children);\n    } else if (children === true && !config.lazy) {\n      this.loadChildren();\n    }\n\n    // checked 状态依赖于子节点状态\n    // 因此初始化状态放到子节点插入之后\n    this.checked = false;\n    this.indeterminate = false;\n    this.updateChecked();\n  }\n\n  /* ------ 状态初始化 ------ */\n\n  // 初始化选中态\n  public initChecked() {\n    const { tree, value, parent } = this;\n    const { checkStrictly } = tree.config;\n    let { checked } = this;\n    checked = parent?.isChecked();\n    if (checked && !checkStrictly) {\n      tree.checkedMap.set(value, true);\n    }\n    this.checked = checked;\n  }\n\n  // 初始化节点展开状态\n  public initExpanded(): void {\n    const { tree } = this;\n    let { expanded } = this;\n    const { config } = tree;\n    if (\n      typeof config.expandLevel === 'number'\n      && this.getLevel() < config.expandLevel\n    ) {\n      tree.expandedMap.set(this.value, true);\n      expanded = true;\n    }\n    if (config.expandAll) {\n      expanded = true;\n    }\n    if (this.children === true && config.lazy) {\n      expanded = false;\n    }\n    if (expanded) {\n      tree.expandedMap.set(this.value, true);\n    } else {\n      tree.expandedMap.delete(this.value);\n    }\n    this.expanded = expanded;\n  }\n\n  // 初始化高亮状态\n  public initActived(): void {\n    const { tree, actived } = this;\n    if (actived) {\n      tree.activedMap.set(this.value, true);\n    }\n  }\n\n  /* ------ 节点操作 ------ */\n\n  // 追加数据\n  public append(data: TypeTreeNodeData | TypeTreeNodeData[]): void {\n    const list = [];\n    if (!Array.isArray(data)) {\n      list.push(data);\n    } else {\n      list.push(...data);\n    }\n    if (list.length <= 0) {\n      return;\n    }\n    if (!Array.isArray(this.children)) {\n      this.children = [];\n    }\n    const { children, tree } = this;\n    list.forEach((item) => {\n      let node = null;\n      if (item instanceof TreeNode) {\n        node = item;\n        node.appendTo(this.tree, this);\n      } else {\n        node = new TreeNode(this.tree, item, this);\n        children.push(node);\n      }\n    });\n    tree.reflow(this);\n    this.updateRelated();\n  }\n\n  // 将当前节点追加到某个父节点的子节点列表中\n  public appendTo(\n    tree: TreeStore,\n    parent?: TreeNode,\n    index?: number,\n  ): void {\n    const parentNode = parent;\n    if (!parentNode) return;\n\n    const targetParents = parentNode.getParents();\n    const includeCurrent = targetParents.some((node) => node.value === this.value);\n    if (includeCurrent) {\n      // 不能将父节点插入到子节点\n      return;\n    }\n\n    if (Array.isArray(parentNode.children)) {\n      let targetIndex = 0;\n      if (typeof index === 'number') {\n        targetIndex = index;\n      }\n      const targetPosNode = parentNode.children[targetIndex];\n      if (targetPosNode.value === this.value) {\n        // 无需将节点插入到原位置\n        return;\n      }\n    }\n\n    this.remove();\n    this.parent = parentNode;\n\n    let siblings = null;\n    if (parentNode instanceof TreeNode) {\n      if (!Array.isArray(parentNode.children)) {\n        parentNode.children = [];\n      }\n      siblings = parent.children;\n    } else {\n      siblings = tree.children;\n    }\n    if (Array.isArray(siblings)) {\n      if (typeof index === 'number') {\n        siblings.splice(index, 0, this);\n      } else {\n        siblings.push(this);\n      }\n    }\n\n    // 插入节点应当继承展开状态\n    // 但建议不要继承选中状态和高亮状态\n    const nodes = this.walk();\n    nodes.forEach((item) => {\n      const node = item;\n      node.tree = tree;\n      tree.nodeMap.set(node.value, node);\n      if (node.expanded) {\n        tree.expandedMap.set(node.value, true);\n      }\n    });\n\n    const updateNodes = parentNode.walk();\n    updateNodes.forEach((node) => {\n      node.update();\n      node.updateChecked();\n    });\n\n    tree.reflow();\n  }\n\n  // 插入一个同级节点数据\n  public insert(\n    item: TypeTreeItem,\n    index?: number,\n  ): void {\n    const { tree, parent } = this;\n    const siblings = this.getSiblings();\n    let node = null;\n    if (item instanceof TreeNode) {\n      node = item;\n      node.appendTo(tree, parent, index);\n    } else if (item) {\n      node = new TreeNode(tree, item, parent);\n      if (typeof index === 'number') {\n        siblings.splice(index, 0, node);\n      }\n      siblings.forEach((sibling) => {\n        sibling.update();\n      });\n    }\n    tree.reflow();\n  }\n\n  // 在当前节点之前插入节点\n  public insertBefore(newData: TypeTreeItem): void {\n    const index = this.getIndex();\n    this.insert(newData, index);\n  }\n\n  // 在当前节点之后插入节点\n  public insertAfter(newData: TypeTreeItem): void {\n    const index = this.getIndex();\n    this.insert(newData, index + 1);\n  }\n\n  // 从一个树移除本节点\n  public remove(): void {\n    const { tree } = this;\n\n    const nodes = this.walk();\n    const siblings = this.getSiblings();\n    const index = this.getIndex();\n    // 从父节点的子节点列表中移除自己\n    // 但不要将自己的父节点移除，避免渲染与判断失败\n    if (Array.isArray(siblings)) {\n      siblings.splice(index, 1);\n    }\n    // 清理与树的关系，但不清理自身状态\n    nodes.forEach((node) => {\n      node.clean();\n    });\n    // 同级节点的连线状态会受到影响\n    siblings.forEach((node) => {\n      node.update();\n    });\n    // 父节点选中态会受到影响\n    this.updateParents();\n    tree.reflow();\n  }\n\n  // 清除本节点与一个树的关系\n  public clean(): void {\n    const { tree, value } = this;\n    tree.activedMap.delete(value);\n    tree.checkedMap.delete(value);\n    tree.expandedMap.delete(value);\n    tree.nodeMap.delete(value);\n  }\n\n  // 异步加载子节点数据\n  public async loadChildren(): Promise<void> {\n    const config = get(this, 'tree.config') || {};\n    if (this.children === true && !this.loading) {\n      if (typeof config.load === 'function') {\n        this.loading = true;\n        this.update();\n        let list = [];\n        list = await config.load(this);\n        this.tree.emit('load', {\n          node: this,\n          data: list,\n        });\n        this.loading = false;\n        if (Array.isArray(list) && list.length > 0) {\n          this.append(list);\n        } else {\n          this.children = false;\n        }\n        this.update();\n      }\n    }\n  }\n\n  // 设置状态\n  public set(item: TreeNodeState): void {\n    const { tree } = this;\n    const keys = Object.keys(item);\n    keys.forEach((key) => {\n      if (hasOwnProperty.call(defaultStatus, key) || key === 'label') {\n        this[key] = item[key];\n      }\n    });\n    tree.updated(this);\n  }\n\n  /* ------ 节点获取 ------- */\n\n  // 获取单个父节点\n  public getParent(): TreeNode {\n    return this.parent;\n  }\n\n  // 获取所有父节点\n  public getParents(): TreeNode[] {\n    const parents = [];\n    let node = this.parent;\n    while (node) {\n      parents.push(node);\n      node = node.parent;\n    }\n    return parents;\n  }\n\n  // 获取兄弟节点，包含自己在内\n  public getSiblings(): TreeNode[] {\n    const { parent, tree } = this;\n    let list: TreeNode[] = [];\n    if (parent) {\n      if (Array.isArray(parent.children)) {\n        list = parent.children;\n      }\n    } else if (tree) {\n      list = tree.children;\n    }\n    return list;\n  }\n\n  // 获取根节点\n  public getRoot(): TreeNode {\n    const parents = this.getParents();\n    return parents[parents.length - 1] || null;\n  }\n\n  // 获取节点在父节点的子节点列表中的位置\n  // 如果没有父节点，则获取节点在根节点列表的位置\n  public getIndex(): number {\n    const list = this.getSiblings();\n    return list.indexOf(this);\n  }\n\n  // 返回路径节点\n  public getPath(): TreeNode[] {\n    const nodes = this.getParents();\n    nodes.unshift(this);\n    return nodes.reverse();\n  }\n\n  // 获取节点所在层级\n  public getLevel(): number {\n    const parents = this.getParents();\n    return parents.length;\n  }\n\n  /* ------ 节点状态判断 ------ */\n\n  // 判断节点是否被过滤\n  public isRest(): boolean {\n    const {\n      config,\n      filterMap,\n    } = this.tree;\n\n    let rest = true;\n    if (typeof config.filter === 'function') {\n      const nodeModel = this.getModel();\n      rest = config.filter(nodeModel);\n    }\n\n    if (rest) {\n      filterMap.set(this.value, true);\n    } else if (filterMap.get(this.value)) {\n      filterMap.delete(this.value);\n    }\n\n    return rest;\n  }\n\n  // 判断节点是否可视\n  public isVisible(): boolean {\n    const {\n      nodeMap,\n    } = this.tree;\n\n    let visible = true;\n\n    // 锁定状态，直接呈现\n    if (this.vmIsLocked) {\n      return true;\n    }\n\n    // 在当前树上，未被移除\n    if (nodeMap.get(this.value)) {\n      // 节点未被过滤\n      const filterVisible = this.isRest();\n\n      // 所有父节点展开\n      let expandVisible = true;\n      const parents = this.getParents();\n      if (parents.length > 0) {\n        expandVisible = parents.every((node: TreeNode) => node.isExpanded());\n      }\n\n      // 节点为未被过滤节点的父节点\n      visible = expandVisible && filterVisible;\n    } else {\n      visible = false;\n    }\n    return visible;\n  }\n\n  // 判断节点是否被禁用\n  public isDisabled() {\n    if (this.vmIsLocked) return true;\n    const treeDisabled = get(this, 'tree.config.disabled');\n    return !!(treeDisabled || this.disabled);\n  }\n\n  // 判断节点是否支持互斥展开\n  public isExpandMutex() {\n    return !!(get(this, 'tree.config.expandMutex') || this.expandMutex);\n  }\n\n  // 节点可高亮\n  public isActivable() {\n    return !!(get(this, 'tree.config.activable') || this.activable);\n  }\n\n  // 是否可选\n  public isCheckable() {\n    return !!(get(this, 'tree.config.checkable') || this.checkable);\n  }\n\n  // 检查节点是否被激活\n  public isActived(map?: Map<string, boolean>): boolean {\n    const { tree, value } = this;\n    const activedMap = map || tree.activedMap;\n    return !!(tree.nodeMap.get(value) && activedMap.get(value));\n  }\n\n  // 检查节点是否已展开\n  public isExpanded(map?: Map<string, boolean>): boolean {\n    const { tree, value, vmIsLocked } = this;\n    if (vmIsLocked) return true;\n    const expandedMap = map || tree.expandedMap;\n    return !!(tree.nodeMap.get(value) && expandedMap.get(value));\n  }\n\n  // 计算属性，判断节点是否被选中\n  // map: 预期选中项map，用于计算节点在预期环境中的选中态\n  public isChecked(map?: TypeIdMap): boolean {\n    const { children, tree } = this;\n    const { checkStrictly } = tree.config;\n    let checked = false;\n    const checkedMap = map || tree.checkedMap;\n    if (tree.nodeMap.get(this.value)) {\n      if (checkedMap.get(this.value)) {\n        // 如果在 checked 节点列表中，则直接为 true\n        checked = true;\n      } else if (\n        Array.isArray(children)\n        && children.length > 0\n        && !checkStrictly\n      ) {\n        // 如果是父节点，需检查所有子节点状态\n        checked = children.every((node) => {\n          const childIsChecked = node.isChecked(checkedMap);\n          return childIsChecked;\n        });\n      } else if (!checkStrictly) {\n        // 从父节点状态推断子节点状态\n        // 这里再调用 isChecked 会导致死循环\n        const parents = this.getParents();\n        checked = parents.some((node) => checkedMap.get(node.value));\n      }\n    }\n    return !!checked;\n  }\n\n  // 是否为半选状态\n  public isIndeterminate(): boolean {\n    const { children, tree } = this;\n    const { checkStrictly } = tree.config;\n    if (checkStrictly) {\n      return false;\n    }\n    let indeterminate = false;\n    if (Array.isArray(children)) {\n      // 叶节点不存在半选状态\n      let childChecked: null | boolean = null;\n      indeterminate = children.some((node: TreeNode) => {\n        if (node.isIndeterminate()) {\n          // 子节点有任意一个半选，则其为半选状态\n          return true;\n        }\n        if (childChecked === null) {\n          childChecked = node.isChecked();\n        }\n        if (childChecked !== node.isChecked()) {\n          // 子节点选中状态不一致，则其为半选状态\n          return true;\n        }\n        return false;\n      });\n    }\n    return indeterminate;\n  }\n\n  public isFirst(): boolean {\n    const siblings = this.getSiblings();\n    return siblings[0] === this;\n  }\n\n  public isLast(): boolean {\n    const siblings = this.getSiblings();\n    return siblings[siblings.length - 1] === this;\n  }\n\n  // 是叶节点\n  public isLeaf(): boolean {\n    let isLeaf = false;\n    if (Array.isArray(this.children)) {\n      isLeaf = this.children.length <= 0;\n    } else {\n      isLeaf = !this.children;\n    }\n    return isLeaf;\n  }\n\n  /* ------ 节点状态切换 ------ */\n\n  // 锁定节点\n  // 搜索过滤节点时，路径节点需要固定呈现，视其为锁定态\n  public lock(lockState: boolean): void {\n    this.vmIsLocked = lockState;\n    this.expanded = this.isExpanded();\n    this.visible = this.isVisible();\n  }\n\n  // 节点展开关闭后需要调用的状态检查函数\n  public afterExpanded(): void {\n    this.update();\n    // 节点展开时检查延迟加载的数据\n    if (this.expanded && this.children === true) {\n      this.loadChildren();\n    }\n  }\n\n  // 展开或者关闭节点\n  public toggleExpanded(): TreeNodeValue[] {\n    return this.setExpanded(!this.isExpanded());\n  }\n\n  // 设置节点展开状态\n  public setExpanded(expanded: boolean, opts?: TypeSettingOptions): TreeNodeValue[] {\n    const { tree } = this;\n    const options = {\n      directly: false,\n      ...opts,\n    };\n\n    let map = tree.expandedMap;\n    if (!options.directly) {\n      map = new Map(tree.expandedMap);\n    }\n\n    // 手风琴效果，先折叠同级节点\n    if (expanded) {\n      const shouldExpandNodes = [];\n      shouldExpandNodes.push(this);\n      if (get(tree, 'config.expandParent')) {\n        this.getParents().forEach((node) => {\n          shouldExpandNodes.push(node);\n        });\n      }\n      shouldExpandNodes.forEach((node) => {\n        let isExpandMutex = false;\n        if (node.parent) {\n          isExpandMutex = node.parent.isExpandMutex();\n        } else {\n          isExpandMutex = tree?.config?.expandMutex;\n        }\n        if (isExpandMutex) {\n          const siblings = node.getSiblings();\n          siblings.forEach((snode) => {\n            map.delete(snode.value);\n          });\n        }\n        map.set(node.value, true);\n      });\n    } else {\n      map.delete(this.value);\n    }\n\n    if (options.directly) {\n      this.afterExpanded();\n      this.update();\n      this.updateChildren();\n    }\n\n    return tree.getExpanded(map);\n  }\n\n  // 切换节点激活态\n  public toggleActived(): TreeNodeValue[] {\n    return this.setActived(!this.isActived());\n  }\n\n  // 设置节点激活态\n  public setActived(actived: boolean, opts?: TypeSettingOptions): TreeNodeValue[] {\n    const { tree } = this;\n    const options = {\n      directly: false,\n      ...opts,\n    };\n    const config = tree.config || {};\n    let map = tree.activedMap;\n    if (!options.directly) {\n      map = new Map(tree.activedMap);\n    }\n    if (this.isActivable()) {\n      if (actived) {\n        if (!config.activeMultiple) {\n          map.clear();\n        }\n        map.set(this.value, true);\n      } else {\n        map.delete(this.value);\n      }\n    }\n    if (options.directly) {\n      this.update();\n    }\n    return tree.getActived(map);\n  }\n\n  // 切换选中态\n  public toggleChecked(): TreeNodeValue[] {\n    return this.setChecked(!this.isChecked());\n  }\n\n  // 更新单个节点的选中态\n  // 返回树选中列表\n  public setChecked(checked: boolean, opts?: TypeSettingOptions): TreeNodeValue[] {\n    const { tree } = this;\n    const config = tree.config || {};\n    const options = {\n      directly: false,\n      ...opts,\n    };\n    let map = tree.checkedMap;\n    if (!options.directly) {\n      map = new Map(tree.checkedMap);\n    }\n    if (this.isCheckable() && checked !== this.isChecked()) {\n      if (config.checkStrictly) {\n        if (checked) {\n          map.set(this.value, true);\n        } else {\n          map.delete(this.value);\n        }\n      } else {\n        const children = this.walk();\n        // 子节点的预期选中态与当前节点同步\n        children.forEach((node) => {\n          if (checked) {\n            map.set(node.value, true);\n          } else {\n            map.delete(node.value);\n          }\n        });\n        // 消除全部父节点的预期选中态\n        // 父节点的预期选中态将通过计算得出\n        const parents = this.getParents();\n        parents.forEach((node) => {\n          map.delete(node.value);\n        });\n      }\n    }\n    if (options.directly) {\n      if (config.checkStrictly) {\n        this.updateChecked();\n      } else {\n        const relatedNodes = tree.getRelatedNodes([this.value]);\n        relatedNodes.forEach((node) => {\n          node.updateChecked();\n        });\n      }\n    }\n    return tree.getChecked(map);\n  }\n\n  /* ------ 节点状态更新 ------ */\n\n  // 更新节点状态\n  public update(): void {\n    this.level = this.getLevel();\n    this.actived = this.isActived();\n    this.expanded = this.isExpanded();\n    this.vmCheckable = this.isCheckable();\n    this.visible = this.isVisible();\n    this.vmIsRest = this.isRest();\n    this.vmIsFirst = this.isFirst();\n    this.vmIsLast = this.isLast();\n    this.vmIsLeaf = this.isLeaf();\n    this.tree.updated(this);\n  }\n\n  // 更新选中态属性值\n  public updateChecked(): void {\n    const { tree } = this;\n    this.vmCheckable = this.isCheckable();\n    if (this.vmCheckable && !this.disabled) {\n      this.checked = this.isChecked();\n      if (this.checked) {\n        tree.checkedMap.set(this.value, true);\n      }\n      this.indeterminate = this.isIndeterminate();\n      tree.updated(this);\n    }\n  }\n\n  // 更新所有子节点状态\n  // 注意:不包含自己\n  public updateChildren(): void {\n    const { children } = this;\n    if (Array.isArray(children)) {\n      children.forEach((node) => {\n        node.update();\n        node.updateChecked();\n        node.updateChildren();\n      });\n    }\n  }\n\n  // 父节点状态更新\n  // 注意:不包含自己\n  public updateParents(): void {\n    const { parent } = this;\n    if (parent) {\n      parent.update();\n      parent.updateChecked();\n      parent.updateParents();\n    }\n  }\n\n  // 更新上下游相关节点\n  public updateRelated() {\n    const { tree } = this;\n    const relatedNodes = tree.getRelatedNodes([this.value]);\n    relatedNodes.forEach((node) => {\n      node.update();\n      node.updateChecked();\n    });\n    tree.reflow();\n  }\n\n  /* ------ 节点遍历 ------ */\n\n  // 获取包含自己在内所有的子节点\n  public walk(): TreeNode[] {\n    const { children } = this;\n    let list: TreeNode[] = [];\n    list.push(this);\n    if (Array.isArray(children) && children.length > 0) {\n      children.forEach((node) => {\n        list = list.concat(node.walk());\n      });\n    }\n    return list;\n  }\n\n  // TreeNode 对象 => TypeTreeNodeModel 对象\n  // 用于 treeNode 对外暴露的 api\n  // 经过封装的对象，减少了对外暴露的 api，利于代码重构\n  public getModel(): TypeTreeNodeModel {\n    let { model } = this;\n    if (!model) {\n      model = createNodeModel(this);\n      this.model = model;\n    }\n    updateNodeModel(model, this);\n    return model;\n  }\n}\n\nexport default TreeNode;\n"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","toString","require$$0","idCounter","uniqueId","prefix","id","uniqueId_1","hasOwnProperty","defaultStatus","expandMutex","activable","checkable","disabled","draggable","loading","TreeNode","tree","data","parent","config","keys","get","propChildren","children","propLabel","label","propValue","value","model","vmCheckable","vmIsLeaf","vmIsFirst","vmIsLast","vmIsRest","vmIsLocked","spec","actived","expanded","checked","set","nodeMap","level","visible","initActived","initExpanded","initChecked","update","reflow","Array","isArray","append","lazy","loadChildren","indeterminate","updateChecked","checkStrictly","isChecked","checkedMap","expandLevel","getLevel","expandedMap","expandAll","activedMap","list","push","forEach","item","node","appendTo","updateRelated","index","parentNode","targetParents","getParents","includeCurrent","some","targetIndex","targetPosNode","remove","siblings","splice","nodes","walk","updateNodes","getSiblings","sibling","newData","getIndex","insert","clean","updateParents","load","emit","call","updated","parents","indexOf","unshift","reverse","filterMap","rest","filter","nodeModel","getModel","filterVisible","isRest","expandVisible","every","isExpanded","treeDisabled","map","childIsChecked","childChecked","isIndeterminate","isLeaf","lockState","isVisible","setExpanded","opts","options","directly","Map","shouldExpandNodes","isExpandMutex","snode","afterExpanded","updateChildren","getExpanded","setActived","isActived","isActivable","activeMultiple","clear","getActived","setChecked","isCheckable","relatedNodes","getRelatedNodes","getChecked","isFirst","isLast","concat","createNodeModel","updateNodeModel"],"mappings":"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"}