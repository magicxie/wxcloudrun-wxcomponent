import { TreeNode } from './tree-node';
import { TreeOptionData } from '../common';
export declare type TreeNodeValue = string | number;
export interface KeysType {
    value?: string;
    label?: string;
    children?: string;
}
export interface TreeNodeState {
    /**
     * 节点是否允许被选中
     * @default false
     */
    checkable?: boolean;
    /**
     * 节点是否被选中
     * @default false
     */
    checked?: boolean;
    /**
     * 节点是否为半选中状态
     * @default false
     */
    indeterminate?: boolean;
    /**
     * 节点是否被禁用
     * @default false
     */
    disabled?: boolean;
    /**
     * 节点是否可视
     * @default false
     */
    visible?: boolean;
    /**
     * 子节点数据是否在加载中
     * @default false
     */
    loading?: boolean;
    /**
     * 节点值
     */
    value?: TreeNodeValue;
    /**
     * 节点标签文案
     * @default ''
     */
    label?: string;
    /**
     * 节点是否已展开
     * @default false
     */
    expanded?: boolean;
    /**
     * 子节点是否互斥展开
     * @default false
     */
    expandMutex?: boolean;
    /**
     * 节点是否被激活
     * @default false
     */
    actived?: boolean;
    /**
     * 节点是否允许被激活
     * @default false
     */
    activable?: boolean;
}
export interface TreeNodeModelProps<DataOption extends TreeOptionData = TreeOptionData> {
    /**
     * 当前节点值或者ID
     */
    value: TreeNodeValue;
    /**
     * 当前节点标签文本
     */
    label: string;
    /**
     * 当前节点是否处于高亮激活态
     */
    actived: boolean;
    /**
     * 当前节点是否被选中
     */
    checked: boolean;
    /**
     * 节点数据
     */
    data: DataOption;
    /**
     * 当前节点是否展开
     */
    expanded: boolean;
    /**
     * 当前节点是否处于半选状态
     */
    indeterminate: boolean;
    /**
     * 当前节点是否处于加载中状态
     */
    loading: boolean;
}
export interface TreeNodeModel<T extends TreeOptionData = TreeOptionData> extends TreeNodeModelProps {
    /**
     * 追加子节点数据
     */
    appendData: (data: T | Array<T>) => void;
    /**
     * 获取节点在父节点的子节点列表中的位置，如果没有父节点，则获取节点在根节点列表的位置
     */
    getIndex: () => number;
    /**
     * 获取节点所在的层级
     */
    getLevel: () => number;
    /**
     * 获取单个父节点
     */
    getParent: () => TreeNodeModel;
    /**
     * 获取所有父节点
     */
    getParents: () => TreeNodeModel[];
    /**
     * 获取当前节点的直接子节点
     */
    getChildren: (deep?: boolean) => boolean | TreeNodeModel[];
    /**
     * 获取节点全路径
     */
    getPath: () => TreeNodeModel[];
    /**
     * 获取根节点
     */
    getRoot: () => TreeNodeModel;
    /**
     * 获取兄弟节点，包含自己在内
     */
    getSiblings: () => TreeNodeModel[];
    /**
     * 在当前节点前插入新节点
     */
    insertAfter: (newData: T) => void;
    /**
     * 在当前节点前插入新节点
     */
    insertBefore: (newData: T) => void;
    /**
     * 是否为兄弟节点中的第一个节点
     */
    isFirst: () => boolean;
    /**
     * 是否为兄弟节点中的最后一个节点
     */
    isLast: () => boolean;
    /**
     * 是否为叶子节点
     */
    isLeaf: () => boolean;
    /**
     * 移除当前节点或当前节点的子节点，值为空则移除当前节点，值存在则移除当前节点的子节点
     */
    remove: (value?: TreeNodeValue) => void;
    /**
     * 设置当前节点数据，数据变化可自动刷新页面，泛型 `T` 表示树节点 TS 类型
     */
    setData: (data: T) => void;
}
export declare type TypeTargetNode = TreeNodeValue | TreeNode;
export declare type TypeIdMap = Map<TreeNodeValue, boolean>;
export declare type TypeValueMode = 'all' | 'parentFirst' | 'onlyLeaf';
export declare type TypeTimer = number;
export interface TypeSettingOptions {
    directly?: boolean;
}
export interface TypeRelatedNodesOptions {
    withParents?: boolean;
}
export interface TypeTreeFilterOptions {
    level?: number;
    filter?: Function;
    props?: TreeNodeState;
}
export interface TypeTreeNodeData extends TreeNodeState {
    children?: TypeTreeNodeData[];
    [key: string]: unknown;
}
export declare type TypeTreeItem = TypeTreeNodeData | TreeNode;
export declare type TypeTreeNodeModel = TreeNodeModel<TypeTreeNodeData>;
export declare type TypeTreeFilter = (node: TreeNodeModel<TypeTreeNodeData>) => boolean;
export interface TypeTreeEventState {
    node?: TreeNode;
    nodes?: TreeNode[];
    map?: TypeIdMap;
    data?: TypeTreeNodeData[];
}
export interface TypeTreeStoreOptions {
    prefix?: string;
    keys?: KeysType;
    expandAll?: boolean;
    expandLevel?: number;
    expandMutex?: boolean;
    expandParent?: boolean;
    activable?: boolean;
    activeMultiple?: boolean;
    checkable?: boolean;
    checkStrictly?: boolean;
    disabled?: boolean;
    load?: Function;
    lazy?: boolean;
    valueMode?: TypeValueMode;
    filter?: (node: TreeNodeModel<TypeTreeNodeData>) => boolean;
    onLoad?: Function;
    onReflow?: Function;
    onUpdate?: Function;
}
