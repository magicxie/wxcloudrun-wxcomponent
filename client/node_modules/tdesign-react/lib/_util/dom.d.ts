import { EasingFunction } from './easing';
import { ScrollContainer, ScrollContainerElement } from '../common';
export declare const on: any;
export declare const off: any;
export declare const addClass: (el: Element, cls: string) => void;
export declare const removeClass: (el: Element, cls: string) => void;
/**
 * 获取滚动容器
 * 因为document不存在scroll等属性, 因此排除document
 * window | HTMLElement
 * @param {ScrollContainerElement} [container='body']
 * @returns {ScrollContainer}
 */
export declare const getScrollContainer: (container?: ScrollContainer) => ScrollContainerElement;
declare type ScrollTarget = HTMLElement | Window | Document;
/**
 * 获取滚动距离
 *
 * @export
 * @param {ScrollTarget} target
 * @param {boolean} isLeft true为获取scrollLeft, false为获取scrollTop
 * @returns {number}
 */
export declare function getScroll(target: ScrollTarget, isLeft?: boolean): number;
interface ScrollTopOptions {
    container?: ScrollTarget;
    duration?: number;
    easing?: EasingFunction;
}
export declare function scrollTo(target: number, opt: ScrollTopOptions): Promise<unknown>;
export declare const isNodeOverflow: (ele: Element | Element[]) => boolean;
export declare const getAttach: (node: any) => HTMLElement;
export {};
