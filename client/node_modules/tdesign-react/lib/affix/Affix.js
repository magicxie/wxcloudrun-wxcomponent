/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-9332bbea.js';
import { _ as _slicedToArray } from '../_chunks/dep-93971e86.js';
import React, { forwardRef, useState, useRef, useCallback, useImperativeHandle, useEffect } from 'react';
import { i as isFunction_1 } from '../_chunks/dep-a347fb20.js';
import { getScrollContainer } from '../_util/dom.js';
import useConfig from '../_util/useConfig.js';
import '../_chunks/dep-beac373a.js';
import '../_chunks/dep-c6576f8f.js';
import '../_chunks/dep-156c830d.js';
import '../_chunks/dep-b33ecffe.js';
import 'raf';
import '../_chunks/dep-f3f6eedc.js';
import '../_chunks/dep-04305406.js';
import '../_chunks/dep-6ca758b4.js';
import '../_util/easing.js';
import '../config-provider/ConfigContext.js';
import '../locale/zh_CN.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var Affix = /*#__PURE__*/forwardRef(function (props, ref) {
  var children = props.children,
      _props$container = props.container,
      container = _props$container === void 0 ? function () {
    return window;
  } : _props$container,
      offsetBottom = props.offsetBottom,
      offsetTop = props.offsetTop,
      onFixedChange = props.onFixedChange;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      affixed = _useState2[0],
      setAffixed = _useState2[1];

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var affixRef = useRef();
  var affixWrapRef = useRef();
  var stateRef = useRef({
    ticking: false,
    oldWidth: 0,
    oldHeight: 0,
    containerHeight: 0
  });
  var handleScroll = useCallback(function () {
    var _stateRef$current = stateRef.current,
        ticking = _stateRef$current.ticking,
        scrollContainer = _stateRef$current.scrollContainer,
        containerHeight = _stateRef$current.containerHeight,
        oldWidth2 = _stateRef$current.oldWidth;

    if (!ticking) {
      window.requestAnimationFrame(function () {
        var affixEl = affixRef.current;

        var _affixWrapRef$current = affixWrapRef.current.getBoundingClientRect(),
            top = _affixWrapRef$current.top;

        var containerTop = 0;

        if (scrollContainer instanceof HTMLElement) {
          containerTop = scrollContainer.getBoundingClientRect().top;
        }

        var fixedTop;
        var calcTop = top - containerTop;
        var calcBottom = containerTop + containerHeight - offsetBottom;

        if (offsetTop !== void 0 && calcTop <= offsetTop) {
          fixedTop = containerTop + offsetTop;
        } else if (offsetBottom !== void 0 && top >= calcBottom) {
          fixedTop = calcBottom;
        } else {
          fixedTop = false;
        }

        if (fixedTop !== false) {
          affixEl.className = "".concat(classPrefix, "-affix");
          affixEl.style.top = "".concat(fixedTop, "px");
          affixEl.style.width = "".concat(oldWidth2, "px");
        } else {
          affixEl.removeAttribute("class");
          affixEl.removeAttribute("style");
        }

        setAffixed(!!fixedTop);
        if (isFunction_1(onFixedChange)) onFixedChange(!!fixedTop, {
          top: fixedTop
        });
        stateRef.current.ticking = false;
      });
    }

    stateRef.current.ticking = true;
  }, [classPrefix, offsetBottom, offsetTop, onFixedChange]);
  var calcInitValue = useCallback(function () {
    var scrollContainer = getScrollContainer(container);
    if (!scrollContainer) return;
    var containerHeight = 0;

    if (scrollContainer instanceof Window) {
      containerHeight = scrollContainer.innerHeight;
    } else {
      containerHeight = scrollContainer.clientHeight;
    }

    var _ref = affixRef.current || {},
        clientWidth = _ref.clientWidth,
        clientHeight = _ref.clientHeight;

    stateRef.current = _objectSpread(_objectSpread({}, stateRef.current), {}, {
      scrollContainer: scrollContainer,
      oldWidth: clientWidth,
      oldHeight: clientHeight,
      containerHeight: containerHeight - clientHeight
    });
    handleScroll();
  }, [container, handleScroll]);
  useImperativeHandle(ref, function () {
    return {
      calcInitValue: calcInitValue,
      handleScroll: handleScroll
    };
  });
  useEffect(function () {
    calcInitValue();

    if (stateRef.current.scrollContainer) {
      stateRef.current.scrollContainer.addEventListener("scroll", handleScroll);
      window.addEventListener("resize", handleScroll);
      return function () {
        stateRef.current.scrollContainer.removeEventListener("scroll", handleScroll);
        window.removeEventListener("resize", handleScroll);
      };
    }
  }, [calcInitValue, handleScroll]);
  var _stateRef$current2 = stateRef.current,
      oldWidth = _stateRef$current2.oldWidth,
      oldHeight = _stateRef$current2.oldHeight;
  return /* @__PURE__ */React.createElement("div", {
    ref: affixWrapRef
  }, affixed ? /* @__PURE__ */React.createElement("div", {
    style: {
      width: "".concat(oldWidth, "px"),
      height: "".concat(oldHeight, "px")
    }
  }) : "", /* @__PURE__ */React.createElement("div", {
    ref: affixRef
  }, children));
});

export { Affix as default };
//# sourceMappingURL=Affix.js.map
