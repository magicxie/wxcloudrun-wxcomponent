/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-9332bbea.js';
import { _ as _objectWithoutProperties } from '../_chunks/dep-27d690ce.js';
import React from 'react';
import classNames from 'classnames';
import useConfig from '../_util/useConfig.js';
import '../config-provider/ConfigContext.js';
import '../locale/zh_CN.js';

var _excluded = ["color", "dot", "maxCount", "count", "size", "shape", "showZero", "offset", "className", "children", "style"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var Badge = function Badge(_ref) {
  var color = _ref.color,
      _ref$dot = _ref.dot,
      dot = _ref$dot === void 0 ? false : _ref$dot,
      _ref$maxCount = _ref.maxCount,
      maxCount = _ref$maxCount === void 0 ? 99 : _ref$maxCount,
      count = _ref.count,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? "medium" : _ref$size,
      _ref$shape = _ref.shape,
      shape = _ref$shape === void 0 ? "circle" : _ref$shape,
      _ref$showZero = _ref.showZero,
      showZero = _ref$showZero === void 0 ? false : _ref$showZero,
      _ref$offset = _ref.offset,
      offset = _ref$offset === void 0 ? [] : _ref$offset,
      className = _ref.className,
      _ref$children = _ref.children,
      children = _ref$children === void 0 ? null : _ref$children,
      _ref$style = _ref.style,
      style = _ref$style === void 0 ? {} : _ref$style,
      restProps = _objectWithoutProperties(_ref, _excluded);

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var badgeClassName = classNames(!children && "".concat(classPrefix, "-badge--static"), dot ? "".concat(classPrefix, "-badge--dot") : shape && "".concat(classPrefix, "-badge--").concat(shape), size === "small" && "".concat(classPrefix, "-size-s"), !children && className);

  var getDisplayCount = function getDisplayCount() {
    if (typeof count === "number" && count > maxCount) {
      return "".concat(maxCount, "+");
    }

    return count;
  };

  var isHidden = !count;

  if (typeof count === "number") {
    isHidden = count < 1 && !showZero;
  }

  var getStyle = function getStyle() {
    var mergedStyle = _objectSpread({}, style);

    if (color) mergedStyle.backgroundColor = color;

    if (offset) {
      if (offset[0]) {
        mergedStyle.right = -offset[0];
      }

      if (offset[1]) {
        mergedStyle.marginTop = -offset[1];
      }
    }

    return mergedStyle;
  };

  var badge = !isHidden ? /* @__PURE__ */React.createElement("span", _objectSpread(_objectSpread({}, children ? {} : restProps), {}, {
    className: badgeClassName,
    style: getStyle()
  }), !dot ? getDisplayCount() : null) : null;
  if (!children) return badge;
  return /* @__PURE__ */React.createElement("span", _objectSpread(_objectSpread({}, restProps), {}, {
    className: classNames("".concat(classPrefix, "-badge"), className)
  }), children, badge);
};

Badge.displayName = "Badge";

export { Badge as default };
//# sourceMappingURL=Badge.js.map
