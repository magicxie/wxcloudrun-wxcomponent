/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-9332bbea.js';
import { _ as _objectWithoutProperties } from '../_chunks/dep-27d690ce.js';
import React, { forwardRef, useRef } from 'react';
import classNames from 'classnames';
import noop from '../_util/noop.js';
import useConfig from '../_util/useConfig.js';
import useRipple from '../_util/useRipple.js';
import { Loading } from '../loading/index.js';
import '../config-provider/ConfigContext.js';
import '../locale/zh_CN.js';
import '../_util/setStyle.js';
import '../loading/loading.js';
import '../_chunks/dep-93971e86.js';
import '../_chunks/dep-beac373a.js';
import '../_util/dom.js';
import 'raf';
import '../_chunks/dep-f3f6eedc.js';
import '../_chunks/dep-c6576f8f.js';
import '../_chunks/dep-156c830d.js';
import '../_chunks/dep-04305406.js';
import '../_chunks/dep-6ca758b4.js';
import '../_util/easing.js';
import '../common/Portal.js';
import 'react-dom';
import '../loading/gradient.js';
import '../loading/plugin.js';

var _excluded = ["type", "theme", "variant", "icon", "disabled", "loading", "size", "block", "ghost", "shape", "children", "content", "className", "onClick"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var Button = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _classNames;

  var _ref$type = _ref.type,
      type = _ref$type === void 0 ? "button" : _ref$type,
      theme = _ref.theme,
      _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? "base" : _ref$variant,
      icon = _ref.icon,
      disabled = _ref.disabled,
      loading = _ref.loading,
      size = _ref.size,
      block = _ref.block,
      ghost = _ref.ghost,
      _ref$shape = _ref.shape,
      shape = _ref$shape === void 0 ? "rectangle" : _ref$shape,
      children = _ref.children,
      content = _ref.content,
      className = _ref.className,
      _ref$onClick = _ref.onClick,
      onClick = _ref$onClick === void 0 ? noop : _ref$onClick,
      buttonProps = _objectWithoutProperties(_ref, _excluded);

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var btnRef = useRef();
  useRipple(ref || btnRef);
  var hasChildren = typeof children !== "undefined";
  var hasContent = typeof content !== "undefined";
  var childrenNode = children;

  if (!hasChildren && hasContent) {
    childrenNode = content;
  }

  var iconNode = icon;
  if (loading) iconNode = /* @__PURE__ */React.createElement(Loading, {
    loading: loading,
    inheritColor: true
  });
  var renderTheme = theme;

  if (!theme) {
    if (variant === "base") {
      renderTheme = "primary";
    } else {
      renderTheme = "default";
    }
  }

  return /* @__PURE__ */React.createElement("button", _objectSpread({
    ref: ref || btnRef,
    type: type,
    className: classNames(className, ["".concat(classPrefix, "-button"), "".concat(classPrefix, "-button--theme-").concat(renderTheme), "".concat(classPrefix, "-button--variant-").concat(variant)], (_classNames = {}, _defineProperty(_classNames, "".concat(classPrefix, "-button--shape-").concat(shape), shape !== "rectangle"), _defineProperty(_classNames, "".concat(classPrefix, "-button--ghost"), ghost), _defineProperty(_classNames, "".concat(classPrefix, "-is-loading"), loading), _defineProperty(_classNames, "".concat(classPrefix, "-is-disabled"), disabled || loading), _defineProperty(_classNames, "".concat(classPrefix, "-size-s"), size === "small"), _defineProperty(_classNames, "".concat(classPrefix, "-size-l"), size === "large"), _defineProperty(_classNames, "".concat(classPrefix, "-size-full-width"), block), _classNames)),
    onClick: !disabled && !loading ? onClick : void 0,
    disabled: disabled || loading
  }, buttonProps), iconNode ? /* @__PURE__ */React.createElement(React.Fragment, null, iconNode, (hasChildren || hasContent) && /* @__PURE__ */React.createElement("span", {
    className: "".concat(classPrefix, "-button__text")
  }, childrenNode)) : /* @__PURE__ */React.createElement("span", {
    className: "".concat(classPrefix, "-button__text")
  }, childrenNode));
});
Button.displayName = "Button";

export { Button as default };
//# sourceMappingURL=Button.js.map
