{"version":3,"file":"cascader.js","sources":["../../../src/cascader/utils/cascader.ts"],"sourcesContent":["import { getFullPathLabel, getTreeValue } from './helper';\nimport { TreeNode, TreeNodeValue, CascaderContextType } from '../interface';\n\n/**\n * input和treeStore变化的副作用\n * @param inputVal\n * @param treeStore\n * @param setTreeNodes\n * @returns\n */\nexport const treeNodesEffect = (\n  inputVal: CascaderContextType['inputVal'],\n  treeStore: CascaderContextType['treeStore'],\n  setTreeNodes: CascaderContextType['setTreeNodes'],\n) => {\n  if (!treeStore) return;\n  let nodes = [];\n  if (inputVal) {\n    nodes = treeStore.nodes.filter((node: TreeNode) => {\n      const fullPathLabel = getFullPathLabel(node);\n      return fullPathLabel.indexOf(inputVal) > -1 && node.isLeaf();\n    });\n  } else {\n    nodes = treeStore.getNodes().filter((node: TreeNode) => node.visible);\n  }\n  setTreeNodes(nodes);\n};\n\n/**\n * 初始化展开阶段与展开状态副作用\n * @param treeStore\n * @param treeValue\n * @param expend\n */\nexport const treeStoreExpendEffect = (\n  treeStore: CascaderContextType['treeStore'],\n  value: CascaderContextType['value'],\n  expend: TreeNodeValue[],\n) => {\n  const treeValue = getTreeValue(value);\n\n  if (!treeStore) return;\n  // init expanded, 无expend状态时设置\n  if (Array.isArray(treeValue) && expend.length === 0) {\n    const expandedMap = new Map();\n    const [val] = treeValue;\n    if (val) {\n      expandedMap.set(val, true);\n      const node = treeStore.getNode(val);\n      if (!node) return;\n      node.getParents().forEach((tn: TreeNode) => {\n        expandedMap.set(tn.value, true);\n      });\n      const expandedArr = Array.from(expandedMap.keys());\n      treeStore.replaceExpanded(expandedArr);\n    } else {\n      treeStore.resetExpanded();\n    }\n  }\n  // 本地维护 expend，更加可控，不需要依赖于 tree 的状态\n  if (treeStore.getExpanded() && expend.length) {\n    treeStore.replaceExpanded(expend);\n  }\n  treeStore.refreshNodes();\n};\n"],"names":["treeNodesEffect","inputVal","treeStore","setTreeNodes","nodes","filter","node","fullPathLabel","getFullPathLabel","indexOf","isLeaf","getNodes","visible","treeStoreExpendEffect","value","expend","treeValue","getTreeValue","Array","isArray","length","expandedMap","Map","val","set","getNode","getParents","forEach","tn","expandedArr","from","keys","replaceExpanded","resetExpanded","getExpanded","refreshNodes"],"mappings":";;;;;;;;;;;IACaA,eAAe,GAAG,SAAlBA,eAAkB,CAACC,QAAD,EAAWC,SAAX,EAAsBC,YAAtB,EAAuC;AACpE,MAAI,CAACD,SAAL,EACE;AACF,MAAIE,KAAK,GAAG,EAAZ;;AACA,MAAIH,QAAJ,EAAc;AACZG,IAAAA,KAAK,GAAGF,SAAS,CAACE,KAAV,CAAgBC,MAAhB,CAAuB,UAACC,IAAD,EAAU;AACvC,UAAMC,aAAa,GAAGC,gBAAgB,CAACF,IAAD,CAAtC;AACA,aAAOC,aAAa,CAACE,OAAd,CAAsBR,QAAtB,IAAkC,CAAC,CAAnC,IAAwCK,IAAI,CAACI,MAAL,EAA/C;AACD,KAHO,CAAR;AAID,GALD,MAKO;AACLN,IAAAA,KAAK,GAAGF,SAAS,CAACS,QAAV,GAAqBN,MAArB,CAA4B,UAACC,IAAD;AAAA,aAAUA,IAAI,CAACM,OAAf;AAAA,KAA5B,CAAR;AACD;;AACDT,EAAAA,YAAY,CAACC,KAAD,CAAZ;AACD;IACYS,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACX,SAAD,EAAYY,KAAZ,EAAmBC,MAAnB,EAA8B;AACjE,MAAMC,SAAS,GAAGC,YAAY,CAACH,KAAD,CAA9B;AACA,MAAI,CAACZ,SAAL,EACE;;AACF,MAAIgB,KAAK,CAACC,OAAN,CAAcH,SAAd,KAA4BD,MAAM,CAACK,MAAP,KAAkB,CAAlD,EAAqD;AACnD,QAAMC,WAAW,kBAAmB,IAAIC,GAAJ,EAApC;;AACA,oCAAcN,SAAd;AAAA,QAAOO,GAAP;;AACA,QAAIA,GAAJ,EAAS;AACPF,MAAAA,WAAW,CAACG,GAAZ,CAAgBD,GAAhB,EAAqB,IAArB;AACA,UAAMjB,IAAI,GAAGJ,SAAS,CAACuB,OAAV,CAAkBF,GAAlB,CAAb;AACA,UAAI,CAACjB,IAAL,EACE;AACFA,MAAAA,IAAI,CAACoB,UAAL,GAAkBC,OAAlB,CAA0B,UAACC,EAAD,EAAQ;AAChCP,QAAAA,WAAW,CAACG,GAAZ,CAAgBI,EAAE,CAACd,KAAnB,EAA0B,IAA1B;AACD,OAFD;AAGA,UAAMe,WAAW,GAAGX,KAAK,CAACY,IAAN,CAAWT,WAAW,CAACU,IAAZ,EAAX,CAApB;AACA7B,MAAAA,SAAS,CAAC8B,eAAV,CAA0BH,WAA1B;AACD,KAVD,MAUO;AACL3B,MAAAA,SAAS,CAAC+B,aAAV;AACD;AACF;;AACD,MAAI/B,SAAS,CAACgC,WAAV,MAA2BnB,MAAM,CAACK,MAAtC,EAA8C;AAC5ClB,IAAAA,SAAS,CAAC8B,eAAV,CAA0BjB,MAA1B;AACD;;AACDb,EAAAA,SAAS,CAACiC,YAAV;AACD;;;;"}