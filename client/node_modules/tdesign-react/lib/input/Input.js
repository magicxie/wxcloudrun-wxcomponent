/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-9332bbea.js';
import { _ as _slicedToArray } from '../_chunks/dep-93971e86.js';
import { _ as _objectWithoutProperties } from '../_chunks/dep-27d690ce.js';
import React, { useRef, useState } from 'react';
import classNames from 'classnames';
import { i as isFunction_1 } from '../_chunks/dep-a347fb20.js';
import { CloseCircleFilledIcon } from 'tdesign-icons-react';
import forwardRefWithStatics from '../_util/forwardRefWithStatics.js';
import useConfig from '../_util/useConfig.js';
import InputGroup from './InputGroup.js';
import useDefaultValue from '../_util/useDefaultValue.js';
import '../_chunks/dep-beac373a.js';
import '../_chunks/dep-c6576f8f.js';
import '../_chunks/dep-156c830d.js';
import '../_chunks/dep-b33ecffe.js';
import 'hoist-non-react-statics';
import '../config-provider/ConfigContext.js';
import '../locale/zh_CN.js';
import '../_util/useDefault.js';
import '../_util/noop.js';

var _excluded = ["disabled", "status", "size", "className", "style", "prefixIcon", "suffixIcon", "clearable", "value", "onChange", "onClear", "onEnter", "onKeydown", "onCompositionStart", "onCompositionEnd", "autofocus", "readonly"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var renderIcon = function renderIcon(classPrefix, type, icon) {
  var result = null;
  if (icon) result = icon;
  if (typeof icon === "function") result = icon();

  if (result) {
    result = /* @__PURE__ */React.createElement("span", {
      className: "".concat(classPrefix, "-input__").concat(type)
    }, result);
  }

  return result;
};

var Input = forwardRefWithStatics(function (props, ref) {
  var _classNames;

  var _useDefaultValue = useDefaultValue(props, ""),
      disabled = _useDefaultValue.disabled,
      status = _useDefaultValue.status,
      size = _useDefaultValue.size,
      className = _useDefaultValue.className,
      style = _useDefaultValue.style,
      prefixIcon = _useDefaultValue.prefixIcon,
      suffixIcon = _useDefaultValue.suffixIcon,
      clearable = _useDefaultValue.clearable,
      value = _useDefaultValue.value,
      onChange = _useDefaultValue.onChange,
      onClear = _useDefaultValue.onClear,
      onEnter = _useDefaultValue.onEnter,
      onKeydown = _useDefaultValue.onKeydown,
      onCompositionStart = _useDefaultValue.onCompositionStart,
      onCompositionEnd = _useDefaultValue.onCompositionEnd,
      autofocus = _useDefaultValue.autofocus,
      readonly = _useDefaultValue.readonly,
      restProps = _objectWithoutProperties(_useDefaultValue, _excluded);

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var composingRef = useRef(false);

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isHover = _useState2[0],
      toggleIsHover = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      isFocused = _useState4[0],
      toggleIsFocused = _useState4[1];

  var _useState5 = useState(""),
      _useState6 = _slicedToArray(_useState5, 2),
      composingRefValue = _useState6[0],
      setComposingValue = _useState6[1];

  var isShowClearIcon = clearable && value && !disabled && isHover;
  var componentType = "input";
  var prefixIconContent = renderIcon(classPrefix, "prefix", prefixIcon);
  var suffixIconNew = isShowClearIcon ? /* @__PURE__ */React.createElement(CloseCircleFilledIcon, {
    className: "".concat(classPrefix, "-input__suffix-clear"),
    onClick: handleClear,
    onMouseUp: function onMouseUp(e) {
      return e.preventDefault();
    },
    onMouseDown: function onMouseDown(e) {
      return e.preventDefault();
    }
  }) : suffixIcon;
  var suffixIconContent = renderIcon(classPrefix, "suffix", suffixIconNew);
  var inputPropsNames = Object.keys(restProps).filter(function (key) {
    return !/^on[A-Z]/.test(key);
  });
  var inputProps = inputPropsNames.reduce(function (inputProps2, key) {
    return Object.assign(inputProps2, _defineProperty({}, key, props[key]));
  }, {});
  var eventPropsNames = Object.keys(restProps).filter(function (key) {
    return /^on[A-Z]/.test(key);
  });
  var eventProps = eventPropsNames.reduce(function (eventProps2, key) {
    Object.assign(eventProps2, _defineProperty({}, key, function (e) {
      return props[key](e.currentTarget.value, {
        e: e
      });
    }));
    return eventProps2;
  }, {});
  var renderInput = /* @__PURE__ */React.createElement("input", _objectSpread(_objectSpread(_objectSpread({
    readOnly: readonly,
    disabled: disabled,
    className: "".concat(classPrefix, "-").concat(componentType, "__inner")
  }, inputProps), {}, {
    value: composingRef.current ? composingRefValue : value
  }, eventProps), {}, {
    autoFocus: autofocus,
    onChange: handleChange,
    onKeyDown: handleKeyDown,
    onCompositionStart: handleCompositionStart,
    onCompositionEnd: handleCompositionEnd
  }));

  function handleChange(e) {
    var value2 = e.currentTarget.value;

    if (composingRef.current) {
      setComposingValue(value2);
    } else {
      onChange(value2, {
        e: e
      });
    }
  }

  function handleClear(e) {
    isFunction_1(onChange) && onChange("", {
      e: e
    });
    isFunction_1(onClear) && onClear({
      e: e
    });
  }

  function handleKeyDown(e) {
    var key = e.key,
        value2 = e.currentTarget.value;
    isFunction_1(onEnter) && key === "Enter" && onEnter(value2, {
      e: e
    });
    isFunction_1(onKeydown) && onKeydown(value2, {
      e: e
    });
  }

  function handleCompositionStart(event) {
    composingRef.current = true;
    isFunction_1(onCompositionStart) && onCompositionStart(event);
  }

  function handleCompositionEnd(event) {
    if (composingRef.current) {
      composingRef.current = false;
      handleChange(event);
    }

    setComposingValue("");
    isFunction_1(onCompositionEnd) && onCompositionEnd(event);
  }

  return /* @__PURE__ */React.createElement("div", {
    ref: ref,
    style: style,
    className: classNames("".concat(classPrefix, "-").concat(componentType), (_classNames = {}, _defineProperty(_classNames, "".concat(classPrefix, "-is-disabled"), disabled), _defineProperty(_classNames, "".concat(classPrefix, "-is-focused"), isFocused), _defineProperty(_classNames, "".concat(classPrefix, "-size-s"), size === "small"), _defineProperty(_classNames, "".concat(classPrefix, "-size-l"), size === "large"), _defineProperty(_classNames, "".concat(classPrefix, "-is-").concat(status), status), _defineProperty(_classNames, "".concat(classPrefix, "-").concat(componentType, "--prefix"), prefixIcon), _defineProperty(_classNames, "".concat(classPrefix, "-").concat(componentType, "--suffix"), suffixIconContent), _defineProperty(_classNames, "".concat(classPrefix, "-").concat(componentType, "--focused"), isFocused), _classNames), className),
    onMouseEnter: function onMouseEnter() {
      return toggleIsHover(true);
    },
    onMouseLeave: function onMouseLeave() {
      return toggleIsHover(false);
    },
    onFocus: function onFocus() {
      return toggleIsFocused(true);
    },
    onBlur: function onBlur() {
      return toggleIsFocused(false);
    }
  }, prefixIconContent, renderInput, suffixIconContent);
}, {
  Group: InputGroup
});
Input.displayName = "Input";

export { Input as default };
//# sourceMappingURL=Input.js.map
