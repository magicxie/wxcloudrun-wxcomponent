/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _slicedToArray } from '../_chunks/dep-93971e86.js';
import React, { forwardRef } from 'react';
import { CloseIcon, CheckCircleFilledIcon, InfoCircleFilledIcon } from 'tdesign-icons-react';
import noop from '../_util/noop.js';
import useConfig from '../_util/useConfig.js';
import '../_chunks/dep-beac373a.js';
import '../config-provider/ConfigContext.js';
import '../locale/zh_CN.js';

var blockName = "notification";
var NotificationComponent = /*#__PURE__*/forwardRef(function (props, ref) {
  var _props$title = props.title,
      title = _props$title === void 0 ? null : _props$title,
      _props$content = props.content,
      content = _props$content === void 0 ? null : _props$content,
      _props$theme = props.theme,
      theme = _props$theme === void 0 ? null : _props$theme,
      _props$icon = props.icon,
      icon = _props$icon === void 0 ? null : _props$icon,
      closeBtn = props.closeBtn,
      _props$footer = props.footer,
      footer = _props$footer === void 0 ? null : _props$footer,
      _props$duration = props.duration,
      duration = _props$duration === void 0 ? 3e3 : _props$duration,
      _props$onCloseBtnClic = props.onCloseBtnClick,
      onCloseBtnClick = _props$onCloseBtnClic === void 0 ? noop : _props$onCloseBtnClic,
      _props$onDurationEnd = props.onDurationEnd,
      onDurationEnd = _props$onDurationEnd === void 0 ? noop : _props$onDurationEnd,
      style = props.style;

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var prefixCls = React.useCallback(function () {
    var className = "";

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    args.forEach(function (item, index) {
      if (item && index > 0) className = className.concat(" ");

      if (item instanceof Array) {
        var _item = _slicedToArray(item, 3),
            block = _item[0],
            element = _item[1],
            modifier = _item[2];

        className = className.concat(classPrefix, "-", block);
        if (element) className = className.concat("__", element);
        if (modifier) className = className.concat("--", modifier);
      } else if (typeof item === "string") {
        className = className.concat(classPrefix, "-", item);
      }
    });
    return className;
  }, [classPrefix]);
  React.useImperativeHandle(ref, function () {
    return {
      close: close
    };
  }, []);
  React.useEffect(function () {
    var timer;

    if (duration > 0) {
      timer = setTimeout(function () {
        clearTimeout(timer);
        onDurationEnd();
      }, duration);
    }

    return function () {
      if (timer) clearTimeout(timer);
    };
  }, []);

  var renderIcon = function renderIcon() {
    var IconWrapper = function IconWrapper(_ref) {
      var children = _ref.children;
      return /* @__PURE__ */React.createElement("div", {
        className: "".concat(classPrefix, "-notification__icon")
      }, children);
    };

    if ( /*#__PURE__*/React.isValidElement(icon)) {
      return /* @__PURE__ */React.createElement(IconWrapper, null, icon);
    }

    if (theme && theme === "success") {
      return /* @__PURE__ */React.createElement(IconWrapper, null, /* @__PURE__ */React.createElement(CheckCircleFilledIcon, {
        className: prefixCls("is-success")
      }));
    }

    if (theme && ["info", "warning", "error"].indexOf(theme) >= 0) {
      return /* @__PURE__ */React.createElement(IconWrapper, null, /* @__PURE__ */React.createElement(InfoCircleFilledIcon, {
        className: prefixCls("is-".concat(theme))
      }));
    }

    return null;
  };

  return /* @__PURE__ */React.createElement("div", {
    ref: ref,
    className: prefixCls(blockName),
    style: style
  }, renderIcon(), /* @__PURE__ */React.createElement("div", {
    className: prefixCls([blockName, "main"])
  }, /* @__PURE__ */React.createElement("div", {
    className: prefixCls([blockName, "title__wrap"])
  }, /* @__PURE__ */React.createElement("span", {
    className: prefixCls([blockName, "title"])
  }, title), function () {
    if (typeof closeBtn === "boolean" && closeBtn) {
      return /* @__PURE__ */React.createElement(CloseIcon, {
        className: prefixCls("icon-close"),
        onClick: function onClick(e) {
          onCloseBtnClick({
            e: e
          });
        }
      });
    }

    if ( /*#__PURE__*/React.isValidElement(closeBtn)) {
      return /* @__PURE__ */React.createElement("div", {
        onClick: function onClick(e) {
          onCloseBtnClick({
            e: e
          });
        }
      }, closeBtn);
    }

    return null;
  }()), function () {
    if (typeof content === "string") {
      return /* @__PURE__ */React.createElement("div", {
        className: prefixCls([blockName, "content"])
      }, content);
    }

    if ( /*#__PURE__*/React.isValidElement(content)) return content;
    return null;
  }(), /*#__PURE__*/React.isValidElement(footer) && /* @__PURE__ */React.createElement("div", {
    className: prefixCls([blockName, "detail"])
  }, footer), typeof footer === "function" && /* @__PURE__ */React.createElement("div", {
    className: prefixCls([blockName, "detail"])
  }, footer())));
});

export { NotificationComponent, NotificationComponent as default };
//# sourceMappingURL=Notification.js.map
