/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-9332bbea.js';
import { _ as _slicedToArray } from '../_chunks/dep-93971e86.js';
import React, { useState, useRef, useEffect, useMemo } from 'react';
import classNames from 'classnames';
import { EllipsisIcon, ChevronLeftDoubleIcon, ChevronRightDoubleIcon, ChevronLeftIcon, ChevronRightIcon } from 'tdesign-icons-react';
import noop from '../_util/noop.js';
import useConfig from '../_util/useConfig.js';
import useDefault from '../_util/useDefault.js';
import { Select } from '../select/index.js';
import { InputNumber } from '../input-number/index.js';
import { useLocaleReceiver } from '../locale/LocalReceiver.js';
import { pageSizeValidator } from './validators.js';
import '../_chunks/dep-beac373a.js';
import '../config-provider/ConfigContext.js';
import '../locale/zh_CN.js';
import '../select/base/Select.js';
import '../_chunks/dep-a347fb20.js';
import '../_chunks/dep-c6576f8f.js';
import '../_chunks/dep-156c830d.js';
import '../_chunks/dep-b33ecffe.js';
import '../_chunks/dep-623f5502.js';
import '../_chunks/dep-734d525f.js';
import '../_chunks/dep-04305406.js';
import '../_chunks/dep-7cf92957.js';
import '../_chunks/dep-6ca758b4.js';
import '../_chunks/dep-a554e9c2.js';
import '../_chunks/dep-0268bf88.js';
import '../_chunks/dep-76c67131.js';
import '../_chunks/dep-f3f6eedc.js';
import 'lodash';
import '../_util/composeRefs.js';
import '../_util/useDefaultValue.js';
import '../_chunks/dep-27d690ce.js';
import '../_util/forwardRefWithStatics.js';
import 'hoist-non-react-statics';
import '../select/util/helper.js';
import '../_chunks/dep-124f91c5.js';
import '../select/base/OptionGroup.js';
import '../select/base/Option.js';
import '../_chunks/dep-e2a4740c.js';
import '../_util/useRipple.js';
import '../_util/setStyle.js';
import '../common/FakeArrow.js';
import '../loading/index.js';
import '../loading/loading.js';
import '../_util/dom.js';
import 'raf';
import '../_util/easing.js';
import '../common/Portal.js';
import 'react-dom';
import '../loading/gradient.js';
import '../loading/plugin.js';
import '../input/index.js';
import '../input/Input.js';
import '../input/InputGroup.js';
import '../popup/index.js';
import '../popup/Popup.js';
import 'react-transition-group';
import 'react-popper';
import '../_util/usePrevious.js';
import '../popup/Portal.js';
import '../popup/hooks/useTriggerProps.js';
import '../_util/useClickOutside.js';
import '../popup/hooks/usePopupCssTransition.js';
import '../tag/index.js';
import '../tag/Tag.js';
import '../tag/CheckTag.js';
import '../select/base/PopupContent.js';
import '../input-number/InputNumber.js';
import '../_util/useCommonClassName.js';
import '../_util/useUpdateEffect.js';
import '../input-number/StepHandler.js';
import '../button/index.js';
import '../button/Button.js';
import '../input-number/utils/numberUtils.js';

var Option = Select.Option;

var Pagination = function Pagination(props) {
  var _classNames, _classNames5;

  var _props$defaultCurrent = props.defaultCurrent,
      defaultCurrent = _props$defaultCurrent === void 0 ? 1 : _props$defaultCurrent,
      currentFromProps = props.current,
      _props$theme = props.theme,
      theme = _props$theme === void 0 ? "default" : _props$theme,
      _props$size = props.size,
      size = _props$size === void 0 ? "medium" : _props$size,
      _props$total = props.total,
      total = _props$total === void 0 ? 0 : _props$total,
      _props$defaultPageSiz = props.defaultPageSize,
      defaultPageSize = _props$defaultPageSiz === void 0 ? 10 : _props$defaultPageSiz,
      pageSizeFromProps = props.pageSize,
      _props$showJumper = props.showJumper,
      showJumper = _props$showJumper === void 0 ? false : _props$showJumper,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      _props$foldedMaxPageB = props.foldedMaxPageBtn,
      foldedMaxPageBtn = _props$foldedMaxPageB === void 0 ? 5 : _props$foldedMaxPageB,
      _props$maxPageBtn = props.maxPageBtn,
      maxPageBtn = _props$maxPageBtn === void 0 ? 10 : _props$maxPageBtn,
      _props$totalContent = props.totalContent,
      totalContent = _props$totalContent === void 0 ? true : _props$totalContent,
      _props$pageSizeOption = props.pageSizeOptions,
      pageSizeOptions = _props$pageSizeOption === void 0 ? [5, 10, 20, 50] : _props$pageSizeOption,
      _props$onChange = props.onChange,
      onChange = _props$onChange === void 0 ? noop : _props$onChange,
      onCurrentChange = props.onCurrentChange,
      onPageSizeChange = props.onPageSizeChange;

  var _useLocaleReceiver = useLocaleReceiver("pagination"),
      _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
      locale = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];

  var _useDefault = useDefault(pageSizeFromProps, defaultPageSize, onPageSizeChange),
      _useDefault2 = _slicedToArray(_useDefault, 2),
      pageSize = _useDefault2[0],
      setPageSize = _useDefault2[1];

  var _useDefault3 = useDefault(currentFromProps, defaultCurrent, onCurrentChange),
      _useDefault4 = _slicedToArray(_useDefault3, 2),
      current = _useDefault4[0],
      setCurrent = _useDefault4[1];

  var _useState = useState(1),
      _useState2 = _slicedToArray(_useState, 2),
      pageCount = _useState2[0],
      setPageCount = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      hoverPreMore = _useState4[0],
      toggleHoverPreMore = _useState4[1];

  var _useState5 = useState(false),
      _useState6 = _slicedToArray(_useState5, 2),
      hoverNextMore = _useState6[0],
      toggleHoverNextMore = _useState6[1];

  var simpleInputRef = useRef(null);
  var min = 1;
  var pivot = Math.ceil((foldedMaxPageBtn - 1) / 2);

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var name = "".concat(classPrefix, "-pagination");
  useEffect(function () {
    var calCount = Math.ceil(total / pageSize);
    setPageCount(calCount > 0 ? calCount : 1);
  }, [pageSize, total]);
  var pageList = useMemo(function () {
    var isPrevMoreShow = 2 + pivot < current;
    var isNextMoreShow = pageCount - 1 - pivot > current;
    var array = [];
    var start;
    var end;

    if (pageCount > maxPageBtn) {
      if (isPrevMoreShow && isNextMoreShow) {
        start = current - pivot;
        end = current + pivot;
      } else {
        start = isPrevMoreShow ? pageCount - foldedMaxPageBtn + 1 : 2;
        end = isPrevMoreShow ? pageCount - 1 : foldedMaxPageBtn;
      }
    } else {
      start = 1;
      end = pageCount;
    }

    for (var i = start; i <= end; i++) {
      array.push(i);
    }

    return array;
  }, [current, pageCount, foldedMaxPageBtn, maxPageBtn, pivot]);

  var changeCurrent = function changeCurrent(nextCurrent, nextPageSize) {
    if (!nextPageSize && !pageSizeValidator(nextPageSize)) {
      var _pageSizeOptions$;

      nextPageSize = pageSize !== null && pageSize !== void 0 ? pageSize : typeof pageSizeOptions[0] === "number" ? pageSizeOptions[0] : (_pageSizeOptions$ = pageSizeOptions[0]) === null || _pageSizeOptions$ === void 0 ? void 0 : _pageSizeOptions$.value;
    }

    if (disabled) return;

    if (pageCount < nextCurrent) {
      setCurrent(pageCount, {
        current: pageCount,
        previous: current,
        pageSize: nextPageSize
      });
      return;
    }

    if (nextCurrent < min) {
      setCurrent(min, {
        current: min,
        previous: current,
        pageSize: nextPageSize
      });
      return;
    }

    setCurrent(nextCurrent, {
      current: nextCurrent,
      previous: current,
      pageSize: nextPageSize
    });

    if (simpleInputRef.current) {
      simpleInputRef.current.value = String(nextCurrent);
    }

    onChange({
      current: nextCurrent,
      previous: current,
      pageSize: nextPageSize
    });
  };

  var changePageSize = function changePageSize(nextPageSize) {
    var nextCurrent = Math.min(current, Math.ceil(total / nextPageSize));
    var pageInfo = {
      current: nextCurrent,
      previous: current,
      pageSize: nextPageSize
    };
    setPageSize(nextPageSize, pageInfo);

    if (current !== nextCurrent) {
      changeCurrent(nextCurrent, nextPageSize);
    } else {
      onChange(pageInfo);
    }
  };

  var onSimpleCurrentChange = function onSimpleCurrentChange(nextCurrent) {
    if (disabled || pageCount < nextCurrent || nextCurrent < min) return;
    setCurrent(nextCurrent, {
      current: nextCurrent,
      previous: current,
      pageSize: pageSize
    });
    onChange({
      current: nextCurrent,
      previous: current,
      pageSize: pageSize
    });
  };

  var onPageInputChange = function onPageInputChange(value) {
    setCurrent(value, {
      current: value,
      previous: current,
      pageSize: pageSize
    });
  };

  var onPageInputKeyUp = function onPageInputKeyUp(value, context) {
    var e = context.e;
    if (e.keyCode !== 13
    /* ENTER */
    ) return;
    changeCurrent(value);
  };

  var renderTotalContent = function renderTotalContent() {
    if (typeof totalContent === "boolean") {
      return totalContent ? t(locale.total, {
        total: total
      }) : null;
    }

    if (typeof totalContent === "string") return totalContent;

    if (typeof totalContent === "function") {
      var start = (current - min) * pageSize;
      var end = Math.min(total, start + pageSize);
      return totalContent(total, [start + min, end]);
    }
  };

  var isFolded = pageCount > maxPageBtn;
  var renderPaginationBtns = /* @__PURE__ */React.createElement(React.Fragment, null, isFolded && /* @__PURE__ */React.createElement(React.Fragment, null, /* @__PURE__ */React.createElement("li", {
    key: 1,
    className: classNames("".concat(name, "__number"), (_classNames = {}, _defineProperty(_classNames, "".concat(classPrefix, "-is-disabled"), disabled), _defineProperty(_classNames, "".concat(classPrefix, "-is-current"), current === 1), _classNames)),
    onClick: function onClick() {
      return changeCurrent(1);
    }
  }, "1"), 2 + pivot < current && /* @__PURE__ */React.createElement("li", {
    className: classNames("".concat(name, "__number"), "".concat(name, "__number--more"), _defineProperty({}, "".concat(classPrefix, "-is-disabled"), disabled)),
    onMouseEnter: function onMouseEnter() {
      return toggleHoverPreMore(true);
    },
    onMouseLeave: function onMouseLeave() {
      return toggleHoverPreMore(false);
    },
    onClick: function onClick() {
      return changeCurrent(current - foldedMaxPageBtn);
    }
  }, !hoverPreMore ? /* @__PURE__ */React.createElement(EllipsisIcon, null) : /* @__PURE__ */React.createElement(ChevronLeftDoubleIcon, null))), pageList.map(function (item) {
    var _classNames3;

    return /* @__PURE__ */React.createElement("li", {
      key: item,
      className: classNames("".concat(name, "__number"), (_classNames3 = {}, _defineProperty(_classNames3, "".concat(classPrefix, "-is-disabled"), disabled), _defineProperty(_classNames3, "".concat(classPrefix, "-is-current"), current === item), _classNames3)),
      onClick: function onClick() {
        return changeCurrent(item);
      }
    }, item);
  }), isFolded && /* @__PURE__ */React.createElement(React.Fragment, null, pageCount - 1 - pivot > current && /* @__PURE__ */React.createElement("li", {
    className: classNames("".concat(name, "__number"), "".concat(name, "__number--more"), _defineProperty({}, "".concat(classPrefix, "-is-disabled"), disabled)),
    onMouseEnter: function onMouseEnter() {
      return toggleHoverNextMore(true);
    },
    onMouseLeave: function onMouseLeave() {
      return toggleHoverNextMore(false);
    },
    onClick: function onClick() {
      return changeCurrent(current + foldedMaxPageBtn);
    }
  }, !hoverNextMore ? /* @__PURE__ */React.createElement(EllipsisIcon, null) : /* @__PURE__ */React.createElement(ChevronRightDoubleIcon, null)), /* @__PURE__ */React.createElement("li", {
    key: pageCount,
    className: classNames("".concat(name, "__number"), (_classNames5 = {}, _defineProperty(_classNames5, "".concat(classPrefix, "-is-disabled"), disabled), _defineProperty(_classNames5, "".concat(classPrefix, "-is-current"), current === pageCount), _classNames5)),
    onClick: function onClick() {
      return changeCurrent(pageCount);
    }
  }, pageCount)));
  return /* @__PURE__ */React.createElement("div", {
    className: classNames(name, _defineProperty({}, "".concat(classPrefix, "-size-s"), size === "small"))
  }, totalContent && /* @__PURE__ */React.createElement("div", {
    className: "".concat(name, "__total")
  }, renderTotalContent()), pageSizeOptions instanceof Array && pageSizeOptions.length ? /* @__PURE__ */React.createElement("div", {
    className: "".concat(name, "__select")
  }, /* @__PURE__ */React.createElement(Select, {
    size: size,
    value: pageSize,
    disabled: disabled,
    onChange: changePageSize
  }, pageSizeOptions.map(function (item) {
    return typeof item === "number" ? /* @__PURE__ */React.createElement(Option, {
      key: item,
      label: t(locale.itemsPerPage, {
        size: item
      }),
      value: item
    }) : /* @__PURE__ */React.createElement(Option, {
      key: item.value,
      label: item.label,
      value: item.value
    });
  }))) : null, /* @__PURE__ */React.createElement("div", {
    className: classNames("".concat(name, "__btn"), "".concat(name, "__btn-prev"), _defineProperty({}, "".concat(classPrefix, "-is-disabled"), disabled || current === min)),
    onClick: function onClick() {
      return changeCurrent(current - 1);
    }
  }, /* @__PURE__ */React.createElement(ChevronLeftIcon, null)), theme === "default" && /* @__PURE__ */React.createElement("ul", {
    className: "".concat(name, "__pager")
  }, renderPaginationBtns), theme === "simple" && /* @__PURE__ */React.createElement("div", {
    className: "".concat(name, "__select")
  }, /* @__PURE__ */React.createElement(Select, {
    size: size,
    value: current,
    disabled: disabled,
    onChange: onSimpleCurrentChange
  }, Array(pageCount).fill(0).map(function (_, i) {
    return i + 1;
  }).map(function (item) {
    return /* @__PURE__ */React.createElement(Option, {
      key: item,
      label: "".concat(item, "/").concat(pageCount),
      value: item
    }, item, "/", pageCount);
  }))), /* @__PURE__ */React.createElement("div", {
    className: classNames("".concat(name, "__btn"), "".concat(name, "__btn-next"), _defineProperty({}, "".concat(classPrefix, "-is-disabled"), disabled || current === pageCount)),
    onClick: function onClick() {
      return changeCurrent(current + 1);
    }
  }, /* @__PURE__ */React.createElement(ChevronRightIcon, null)), showJumper && /* @__PURE__ */React.createElement("div", {
    className: "".concat(name, "__jump")
  }, t(locale.jumpTo), /* @__PURE__ */React.createElement(InputNumber, {
    className: "".concat(classPrefix, "-pagination__input"),
    min: min,
    theme: "normal",
    max: pageCount,
    disabled: disabled,
    onChange: onPageInputChange,
    onKeyup: onPageInputKeyUp
  }), t(locale.page)));
};

export { Pagination as default };
//# sourceMappingURL=Pagination.js.map
