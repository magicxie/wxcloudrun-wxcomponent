/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

import useClickOutside from '../../_util/useClickOutside.js';
import 'react';

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
var ESC_KEY = "Escape";
function useTriggerProps(ref, triggerNode, triggers, visible, setVisible) {
  var disabled = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
  var originTrigger = arguments.length > 6 ? arguments[6] : undefined;
  var triggerProps = {};
  var popupProps = {};

  var toggle = function toggle(e, trigger) {
    return setVisible(!visible, {
      e: e,
      trigger: trigger
    });
  };

  var show = function show(e, trigger) {
    return setVisible(true, {
      e: e,
      trigger: trigger
    });
  };

  var hide = function hide(e, trigger) {
    return setVisible(false, {
      e: e,
      trigger: trigger
    });
  };

  useClickOutside([ref, triggerNode], function (e) {
    if (visible && (triggers.includes("click") || triggers.includes("context-menu"))) {
      hide(e, "trigger-element-blur");
    }
  });
  if (disabled) return [triggerProps, popupProps];

  var _iterator = _createForOfIteratorHelper(triggers),
      _step;

  try {
    var _loop = function _loop() {
      var trigger = _step.value;
      var _originTrigger$props = originTrigger.props,
          onClick = _originTrigger$props.onClick,
          onMouseEnter = _originTrigger$props.onMouseEnter,
          onMouseLeave = _originTrigger$props.onMouseLeave,
          onFocus = _originTrigger$props.onFocus,
          onBlur = _originTrigger$props.onBlur,
          onContextMenu = _originTrigger$props.onContextMenu,
          onKeyDown = _originTrigger$props.onKeyDown;

      if (trigger === "click") {
        triggerProps.onClick = function (e) {
          toggle(e, "trigger-element-click");
          onClick && onClick(e);
        };
      }

      if (trigger === "hover") {
        triggerProps.onMouseEnter = function (e) {
          show(e, "trigger-element-hover");
          onMouseEnter && onMouseEnter(e);
        };

        popupProps.onMouseEnter = function (e) {
          visible && show(e, "trigger-element-hover");
        };

        triggerProps.onMouseLeave = function (e) {
          hide(e, "trigger-element-hover");
          onMouseLeave && onMouseLeave(e);
        };

        popupProps.onMouseLeave = function (e) {
          return hide(e, "trigger-element-hover");
        };
      }

      if (trigger === "focus") {
        triggerProps.onFocus = function (e) {
          show(e, "trigger-element-focus");
          onFocus && onFocus(e);
        };

        triggerProps.onBlur = function (e) {
          hide(e, "trigger-element-blur");
          onBlur && onBlur(e);
        };
      }

      if (trigger === "context-menu") {
        triggerProps.onContextMenu = function (e) {
          show(e, "context-menu");
          onContextMenu && onContextMenu(e);
        };
      }

      triggerProps.onKeyDown = function (e) {
        if (e.key === ESC_KEY) hide(e, "keydown-esc");
        onKeyDown && onKeyDown(e);
      };
    };

    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      _loop();
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return [triggerProps, popupProps];
}

export { useTriggerProps as default };
//# sourceMappingURL=useTriggerProps.js.map
