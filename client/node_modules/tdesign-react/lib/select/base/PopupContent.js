/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _objectWithoutProperties } from '../../_chunks/dep-27d690ce.js';
import { _ as _defineProperty } from '../../_chunks/dep-9332bbea.js';
import { _ as _slicedToArray } from '../../_chunks/dep-93971e86.js';
import React, { Children, isValidElement, cloneElement } from 'react';
import { useLocaleReceiver } from '../../locale/LocalReceiver.js';
import { getSelectValueArr } from '../util/helper.js';
import useConfig from '../../_util/useConfig.js';
import Option from './Option.js';
import '../../_chunks/dep-beac373a.js';
import '../../config-provider/ConfigContext.js';
import '../../locale/zh_CN.js';
import '../../_chunks/dep-124f91c5.js';
import 'lodash';
import './OptionGroup.js';
import 'classnames';
import '../../_chunks/dep-e2a4740c.js';
import '../../_chunks/dep-c6576f8f.js';
import '../../_chunks/dep-156c830d.js';
import '../../_chunks/dep-6ca758b4.js';
import '../../_chunks/dep-f3f6eedc.js';
import '../../_chunks/dep-04305406.js';
import '../../_chunks/dep-623f5502.js';
import '../../_chunks/dep-734d525f.js';
import '../../_chunks/dep-7cf92957.js';
import '../../_chunks/dep-a554e9c2.js';
import '../../_chunks/dep-a347fb20.js';
import '../../_chunks/dep-b33ecffe.js';
import '../../_chunks/dep-0268bf88.js';
import '../../_chunks/dep-76c67131.js';
import '../../_util/useRipple.js';
import '../../_util/setStyle.js';

var _excluded = ["value", "label", "disabled"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var PopupContent = function PopupContent(props) {
  var onChange = props.onChange,
      value = props.value,
      size = props.size,
      max = props.max,
      multiple = props.multiple,
      showPopup = props.showPopup,
      setShowPopup = props.setShowPopup,
      options = props.options,
      empty = props.empty,
      loadingText = props.loadingText,
      loading = props.loading,
      valueType = props.valueType,
      children = props.children,
      keys = props.keys;

  var _useLocaleReceiver = useLocaleReceiver("select"),
      _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
      local = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];

  var emptyText = t(local.empty);

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  if (!children && !props.options) return null;

  var onSelect = function onSelect(selectedValue, _ref) {
    var label = _ref.label,
        selected = _ref.selected,
        restData = _ref.restData;
    var isValObj = valueType === "object";
    var objVal = {};

    if (isValObj) {
      objVal = _objectSpread({}, restData);

      if (!(keys !== null && keys !== void 0 && keys.label)) {
        Object.assign(objVal, {
          label: label
        });
      }

      if (!(keys !== null && keys !== void 0 && keys.value)) {
        Object.assign(objVal, {
          value: selectedValue
        });
      }
    }

    if (!Object.keys(objVal).length) {
      var _Object$assign;

      Object.assign(objVal, (_Object$assign = {}, _defineProperty(_Object$assign, (keys === null || keys === void 0 ? void 0 : keys.label) || "label", label), _defineProperty(_Object$assign, (keys === null || keys === void 0 ? void 0 : keys.value) || "value", selectedValue), _Object$assign));
    }

    if (multiple) {
      var values = getSelectValueArr(value, selectedValue, selected, valueType, keys, objVal);
      onChange(values, {
        label: label
      });
    } else {
      var selectVal = valueType === "object" ? objVal : selectedValue;
      onChange(selectVal, {
        label: label
      });
      setShowPopup(!showPopup);
    }
  };

  var childrenWithProps = Children.map(children, function (child) {
    if ( /*#__PURE__*/isValidElement(child)) {
      var addedProps = {
        size: size,
        max: max,
        multiple: multiple,
        selectedValue: value,
        onSelect: onSelect
      };
      return /*#__PURE__*/cloneElement(child, _objectSpread({}, addedProps));
    }

    return child;
  });

  var renderOptions = function renderOptions() {
    if (options) {
      return /* @__PURE__ */React.createElement("ul", null, options.map(function (_ref2, index) {
        var optionValue = _ref2.value,
            label = _ref2.label,
            disabled = _ref2.disabled,
            restData = _objectWithoutProperties(_ref2, _excluded);

        return /* @__PURE__ */React.createElement(Option, {
          key: index,
          max: max,
          label: label,
          value: optionValue,
          onSelect: onSelect,
          selectedValue: value,
          multiple: multiple,
          size: size,
          disabled: disabled,
          restData: restData,
          keys: keys
        });
      }));
    }

    return /* @__PURE__ */React.createElement("ul", null, childrenWithProps);
  };

  var isEmpty = Array.isArray(childrenWithProps) && !childrenWithProps.length || options && options.length === 0;

  if (isEmpty) {
    return /* @__PURE__ */React.createElement("div", {
      className: "".concat(classPrefix, "-select__empty")
    }, empty ? empty : /* @__PURE__ */React.createElement("p", null, emptyText));
  }

  if (loading) {
    return /* @__PURE__ */React.createElement("div", {
      className: "".concat(classPrefix, "-select__loading-tips")
    }, loadingText);
  }

  return /* @__PURE__ */React.createElement("div", null, renderOptions());
};

export { PopupContent as default };
//# sourceMappingURL=PopupContent.js.map
