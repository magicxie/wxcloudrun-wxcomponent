/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-9332bbea.js';
import { _ as _slicedToArray } from '../_chunks/dep-93971e86.js';
import React, { useState, useRef, useMemo, useCallback, useEffect } from 'react';
import classNames from 'classnames';
import useConfig from '../_util/useConfig.js';
import noop from '../_util/noop.js';
import SwiperItem from './SwiperItem.js';
import '../_chunks/dep-beac373a.js';
import '../config-provider/ConfigContext.js';
import '../locale/zh_CN.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var Swiper = function Swiper(props) {
  var _props$autoplay = props.autoplay,
      autoplay = _props$autoplay === void 0 ? true : _props$autoplay,
      current = props.current,
      _props$defaultCurrent = props.defaultCurrent,
      defaultCurrent = _props$defaultCurrent === void 0 ? 0 : _props$defaultCurrent,
      _props$direction = props.direction,
      direction = _props$direction === void 0 ? "horizontal" : _props$direction,
      _props$duration = props.duration,
      duration = _props$duration === void 0 ? 300 : _props$duration,
      _props$interval = props.interval,
      interval = _props$interval === void 0 ? 5e3 : _props$interval,
      _props$onChange = props.onChange,
      onChange = _props$onChange === void 0 ? noop : _props$onChange,
      className = props.className,
      children = props.children;

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var _useState = useState(defaultCurrent),
      _useState2 = _slicedToArray(_useState, 2),
      currentIndex = _useState2[0],
      setCurrentIndex = _useState2[1];

  var _useState3 = useState(true),
      _useState4 = _slicedToArray(_useState3, 2),
      animation = _useState4[0],
      setAnimation = _useState4[1];

  var swiperTimer = useRef(null);
  var isHovering = useRef(false);
  var wrapperRef = useRef(null);
  var childrenList = useMemo(function () {
    return React.Children.toArray(children).filter(function (child) {
      return child.type.displayName === SwiperItem.displayName;
    });
  }, [children]);
  var childrenLength = childrenList.length;
  var swiperItemList = childrenList.map(function (child, index) {
    return /*#__PURE__*/React.cloneElement(child, _objectSpread({
      value: index
    }, child.props));
  });

  if (childrenLength > 0) {
    var firstEle = swiperItemList[0];
    swiperItemList.push( /*#__PURE__*/React.cloneElement(firstEle, _objectSpread(_objectSpread({}, firstEle.props), {}, {
      key: "".concat(firstEle.key, "-cloned")
    })));
  }

  var swiperItemLength = swiperItemList.length;
  var swiperTo = useCallback(function (index, context) {
    onChange(index % childrenLength, context);
    setAnimation(true);
    setCurrentIndex(index);
  }, [childrenLength, onChange]);
  var setTimer = useCallback(function () {
    if (autoplay && interval > 0) {
      swiperTimer.current = setTimeout(function () {
        swiperTo(currentIndex + 1, {
          source: "autoplay"
        });
      }, currentIndex === 0 ? interval - (duration + 50) : interval);
    }
  }, [autoplay, currentIndex, duration, interval, swiperTo]);
  var clearTimer = useCallback(function () {
    if (swiperTimer.current) {
      clearTimeout(swiperTimer.current);
      swiperTimer.current = null;
    }
  }, []);
  useEffect(function () {
    if (current !== void 0) {
      swiperTo(current % childrenLength, {
        source: ""
      });
    }
  }, [current, childrenLength, swiperTo]);
  useEffect(function () {
    if (!isHovering.current) {
      clearTimer();
      setTimer();
    }
  }, [clearTimer, setTimer]);
  useEffect(function () {
    setTimeout(function () {
      setAnimation(false);

      if (currentIndex + 1 >= swiperItemLength) {
        setCurrentIndex(0);
      }
    }, duration + 50);
  }, [currentIndex, swiperItemLength, duration, direction]);

  var onMouseEnter = function onMouseEnter() {
    isHovering.current = true;
    clearTimer();
  };

  var onMouseLeave = function onMouseLeave() {
    isHovering.current = false;
    setTimer();
  };

  var wrapperStyle = {};

  if (direction === "vertical") {
    wrapperStyle = {
      height: "".concat(swiperItemLength * 100, "%"),
      top: "-".concat(currentIndex * 100, "%"),
      transition: animation ? "top ".concat(duration / 1e3, "s") : ""
    };
  } else {
    wrapperStyle = {
      width: "".concat(swiperItemLength * 100, "%"),
      left: "-".concat(currentIndex * 100, "%"),
      transition: animation ? "left ".concat(duration / 1e3, "s") : ""
    };
  }

  return /* @__PURE__ */React.createElement("div", {
    className: classNames("".concat(classPrefix, "-swiper"), className),
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave
  }, /* @__PURE__ */React.createElement("div", {
    className: "".concat(classPrefix, "-swiper__content")
  }, /* @__PURE__ */React.createElement("div", {
    ref: wrapperRef,
    className: "".concat(classPrefix, "-swiper__swiper-wrap--").concat(direction),
    style: wrapperStyle
  }, swiperItemList)), /* @__PURE__ */React.createElement("ul", {
    className: "".concat(classPrefix, "-swiper__trigger-wrap")
  }, childrenList.map(function (_, i) {
    return /* @__PURE__ */React.createElement("li", {
      key: i,
      className: i === currentIndex % childrenLength ? "".concat(classPrefix, "-swiper__trigger--active") : "",
      onClick: function onClick() {
        return swiperTo(i, {
          source: "touch"
        });
      }
    });
  })));
};

Swiper.SwiperItem = SwiperItem;
Swiper.displayName = "Swiper";

export { Swiper as default };
//# sourceMappingURL=Swiper.js.map
