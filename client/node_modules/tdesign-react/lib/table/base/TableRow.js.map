{"version":3,"file":"TableRow.js","sources":["../../../src/table/base/TableRow.tsx"],"sourcesContent":["import React, { isValidElement } from 'react';\nimport get from 'lodash/get';\nimport isFunction from 'lodash/isFunction';\nimport { useTableContext } from './TableContext';\nimport TableCell from './TableCell';\nimport { DataType, TdBaseTableProps, RowspanColspan, RowspanAndColspanParams, TdPrimaryTableProps } from '../type';\nimport { RowSkipTdSpanColIndexsMap, RowEvents } from './TableBody';\nimport { ExpandInnerProps } from './Table';\n\ninterface MergeCellsProps {\n  rowspanAndColspan?: TdBaseTableProps['rowspanAndColspan'];\n  isRowspanAndColspanFn?: boolean;\n  rowSkipTdSpanColIndexsMap?: RowSkipTdSpanColIndexsMap;\n  dataLength?: number;\n}\ninterface ExpandProps extends ExpandInnerProps {\n  expandedRow?: TdPrimaryTableProps['expandedRow'];\n  expandOnRowClick?: TdPrimaryTableProps['expandOnRowClick'];\n}\ninterface RowProps<D extends DataType> extends MergeCellsProps, ExpandProps {\n  record: D;\n  rowClassName?: TdBaseTableProps['rowClassName'];\n  rowIndex?: number;\n  rowEvents?: RowEvents;\n  rowKey: TdBaseTableProps['rowKey'];\n}\n\nconst TableRow = <D extends DataType>(props: RowProps<D>) => {\n  const {\n    record,\n    rowClassName,\n    rowIndex,\n    rowKey,\n    rowspanAndColspan,\n    isRowspanAndColspanFn,\n    rowSkipTdSpanColIndexsMap,\n    dataLength,\n    rowEvents = {},\n    expandedRow,\n    expandOnRowClick,\n    handleExpandChange,\n  } = props;\n  const { flattenColumns } = useTableContext();\n  const flattenColumnsLength = flattenColumns?.length;\n  const baseRow = flattenColumns.map((column, colIndex) => {\n    const { colKey, cell, render, ...restColumnProps } = column;\n\n    const { isSkipRenderTd, rowSpan, colSpan, isFirstChildTdSetBorderWidth } = getRowSpanAndColSpanAndIsSkipRenderTd({\n      isRowspanAndColspanFn,\n      rowspanAndColspan,\n      rowSkipTdSpanColIndexsMap,\n      rowIndex,\n      colIndex,\n      col: column,\n      row: record,\n    });\n\n    if (isSkipRenderTd) {\n      return null;\n    }\n\n    const customRender = getCustomRender({ record, colKey, cell, render });\n\n    return (\n      <TableCell\n        key={colKey}\n        type=\"cell\"\n        rowIndex={rowIndex}\n        colIndex={colIndex}\n        record={record}\n        colKey={colKey}\n        columns={flattenColumns}\n        customRender={customRender}\n        rowSpan={rowSpan}\n        colSpan={colSpan}\n        isFirstChildTdSetBorderWidth={isFirstChildTdSetBorderWidth}\n        {...restColumnProps}\n      />\n    );\n  });\n\n  let classes = rowClassName as string;\n  if (typeof rowClassName === 'function') {\n    classes = rowClassName({ row: record, rowIndex });\n  }\n\n  function getCustomRender({ record, colKey, cell, render }) {\n    if (typeof cell === 'string' || isValidElement(cell)) {\n      return () => cell;\n    }\n    if (isFunction(cell)) {\n      return cell;\n    }\n    if (isFunction(render)) {\n      return render;\n    }\n    return () => get(record, colKey);\n  }\n\n  function getRowSpanAndColSpanAndIsSkipRenderTd({\n    isRowspanAndColspanFn,\n    rowspanAndColspan,\n    rowSkipTdSpanColIndexsMap,\n    rowIndex,\n    colIndex,\n    col,\n    row,\n  }: MergeCellsProps & RowspanAndColspanParams<DataType>): {\n    rowSpan: number | undefined;\n    colSpan: number | undefined;\n    isSkipRenderTd: boolean;\n    isFirstChildTdSetBorderWidth: boolean;\n  } {\n    let rowSpan;\n    let colSpan;\n    let isSkipRenderTd = false;\n    let isFirstChildTdSetBorderWidth = false;\n\n    if (isRowspanAndColspanFn) {\n      const rowspanAndColspanValue: RowspanColspan = rowspanAndColspan({\n        rowIndex,\n        colIndex,\n        col,\n        row,\n      });\n\n      const isRowspanAndColspanValueValid =\n        rowspanAndColspanValue && (rowspanAndColspanValue.rowspan || rowspanAndColspanValue.colspan);\n      if (isRowspanAndColspanValueValid) {\n        rowSpan = rowspanAndColspanValue.rowspan;\n        colSpan = rowspanAndColspanValue.colspan;\n\n        if (colSpan && colSpan > 1 && colSpan < flattenColumnsLength) {\n          const minIndex = colIndex + 1;\n          const maxIndex = colIndex + colSpan;\n          const rowSkipTdSpanColIndexs = getRowSkipTdSpanColIndexs({\n            minIndex,\n            maxIndex,\n            rowSkipTdSpanColIndexsMap,\n            rowIndex,\n          });\n          rowSkipTdSpanColIndexsMap[rowIndex] = rowSkipTdSpanColIndexs; // eslint-disable-line\n        }\n\n        if (rowSpan && rowSpan > 1 && rowSpan < dataLength) {\n          const minRowIndex = rowIndex + 1;\n          const maxRowIndex = rowIndex + rowSpan;\n          const minIndex = colIndex;\n          const maxIndex = colIndex + colSpan;\n          Array.from(new Array(maxRowIndex - minRowIndex)).forEach((item, index) => {\n            const skipRowIndex = index + minRowIndex;\n            const rowSkipTdSpanColIndexs = getRowSkipTdSpanColIndexs({\n              minIndex,\n              maxIndex,\n              rowSkipTdSpanColIndexsMap,\n              rowIndex: skipRowIndex,\n            });\n            rowSkipTdSpanColIndexsMap[skipRowIndex] = rowSkipTdSpanColIndexs; // eslint-disable-line\n          });\n        }\n      }\n      isSkipRenderTd = rowSkipTdSpanColIndexsMap[rowIndex]?.includes(colIndex);\n      isFirstChildTdSetBorderWidth = getIsFirstChildTdSetBorderWidth({ rowSkipTdSpanColIndexsMap, rowIndex });\n    }\n\n    return {\n      rowSpan,\n      colSpan,\n      isSkipRenderTd,\n      isFirstChildTdSetBorderWidth,\n    };\n  }\n\n  function getRowSkipTdSpanColIndexs({ minIndex, maxIndex, rowSkipTdSpanColIndexsMap, rowIndex }): number[] {\n    const rowSkipTdSpanColIndexs = rowSkipTdSpanColIndexsMap[rowIndex] || [];\n\n    Array.from(new Array(maxIndex - minIndex)).forEach((item, index) => {\n      const skipColIndex = index + minIndex;\n      if (!rowSkipTdSpanColIndexs.includes(skipColIndex)) {\n        rowSkipTdSpanColIndexs.push(skipColIndex);\n      }\n    });\n\n    return rowSkipTdSpanColIndexs;\n  }\n\n  /**\n   * 行的第一列td css设置borderWidth为0（其余列默认为1）上一行第一列存在跨行时，需补回该borderWidth为1\n   */\n  function getIsFirstChildTdSetBorderWidth({ rowSkipTdSpanColIndexsMap, rowIndex }) {\n    if (rowIndex > 0) {\n      const rowSkipTdSpanColIndexs = rowSkipTdSpanColIndexsMap?.[rowIndex];\n      // 简化条件判断：rowSkipTdSpanColIndexs对应第一列td不渲染时，说明上一行存在跨行，当前行所有列borderWidth都设为1\n      if (rowSkipTdSpanColIndexs && rowSkipTdSpanColIndexs[0] === 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  function getExpandOnClickEvent() {\n    if (expandOnRowClick && expandedRow) {\n      const apiEvent = rowEvents.onClick;\n      const rowKeyValue = get(record, rowKey) || rowIndex;\n      let onClick;\n      if (apiEvent) {\n        onClick = (e) => {\n          apiEvent(e);\n          handleExpandChange(record, rowKeyValue);\n        };\n      } else {\n        onClick = () => {\n          handleExpandChange(record, rowKeyValue);\n        };\n      }\n\n      return {\n        onClick,\n      };\n    }\n    return {};\n  }\n\n  return (\n    <tr className={classes} {...rowEvents} {...getExpandOnClickEvent()}>\n      {baseRow}\n    </tr>\n  );\n};\n\nexport default TableRow;\n"],"names":["TableRow","props","record","rowClassName","rowIndex","rowKey","rowspanAndColspan","isRowspanAndColspanFn","rowSkipTdSpanColIndexsMap","dataLength","rowEvents","expandedRow","expandOnRowClick","handleExpandChange","useTableContext","flattenColumns","flattenColumnsLength","length","baseRow","map","column","colIndex","colKey","cell","render","restColumnProps","getRowSpanAndColSpanAndIsSkipRenderTd","col","row","isSkipRenderTd","rowSpan","colSpan","isFirstChildTdSetBorderWidth","customRender","getCustomRender","React","createElement","TableCell","key","type","columns","classes","record2","isValidElement","isFunction","get","isRowspanAndColspanFn2","rowspanAndColspan2","rowSkipTdSpanColIndexsMap2","rowIndex2","rowspanAndColspanValue","isRowspanAndColspanValueValid","rowspan","colspan","minIndex","maxIndex","rowSkipTdSpanColIndexs","getRowSkipTdSpanColIndexs","minRowIndex","maxRowIndex","Array","from","forEach","item","index","skipRowIndex","includes","getIsFirstChildTdSetBorderWidth","skipColIndex","push","getExpandOnClickEvent","apiEvent","onClick","rowKeyValue","e","className"],"mappings":"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"}