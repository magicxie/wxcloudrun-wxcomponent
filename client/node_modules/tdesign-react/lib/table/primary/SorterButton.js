/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../_chunks/dep-9332bbea.js';
import { _ as _slicedToArray } from '../../_chunks/dep-93971e86.js';
import React, { useContext, useState, useEffect } from 'react';
import classNames from 'classnames';
import { ChevronDownIcon } from 'tdesign-icons-react';
import { Tooltip } from '../../tooltip/index.js';
import ConfigContext from '../../config-provider/ConfigContext.js';
import '../../_chunks/dep-beac373a.js';
import '../../tooltip/Tooltip.js';
import '../../_chunks/dep-27d690ce.js';
import '../../_chunks/dep-156c830d.js';
import '../../popup/index.js';
import '../../popup/Popup.js';
import 'react-transition-group';
import 'react-popper';
import '../../_util/useDefault.js';
import '../../_util/noop.js';
import '../../_util/useConfig.js';
import '../../locale/zh_CN.js';
import '../../_util/composeRefs.js';
import '../../_util/usePrevious.js';
import '../../popup/Portal.js';
import 'react-dom';
import '../../popup/hooks/useTriggerProps.js';
import '../../_util/useClickOutside.js';
import '../../popup/hooks/usePopupCssTransition.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var SortTypeEnum = {
  desc: "desc",
  asc: "asc",
  all: "all"
};
var sortTypeOrder = [SortTypeEnum.desc, SortTypeEnum.asc, SortTypeEnum.all];
var tooltips = {
  desc: "\u70B9\u51FB\u964D\u5E8F",
  asc: "\u70B9\u51FB\u5347\u5E8F",
  all: "\u70B9\u51FB\u53D6\u6D88\u6392\u5E8F"
};

var SorterButton = function SorterButton(props) {
  var currentColumn = props.column,
      currentSort = props.singleSort,
      onChange = props.onChange;
  var _currentColumn$sortTy = currentColumn.sortType,
      sortType = _currentColumn$sortTy === void 0 ? SortTypeEnum.all : _currentColumn$sortTy;

  var _useContext = useContext(ConfigContext),
      classPrefix = _useContext.classPrefix;

  var _useState = useState(SortTypeEnum.all),
      _useState2 = _slicedToArray(_useState, 2),
      currentSortType = _useState2[0],
      setCurrentSortType = _useState2[1];

  var isAllSortType = sortType === SortTypeEnum.all;
  var nextSortType = getNextSortType(currentSortType);

  function getNextSortType(currentSortType2) {
    if (isAllSortType) {
      var currentIndex = sortTypeOrder.indexOf(currentSortType2);
      var nextIndex = currentIndex === sortTypeOrder.length - 1 ? 0 : currentIndex + 1;
      return sortTypeOrder[nextIndex];
    }

    return currentSortType2 === SortTypeEnum.all ? sortType : SortTypeEnum.all;
  }

  function renderIcon(direction, className) {
    var style = {};

    if (direction === SortTypeEnum.asc) {
      style = _objectSpread({
        transform: "rotate(-180deg)",
        top: "-1px"
      }, style);
    } else {
      style.bottom = "-1px";
    }

    var sortClassName = classNames(["".concat(classPrefix, "-table__sort-icon"), className, "".concat(classPrefix, "-table__sort-").concat(direction)]);
    return /* @__PURE__ */React.createElement("div", {
      key: direction,
      style: style,
      className: sortClassName
    }, /* @__PURE__ */React.createElement(ChevronDownIcon, {
      size: "16px"
    }));
  }

  function renderSortIcons() {
    var allowSortTypes = [];

    if (isAllSortType) {
      allowSortTypes.push(SortTypeEnum.asc, SortTypeEnum.desc);
    } else {
      allowSortTypes.push(sortType);
    }

    var sortIcons = allowSortTypes.map(function (direction) {
      var className = direction === currentSortType ? "".concat(classPrefix, "-table__sort-icon--active") : "".concat(classPrefix, "-icon-sort-default");
      return renderIcon(direction, className);
    });
    return sortIcons.length > 1 ? /* @__PURE__ */React.createElement("div", {
      style: {
        lineHeight: 0
      }
    }, sortIcons) : sortIcons;
  }

  function handleSort() {
    var currentSortTypeNew = nextSortType;
    setCurrentSortType(currentSortTypeNew);
    onChange(currentSort, currentSortTypeNew, currentColumn);
  }

  useEffect(function () {
    var currentSortType2 = SortTypeEnum.all;

    if (currentSort) {
      currentSortType2 = currentSort.descending ? SortTypeEnum.desc : SortTypeEnum.asc;
    }

    setCurrentSortType(currentSortType2);
  }, [currentSort]);
  return /* @__PURE__ */React.createElement("div", {
    className: classNames(["".concat(classPrefix, "-table__cell--sort-trigger"), _defineProperty({}, "".concat(classPrefix, "-table__double-icons"), true)]),
    onClick: handleSort
  }, /* @__PURE__ */React.createElement(Tooltip, {
    content: tooltips[nextSortType],
    showArrow: false
  }, renderSortIcons()));
};

export { SortTypeEnum, SorterButton as default };
//# sourceMappingURL=SorterButton.js.map
