/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-9332bbea.js';
import { _ as _objectWithoutProperties } from '../_chunks/dep-27d690ce.js';
import React from 'react';
import classNames from 'classnames';
import { CloseIcon } from 'tdesign-icons-react';
import noop from '../_util/noop.js';
import forwardRefWithStatics from '../_util/forwardRefWithStatics.js';
import useConfig from '../_util/useConfig.js';
import CheckTag from './CheckTag.js';
import 'hoist-non-react-statics';
import '../config-provider/ConfigContext.js';
import '../locale/zh_CN.js';
import '../_chunks/dep-93971e86.js';
import '../_chunks/dep-beac373a.js';
import '../_util/useDefault.js';

var _excluded = ["theme", "size", "shape", "variant", "closable", "maxWidth", "icon", "content", "onClick", "onClose", "className", "style", "disabled", "children"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var Tag = forwardRefWithStatics(function (props, ref) {
  var _classNames;

  var _props$theme = props.theme,
      theme = _props$theme === void 0 ? "default" : _props$theme,
      _props$size = props.size,
      size = _props$size === void 0 ? "medium" : _props$size,
      _props$shape = props.shape,
      shape = _props$shape === void 0 ? "square" : _props$shape,
      _props$variant = props.variant,
      variant = _props$variant === void 0 ? "dark" : _props$variant,
      closable = props.closable,
      maxWidth = props.maxWidth,
      icon = props.icon,
      content = props.content,
      _props$onClick = props.onClick,
      _onClick = _props$onClick === void 0 ? noop : _props$onClick,
      _props$onClose = props.onClose,
      onClose = _props$onClose === void 0 ? noop : _props$onClose,
      className = props.className,
      style = props.style,
      disabled = props.disabled,
      children = props.children,
      otherTagProps = _objectWithoutProperties(props, _excluded);

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var tagClassPrefix = "".concat(classPrefix, "-tag");
  var sizeMap = {
    large: "".concat(classPrefix, "-size-l"),
    small: "".concat(classPrefix, "-size-s")
  };
  var tagClassNames = classNames(tagClassPrefix, "".concat(tagClassPrefix, "--").concat(theme), "".concat(tagClassPrefix, "--").concat(variant), "".concat(tagClassPrefix, "--").concat(size), "".concat(tagClassPrefix, "--").concat(shape), (_classNames = {}, _defineProperty(_classNames, "".concat(tagClassPrefix, "--ellipsis"), !!maxWidth), _defineProperty(_classNames, "".concat(tagClassPrefix, "--disabled"), disabled), _classNames), sizeMap[size], className);
  var deleteIcon = /* @__PURE__ */React.createElement(CloseIcon, {
    onClick: function onClick(e) {
      return onClose({
        e: e
      });
    },
    className: "".concat(tagClassPrefix, "__icon-close")
  });
  var tag = /* @__PURE__ */React.createElement("span", _objectSpread({
    ref: ref,
    className: tagClassNames,
    onClick: function onClick(e) {
      return _onClick({
        e: e
      });
    }
  }, otherTagProps), icon, maxWidth ? /* @__PURE__ */React.createElement("span", {
    className: "".concat(tagClassPrefix, "--text"),
    style: _objectSpread(_objectSpread({}, style || {}), {
      maxWidth: maxWidth
    })
  }, content || children) : content || children, closable && deleteIcon);
  return tag;
}, {
  CheckTag: CheckTag
});
Tag.displayName = "Tag";

export { Tag as default };
//# sourceMappingURL=Tag.js.map
