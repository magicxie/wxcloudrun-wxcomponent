/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _slicedToArray } from '../_chunks/dep-93971e86.js';
import { _ as _toConsumableArray } from '../_chunks/dep-124f91c5.js';
import { _ as _defineProperty } from '../_chunks/dep-9332bbea.js';
import React, { useState, useEffect, useCallback } from 'react';
import classNames from 'classnames';
import dayjs from 'dayjs';
import { p as padStart_1 } from '../_chunks/dep-4912e829.js';
import useConfig from '../_util/useConfig.js';
import { useTimePickerTextConfig } from './consts.js';
import { KeyboardDirection, EPickerCols } from './interfaces.js';
import '../_chunks/dep-beac373a.js';
import '../_chunks/dep-76c67131.js';
import '../_chunks/dep-c6576f8f.js';
import '../_chunks/dep-156c830d.js';
import '../_chunks/dep-04305406.js';
import '../_chunks/dep-7cf92957.js';
import '../_chunks/dep-6ca758b4.js';
import '../_chunks/dep-e7eff919.js';
import '../_chunks/dep-3dccad86.js';
import '../_chunks/dep-e7a51908.js';
import '../_chunks/dep-61d30284.js';
import '../_chunks/dep-fc84e5e6.js';
import '../_chunks/dep-b33ecffe.js';
import '../config-provider/ConfigContext.js';
import '../locale/zh_CN.js';
import '../locale/LocalReceiver.js';

var preposFormat = /^(a|A)\s+?[h]{1,2}(:[m]{1,2}(:[s]{1,2})?)?$/;
var postposFormat = /^[h]{1,2}(:[m]{1,2}(:[s]{1,2})?)?(\s+(a|A))?$/;
var secondRegExp = /[hH]{1,2}:m{1,2}:s{1,2}/;
var minRegExp = /[hH]{1,2}:m{1,2}/;

var TimePickerInputItems = function TimePickerInputItems(props) {
  var allowInput = props.allowInput,
      format = props.format,
      disabled = props.disabled,
      value = props.value,
      _onBlur = props.onBlur,
      onChange = props.onChange,
      _onFocus = props.onFocus,
      _onInput = props.onInput;

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var inputItemClass = "".concat(classPrefix, "-time-picker__input");
  var itemClasses = classNames("".concat(inputItemClass, "-item"), _defineProperty({}, "".concat(inputItemClass, "-item-disabled"), disabled));
  var inputClass = "".concat(inputItemClass, "-item-input");
  var isRangePicker = Array.isArray(value) && value.length > 1;

  var _ref = _toConsumableArray(value),
      startTime = _ref[0],
      endTime = _ref[1];

  var _useState = useState(void 0),
      _useState2 = _slicedToArray(_useState, 2),
      formatedValue = _useState2[0],
      changeFormatedValue = _useState2[1];

  useEffect(function () {
    if (!startTime) return;
    var dayjsValue = dayjs(startTime, format);
    var hour = /[h]{1}/.test(format) ? dayjsValue.hour() % 12 : dayjsValue.hour();
    var minute = dayjsValue.minute();
    var second = dayjsValue.second();
    changeFormatedValue(function (preVal) {
      return [{
        hour: padStart_1(String(hour), 2, "0"),
        minute: padStart_1(String(minute), 2, "0"),
        second: padStart_1(String(second), 2, "0"),
        meridiem: dayjsValue.format("a")
      }, preVal === null || preVal === void 0 ? void 0 : preVal[1]];
    });
  }, [startTime, format]);
  useEffect(function () {
    if (!endTime) return;
    var dayjsValue = dayjs(endTime, format);
    var hour = /[h]{1}/.test(format) ? dayjsValue.hour() % 12 : dayjsValue.hour();
    var minute = dayjsValue.minute();
    var second = dayjsValue.second();
    changeFormatedValue(function (preVal) {
      return [preVal[0], {
        hour: padStart_1(String(hour), 2, "0"),
        minute: padStart_1(String(minute), 2, "0"),
        second: padStart_1(String(second), 2, "0"),
        meridiem: dayjsValue.format("a")
      }];
    });
  }, [endTime, format]);
  var handleInputChange = useCallback(function (type, result, index) {
    if (!isRangePicker) {
      var _currentDayjsValue$ty;

      var currentDayjsValue = dayjs(startTime, format);
      onChange((_currentDayjsValue$ty = currentDayjsValue[type]) === null || _currentDayjsValue$ty === void 0 ? void 0 : _currentDayjsValue$ty.call(currentDayjsValue, result).format(format));
    } else {
      var _currentDayjsValue;

      if (index === 0) {
        var _dayjs$type, _dayjs;

        _currentDayjsValue = (_dayjs$type = (_dayjs = dayjs(startTime, format))[type]) === null || _dayjs$type === void 0 ? void 0 : _dayjs$type.call(_dayjs, result).format(format);
        onChange([_currentDayjsValue, endTime]);
      } else {
        var _dayjs$type2, _dayjs2;

        _currentDayjsValue = (_dayjs$type2 = (_dayjs2 = dayjs(endTime, format))[type]) === null || _dayjs$type2 === void 0 ? void 0 : _dayjs$type2.call(_dayjs2, result).format(format);
        onChange([startTime, _currentDayjsValue]);
      }
    }
  }, [format, onChange, startTime, isRangePicker, endTime]);
  var handleInputKeydown = useCallback(function (e, type, index) {
    if (!allowInput) return;
    var up = KeyboardDirection.up,
        down = KeyboardDirection.down,
        left = KeyboardDirection.left,
        right = KeyboardDirection.right;
    var which = e.which;

    if ([up, down].includes(which)) {
      var _formatedValue$index;

      if (type === EPickerCols.meridiem) return;
      var timeValue = formatedValue === null || formatedValue === void 0 ? void 0 : (_formatedValue$index = formatedValue[index]) === null || _formatedValue$index === void 0 ? void 0 : _formatedValue$index[type];
      var current = timeValue ? Number(timeValue) : 0;
      var operate = which === up ? -1 : 1;
      var result = current + operate;

      if (type === EPickerCols.hour) {
        var maxHour = /[h]{1}/.test(format) ? 11 : 23;

        if (result > maxHour) {
          result = 0;
        } else if (result < 0) {
          result = maxHour;
        }
      } else if (result > 59) {
        result = 1;
      } else if (result < 0) {
        result = 59;
      }

      handleInputChange(type, result, index);
    } else if ([left, right].includes(which)) {
      var _e$target;

      var parentNode = (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.parentNode;
      var focus = which === left ? parentNode.previousSibling : parentNode.nextSibling;

      if (focus) {
        var _focus$querySelector;

        var input = (_focus$querySelector = focus.querySelector) === null || _focus$querySelector === void 0 ? void 0 : _focus$querySelector.call(focus, "input");
        if (input !== null && input !== void 0 && input.focus) input.focus();
      }
    }
  }, [allowInput, format, formatedValue, handleInputChange]);
  var TEXT_CONFIG = useTimePickerTextConfig();

  function renderMeridiemItem(text) {
    return /* @__PURE__ */React.createElement("span", {
      className: itemClasses
    }, /* @__PURE__ */React.createElement("input", {
      readOnly: true,
      disabled: !allowInput,
      value: TEXT_CONFIG[text] || "",
      onKeyDown: function onKeyDown(e) {
        return handleInputKeydown(e, EPickerCols.meridiem);
      },
      className: classNames(inputClass, "".concat(inputClass, "-meridiem"))
    }));
  }

  function renderTimeItem(inputValue, type, showColon, index) {
    var propsValue = isRangePicker ? value : value[0];
    return /* @__PURE__ */React.createElement("span", {
      className: itemClasses
    }, showColon ? ":" : null, /* @__PURE__ */React.createElement("input", {
      value: inputValue || "",
      className: inputClass,
      disabled: !allowInput,
      onKeyDown: function onKeyDown(e) {
        return handleInputKeydown(e, type, index);
      },
      onInput: function onInput(e) {
        return _onInput({
          e: e,
          input: inputValue,
          value: propsValue
        });
      },
      onChange: function onChange(e) {
        var _e$target2;

        return handleInputChange(type, e === null || e === void 0 ? void 0 : (_e$target2 = e.target) === null || _e$target2 === void 0 ? void 0 : _e$target2.value);
      },
      onBlur: function onBlur(e) {
        return _onBlur({
          e: e,
          trigger: type,
          input: inputValue,
          value: propsValue
        });
      },
      onFocus: function onFocus(e) {
        return _onFocus({
          e: e,
          trigger: type,
          input: inputValue,
          value: propsValue
        });
      }
    }));
  }

  function renderItems(itemValue, index) {
    return /* @__PURE__ */React.createElement(React.Fragment, null, preposFormat.test(format) && renderMeridiemItem(itemValue === null || itemValue === void 0 ? void 0 : itemValue.meridiem), renderTimeItem(itemValue === null || itemValue === void 0 ? void 0 : itemValue.hour, EPickerCols.hour, false, index), minRegExp.test(format) ? renderTimeItem(itemValue === null || itemValue === void 0 ? void 0 : itemValue.minute, EPickerCols.minute, true, index) : null, secondRegExp.test(format) ? renderTimeItem(itemValue === null || itemValue === void 0 ? void 0 : itemValue.second, EPickerCols.second, true, index) : null, postposFormat.test(format) && renderMeridiemItem(itemValue === null || itemValue === void 0 ? void 0 : itemValue.meridiem));
  }

  return /* @__PURE__ */React.createElement("div", {
    className: inputItemClass
  }, isRangePicker ? /* @__PURE__ */React.createElement(React.Fragment, null, renderItems(formatedValue === null || formatedValue === void 0 ? void 0 : formatedValue[0], 0), " - ", renderItems(formatedValue === null || formatedValue === void 0 ? void 0 : formatedValue[1], 1)) : renderItems(formatedValue === null || formatedValue === void 0 ? void 0 : formatedValue[0], 0));
};

export { TimePickerInputItems as default };
//# sourceMappingURL=InputItems.js.map
