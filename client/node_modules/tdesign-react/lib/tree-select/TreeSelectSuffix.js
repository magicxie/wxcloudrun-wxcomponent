/**
 * tdesign v0.22.1
 * (c) 2022 tdesign
 * @license MIT
 */

import React, { useMemo } from 'react';
import classNames from 'classnames';
import { i as isEmpty_1 } from '../_chunks/dep-97e692ae.js';
import { CloseCircleFilledIcon } from 'tdesign-icons-react';
import useConfig from '../_util/useConfig.js';
import FakeArrow from '../common/FakeArrow.js';
import { Loading } from '../loading/index.js';
import '../_chunks/dep-00169190.js';
import '../_chunks/dep-c6576f8f.js';
import '../_chunks/dep-156c830d.js';
import '../_chunks/dep-17892822.js';
import '../_chunks/dep-6ca758b4.js';
import '../_chunks/dep-2924d6ff.js';
import '../_chunks/dep-beebb45e.js';
import '../_chunks/dep-8acca302.js';
import '../_chunks/dep-a554e9c2.js';
import '../_chunks/dep-a347fb20.js';
import '../_chunks/dep-b33ecffe.js';
import '../_chunks/dep-060885ed.js';
import '../_chunks/dep-04305406.js';
import '../_chunks/dep-aeb2fb38.js';
import '../config-provider/ConfigContext.js';
import '../locale/zh_CN.js';
import '../_chunks/dep-9332bbea.js';
import '../loading/loading.js';
import '../_chunks/dep-93971e86.js';
import '../_chunks/dep-beac373a.js';
import '../_util/dom.js';
import 'raf';
import '../_chunks/dep-f3f6eedc.js';
import '../_util/easing.js';
import '../common/Portal.js';
import 'react-dom';
import '../loading/gradient.js';
import '../loading/plugin.js';

function TreeSelectSuffix(props) {
  var visible = props.visible,
      isHover = props.isHover,
      handleClear = props.handleClear,
      showLoading = props.showLoading,
      clearable = props.clearable,
      multiple = props.multiple,
      value = props.value,
      disabled = props.disabled,
      size = props.size;

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var showArrow = useMemo(function () {
    return !clearable || !isHover || disabled || !multiple && !value && value !== 0 || multiple && Array.isArray(value) && isEmpty_1(value);
  }, [clearable, isHover, disabled, multiple, value]);
  var showClose = useMemo(function () {
    return clearable && isHover && !disabled && (!multiple && (!!value || value === 0) || multiple && !isEmpty_1(value));
  }, [clearable, isHover, disabled, multiple, value]);
  return /* @__PURE__ */React.createElement(React.Fragment, null, showArrow && !showLoading && /* @__PURE__ */React.createElement(FakeArrow, {
    overlayClassName: "".concat(classPrefix, "-select__right-icon"),
    isActive: visible,
    disabled: disabled
  }), showClose && !showLoading && /* @__PURE__ */React.createElement(CloseCircleFilledIcon, {
    className: "".concat(classPrefix, "-select__right-icon ").concat(classPrefix, "-select__right-icon-clear"),
    size: size,
    onClick: handleClear
  }), showLoading && /* @__PURE__ */React.createElement(Loading, {
    loading: true,
    className: classNames("".concat(classPrefix, "-select__right-icon"), "".concat(classPrefix, "-select__active-icon")),
    size: "small"
  }));
}

export { TreeSelectSuffix as default };
//# sourceMappingURL=TreeSelectSuffix.js.map
