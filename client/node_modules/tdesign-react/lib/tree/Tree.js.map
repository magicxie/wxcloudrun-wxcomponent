{"version":3,"file":"Tree.js","sources":["../../src/tree/Tree.tsx"],"sourcesContent":["import React, { forwardRef, useState, useImperativeHandle, useMemo, RefObject } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport classNames from 'classnames';\nimport { useLocaleReceiver } from '../locale/LocalReceiver';\nimport { TreeNodeState, TreeNodeValue, TypeTreeNodeModel } from '../_common/js/tree/types';\nimport TreeNode from '../_common/js/tree/tree-node';\nimport { TreeOptionData } from '../common';\nimport { usePersistFn } from '../_util/usePersistFn';\nimport { TreeInstanceFunctions, TdTreeProps } from './type';\nimport { useTreeConfig } from './useTreeConfig';\nimport useControllable from './useControllable';\nimport { TreeItemProps } from './interface';\n\nimport TreeItem from './TreeItem';\nimport { useStore } from './useStore';\n\nexport type TreeProps = TdTreeProps;\n\n/**\n * 树组件\n */\nconst Tree = forwardRef((props: TreeProps, ref: React.Ref<TreeInstanceFunctions>) => {\n  const { treeClassNames, transitionNames, transitionClassNames, transitionDuration } = useTreeConfig();\n\n  // 可见节点集合\n  const [visibleNodes, setVisibleNodes] = useState([]);\n\n  const {\n    empty,\n    activable,\n    disabled,\n    checkable,\n    checkProps,\n    disableCheck,\n    hover,\n    icon,\n    line,\n    label,\n    operations,\n    transition, // 动画默认开启\n    expandOnClickNode,\n    onClick,\n  } = props;\n\n  const { value, onChange, expanded, onExpand, onActive, actived } = useControllable(props);\n\n  // 国际化文本初始化\n  const [local, t] = useLocaleReceiver('tree');\n  const emptyText = t(local.empty);\n\n  const store = useStore(\n    {\n      ...props,\n      value,\n      onChange,\n      expanded,\n      onExpand,\n      onActive,\n      actived,\n    },\n    () => {\n      const nodes = store.getNodes();\n      const newVisibleNodes = nodes.filter((node) => node.visible);\n\n      setVisibleNodes(newVisibleNodes);\n    },\n  );\n\n  // 因为是被 useImperativeHandle 依赖的方法，使用 usePersistFn 变成持久化的。或者也可以使用 useCallback\n  const setExpanded = usePersistFn((node: TreeNode, isExpanded: boolean, e?: React.MouseEvent<HTMLDivElement>) => {\n    const expanded = node.setExpanded(isExpanded);\n    const treeNodeModel = node?.getModel();\n\n    e && onExpand?.(expanded, { node: treeNodeModel, e });\n    return expanded;\n  });\n\n  const setActived = usePersistFn((node: TreeNode, isActived: boolean) => {\n    const actived = node.setActived(isActived);\n    const treeNodeModel = node?.getModel();\n    onActive?.(actived, { node: treeNodeModel });\n    return actived;\n  });\n\n  const setChecked = usePersistFn((node: TreeNode, isChecked: boolean) => {\n    const checked = node.setChecked(isChecked);\n    const treeNodeModel = node?.getModel();\n    onChange?.(checked, { node: treeNodeModel });\n    return checked;\n  });\n\n  const handleItemClick: TreeItemProps['onClick'] = (node, options) => {\n    if (!node || disabled || node.disabled) {\n      return;\n    }\n    const { expand, active, event } = options;\n    if (expand) {\n      setExpanded(node, !node.isExpanded(), event);\n    }\n\n    if (active) {\n      setActived(node, !node.isActived());\n    }\n    const treeNodeModel = node?.getModel();\n    onClick?.({\n      node: treeNodeModel,\n      e: event,\n    });\n  };\n\n  const handleChange: TreeItemProps['onChange'] = (node) => {\n    if (!node || disabled || node.disabled) {\n      return;\n    }\n    setChecked(node, !node.isChecked());\n  };\n\n  /** 对外暴露的公共方法 * */\n  useImperativeHandle<unknown, TreeInstanceFunctions>(\n    ref,\n    () => ({\n      store,\n      appendTo(value, newData) {\n        let list = [];\n        if (Array.isArray(newData)) {\n          list = newData;\n        } else {\n          list = [newData];\n        }\n        list.forEach((item) => {\n          store.appendNodes(value, item);\n        });\n      },\n      getIndex(value: TreeNodeValue): number {\n        return store.getNodeIndex(value);\n      },\n      getItem(value: TreeNodeValue): TypeTreeNodeModel {\n        const node: TreeNode = store.getNode(value);\n        return node?.getModel();\n      },\n      getItems(value?: TreeNodeValue): TypeTreeNodeModel[] {\n        const nodes = store.getNodes(value);\n        return nodes.map((node: TreeNode) => node.getModel());\n      },\n      getParent(value: TreeNodeValue): TypeTreeNodeModel {\n        const node = store.getParent(value);\n        return node?.getModel();\n      },\n      getParents(value: TreeNodeValue): TypeTreeNodeModel[] {\n        const nodes = store.getParents(value);\n        return nodes.map((node: TreeNode) => node.getModel());\n      },\n      getPath(value: TreeNodeValue): TypeTreeNodeModel[] {\n        const node = store.getNode(value);\n        let pathNodes = [];\n        if (node) {\n          pathNodes = node.getPath().map((node: TreeNode) => node.getModel());\n        }\n        return pathNodes;\n      },\n      insertAfter(value: TreeNodeValue, newData: TreeOptionData): void {\n        return store.insertAfter(value, newData);\n      },\n      insertBefore(value: TreeNodeValue, newData: TreeOptionData): void {\n        return store.insertBefore(value, newData);\n      },\n      remove(value: TreeNodeValue): void {\n        return store.remove(value);\n      },\n      setItem(value: TreeNodeValue, options: TreeNodeState): void {\n        const node: TreeNode = this.store.getNode(value);\n        const spec = options;\n        if (node && spec) {\n          if ('expanded' in options) {\n            setExpanded(node, spec.expanded);\n            delete spec.expanded;\n          }\n          if ('actived' in options) {\n            setActived(node, spec.actived);\n            delete spec.actived;\n          }\n          if ('checked' in options) {\n            setChecked(node, spec.checked);\n            delete spec.checked;\n          }\n          node.set(spec);\n        }\n      },\n    }),\n    [store, setExpanded, setActived, setChecked],\n  );\n\n  /* ======== render ======= */\n  // https://github.com/reactjs/react-transition-group/issues/668\n  // CSSTransition 不指定 nodeRef 的时候会使用 findDOMNode 获取 dom\n  // 因为 CSSTransition 是个数组，与 visibleNodes 对应，所以这里根据 visibleNodes 的长度创建 ref 用来保存 dom\n  // visibleNodes 改变的时候，释放上一个 nodeList，防止内存泄漏\n  const nodeList = useMemo<RefObject<HTMLDivElement>[]>(\n    () => visibleNodes.map(() => React.createRef()),\n    [visibleNodes],\n  );\n\n  const renderEmpty = () => {\n    let emptyView = empty || emptyText;\n    if (empty instanceof Function) {\n      emptyView = empty();\n    }\n\n    return emptyView;\n  };\n\n  const renderItems = () => {\n    if (visibleNodes.length <= 0) {\n      return renderEmpty();\n    }\n\n    return (\n      <TransitionGroup name={transitionNames.treeNode} className={treeClassNames.treeList}>\n        {visibleNodes.map((node, index) => (\n          // https://github.com/reactjs/react-transition-group/issues/668\n          <CSSTransition\n            nodeRef={nodeList[index]}\n            key={node.value}\n            timeout={transitionDuration}\n            classNames={transitionClassNames}\n          >\n            <TreeItem\n              ref={nodeList[index]}\n              node={node}\n              empty={empty}\n              icon={icon}\n              label={label}\n              line={line}\n              transition={transition}\n              expandOnClickNode={expandOnClickNode}\n              activable={activable}\n              operations={operations}\n              checkProps={checkProps}\n              disableCheck={disableCheck}\n              onClick={handleItemClick}\n              onChange={handleChange}\n            />\n          </CSSTransition>\n        ))}\n      </TransitionGroup>\n    );\n  };\n  return (\n    <div\n      className={classNames(treeClassNames.tree, {\n        [treeClassNames.disabled]: disabled,\n        [treeClassNames.treeHoverable]: hover,\n        [treeClassNames.treeCheckable]: checkable,\n        [treeClassNames.treeFx]: transition,\n        [treeClassNames.treeBlockNode]: expandOnClickNode,\n      })}\n    >\n      {renderItems()}\n    </div>\n  );\n});\n\nTree.displayName = 'Tree';\n\nTree.defaultProps = {\n  data: [],\n  empty: '',\n  expandLevel: 0,\n  icon: true,\n  line: false,\n  transition: true,\n  lazy: true,\n  valueMode: 'onlyLeaf',\n};\n\nexport default Tree;\n"],"names":["Tree","forwardRef","props","ref","useTreeConfig","treeClassNames","transitionNames","transitionClassNames","transitionDuration","useState","visibleNodes","setVisibleNodes","empty","activable","disabled","checkable","checkProps","disableCheck","hover","icon","line","label","operations","transition","expandOnClickNode","onClick","useControllable","value","onChange","expanded","onExpand","onActive","actived","useLocaleReceiver","local","t","emptyText","store","useStore","nodes","getNodes","newVisibleNodes","filter","node","visible","setExpanded","usePersistFn","isExpanded","e","expanded2","treeNodeModel","getModel","setActived","isActived","actived2","setChecked","isChecked","checked","handleItemClick","options","expand","active","event","handleChange","useImperativeHandle","appendTo","value2","newData","list","Array","isArray","forEach","item","appendNodes","getIndex","getNodeIndex","getItem","getNode","getItems","map","getParent","getParents","getPath","pathNodes","node2","insertAfter","insertBefore","remove","setItem","spec","set","nodeList","useMemo","React","createRef","renderEmpty","emptyView","Function","renderItems","length","createElement","TransitionGroup","name","treeNode","className","treeList","index","CSSTransition","nodeRef","key","timeout","classNames","TreeItem","tree","treeHoverable","treeCheckable","treeFx","treeBlockNode","displayName","defaultProps","data","expandLevel","lazy","valueMode"],"mappings":"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"}