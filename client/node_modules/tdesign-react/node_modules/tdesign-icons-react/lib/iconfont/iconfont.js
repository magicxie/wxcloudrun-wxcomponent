'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var index = require('../_chunks/dep-66055c68.js');
var React = require('react');
var util_useConfig = require('../util/use-config.js');
var util_useSizeProps = require('../util/use-size-props.js');
var util_checkUrlAndLoad = require('../util/check-url-and-load.js');
require('../util/config-context.js');
require('../util/use-common-classname.js');

var _excluded = ["name", "size", "tag", "className", "url", "loadDefaultIcons", "style"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { index._defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var CDN_ICONFONT_URL = "https://tdesign.gtimg.com/icon/0.0.3/fonts/index.css";
var IconFont = React.forwardRef((props, ref) => {
  var {
    classPrefix
  } = util_useConfig["default"]();

  var {
    name,
    size,
    tag = "i",
    className: customClassName,
    url = [],
    loadDefaultIcons = true,
    style: customStyle
  } = props,
      htmlProps = index._objectWithoutProperties(props, _excluded);

  var {
    className: sizeClassName,
    style: sizeStyle
  } = util_useSizeProps["default"](size);
  var className = React.useMemo(() => index.classNames("".concat(classPrefix, "-icon"), "".concat(classPrefix, "-icon-").concat(name), sizeClassName, customClassName), [classPrefix, customClassName, name, sizeClassName]);
  React.useEffect(() => {
    if (typeof document === "undefined") {
      return;
    }

    if (!loadDefaultIcons) {
      return;
    }

    util_checkUrlAndLoad.checkLinkAndLoad(CDN_ICONFONT_URL, "".concat(classPrefix, "-iconfont-stylesheet--unique-class"));
  }, [classPrefix, loadDefaultIcons]);
  React.useEffect(() => {
    var urls = Array.isArray(url) ? url : [url];
    urls.forEach(url2 => {
      util_checkUrlAndLoad.checkLinkAndLoad(url2, "".concat(classPrefix, "-iconfont-stylesheet--unique-class"));
    });
  }, [classPrefix, url]);
  return React.createElement(tag, _objectSpread({
    ref,
    style: _objectSpread(_objectSpread({}, customStyle), sizeStyle),
    className
  }, htmlProps));
});
IconFont.displayName = "Icon";

exports.IconFont = IconFont;
//# sourceMappingURL=iconfont.js.map
